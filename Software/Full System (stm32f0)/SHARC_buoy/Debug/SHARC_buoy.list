
SHARC_buoy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000097e4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000059c  080098a8  080098a8  000198a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009e44  08009e44  000201e8  2**0
                  CONTENTS
  4 .ARM          00000000  08009e44  08009e44  000201e8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009e44  08009e44  000201e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009e44  08009e44  00019e44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009e48  08009e48  00019e48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08009e4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012f0  200001e8  0800a034  000201e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200014d8  0800a034  000214d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a462  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000175f  00000000  00000000  0002a672  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000970  00000000  00000000  0002bdd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008d8  00000000  00000000  0002c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012cd5  00000000  00000000  0002d020  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000aeb3  00000000  00000000  0003fcf5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006d7f7  00000000  00000000  0004aba8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b839f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000345c  00000000  00000000  000b83f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800988c 	.word	0x0800988c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800988c 	.word	0x0800988c

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 fa31 	bl	80018a4 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f001 f981 	bl	8001754 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 fa23 	bl	80018a4 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 fa19 	bl	80018a4 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f9a9 	bl	80017d8 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f99f 	bl	80017d8 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_fadd>:
 80004a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004aa:	46c6      	mov	lr, r8
 80004ac:	0243      	lsls	r3, r0, #9
 80004ae:	0a5b      	lsrs	r3, r3, #9
 80004b0:	024e      	lsls	r6, r1, #9
 80004b2:	0045      	lsls	r5, r0, #1
 80004b4:	004f      	lsls	r7, r1, #1
 80004b6:	00da      	lsls	r2, r3, #3
 80004b8:	0fc4      	lsrs	r4, r0, #31
 80004ba:	469c      	mov	ip, r3
 80004bc:	0a70      	lsrs	r0, r6, #9
 80004be:	4690      	mov	r8, r2
 80004c0:	b500      	push	{lr}
 80004c2:	0e2d      	lsrs	r5, r5, #24
 80004c4:	0e3f      	lsrs	r7, r7, #24
 80004c6:	0fc9      	lsrs	r1, r1, #31
 80004c8:	09b6      	lsrs	r6, r6, #6
 80004ca:	428c      	cmp	r4, r1
 80004cc:	d04b      	beq.n	8000566 <__aeabi_fadd+0xbe>
 80004ce:	1bea      	subs	r2, r5, r7
 80004d0:	2a00      	cmp	r2, #0
 80004d2:	dd36      	ble.n	8000542 <__aeabi_fadd+0x9a>
 80004d4:	2f00      	cmp	r7, #0
 80004d6:	d061      	beq.n	800059c <__aeabi_fadd+0xf4>
 80004d8:	2dff      	cmp	r5, #255	; 0xff
 80004da:	d100      	bne.n	80004de <__aeabi_fadd+0x36>
 80004dc:	e0ad      	b.n	800063a <__aeabi_fadd+0x192>
 80004de:	2380      	movs	r3, #128	; 0x80
 80004e0:	04db      	lsls	r3, r3, #19
 80004e2:	431e      	orrs	r6, r3
 80004e4:	2a1b      	cmp	r2, #27
 80004e6:	dc00      	bgt.n	80004ea <__aeabi_fadd+0x42>
 80004e8:	e0d3      	b.n	8000692 <__aeabi_fadd+0x1ea>
 80004ea:	2001      	movs	r0, #1
 80004ec:	4643      	mov	r3, r8
 80004ee:	1a18      	subs	r0, r3, r0
 80004f0:	0143      	lsls	r3, r0, #5
 80004f2:	d400      	bmi.n	80004f6 <__aeabi_fadd+0x4e>
 80004f4:	e08c      	b.n	8000610 <__aeabi_fadd+0x168>
 80004f6:	0180      	lsls	r0, r0, #6
 80004f8:	0987      	lsrs	r7, r0, #6
 80004fa:	0038      	movs	r0, r7
 80004fc:	f002 f926 	bl	800274c <__clzsi2>
 8000500:	3805      	subs	r0, #5
 8000502:	4087      	lsls	r7, r0
 8000504:	4285      	cmp	r5, r0
 8000506:	dc00      	bgt.n	800050a <__aeabi_fadd+0x62>
 8000508:	e0b6      	b.n	8000678 <__aeabi_fadd+0x1d0>
 800050a:	1a2d      	subs	r5, r5, r0
 800050c:	48b3      	ldr	r0, [pc, #716]	; (80007dc <__aeabi_fadd+0x334>)
 800050e:	4038      	ands	r0, r7
 8000510:	0743      	lsls	r3, r0, #29
 8000512:	d004      	beq.n	800051e <__aeabi_fadd+0x76>
 8000514:	230f      	movs	r3, #15
 8000516:	4003      	ands	r3, r0
 8000518:	2b04      	cmp	r3, #4
 800051a:	d000      	beq.n	800051e <__aeabi_fadd+0x76>
 800051c:	3004      	adds	r0, #4
 800051e:	0143      	lsls	r3, r0, #5
 8000520:	d400      	bmi.n	8000524 <__aeabi_fadd+0x7c>
 8000522:	e078      	b.n	8000616 <__aeabi_fadd+0x16e>
 8000524:	1c6a      	adds	r2, r5, #1
 8000526:	2dfe      	cmp	r5, #254	; 0xfe
 8000528:	d065      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800052a:	0180      	lsls	r0, r0, #6
 800052c:	0a43      	lsrs	r3, r0, #9
 800052e:	469c      	mov	ip, r3
 8000530:	b2d2      	uxtb	r2, r2
 8000532:	4663      	mov	r3, ip
 8000534:	05d0      	lsls	r0, r2, #23
 8000536:	4318      	orrs	r0, r3
 8000538:	07e4      	lsls	r4, r4, #31
 800053a:	4320      	orrs	r0, r4
 800053c:	bc80      	pop	{r7}
 800053e:	46b8      	mov	r8, r7
 8000540:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000542:	2a00      	cmp	r2, #0
 8000544:	d035      	beq.n	80005b2 <__aeabi_fadd+0x10a>
 8000546:	1b7a      	subs	r2, r7, r5
 8000548:	2d00      	cmp	r5, #0
 800054a:	d000      	beq.n	800054e <__aeabi_fadd+0xa6>
 800054c:	e0af      	b.n	80006ae <__aeabi_fadd+0x206>
 800054e:	4643      	mov	r3, r8
 8000550:	2b00      	cmp	r3, #0
 8000552:	d100      	bne.n	8000556 <__aeabi_fadd+0xae>
 8000554:	e0a7      	b.n	80006a6 <__aeabi_fadd+0x1fe>
 8000556:	1e53      	subs	r3, r2, #1
 8000558:	2a01      	cmp	r2, #1
 800055a:	d100      	bne.n	800055e <__aeabi_fadd+0xb6>
 800055c:	e12f      	b.n	80007be <__aeabi_fadd+0x316>
 800055e:	2aff      	cmp	r2, #255	; 0xff
 8000560:	d069      	beq.n	8000636 <__aeabi_fadd+0x18e>
 8000562:	001a      	movs	r2, r3
 8000564:	e0aa      	b.n	80006bc <__aeabi_fadd+0x214>
 8000566:	1be9      	subs	r1, r5, r7
 8000568:	2900      	cmp	r1, #0
 800056a:	dd70      	ble.n	800064e <__aeabi_fadd+0x1a6>
 800056c:	2f00      	cmp	r7, #0
 800056e:	d037      	beq.n	80005e0 <__aeabi_fadd+0x138>
 8000570:	2dff      	cmp	r5, #255	; 0xff
 8000572:	d062      	beq.n	800063a <__aeabi_fadd+0x192>
 8000574:	2380      	movs	r3, #128	; 0x80
 8000576:	04db      	lsls	r3, r3, #19
 8000578:	431e      	orrs	r6, r3
 800057a:	291b      	cmp	r1, #27
 800057c:	dc00      	bgt.n	8000580 <__aeabi_fadd+0xd8>
 800057e:	e0b0      	b.n	80006e2 <__aeabi_fadd+0x23a>
 8000580:	2001      	movs	r0, #1
 8000582:	4440      	add	r0, r8
 8000584:	0143      	lsls	r3, r0, #5
 8000586:	d543      	bpl.n	8000610 <__aeabi_fadd+0x168>
 8000588:	3501      	adds	r5, #1
 800058a:	2dff      	cmp	r5, #255	; 0xff
 800058c:	d033      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800058e:	2301      	movs	r3, #1
 8000590:	4a93      	ldr	r2, [pc, #588]	; (80007e0 <__aeabi_fadd+0x338>)
 8000592:	4003      	ands	r3, r0
 8000594:	0840      	lsrs	r0, r0, #1
 8000596:	4010      	ands	r0, r2
 8000598:	4318      	orrs	r0, r3
 800059a:	e7b9      	b.n	8000510 <__aeabi_fadd+0x68>
 800059c:	2e00      	cmp	r6, #0
 800059e:	d100      	bne.n	80005a2 <__aeabi_fadd+0xfa>
 80005a0:	e083      	b.n	80006aa <__aeabi_fadd+0x202>
 80005a2:	1e51      	subs	r1, r2, #1
 80005a4:	2a01      	cmp	r2, #1
 80005a6:	d100      	bne.n	80005aa <__aeabi_fadd+0x102>
 80005a8:	e0d8      	b.n	800075c <__aeabi_fadd+0x2b4>
 80005aa:	2aff      	cmp	r2, #255	; 0xff
 80005ac:	d045      	beq.n	800063a <__aeabi_fadd+0x192>
 80005ae:	000a      	movs	r2, r1
 80005b0:	e798      	b.n	80004e4 <__aeabi_fadd+0x3c>
 80005b2:	27fe      	movs	r7, #254	; 0xfe
 80005b4:	1c6a      	adds	r2, r5, #1
 80005b6:	4217      	tst	r7, r2
 80005b8:	d000      	beq.n	80005bc <__aeabi_fadd+0x114>
 80005ba:	e086      	b.n	80006ca <__aeabi_fadd+0x222>
 80005bc:	2d00      	cmp	r5, #0
 80005be:	d000      	beq.n	80005c2 <__aeabi_fadd+0x11a>
 80005c0:	e0b7      	b.n	8000732 <__aeabi_fadd+0x28a>
 80005c2:	4643      	mov	r3, r8
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d100      	bne.n	80005ca <__aeabi_fadd+0x122>
 80005c8:	e0f3      	b.n	80007b2 <__aeabi_fadd+0x30a>
 80005ca:	2200      	movs	r2, #0
 80005cc:	2e00      	cmp	r6, #0
 80005ce:	d0b0      	beq.n	8000532 <__aeabi_fadd+0x8a>
 80005d0:	1b98      	subs	r0, r3, r6
 80005d2:	0143      	lsls	r3, r0, #5
 80005d4:	d400      	bmi.n	80005d8 <__aeabi_fadd+0x130>
 80005d6:	e0fa      	b.n	80007ce <__aeabi_fadd+0x326>
 80005d8:	4643      	mov	r3, r8
 80005da:	000c      	movs	r4, r1
 80005dc:	1af0      	subs	r0, r6, r3
 80005de:	e797      	b.n	8000510 <__aeabi_fadd+0x68>
 80005e0:	2e00      	cmp	r6, #0
 80005e2:	d100      	bne.n	80005e6 <__aeabi_fadd+0x13e>
 80005e4:	e0c8      	b.n	8000778 <__aeabi_fadd+0x2d0>
 80005e6:	1e4a      	subs	r2, r1, #1
 80005e8:	2901      	cmp	r1, #1
 80005ea:	d100      	bne.n	80005ee <__aeabi_fadd+0x146>
 80005ec:	e0ae      	b.n	800074c <__aeabi_fadd+0x2a4>
 80005ee:	29ff      	cmp	r1, #255	; 0xff
 80005f0:	d023      	beq.n	800063a <__aeabi_fadd+0x192>
 80005f2:	0011      	movs	r1, r2
 80005f4:	e7c1      	b.n	800057a <__aeabi_fadd+0xd2>
 80005f6:	2300      	movs	r3, #0
 80005f8:	22ff      	movs	r2, #255	; 0xff
 80005fa:	469c      	mov	ip, r3
 80005fc:	e799      	b.n	8000532 <__aeabi_fadd+0x8a>
 80005fe:	21fe      	movs	r1, #254	; 0xfe
 8000600:	1c6a      	adds	r2, r5, #1
 8000602:	4211      	tst	r1, r2
 8000604:	d077      	beq.n	80006f6 <__aeabi_fadd+0x24e>
 8000606:	2aff      	cmp	r2, #255	; 0xff
 8000608:	d0f5      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800060a:	0015      	movs	r5, r2
 800060c:	4446      	add	r6, r8
 800060e:	0870      	lsrs	r0, r6, #1
 8000610:	0743      	lsls	r3, r0, #29
 8000612:	d000      	beq.n	8000616 <__aeabi_fadd+0x16e>
 8000614:	e77e      	b.n	8000514 <__aeabi_fadd+0x6c>
 8000616:	08c3      	lsrs	r3, r0, #3
 8000618:	2dff      	cmp	r5, #255	; 0xff
 800061a:	d00e      	beq.n	800063a <__aeabi_fadd+0x192>
 800061c:	025b      	lsls	r3, r3, #9
 800061e:	0a5b      	lsrs	r3, r3, #9
 8000620:	469c      	mov	ip, r3
 8000622:	b2ea      	uxtb	r2, r5
 8000624:	e785      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000626:	2e00      	cmp	r6, #0
 8000628:	d007      	beq.n	800063a <__aeabi_fadd+0x192>
 800062a:	2280      	movs	r2, #128	; 0x80
 800062c:	03d2      	lsls	r2, r2, #15
 800062e:	4213      	tst	r3, r2
 8000630:	d003      	beq.n	800063a <__aeabi_fadd+0x192>
 8000632:	4210      	tst	r0, r2
 8000634:	d101      	bne.n	800063a <__aeabi_fadd+0x192>
 8000636:	000c      	movs	r4, r1
 8000638:	0003      	movs	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d0db      	beq.n	80005f6 <__aeabi_fadd+0x14e>
 800063e:	2080      	movs	r0, #128	; 0x80
 8000640:	03c0      	lsls	r0, r0, #15
 8000642:	4318      	orrs	r0, r3
 8000644:	0240      	lsls	r0, r0, #9
 8000646:	0a43      	lsrs	r3, r0, #9
 8000648:	469c      	mov	ip, r3
 800064a:	22ff      	movs	r2, #255	; 0xff
 800064c:	e771      	b.n	8000532 <__aeabi_fadd+0x8a>
 800064e:	2900      	cmp	r1, #0
 8000650:	d0d5      	beq.n	80005fe <__aeabi_fadd+0x156>
 8000652:	1b7a      	subs	r2, r7, r5
 8000654:	2d00      	cmp	r5, #0
 8000656:	d160      	bne.n	800071a <__aeabi_fadd+0x272>
 8000658:	4643      	mov	r3, r8
 800065a:	2b00      	cmp	r3, #0
 800065c:	d024      	beq.n	80006a8 <__aeabi_fadd+0x200>
 800065e:	1e53      	subs	r3, r2, #1
 8000660:	2a01      	cmp	r2, #1
 8000662:	d073      	beq.n	800074c <__aeabi_fadd+0x2a4>
 8000664:	2aff      	cmp	r2, #255	; 0xff
 8000666:	d0e7      	beq.n	8000638 <__aeabi_fadd+0x190>
 8000668:	001a      	movs	r2, r3
 800066a:	2a1b      	cmp	r2, #27
 800066c:	dc00      	bgt.n	8000670 <__aeabi_fadd+0x1c8>
 800066e:	e085      	b.n	800077c <__aeabi_fadd+0x2d4>
 8000670:	2001      	movs	r0, #1
 8000672:	003d      	movs	r5, r7
 8000674:	1980      	adds	r0, r0, r6
 8000676:	e785      	b.n	8000584 <__aeabi_fadd+0xdc>
 8000678:	2320      	movs	r3, #32
 800067a:	003a      	movs	r2, r7
 800067c:	1b45      	subs	r5, r0, r5
 800067e:	0038      	movs	r0, r7
 8000680:	3501      	adds	r5, #1
 8000682:	40ea      	lsrs	r2, r5
 8000684:	1b5d      	subs	r5, r3, r5
 8000686:	40a8      	lsls	r0, r5
 8000688:	1e43      	subs	r3, r0, #1
 800068a:	4198      	sbcs	r0, r3
 800068c:	2500      	movs	r5, #0
 800068e:	4310      	orrs	r0, r2
 8000690:	e73e      	b.n	8000510 <__aeabi_fadd+0x68>
 8000692:	2320      	movs	r3, #32
 8000694:	0030      	movs	r0, r6
 8000696:	1a9b      	subs	r3, r3, r2
 8000698:	0031      	movs	r1, r6
 800069a:	4098      	lsls	r0, r3
 800069c:	40d1      	lsrs	r1, r2
 800069e:	1e43      	subs	r3, r0, #1
 80006a0:	4198      	sbcs	r0, r3
 80006a2:	4308      	orrs	r0, r1
 80006a4:	e722      	b.n	80004ec <__aeabi_fadd+0x44>
 80006a6:	000c      	movs	r4, r1
 80006a8:	0003      	movs	r3, r0
 80006aa:	0015      	movs	r5, r2
 80006ac:	e7b4      	b.n	8000618 <__aeabi_fadd+0x170>
 80006ae:	2fff      	cmp	r7, #255	; 0xff
 80006b0:	d0c1      	beq.n	8000636 <__aeabi_fadd+0x18e>
 80006b2:	2380      	movs	r3, #128	; 0x80
 80006b4:	4640      	mov	r0, r8
 80006b6:	04db      	lsls	r3, r3, #19
 80006b8:	4318      	orrs	r0, r3
 80006ba:	4680      	mov	r8, r0
 80006bc:	2a1b      	cmp	r2, #27
 80006be:	dd51      	ble.n	8000764 <__aeabi_fadd+0x2bc>
 80006c0:	2001      	movs	r0, #1
 80006c2:	000c      	movs	r4, r1
 80006c4:	003d      	movs	r5, r7
 80006c6:	1a30      	subs	r0, r6, r0
 80006c8:	e712      	b.n	80004f0 <__aeabi_fadd+0x48>
 80006ca:	4643      	mov	r3, r8
 80006cc:	1b9f      	subs	r7, r3, r6
 80006ce:	017b      	lsls	r3, r7, #5
 80006d0:	d42b      	bmi.n	800072a <__aeabi_fadd+0x282>
 80006d2:	2f00      	cmp	r7, #0
 80006d4:	d000      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80006d6:	e710      	b.n	80004fa <__aeabi_fadd+0x52>
 80006d8:	2300      	movs	r3, #0
 80006da:	2400      	movs	r4, #0
 80006dc:	2200      	movs	r2, #0
 80006de:	469c      	mov	ip, r3
 80006e0:	e727      	b.n	8000532 <__aeabi_fadd+0x8a>
 80006e2:	2320      	movs	r3, #32
 80006e4:	0032      	movs	r2, r6
 80006e6:	0030      	movs	r0, r6
 80006e8:	40ca      	lsrs	r2, r1
 80006ea:	1a59      	subs	r1, r3, r1
 80006ec:	4088      	lsls	r0, r1
 80006ee:	1e43      	subs	r3, r0, #1
 80006f0:	4198      	sbcs	r0, r3
 80006f2:	4310      	orrs	r0, r2
 80006f4:	e745      	b.n	8000582 <__aeabi_fadd+0xda>
 80006f6:	2d00      	cmp	r5, #0
 80006f8:	d14a      	bne.n	8000790 <__aeabi_fadd+0x2e8>
 80006fa:	4643      	mov	r3, r8
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d063      	beq.n	80007c8 <__aeabi_fadd+0x320>
 8000700:	2200      	movs	r2, #0
 8000702:	2e00      	cmp	r6, #0
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x260>
 8000706:	e714      	b.n	8000532 <__aeabi_fadd+0x8a>
 8000708:	0030      	movs	r0, r6
 800070a:	4440      	add	r0, r8
 800070c:	0143      	lsls	r3, r0, #5
 800070e:	d400      	bmi.n	8000712 <__aeabi_fadd+0x26a>
 8000710:	e77e      	b.n	8000610 <__aeabi_fadd+0x168>
 8000712:	4b32      	ldr	r3, [pc, #200]	; (80007dc <__aeabi_fadd+0x334>)
 8000714:	3501      	adds	r5, #1
 8000716:	4018      	ands	r0, r3
 8000718:	e77a      	b.n	8000610 <__aeabi_fadd+0x168>
 800071a:	2fff      	cmp	r7, #255	; 0xff
 800071c:	d08c      	beq.n	8000638 <__aeabi_fadd+0x190>
 800071e:	2380      	movs	r3, #128	; 0x80
 8000720:	4641      	mov	r1, r8
 8000722:	04db      	lsls	r3, r3, #19
 8000724:	4319      	orrs	r1, r3
 8000726:	4688      	mov	r8, r1
 8000728:	e79f      	b.n	800066a <__aeabi_fadd+0x1c2>
 800072a:	4643      	mov	r3, r8
 800072c:	000c      	movs	r4, r1
 800072e:	1af7      	subs	r7, r6, r3
 8000730:	e6e3      	b.n	80004fa <__aeabi_fadd+0x52>
 8000732:	4642      	mov	r2, r8
 8000734:	2a00      	cmp	r2, #0
 8000736:	d000      	beq.n	800073a <__aeabi_fadd+0x292>
 8000738:	e775      	b.n	8000626 <__aeabi_fadd+0x17e>
 800073a:	2e00      	cmp	r6, #0
 800073c:	d000      	beq.n	8000740 <__aeabi_fadd+0x298>
 800073e:	e77a      	b.n	8000636 <__aeabi_fadd+0x18e>
 8000740:	2380      	movs	r3, #128	; 0x80
 8000742:	03db      	lsls	r3, r3, #15
 8000744:	2400      	movs	r4, #0
 8000746:	469c      	mov	ip, r3
 8000748:	22ff      	movs	r2, #255	; 0xff
 800074a:	e6f2      	b.n	8000532 <__aeabi_fadd+0x8a>
 800074c:	0030      	movs	r0, r6
 800074e:	4440      	add	r0, r8
 8000750:	2501      	movs	r5, #1
 8000752:	0143      	lsls	r3, r0, #5
 8000754:	d400      	bmi.n	8000758 <__aeabi_fadd+0x2b0>
 8000756:	e75b      	b.n	8000610 <__aeabi_fadd+0x168>
 8000758:	2502      	movs	r5, #2
 800075a:	e718      	b.n	800058e <__aeabi_fadd+0xe6>
 800075c:	4643      	mov	r3, r8
 800075e:	2501      	movs	r5, #1
 8000760:	1b98      	subs	r0, r3, r6
 8000762:	e6c5      	b.n	80004f0 <__aeabi_fadd+0x48>
 8000764:	2320      	movs	r3, #32
 8000766:	4644      	mov	r4, r8
 8000768:	4640      	mov	r0, r8
 800076a:	40d4      	lsrs	r4, r2
 800076c:	1a9a      	subs	r2, r3, r2
 800076e:	4090      	lsls	r0, r2
 8000770:	1e43      	subs	r3, r0, #1
 8000772:	4198      	sbcs	r0, r3
 8000774:	4320      	orrs	r0, r4
 8000776:	e7a4      	b.n	80006c2 <__aeabi_fadd+0x21a>
 8000778:	000d      	movs	r5, r1
 800077a:	e74d      	b.n	8000618 <__aeabi_fadd+0x170>
 800077c:	2320      	movs	r3, #32
 800077e:	4641      	mov	r1, r8
 8000780:	4640      	mov	r0, r8
 8000782:	40d1      	lsrs	r1, r2
 8000784:	1a9a      	subs	r2, r3, r2
 8000786:	4090      	lsls	r0, r2
 8000788:	1e43      	subs	r3, r0, #1
 800078a:	4198      	sbcs	r0, r3
 800078c:	4308      	orrs	r0, r1
 800078e:	e770      	b.n	8000672 <__aeabi_fadd+0x1ca>
 8000790:	4642      	mov	r2, r8
 8000792:	2a00      	cmp	r2, #0
 8000794:	d100      	bne.n	8000798 <__aeabi_fadd+0x2f0>
 8000796:	e74f      	b.n	8000638 <__aeabi_fadd+0x190>
 8000798:	2e00      	cmp	r6, #0
 800079a:	d100      	bne.n	800079e <__aeabi_fadd+0x2f6>
 800079c:	e74d      	b.n	800063a <__aeabi_fadd+0x192>
 800079e:	2280      	movs	r2, #128	; 0x80
 80007a0:	03d2      	lsls	r2, r2, #15
 80007a2:	4213      	tst	r3, r2
 80007a4:	d100      	bne.n	80007a8 <__aeabi_fadd+0x300>
 80007a6:	e748      	b.n	800063a <__aeabi_fadd+0x192>
 80007a8:	4210      	tst	r0, r2
 80007aa:	d000      	beq.n	80007ae <__aeabi_fadd+0x306>
 80007ac:	e745      	b.n	800063a <__aeabi_fadd+0x192>
 80007ae:	0003      	movs	r3, r0
 80007b0:	e743      	b.n	800063a <__aeabi_fadd+0x192>
 80007b2:	2e00      	cmp	r6, #0
 80007b4:	d090      	beq.n	80006d8 <__aeabi_fadd+0x230>
 80007b6:	000c      	movs	r4, r1
 80007b8:	4684      	mov	ip, r0
 80007ba:	2200      	movs	r2, #0
 80007bc:	e6b9      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007be:	4643      	mov	r3, r8
 80007c0:	000c      	movs	r4, r1
 80007c2:	1af0      	subs	r0, r6, r3
 80007c4:	3501      	adds	r5, #1
 80007c6:	e693      	b.n	80004f0 <__aeabi_fadd+0x48>
 80007c8:	4684      	mov	ip, r0
 80007ca:	2200      	movs	r2, #0
 80007cc:	e6b1      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007ce:	2800      	cmp	r0, #0
 80007d0:	d000      	beq.n	80007d4 <__aeabi_fadd+0x32c>
 80007d2:	e71d      	b.n	8000610 <__aeabi_fadd+0x168>
 80007d4:	2300      	movs	r3, #0
 80007d6:	2400      	movs	r4, #0
 80007d8:	469c      	mov	ip, r3
 80007da:	e6aa      	b.n	8000532 <__aeabi_fadd+0x8a>
 80007dc:	fbffffff 	.word	0xfbffffff
 80007e0:	7dffffff 	.word	0x7dffffff

080007e4 <__aeabi_fdiv>:
 80007e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007e6:	464f      	mov	r7, r9
 80007e8:	4646      	mov	r6, r8
 80007ea:	46d6      	mov	lr, sl
 80007ec:	0245      	lsls	r5, r0, #9
 80007ee:	b5c0      	push	{r6, r7, lr}
 80007f0:	0047      	lsls	r7, r0, #1
 80007f2:	1c0c      	adds	r4, r1, #0
 80007f4:	0a6d      	lsrs	r5, r5, #9
 80007f6:	0e3f      	lsrs	r7, r7, #24
 80007f8:	0fc6      	lsrs	r6, r0, #31
 80007fa:	2f00      	cmp	r7, #0
 80007fc:	d100      	bne.n	8000800 <__aeabi_fdiv+0x1c>
 80007fe:	e070      	b.n	80008e2 <__aeabi_fdiv+0xfe>
 8000800:	2fff      	cmp	r7, #255	; 0xff
 8000802:	d100      	bne.n	8000806 <__aeabi_fdiv+0x22>
 8000804:	e075      	b.n	80008f2 <__aeabi_fdiv+0x10e>
 8000806:	00eb      	lsls	r3, r5, #3
 8000808:	2580      	movs	r5, #128	; 0x80
 800080a:	04ed      	lsls	r5, r5, #19
 800080c:	431d      	orrs	r5, r3
 800080e:	2300      	movs	r3, #0
 8000810:	4699      	mov	r9, r3
 8000812:	469a      	mov	sl, r3
 8000814:	3f7f      	subs	r7, #127	; 0x7f
 8000816:	0260      	lsls	r0, r4, #9
 8000818:	0a43      	lsrs	r3, r0, #9
 800081a:	4698      	mov	r8, r3
 800081c:	0063      	lsls	r3, r4, #1
 800081e:	0e1b      	lsrs	r3, r3, #24
 8000820:	0fe4      	lsrs	r4, r4, #31
 8000822:	2b00      	cmp	r3, #0
 8000824:	d04e      	beq.n	80008c4 <__aeabi_fdiv+0xe0>
 8000826:	2bff      	cmp	r3, #255	; 0xff
 8000828:	d046      	beq.n	80008b8 <__aeabi_fdiv+0xd4>
 800082a:	4642      	mov	r2, r8
 800082c:	00d0      	lsls	r0, r2, #3
 800082e:	2280      	movs	r2, #128	; 0x80
 8000830:	04d2      	lsls	r2, r2, #19
 8000832:	4302      	orrs	r2, r0
 8000834:	4690      	mov	r8, r2
 8000836:	2200      	movs	r2, #0
 8000838:	3b7f      	subs	r3, #127	; 0x7f
 800083a:	0031      	movs	r1, r6
 800083c:	1aff      	subs	r7, r7, r3
 800083e:	464b      	mov	r3, r9
 8000840:	4061      	eors	r1, r4
 8000842:	b2c9      	uxtb	r1, r1
 8000844:	4313      	orrs	r3, r2
 8000846:	2b0f      	cmp	r3, #15
 8000848:	d900      	bls.n	800084c <__aeabi_fdiv+0x68>
 800084a:	e0b5      	b.n	80009b8 <__aeabi_fdiv+0x1d4>
 800084c:	486e      	ldr	r0, [pc, #440]	; (8000a08 <__aeabi_fdiv+0x224>)
 800084e:	009b      	lsls	r3, r3, #2
 8000850:	58c3      	ldr	r3, [r0, r3]
 8000852:	469f      	mov	pc, r3
 8000854:	2300      	movs	r3, #0
 8000856:	4698      	mov	r8, r3
 8000858:	0026      	movs	r6, r4
 800085a:	4645      	mov	r5, r8
 800085c:	4692      	mov	sl, r2
 800085e:	4653      	mov	r3, sl
 8000860:	2b02      	cmp	r3, #2
 8000862:	d100      	bne.n	8000866 <__aeabi_fdiv+0x82>
 8000864:	e089      	b.n	800097a <__aeabi_fdiv+0x196>
 8000866:	2b03      	cmp	r3, #3
 8000868:	d100      	bne.n	800086c <__aeabi_fdiv+0x88>
 800086a:	e09e      	b.n	80009aa <__aeabi_fdiv+0x1c6>
 800086c:	2b01      	cmp	r3, #1
 800086e:	d018      	beq.n	80008a2 <__aeabi_fdiv+0xbe>
 8000870:	003b      	movs	r3, r7
 8000872:	337f      	adds	r3, #127	; 0x7f
 8000874:	2b00      	cmp	r3, #0
 8000876:	dd69      	ble.n	800094c <__aeabi_fdiv+0x168>
 8000878:	076a      	lsls	r2, r5, #29
 800087a:	d004      	beq.n	8000886 <__aeabi_fdiv+0xa2>
 800087c:	220f      	movs	r2, #15
 800087e:	402a      	ands	r2, r5
 8000880:	2a04      	cmp	r2, #4
 8000882:	d000      	beq.n	8000886 <__aeabi_fdiv+0xa2>
 8000884:	3504      	adds	r5, #4
 8000886:	012a      	lsls	r2, r5, #4
 8000888:	d503      	bpl.n	8000892 <__aeabi_fdiv+0xae>
 800088a:	4b60      	ldr	r3, [pc, #384]	; (8000a0c <__aeabi_fdiv+0x228>)
 800088c:	401d      	ands	r5, r3
 800088e:	003b      	movs	r3, r7
 8000890:	3380      	adds	r3, #128	; 0x80
 8000892:	2bfe      	cmp	r3, #254	; 0xfe
 8000894:	dd00      	ble.n	8000898 <__aeabi_fdiv+0xb4>
 8000896:	e070      	b.n	800097a <__aeabi_fdiv+0x196>
 8000898:	01ad      	lsls	r5, r5, #6
 800089a:	0a6d      	lsrs	r5, r5, #9
 800089c:	b2d8      	uxtb	r0, r3
 800089e:	e002      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80008a0:	000e      	movs	r6, r1
 80008a2:	2000      	movs	r0, #0
 80008a4:	2500      	movs	r5, #0
 80008a6:	05c0      	lsls	r0, r0, #23
 80008a8:	4328      	orrs	r0, r5
 80008aa:	07f6      	lsls	r6, r6, #31
 80008ac:	4330      	orrs	r0, r6
 80008ae:	bce0      	pop	{r5, r6, r7}
 80008b0:	46ba      	mov	sl, r7
 80008b2:	46b1      	mov	r9, r6
 80008b4:	46a8      	mov	r8, r5
 80008b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008b8:	4643      	mov	r3, r8
 80008ba:	2b00      	cmp	r3, #0
 80008bc:	d13f      	bne.n	800093e <__aeabi_fdiv+0x15a>
 80008be:	2202      	movs	r2, #2
 80008c0:	3fff      	subs	r7, #255	; 0xff
 80008c2:	e003      	b.n	80008cc <__aeabi_fdiv+0xe8>
 80008c4:	4643      	mov	r3, r8
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d12d      	bne.n	8000926 <__aeabi_fdiv+0x142>
 80008ca:	2201      	movs	r2, #1
 80008cc:	0031      	movs	r1, r6
 80008ce:	464b      	mov	r3, r9
 80008d0:	4061      	eors	r1, r4
 80008d2:	b2c9      	uxtb	r1, r1
 80008d4:	4313      	orrs	r3, r2
 80008d6:	2b0f      	cmp	r3, #15
 80008d8:	d834      	bhi.n	8000944 <__aeabi_fdiv+0x160>
 80008da:	484d      	ldr	r0, [pc, #308]	; (8000a10 <__aeabi_fdiv+0x22c>)
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	58c3      	ldr	r3, [r0, r3]
 80008e0:	469f      	mov	pc, r3
 80008e2:	2d00      	cmp	r5, #0
 80008e4:	d113      	bne.n	800090e <__aeabi_fdiv+0x12a>
 80008e6:	2304      	movs	r3, #4
 80008e8:	4699      	mov	r9, r3
 80008ea:	3b03      	subs	r3, #3
 80008ec:	2700      	movs	r7, #0
 80008ee:	469a      	mov	sl, r3
 80008f0:	e791      	b.n	8000816 <__aeabi_fdiv+0x32>
 80008f2:	2d00      	cmp	r5, #0
 80008f4:	d105      	bne.n	8000902 <__aeabi_fdiv+0x11e>
 80008f6:	2308      	movs	r3, #8
 80008f8:	4699      	mov	r9, r3
 80008fa:	3b06      	subs	r3, #6
 80008fc:	27ff      	movs	r7, #255	; 0xff
 80008fe:	469a      	mov	sl, r3
 8000900:	e789      	b.n	8000816 <__aeabi_fdiv+0x32>
 8000902:	230c      	movs	r3, #12
 8000904:	4699      	mov	r9, r3
 8000906:	3b09      	subs	r3, #9
 8000908:	27ff      	movs	r7, #255	; 0xff
 800090a:	469a      	mov	sl, r3
 800090c:	e783      	b.n	8000816 <__aeabi_fdiv+0x32>
 800090e:	0028      	movs	r0, r5
 8000910:	f001 ff1c 	bl	800274c <__clzsi2>
 8000914:	2776      	movs	r7, #118	; 0x76
 8000916:	1f43      	subs	r3, r0, #5
 8000918:	409d      	lsls	r5, r3
 800091a:	2300      	movs	r3, #0
 800091c:	427f      	negs	r7, r7
 800091e:	4699      	mov	r9, r3
 8000920:	469a      	mov	sl, r3
 8000922:	1a3f      	subs	r7, r7, r0
 8000924:	e777      	b.n	8000816 <__aeabi_fdiv+0x32>
 8000926:	4640      	mov	r0, r8
 8000928:	f001 ff10 	bl	800274c <__clzsi2>
 800092c:	4642      	mov	r2, r8
 800092e:	1f43      	subs	r3, r0, #5
 8000930:	409a      	lsls	r2, r3
 8000932:	2376      	movs	r3, #118	; 0x76
 8000934:	425b      	negs	r3, r3
 8000936:	4690      	mov	r8, r2
 8000938:	1a1b      	subs	r3, r3, r0
 800093a:	2200      	movs	r2, #0
 800093c:	e77d      	b.n	800083a <__aeabi_fdiv+0x56>
 800093e:	23ff      	movs	r3, #255	; 0xff
 8000940:	2203      	movs	r2, #3
 8000942:	e77a      	b.n	800083a <__aeabi_fdiv+0x56>
 8000944:	000e      	movs	r6, r1
 8000946:	20ff      	movs	r0, #255	; 0xff
 8000948:	2500      	movs	r5, #0
 800094a:	e7ac      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800094c:	2001      	movs	r0, #1
 800094e:	1ac0      	subs	r0, r0, r3
 8000950:	281b      	cmp	r0, #27
 8000952:	dca6      	bgt.n	80008a2 <__aeabi_fdiv+0xbe>
 8000954:	379e      	adds	r7, #158	; 0x9e
 8000956:	002a      	movs	r2, r5
 8000958:	40bd      	lsls	r5, r7
 800095a:	40c2      	lsrs	r2, r0
 800095c:	1e6b      	subs	r3, r5, #1
 800095e:	419d      	sbcs	r5, r3
 8000960:	4315      	orrs	r5, r2
 8000962:	076b      	lsls	r3, r5, #29
 8000964:	d004      	beq.n	8000970 <__aeabi_fdiv+0x18c>
 8000966:	230f      	movs	r3, #15
 8000968:	402b      	ands	r3, r5
 800096a:	2b04      	cmp	r3, #4
 800096c:	d000      	beq.n	8000970 <__aeabi_fdiv+0x18c>
 800096e:	3504      	adds	r5, #4
 8000970:	016b      	lsls	r3, r5, #5
 8000972:	d544      	bpl.n	80009fe <__aeabi_fdiv+0x21a>
 8000974:	2001      	movs	r0, #1
 8000976:	2500      	movs	r5, #0
 8000978:	e795      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800097a:	20ff      	movs	r0, #255	; 0xff
 800097c:	2500      	movs	r5, #0
 800097e:	e792      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 8000980:	2580      	movs	r5, #128	; 0x80
 8000982:	2600      	movs	r6, #0
 8000984:	20ff      	movs	r0, #255	; 0xff
 8000986:	03ed      	lsls	r5, r5, #15
 8000988:	e78d      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 800098a:	2300      	movs	r3, #0
 800098c:	4698      	mov	r8, r3
 800098e:	2080      	movs	r0, #128	; 0x80
 8000990:	03c0      	lsls	r0, r0, #15
 8000992:	4205      	tst	r5, r0
 8000994:	d009      	beq.n	80009aa <__aeabi_fdiv+0x1c6>
 8000996:	4643      	mov	r3, r8
 8000998:	4203      	tst	r3, r0
 800099a:	d106      	bne.n	80009aa <__aeabi_fdiv+0x1c6>
 800099c:	4645      	mov	r5, r8
 800099e:	4305      	orrs	r5, r0
 80009a0:	026d      	lsls	r5, r5, #9
 80009a2:	0026      	movs	r6, r4
 80009a4:	20ff      	movs	r0, #255	; 0xff
 80009a6:	0a6d      	lsrs	r5, r5, #9
 80009a8:	e77d      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80009aa:	2080      	movs	r0, #128	; 0x80
 80009ac:	03c0      	lsls	r0, r0, #15
 80009ae:	4305      	orrs	r5, r0
 80009b0:	026d      	lsls	r5, r5, #9
 80009b2:	20ff      	movs	r0, #255	; 0xff
 80009b4:	0a6d      	lsrs	r5, r5, #9
 80009b6:	e776      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 80009b8:	4642      	mov	r2, r8
 80009ba:	016b      	lsls	r3, r5, #5
 80009bc:	0150      	lsls	r0, r2, #5
 80009be:	4283      	cmp	r3, r0
 80009c0:	d219      	bcs.n	80009f6 <__aeabi_fdiv+0x212>
 80009c2:	221b      	movs	r2, #27
 80009c4:	2500      	movs	r5, #0
 80009c6:	3f01      	subs	r7, #1
 80009c8:	2601      	movs	r6, #1
 80009ca:	001c      	movs	r4, r3
 80009cc:	006d      	lsls	r5, r5, #1
 80009ce:	005b      	lsls	r3, r3, #1
 80009d0:	2c00      	cmp	r4, #0
 80009d2:	db01      	blt.n	80009d8 <__aeabi_fdiv+0x1f4>
 80009d4:	4298      	cmp	r0, r3
 80009d6:	d801      	bhi.n	80009dc <__aeabi_fdiv+0x1f8>
 80009d8:	1a1b      	subs	r3, r3, r0
 80009da:	4335      	orrs	r5, r6
 80009dc:	3a01      	subs	r2, #1
 80009de:	2a00      	cmp	r2, #0
 80009e0:	d1f3      	bne.n	80009ca <__aeabi_fdiv+0x1e6>
 80009e2:	1e5a      	subs	r2, r3, #1
 80009e4:	4193      	sbcs	r3, r2
 80009e6:	431d      	orrs	r5, r3
 80009e8:	003b      	movs	r3, r7
 80009ea:	337f      	adds	r3, #127	; 0x7f
 80009ec:	000e      	movs	r6, r1
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	dd00      	ble.n	80009f4 <__aeabi_fdiv+0x210>
 80009f2:	e741      	b.n	8000878 <__aeabi_fdiv+0x94>
 80009f4:	e7aa      	b.n	800094c <__aeabi_fdiv+0x168>
 80009f6:	221a      	movs	r2, #26
 80009f8:	2501      	movs	r5, #1
 80009fa:	1a1b      	subs	r3, r3, r0
 80009fc:	e7e4      	b.n	80009c8 <__aeabi_fdiv+0x1e4>
 80009fe:	01ad      	lsls	r5, r5, #6
 8000a00:	2000      	movs	r0, #0
 8000a02:	0a6d      	lsrs	r5, r5, #9
 8000a04:	e74f      	b.n	80008a6 <__aeabi_fdiv+0xc2>
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	08009950 	.word	0x08009950
 8000a0c:	f7ffffff 	.word	0xf7ffffff
 8000a10:	08009990 	.word	0x08009990

08000a14 <__aeabi_f2iz>:
 8000a14:	0241      	lsls	r1, r0, #9
 8000a16:	0042      	lsls	r2, r0, #1
 8000a18:	0fc3      	lsrs	r3, r0, #31
 8000a1a:	0a49      	lsrs	r1, r1, #9
 8000a1c:	2000      	movs	r0, #0
 8000a1e:	0e12      	lsrs	r2, r2, #24
 8000a20:	2a7e      	cmp	r2, #126	; 0x7e
 8000a22:	dd03      	ble.n	8000a2c <__aeabi_f2iz+0x18>
 8000a24:	2a9d      	cmp	r2, #157	; 0x9d
 8000a26:	dd02      	ble.n	8000a2e <__aeabi_f2iz+0x1a>
 8000a28:	4a09      	ldr	r2, [pc, #36]	; (8000a50 <__aeabi_f2iz+0x3c>)
 8000a2a:	1898      	adds	r0, r3, r2
 8000a2c:	4770      	bx	lr
 8000a2e:	2080      	movs	r0, #128	; 0x80
 8000a30:	0400      	lsls	r0, r0, #16
 8000a32:	4301      	orrs	r1, r0
 8000a34:	2a95      	cmp	r2, #149	; 0x95
 8000a36:	dc07      	bgt.n	8000a48 <__aeabi_f2iz+0x34>
 8000a38:	2096      	movs	r0, #150	; 0x96
 8000a3a:	1a82      	subs	r2, r0, r2
 8000a3c:	40d1      	lsrs	r1, r2
 8000a3e:	4248      	negs	r0, r1
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d1f3      	bne.n	8000a2c <__aeabi_f2iz+0x18>
 8000a44:	0008      	movs	r0, r1
 8000a46:	e7f1      	b.n	8000a2c <__aeabi_f2iz+0x18>
 8000a48:	3a96      	subs	r2, #150	; 0x96
 8000a4a:	4091      	lsls	r1, r2
 8000a4c:	e7f7      	b.n	8000a3e <__aeabi_f2iz+0x2a>
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	7fffffff 	.word	0x7fffffff

08000a54 <__aeabi_i2f>:
 8000a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d013      	beq.n	8000a82 <__aeabi_i2f+0x2e>
 8000a5a:	17c3      	asrs	r3, r0, #31
 8000a5c:	18c6      	adds	r6, r0, r3
 8000a5e:	405e      	eors	r6, r3
 8000a60:	0fc4      	lsrs	r4, r0, #31
 8000a62:	0030      	movs	r0, r6
 8000a64:	f001 fe72 	bl	800274c <__clzsi2>
 8000a68:	239e      	movs	r3, #158	; 0x9e
 8000a6a:	0005      	movs	r5, r0
 8000a6c:	1a1b      	subs	r3, r3, r0
 8000a6e:	2b96      	cmp	r3, #150	; 0x96
 8000a70:	dc0f      	bgt.n	8000a92 <__aeabi_i2f+0x3e>
 8000a72:	2808      	cmp	r0, #8
 8000a74:	dd01      	ble.n	8000a7a <__aeabi_i2f+0x26>
 8000a76:	3d08      	subs	r5, #8
 8000a78:	40ae      	lsls	r6, r5
 8000a7a:	0276      	lsls	r6, r6, #9
 8000a7c:	0a76      	lsrs	r6, r6, #9
 8000a7e:	b2d8      	uxtb	r0, r3
 8000a80:	e002      	b.n	8000a88 <__aeabi_i2f+0x34>
 8000a82:	2400      	movs	r4, #0
 8000a84:	2000      	movs	r0, #0
 8000a86:	2600      	movs	r6, #0
 8000a88:	05c0      	lsls	r0, r0, #23
 8000a8a:	4330      	orrs	r0, r6
 8000a8c:	07e4      	lsls	r4, r4, #31
 8000a8e:	4320      	orrs	r0, r4
 8000a90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000a92:	2b99      	cmp	r3, #153	; 0x99
 8000a94:	dd0c      	ble.n	8000ab0 <__aeabi_i2f+0x5c>
 8000a96:	2205      	movs	r2, #5
 8000a98:	0031      	movs	r1, r6
 8000a9a:	1a12      	subs	r2, r2, r0
 8000a9c:	40d1      	lsrs	r1, r2
 8000a9e:	000a      	movs	r2, r1
 8000aa0:	0001      	movs	r1, r0
 8000aa2:	0030      	movs	r0, r6
 8000aa4:	311b      	adds	r1, #27
 8000aa6:	4088      	lsls	r0, r1
 8000aa8:	1e41      	subs	r1, r0, #1
 8000aaa:	4188      	sbcs	r0, r1
 8000aac:	4302      	orrs	r2, r0
 8000aae:	0016      	movs	r6, r2
 8000ab0:	2d05      	cmp	r5, #5
 8000ab2:	dc12      	bgt.n	8000ada <__aeabi_i2f+0x86>
 8000ab4:	0031      	movs	r1, r6
 8000ab6:	4f0d      	ldr	r7, [pc, #52]	; (8000aec <__aeabi_i2f+0x98>)
 8000ab8:	4039      	ands	r1, r7
 8000aba:	0772      	lsls	r2, r6, #29
 8000abc:	d009      	beq.n	8000ad2 <__aeabi_i2f+0x7e>
 8000abe:	200f      	movs	r0, #15
 8000ac0:	4030      	ands	r0, r6
 8000ac2:	2804      	cmp	r0, #4
 8000ac4:	d005      	beq.n	8000ad2 <__aeabi_i2f+0x7e>
 8000ac6:	3104      	adds	r1, #4
 8000ac8:	014a      	lsls	r2, r1, #5
 8000aca:	d502      	bpl.n	8000ad2 <__aeabi_i2f+0x7e>
 8000acc:	239f      	movs	r3, #159	; 0x9f
 8000ace:	4039      	ands	r1, r7
 8000ad0:	1b5b      	subs	r3, r3, r5
 8000ad2:	0189      	lsls	r1, r1, #6
 8000ad4:	0a4e      	lsrs	r6, r1, #9
 8000ad6:	b2d8      	uxtb	r0, r3
 8000ad8:	e7d6      	b.n	8000a88 <__aeabi_i2f+0x34>
 8000ada:	1f6a      	subs	r2, r5, #5
 8000adc:	4096      	lsls	r6, r2
 8000ade:	0031      	movs	r1, r6
 8000ae0:	4f02      	ldr	r7, [pc, #8]	; (8000aec <__aeabi_i2f+0x98>)
 8000ae2:	4039      	ands	r1, r7
 8000ae4:	0772      	lsls	r2, r6, #29
 8000ae6:	d0f4      	beq.n	8000ad2 <__aeabi_i2f+0x7e>
 8000ae8:	e7e9      	b.n	8000abe <__aeabi_i2f+0x6a>
 8000aea:	46c0      	nop			; (mov r8, r8)
 8000aec:	fbffffff 	.word	0xfbffffff

08000af0 <__aeabi_dadd>:
 8000af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000af2:	464f      	mov	r7, r9
 8000af4:	4646      	mov	r6, r8
 8000af6:	46d6      	mov	lr, sl
 8000af8:	000d      	movs	r5, r1
 8000afa:	0004      	movs	r4, r0
 8000afc:	b5c0      	push	{r6, r7, lr}
 8000afe:	001f      	movs	r7, r3
 8000b00:	0011      	movs	r1, r2
 8000b02:	0328      	lsls	r0, r5, #12
 8000b04:	0f62      	lsrs	r2, r4, #29
 8000b06:	0a40      	lsrs	r0, r0, #9
 8000b08:	4310      	orrs	r0, r2
 8000b0a:	007a      	lsls	r2, r7, #1
 8000b0c:	0d52      	lsrs	r2, r2, #21
 8000b0e:	00e3      	lsls	r3, r4, #3
 8000b10:	033c      	lsls	r4, r7, #12
 8000b12:	4691      	mov	r9, r2
 8000b14:	0a64      	lsrs	r4, r4, #9
 8000b16:	0ffa      	lsrs	r2, r7, #31
 8000b18:	0f4f      	lsrs	r7, r1, #29
 8000b1a:	006e      	lsls	r6, r5, #1
 8000b1c:	4327      	orrs	r7, r4
 8000b1e:	4692      	mov	sl, r2
 8000b20:	46b8      	mov	r8, r7
 8000b22:	0d76      	lsrs	r6, r6, #21
 8000b24:	0fed      	lsrs	r5, r5, #31
 8000b26:	00c9      	lsls	r1, r1, #3
 8000b28:	4295      	cmp	r5, r2
 8000b2a:	d100      	bne.n	8000b2e <__aeabi_dadd+0x3e>
 8000b2c:	e099      	b.n	8000c62 <__aeabi_dadd+0x172>
 8000b2e:	464c      	mov	r4, r9
 8000b30:	1b34      	subs	r4, r6, r4
 8000b32:	46a4      	mov	ip, r4
 8000b34:	2c00      	cmp	r4, #0
 8000b36:	dc00      	bgt.n	8000b3a <__aeabi_dadd+0x4a>
 8000b38:	e07c      	b.n	8000c34 <__aeabi_dadd+0x144>
 8000b3a:	464a      	mov	r2, r9
 8000b3c:	2a00      	cmp	r2, #0
 8000b3e:	d100      	bne.n	8000b42 <__aeabi_dadd+0x52>
 8000b40:	e0b8      	b.n	8000cb4 <__aeabi_dadd+0x1c4>
 8000b42:	4ac5      	ldr	r2, [pc, #788]	; (8000e58 <__aeabi_dadd+0x368>)
 8000b44:	4296      	cmp	r6, r2
 8000b46:	d100      	bne.n	8000b4a <__aeabi_dadd+0x5a>
 8000b48:	e11c      	b.n	8000d84 <__aeabi_dadd+0x294>
 8000b4a:	2280      	movs	r2, #128	; 0x80
 8000b4c:	003c      	movs	r4, r7
 8000b4e:	0412      	lsls	r2, r2, #16
 8000b50:	4314      	orrs	r4, r2
 8000b52:	46a0      	mov	r8, r4
 8000b54:	4662      	mov	r2, ip
 8000b56:	2a38      	cmp	r2, #56	; 0x38
 8000b58:	dd00      	ble.n	8000b5c <__aeabi_dadd+0x6c>
 8000b5a:	e161      	b.n	8000e20 <__aeabi_dadd+0x330>
 8000b5c:	2a1f      	cmp	r2, #31
 8000b5e:	dd00      	ble.n	8000b62 <__aeabi_dadd+0x72>
 8000b60:	e1cc      	b.n	8000efc <__aeabi_dadd+0x40c>
 8000b62:	4664      	mov	r4, ip
 8000b64:	2220      	movs	r2, #32
 8000b66:	1b12      	subs	r2, r2, r4
 8000b68:	4644      	mov	r4, r8
 8000b6a:	4094      	lsls	r4, r2
 8000b6c:	000f      	movs	r7, r1
 8000b6e:	46a1      	mov	r9, r4
 8000b70:	4664      	mov	r4, ip
 8000b72:	4091      	lsls	r1, r2
 8000b74:	40e7      	lsrs	r7, r4
 8000b76:	464c      	mov	r4, r9
 8000b78:	1e4a      	subs	r2, r1, #1
 8000b7a:	4191      	sbcs	r1, r2
 8000b7c:	433c      	orrs	r4, r7
 8000b7e:	4642      	mov	r2, r8
 8000b80:	4321      	orrs	r1, r4
 8000b82:	4664      	mov	r4, ip
 8000b84:	40e2      	lsrs	r2, r4
 8000b86:	1a80      	subs	r0, r0, r2
 8000b88:	1a5c      	subs	r4, r3, r1
 8000b8a:	42a3      	cmp	r3, r4
 8000b8c:	419b      	sbcs	r3, r3
 8000b8e:	425f      	negs	r7, r3
 8000b90:	1bc7      	subs	r7, r0, r7
 8000b92:	023b      	lsls	r3, r7, #8
 8000b94:	d400      	bmi.n	8000b98 <__aeabi_dadd+0xa8>
 8000b96:	e0d0      	b.n	8000d3a <__aeabi_dadd+0x24a>
 8000b98:	027f      	lsls	r7, r7, #9
 8000b9a:	0a7f      	lsrs	r7, r7, #9
 8000b9c:	2f00      	cmp	r7, #0
 8000b9e:	d100      	bne.n	8000ba2 <__aeabi_dadd+0xb2>
 8000ba0:	e0ff      	b.n	8000da2 <__aeabi_dadd+0x2b2>
 8000ba2:	0038      	movs	r0, r7
 8000ba4:	f001 fdd2 	bl	800274c <__clzsi2>
 8000ba8:	0001      	movs	r1, r0
 8000baa:	3908      	subs	r1, #8
 8000bac:	2320      	movs	r3, #32
 8000bae:	0022      	movs	r2, r4
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	408f      	lsls	r7, r1
 8000bb4:	40da      	lsrs	r2, r3
 8000bb6:	408c      	lsls	r4, r1
 8000bb8:	4317      	orrs	r7, r2
 8000bba:	42b1      	cmp	r1, r6
 8000bbc:	da00      	bge.n	8000bc0 <__aeabi_dadd+0xd0>
 8000bbe:	e0ff      	b.n	8000dc0 <__aeabi_dadd+0x2d0>
 8000bc0:	1b89      	subs	r1, r1, r6
 8000bc2:	1c4b      	adds	r3, r1, #1
 8000bc4:	2b1f      	cmp	r3, #31
 8000bc6:	dd00      	ble.n	8000bca <__aeabi_dadd+0xda>
 8000bc8:	e0a8      	b.n	8000d1c <__aeabi_dadd+0x22c>
 8000bca:	2220      	movs	r2, #32
 8000bcc:	0039      	movs	r1, r7
 8000bce:	1ad2      	subs	r2, r2, r3
 8000bd0:	0020      	movs	r0, r4
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	4091      	lsls	r1, r2
 8000bd6:	40d8      	lsrs	r0, r3
 8000bd8:	1e62      	subs	r2, r4, #1
 8000bda:	4194      	sbcs	r4, r2
 8000bdc:	40df      	lsrs	r7, r3
 8000bde:	2600      	movs	r6, #0
 8000be0:	4301      	orrs	r1, r0
 8000be2:	430c      	orrs	r4, r1
 8000be4:	0763      	lsls	r3, r4, #29
 8000be6:	d009      	beq.n	8000bfc <__aeabi_dadd+0x10c>
 8000be8:	230f      	movs	r3, #15
 8000bea:	4023      	ands	r3, r4
 8000bec:	2b04      	cmp	r3, #4
 8000bee:	d005      	beq.n	8000bfc <__aeabi_dadd+0x10c>
 8000bf0:	1d23      	adds	r3, r4, #4
 8000bf2:	42a3      	cmp	r3, r4
 8000bf4:	41a4      	sbcs	r4, r4
 8000bf6:	4264      	negs	r4, r4
 8000bf8:	193f      	adds	r7, r7, r4
 8000bfa:	001c      	movs	r4, r3
 8000bfc:	023b      	lsls	r3, r7, #8
 8000bfe:	d400      	bmi.n	8000c02 <__aeabi_dadd+0x112>
 8000c00:	e09e      	b.n	8000d40 <__aeabi_dadd+0x250>
 8000c02:	4b95      	ldr	r3, [pc, #596]	; (8000e58 <__aeabi_dadd+0x368>)
 8000c04:	3601      	adds	r6, #1
 8000c06:	429e      	cmp	r6, r3
 8000c08:	d100      	bne.n	8000c0c <__aeabi_dadd+0x11c>
 8000c0a:	e0b7      	b.n	8000d7c <__aeabi_dadd+0x28c>
 8000c0c:	4a93      	ldr	r2, [pc, #588]	; (8000e5c <__aeabi_dadd+0x36c>)
 8000c0e:	08e4      	lsrs	r4, r4, #3
 8000c10:	4017      	ands	r7, r2
 8000c12:	077b      	lsls	r3, r7, #29
 8000c14:	0571      	lsls	r1, r6, #21
 8000c16:	027f      	lsls	r7, r7, #9
 8000c18:	4323      	orrs	r3, r4
 8000c1a:	0b3f      	lsrs	r7, r7, #12
 8000c1c:	0d4a      	lsrs	r2, r1, #21
 8000c1e:	0512      	lsls	r2, r2, #20
 8000c20:	433a      	orrs	r2, r7
 8000c22:	07ed      	lsls	r5, r5, #31
 8000c24:	432a      	orrs	r2, r5
 8000c26:	0018      	movs	r0, r3
 8000c28:	0011      	movs	r1, r2
 8000c2a:	bce0      	pop	{r5, r6, r7}
 8000c2c:	46ba      	mov	sl, r7
 8000c2e:	46b1      	mov	r9, r6
 8000c30:	46a8      	mov	r8, r5
 8000c32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c34:	2c00      	cmp	r4, #0
 8000c36:	d04b      	beq.n	8000cd0 <__aeabi_dadd+0x1e0>
 8000c38:	464c      	mov	r4, r9
 8000c3a:	1ba4      	subs	r4, r4, r6
 8000c3c:	46a4      	mov	ip, r4
 8000c3e:	2e00      	cmp	r6, #0
 8000c40:	d000      	beq.n	8000c44 <__aeabi_dadd+0x154>
 8000c42:	e123      	b.n	8000e8c <__aeabi_dadd+0x39c>
 8000c44:	0004      	movs	r4, r0
 8000c46:	431c      	orrs	r4, r3
 8000c48:	d100      	bne.n	8000c4c <__aeabi_dadd+0x15c>
 8000c4a:	e1af      	b.n	8000fac <__aeabi_dadd+0x4bc>
 8000c4c:	4662      	mov	r2, ip
 8000c4e:	1e54      	subs	r4, r2, #1
 8000c50:	2a01      	cmp	r2, #1
 8000c52:	d100      	bne.n	8000c56 <__aeabi_dadd+0x166>
 8000c54:	e215      	b.n	8001082 <__aeabi_dadd+0x592>
 8000c56:	4d80      	ldr	r5, [pc, #512]	; (8000e58 <__aeabi_dadd+0x368>)
 8000c58:	45ac      	cmp	ip, r5
 8000c5a:	d100      	bne.n	8000c5e <__aeabi_dadd+0x16e>
 8000c5c:	e1c8      	b.n	8000ff0 <__aeabi_dadd+0x500>
 8000c5e:	46a4      	mov	ip, r4
 8000c60:	e11b      	b.n	8000e9a <__aeabi_dadd+0x3aa>
 8000c62:	464a      	mov	r2, r9
 8000c64:	1ab2      	subs	r2, r6, r2
 8000c66:	4694      	mov	ip, r2
 8000c68:	2a00      	cmp	r2, #0
 8000c6a:	dc00      	bgt.n	8000c6e <__aeabi_dadd+0x17e>
 8000c6c:	e0ac      	b.n	8000dc8 <__aeabi_dadd+0x2d8>
 8000c6e:	464a      	mov	r2, r9
 8000c70:	2a00      	cmp	r2, #0
 8000c72:	d043      	beq.n	8000cfc <__aeabi_dadd+0x20c>
 8000c74:	4a78      	ldr	r2, [pc, #480]	; (8000e58 <__aeabi_dadd+0x368>)
 8000c76:	4296      	cmp	r6, r2
 8000c78:	d100      	bne.n	8000c7c <__aeabi_dadd+0x18c>
 8000c7a:	e1af      	b.n	8000fdc <__aeabi_dadd+0x4ec>
 8000c7c:	2280      	movs	r2, #128	; 0x80
 8000c7e:	003c      	movs	r4, r7
 8000c80:	0412      	lsls	r2, r2, #16
 8000c82:	4314      	orrs	r4, r2
 8000c84:	46a0      	mov	r8, r4
 8000c86:	4662      	mov	r2, ip
 8000c88:	2a38      	cmp	r2, #56	; 0x38
 8000c8a:	dc67      	bgt.n	8000d5c <__aeabi_dadd+0x26c>
 8000c8c:	2a1f      	cmp	r2, #31
 8000c8e:	dc00      	bgt.n	8000c92 <__aeabi_dadd+0x1a2>
 8000c90:	e15f      	b.n	8000f52 <__aeabi_dadd+0x462>
 8000c92:	4647      	mov	r7, r8
 8000c94:	3a20      	subs	r2, #32
 8000c96:	40d7      	lsrs	r7, r2
 8000c98:	4662      	mov	r2, ip
 8000c9a:	2a20      	cmp	r2, #32
 8000c9c:	d005      	beq.n	8000caa <__aeabi_dadd+0x1ba>
 8000c9e:	4664      	mov	r4, ip
 8000ca0:	2240      	movs	r2, #64	; 0x40
 8000ca2:	1b12      	subs	r2, r2, r4
 8000ca4:	4644      	mov	r4, r8
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	4321      	orrs	r1, r4
 8000caa:	1e4a      	subs	r2, r1, #1
 8000cac:	4191      	sbcs	r1, r2
 8000cae:	000c      	movs	r4, r1
 8000cb0:	433c      	orrs	r4, r7
 8000cb2:	e057      	b.n	8000d64 <__aeabi_dadd+0x274>
 8000cb4:	003a      	movs	r2, r7
 8000cb6:	430a      	orrs	r2, r1
 8000cb8:	d100      	bne.n	8000cbc <__aeabi_dadd+0x1cc>
 8000cba:	e105      	b.n	8000ec8 <__aeabi_dadd+0x3d8>
 8000cbc:	0022      	movs	r2, r4
 8000cbe:	3a01      	subs	r2, #1
 8000cc0:	2c01      	cmp	r4, #1
 8000cc2:	d100      	bne.n	8000cc6 <__aeabi_dadd+0x1d6>
 8000cc4:	e182      	b.n	8000fcc <__aeabi_dadd+0x4dc>
 8000cc6:	4c64      	ldr	r4, [pc, #400]	; (8000e58 <__aeabi_dadd+0x368>)
 8000cc8:	45a4      	cmp	ip, r4
 8000cca:	d05b      	beq.n	8000d84 <__aeabi_dadd+0x294>
 8000ccc:	4694      	mov	ip, r2
 8000cce:	e741      	b.n	8000b54 <__aeabi_dadd+0x64>
 8000cd0:	4c63      	ldr	r4, [pc, #396]	; (8000e60 <__aeabi_dadd+0x370>)
 8000cd2:	1c77      	adds	r7, r6, #1
 8000cd4:	4227      	tst	r7, r4
 8000cd6:	d000      	beq.n	8000cda <__aeabi_dadd+0x1ea>
 8000cd8:	e0c4      	b.n	8000e64 <__aeabi_dadd+0x374>
 8000cda:	0004      	movs	r4, r0
 8000cdc:	431c      	orrs	r4, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d000      	beq.n	8000ce4 <__aeabi_dadd+0x1f4>
 8000ce2:	e169      	b.n	8000fb8 <__aeabi_dadd+0x4c8>
 8000ce4:	2c00      	cmp	r4, #0
 8000ce6:	d100      	bne.n	8000cea <__aeabi_dadd+0x1fa>
 8000ce8:	e1bf      	b.n	800106a <__aeabi_dadd+0x57a>
 8000cea:	4644      	mov	r4, r8
 8000cec:	430c      	orrs	r4, r1
 8000cee:	d000      	beq.n	8000cf2 <__aeabi_dadd+0x202>
 8000cf0:	e1d0      	b.n	8001094 <__aeabi_dadd+0x5a4>
 8000cf2:	0742      	lsls	r2, r0, #29
 8000cf4:	08db      	lsrs	r3, r3, #3
 8000cf6:	4313      	orrs	r3, r2
 8000cf8:	08c0      	lsrs	r0, r0, #3
 8000cfa:	e029      	b.n	8000d50 <__aeabi_dadd+0x260>
 8000cfc:	003a      	movs	r2, r7
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	d100      	bne.n	8000d04 <__aeabi_dadd+0x214>
 8000d02:	e170      	b.n	8000fe6 <__aeabi_dadd+0x4f6>
 8000d04:	4662      	mov	r2, ip
 8000d06:	4664      	mov	r4, ip
 8000d08:	3a01      	subs	r2, #1
 8000d0a:	2c01      	cmp	r4, #1
 8000d0c:	d100      	bne.n	8000d10 <__aeabi_dadd+0x220>
 8000d0e:	e0e0      	b.n	8000ed2 <__aeabi_dadd+0x3e2>
 8000d10:	4c51      	ldr	r4, [pc, #324]	; (8000e58 <__aeabi_dadd+0x368>)
 8000d12:	45a4      	cmp	ip, r4
 8000d14:	d100      	bne.n	8000d18 <__aeabi_dadd+0x228>
 8000d16:	e161      	b.n	8000fdc <__aeabi_dadd+0x4ec>
 8000d18:	4694      	mov	ip, r2
 8000d1a:	e7b4      	b.n	8000c86 <__aeabi_dadd+0x196>
 8000d1c:	003a      	movs	r2, r7
 8000d1e:	391f      	subs	r1, #31
 8000d20:	40ca      	lsrs	r2, r1
 8000d22:	0011      	movs	r1, r2
 8000d24:	2b20      	cmp	r3, #32
 8000d26:	d003      	beq.n	8000d30 <__aeabi_dadd+0x240>
 8000d28:	2240      	movs	r2, #64	; 0x40
 8000d2a:	1ad3      	subs	r3, r2, r3
 8000d2c:	409f      	lsls	r7, r3
 8000d2e:	433c      	orrs	r4, r7
 8000d30:	1e63      	subs	r3, r4, #1
 8000d32:	419c      	sbcs	r4, r3
 8000d34:	2700      	movs	r7, #0
 8000d36:	2600      	movs	r6, #0
 8000d38:	430c      	orrs	r4, r1
 8000d3a:	0763      	lsls	r3, r4, #29
 8000d3c:	d000      	beq.n	8000d40 <__aeabi_dadd+0x250>
 8000d3e:	e753      	b.n	8000be8 <__aeabi_dadd+0xf8>
 8000d40:	46b4      	mov	ip, r6
 8000d42:	08e4      	lsrs	r4, r4, #3
 8000d44:	077b      	lsls	r3, r7, #29
 8000d46:	4323      	orrs	r3, r4
 8000d48:	08f8      	lsrs	r0, r7, #3
 8000d4a:	4a43      	ldr	r2, [pc, #268]	; (8000e58 <__aeabi_dadd+0x368>)
 8000d4c:	4594      	cmp	ip, r2
 8000d4e:	d01d      	beq.n	8000d8c <__aeabi_dadd+0x29c>
 8000d50:	4662      	mov	r2, ip
 8000d52:	0307      	lsls	r7, r0, #12
 8000d54:	0552      	lsls	r2, r2, #21
 8000d56:	0b3f      	lsrs	r7, r7, #12
 8000d58:	0d52      	lsrs	r2, r2, #21
 8000d5a:	e760      	b.n	8000c1e <__aeabi_dadd+0x12e>
 8000d5c:	4644      	mov	r4, r8
 8000d5e:	430c      	orrs	r4, r1
 8000d60:	1e62      	subs	r2, r4, #1
 8000d62:	4194      	sbcs	r4, r2
 8000d64:	18e4      	adds	r4, r4, r3
 8000d66:	429c      	cmp	r4, r3
 8000d68:	419b      	sbcs	r3, r3
 8000d6a:	425f      	negs	r7, r3
 8000d6c:	183f      	adds	r7, r7, r0
 8000d6e:	023b      	lsls	r3, r7, #8
 8000d70:	d5e3      	bpl.n	8000d3a <__aeabi_dadd+0x24a>
 8000d72:	4b39      	ldr	r3, [pc, #228]	; (8000e58 <__aeabi_dadd+0x368>)
 8000d74:	3601      	adds	r6, #1
 8000d76:	429e      	cmp	r6, r3
 8000d78:	d000      	beq.n	8000d7c <__aeabi_dadd+0x28c>
 8000d7a:	e0b5      	b.n	8000ee8 <__aeabi_dadd+0x3f8>
 8000d7c:	0032      	movs	r2, r6
 8000d7e:	2700      	movs	r7, #0
 8000d80:	2300      	movs	r3, #0
 8000d82:	e74c      	b.n	8000c1e <__aeabi_dadd+0x12e>
 8000d84:	0742      	lsls	r2, r0, #29
 8000d86:	08db      	lsrs	r3, r3, #3
 8000d88:	4313      	orrs	r3, r2
 8000d8a:	08c0      	lsrs	r0, r0, #3
 8000d8c:	001a      	movs	r2, r3
 8000d8e:	4302      	orrs	r2, r0
 8000d90:	d100      	bne.n	8000d94 <__aeabi_dadd+0x2a4>
 8000d92:	e1e1      	b.n	8001158 <__aeabi_dadd+0x668>
 8000d94:	2780      	movs	r7, #128	; 0x80
 8000d96:	033f      	lsls	r7, r7, #12
 8000d98:	4307      	orrs	r7, r0
 8000d9a:	033f      	lsls	r7, r7, #12
 8000d9c:	4a2e      	ldr	r2, [pc, #184]	; (8000e58 <__aeabi_dadd+0x368>)
 8000d9e:	0b3f      	lsrs	r7, r7, #12
 8000da0:	e73d      	b.n	8000c1e <__aeabi_dadd+0x12e>
 8000da2:	0020      	movs	r0, r4
 8000da4:	f001 fcd2 	bl	800274c <__clzsi2>
 8000da8:	0001      	movs	r1, r0
 8000daa:	3118      	adds	r1, #24
 8000dac:	291f      	cmp	r1, #31
 8000dae:	dc00      	bgt.n	8000db2 <__aeabi_dadd+0x2c2>
 8000db0:	e6fc      	b.n	8000bac <__aeabi_dadd+0xbc>
 8000db2:	3808      	subs	r0, #8
 8000db4:	4084      	lsls	r4, r0
 8000db6:	0027      	movs	r7, r4
 8000db8:	2400      	movs	r4, #0
 8000dba:	42b1      	cmp	r1, r6
 8000dbc:	db00      	blt.n	8000dc0 <__aeabi_dadd+0x2d0>
 8000dbe:	e6ff      	b.n	8000bc0 <__aeabi_dadd+0xd0>
 8000dc0:	4a26      	ldr	r2, [pc, #152]	; (8000e5c <__aeabi_dadd+0x36c>)
 8000dc2:	1a76      	subs	r6, r6, r1
 8000dc4:	4017      	ands	r7, r2
 8000dc6:	e70d      	b.n	8000be4 <__aeabi_dadd+0xf4>
 8000dc8:	2a00      	cmp	r2, #0
 8000dca:	d02f      	beq.n	8000e2c <__aeabi_dadd+0x33c>
 8000dcc:	464a      	mov	r2, r9
 8000dce:	1b92      	subs	r2, r2, r6
 8000dd0:	4694      	mov	ip, r2
 8000dd2:	2e00      	cmp	r6, #0
 8000dd4:	d100      	bne.n	8000dd8 <__aeabi_dadd+0x2e8>
 8000dd6:	e0ad      	b.n	8000f34 <__aeabi_dadd+0x444>
 8000dd8:	4a1f      	ldr	r2, [pc, #124]	; (8000e58 <__aeabi_dadd+0x368>)
 8000dda:	4591      	cmp	r9, r2
 8000ddc:	d100      	bne.n	8000de0 <__aeabi_dadd+0x2f0>
 8000dde:	e10f      	b.n	8001000 <__aeabi_dadd+0x510>
 8000de0:	2280      	movs	r2, #128	; 0x80
 8000de2:	0412      	lsls	r2, r2, #16
 8000de4:	4310      	orrs	r0, r2
 8000de6:	4662      	mov	r2, ip
 8000de8:	2a38      	cmp	r2, #56	; 0x38
 8000dea:	dd00      	ble.n	8000dee <__aeabi_dadd+0x2fe>
 8000dec:	e10f      	b.n	800100e <__aeabi_dadd+0x51e>
 8000dee:	2a1f      	cmp	r2, #31
 8000df0:	dd00      	ble.n	8000df4 <__aeabi_dadd+0x304>
 8000df2:	e180      	b.n	80010f6 <__aeabi_dadd+0x606>
 8000df4:	4664      	mov	r4, ip
 8000df6:	2220      	movs	r2, #32
 8000df8:	001e      	movs	r6, r3
 8000dfa:	1b12      	subs	r2, r2, r4
 8000dfc:	4667      	mov	r7, ip
 8000dfe:	0004      	movs	r4, r0
 8000e00:	4093      	lsls	r3, r2
 8000e02:	4094      	lsls	r4, r2
 8000e04:	40fe      	lsrs	r6, r7
 8000e06:	1e5a      	subs	r2, r3, #1
 8000e08:	4193      	sbcs	r3, r2
 8000e0a:	40f8      	lsrs	r0, r7
 8000e0c:	4334      	orrs	r4, r6
 8000e0e:	431c      	orrs	r4, r3
 8000e10:	4480      	add	r8, r0
 8000e12:	1864      	adds	r4, r4, r1
 8000e14:	428c      	cmp	r4, r1
 8000e16:	41bf      	sbcs	r7, r7
 8000e18:	427f      	negs	r7, r7
 8000e1a:	464e      	mov	r6, r9
 8000e1c:	4447      	add	r7, r8
 8000e1e:	e7a6      	b.n	8000d6e <__aeabi_dadd+0x27e>
 8000e20:	4642      	mov	r2, r8
 8000e22:	430a      	orrs	r2, r1
 8000e24:	0011      	movs	r1, r2
 8000e26:	1e4a      	subs	r2, r1, #1
 8000e28:	4191      	sbcs	r1, r2
 8000e2a:	e6ad      	b.n	8000b88 <__aeabi_dadd+0x98>
 8000e2c:	4c0c      	ldr	r4, [pc, #48]	; (8000e60 <__aeabi_dadd+0x370>)
 8000e2e:	1c72      	adds	r2, r6, #1
 8000e30:	4222      	tst	r2, r4
 8000e32:	d000      	beq.n	8000e36 <__aeabi_dadd+0x346>
 8000e34:	e0a1      	b.n	8000f7a <__aeabi_dadd+0x48a>
 8000e36:	0002      	movs	r2, r0
 8000e38:	431a      	orrs	r2, r3
 8000e3a:	2e00      	cmp	r6, #0
 8000e3c:	d000      	beq.n	8000e40 <__aeabi_dadd+0x350>
 8000e3e:	e0fa      	b.n	8001036 <__aeabi_dadd+0x546>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d100      	bne.n	8000e46 <__aeabi_dadd+0x356>
 8000e44:	e145      	b.n	80010d2 <__aeabi_dadd+0x5e2>
 8000e46:	003a      	movs	r2, r7
 8000e48:	430a      	orrs	r2, r1
 8000e4a:	d000      	beq.n	8000e4e <__aeabi_dadd+0x35e>
 8000e4c:	e146      	b.n	80010dc <__aeabi_dadd+0x5ec>
 8000e4e:	0742      	lsls	r2, r0, #29
 8000e50:	08db      	lsrs	r3, r3, #3
 8000e52:	4313      	orrs	r3, r2
 8000e54:	08c0      	lsrs	r0, r0, #3
 8000e56:	e77b      	b.n	8000d50 <__aeabi_dadd+0x260>
 8000e58:	000007ff 	.word	0x000007ff
 8000e5c:	ff7fffff 	.word	0xff7fffff
 8000e60:	000007fe 	.word	0x000007fe
 8000e64:	4647      	mov	r7, r8
 8000e66:	1a5c      	subs	r4, r3, r1
 8000e68:	1bc2      	subs	r2, r0, r7
 8000e6a:	42a3      	cmp	r3, r4
 8000e6c:	41bf      	sbcs	r7, r7
 8000e6e:	427f      	negs	r7, r7
 8000e70:	46b9      	mov	r9, r7
 8000e72:	0017      	movs	r7, r2
 8000e74:	464a      	mov	r2, r9
 8000e76:	1abf      	subs	r7, r7, r2
 8000e78:	023a      	lsls	r2, r7, #8
 8000e7a:	d500      	bpl.n	8000e7e <__aeabi_dadd+0x38e>
 8000e7c:	e08d      	b.n	8000f9a <__aeabi_dadd+0x4aa>
 8000e7e:	0023      	movs	r3, r4
 8000e80:	433b      	orrs	r3, r7
 8000e82:	d000      	beq.n	8000e86 <__aeabi_dadd+0x396>
 8000e84:	e68a      	b.n	8000b9c <__aeabi_dadd+0xac>
 8000e86:	2000      	movs	r0, #0
 8000e88:	2500      	movs	r5, #0
 8000e8a:	e761      	b.n	8000d50 <__aeabi_dadd+0x260>
 8000e8c:	4cb4      	ldr	r4, [pc, #720]	; (8001160 <__aeabi_dadd+0x670>)
 8000e8e:	45a1      	cmp	r9, r4
 8000e90:	d100      	bne.n	8000e94 <__aeabi_dadd+0x3a4>
 8000e92:	e0ad      	b.n	8000ff0 <__aeabi_dadd+0x500>
 8000e94:	2480      	movs	r4, #128	; 0x80
 8000e96:	0424      	lsls	r4, r4, #16
 8000e98:	4320      	orrs	r0, r4
 8000e9a:	4664      	mov	r4, ip
 8000e9c:	2c38      	cmp	r4, #56	; 0x38
 8000e9e:	dc3d      	bgt.n	8000f1c <__aeabi_dadd+0x42c>
 8000ea0:	4662      	mov	r2, ip
 8000ea2:	2c1f      	cmp	r4, #31
 8000ea4:	dd00      	ble.n	8000ea8 <__aeabi_dadd+0x3b8>
 8000ea6:	e0b7      	b.n	8001018 <__aeabi_dadd+0x528>
 8000ea8:	2520      	movs	r5, #32
 8000eaa:	001e      	movs	r6, r3
 8000eac:	1b2d      	subs	r5, r5, r4
 8000eae:	0004      	movs	r4, r0
 8000eb0:	40ab      	lsls	r3, r5
 8000eb2:	40ac      	lsls	r4, r5
 8000eb4:	40d6      	lsrs	r6, r2
 8000eb6:	40d0      	lsrs	r0, r2
 8000eb8:	4642      	mov	r2, r8
 8000eba:	1e5d      	subs	r5, r3, #1
 8000ebc:	41ab      	sbcs	r3, r5
 8000ebe:	4334      	orrs	r4, r6
 8000ec0:	1a12      	subs	r2, r2, r0
 8000ec2:	4690      	mov	r8, r2
 8000ec4:	4323      	orrs	r3, r4
 8000ec6:	e02c      	b.n	8000f22 <__aeabi_dadd+0x432>
 8000ec8:	0742      	lsls	r2, r0, #29
 8000eca:	08db      	lsrs	r3, r3, #3
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	08c0      	lsrs	r0, r0, #3
 8000ed0:	e73b      	b.n	8000d4a <__aeabi_dadd+0x25a>
 8000ed2:	185c      	adds	r4, r3, r1
 8000ed4:	429c      	cmp	r4, r3
 8000ed6:	419b      	sbcs	r3, r3
 8000ed8:	4440      	add	r0, r8
 8000eda:	425b      	negs	r3, r3
 8000edc:	18c7      	adds	r7, r0, r3
 8000ede:	2601      	movs	r6, #1
 8000ee0:	023b      	lsls	r3, r7, #8
 8000ee2:	d400      	bmi.n	8000ee6 <__aeabi_dadd+0x3f6>
 8000ee4:	e729      	b.n	8000d3a <__aeabi_dadd+0x24a>
 8000ee6:	2602      	movs	r6, #2
 8000ee8:	4a9e      	ldr	r2, [pc, #632]	; (8001164 <__aeabi_dadd+0x674>)
 8000eea:	0863      	lsrs	r3, r4, #1
 8000eec:	4017      	ands	r7, r2
 8000eee:	2201      	movs	r2, #1
 8000ef0:	4014      	ands	r4, r2
 8000ef2:	431c      	orrs	r4, r3
 8000ef4:	07fb      	lsls	r3, r7, #31
 8000ef6:	431c      	orrs	r4, r3
 8000ef8:	087f      	lsrs	r7, r7, #1
 8000efa:	e673      	b.n	8000be4 <__aeabi_dadd+0xf4>
 8000efc:	4644      	mov	r4, r8
 8000efe:	3a20      	subs	r2, #32
 8000f00:	40d4      	lsrs	r4, r2
 8000f02:	4662      	mov	r2, ip
 8000f04:	2a20      	cmp	r2, #32
 8000f06:	d005      	beq.n	8000f14 <__aeabi_dadd+0x424>
 8000f08:	4667      	mov	r7, ip
 8000f0a:	2240      	movs	r2, #64	; 0x40
 8000f0c:	1bd2      	subs	r2, r2, r7
 8000f0e:	4647      	mov	r7, r8
 8000f10:	4097      	lsls	r7, r2
 8000f12:	4339      	orrs	r1, r7
 8000f14:	1e4a      	subs	r2, r1, #1
 8000f16:	4191      	sbcs	r1, r2
 8000f18:	4321      	orrs	r1, r4
 8000f1a:	e635      	b.n	8000b88 <__aeabi_dadd+0x98>
 8000f1c:	4303      	orrs	r3, r0
 8000f1e:	1e58      	subs	r0, r3, #1
 8000f20:	4183      	sbcs	r3, r0
 8000f22:	1acc      	subs	r4, r1, r3
 8000f24:	42a1      	cmp	r1, r4
 8000f26:	41bf      	sbcs	r7, r7
 8000f28:	4643      	mov	r3, r8
 8000f2a:	427f      	negs	r7, r7
 8000f2c:	4655      	mov	r5, sl
 8000f2e:	464e      	mov	r6, r9
 8000f30:	1bdf      	subs	r7, r3, r7
 8000f32:	e62e      	b.n	8000b92 <__aeabi_dadd+0xa2>
 8000f34:	0002      	movs	r2, r0
 8000f36:	431a      	orrs	r2, r3
 8000f38:	d100      	bne.n	8000f3c <__aeabi_dadd+0x44c>
 8000f3a:	e0bd      	b.n	80010b8 <__aeabi_dadd+0x5c8>
 8000f3c:	4662      	mov	r2, ip
 8000f3e:	4664      	mov	r4, ip
 8000f40:	3a01      	subs	r2, #1
 8000f42:	2c01      	cmp	r4, #1
 8000f44:	d100      	bne.n	8000f48 <__aeabi_dadd+0x458>
 8000f46:	e0e5      	b.n	8001114 <__aeabi_dadd+0x624>
 8000f48:	4c85      	ldr	r4, [pc, #532]	; (8001160 <__aeabi_dadd+0x670>)
 8000f4a:	45a4      	cmp	ip, r4
 8000f4c:	d058      	beq.n	8001000 <__aeabi_dadd+0x510>
 8000f4e:	4694      	mov	ip, r2
 8000f50:	e749      	b.n	8000de6 <__aeabi_dadd+0x2f6>
 8000f52:	4664      	mov	r4, ip
 8000f54:	2220      	movs	r2, #32
 8000f56:	1b12      	subs	r2, r2, r4
 8000f58:	4644      	mov	r4, r8
 8000f5a:	4094      	lsls	r4, r2
 8000f5c:	000f      	movs	r7, r1
 8000f5e:	46a1      	mov	r9, r4
 8000f60:	4664      	mov	r4, ip
 8000f62:	4091      	lsls	r1, r2
 8000f64:	40e7      	lsrs	r7, r4
 8000f66:	464c      	mov	r4, r9
 8000f68:	1e4a      	subs	r2, r1, #1
 8000f6a:	4191      	sbcs	r1, r2
 8000f6c:	433c      	orrs	r4, r7
 8000f6e:	4642      	mov	r2, r8
 8000f70:	430c      	orrs	r4, r1
 8000f72:	4661      	mov	r1, ip
 8000f74:	40ca      	lsrs	r2, r1
 8000f76:	1880      	adds	r0, r0, r2
 8000f78:	e6f4      	b.n	8000d64 <__aeabi_dadd+0x274>
 8000f7a:	4c79      	ldr	r4, [pc, #484]	; (8001160 <__aeabi_dadd+0x670>)
 8000f7c:	42a2      	cmp	r2, r4
 8000f7e:	d100      	bne.n	8000f82 <__aeabi_dadd+0x492>
 8000f80:	e6fd      	b.n	8000d7e <__aeabi_dadd+0x28e>
 8000f82:	1859      	adds	r1, r3, r1
 8000f84:	4299      	cmp	r1, r3
 8000f86:	419b      	sbcs	r3, r3
 8000f88:	4440      	add	r0, r8
 8000f8a:	425f      	negs	r7, r3
 8000f8c:	19c7      	adds	r7, r0, r7
 8000f8e:	07fc      	lsls	r4, r7, #31
 8000f90:	0849      	lsrs	r1, r1, #1
 8000f92:	0016      	movs	r6, r2
 8000f94:	430c      	orrs	r4, r1
 8000f96:	087f      	lsrs	r7, r7, #1
 8000f98:	e6cf      	b.n	8000d3a <__aeabi_dadd+0x24a>
 8000f9a:	1acc      	subs	r4, r1, r3
 8000f9c:	42a1      	cmp	r1, r4
 8000f9e:	41bf      	sbcs	r7, r7
 8000fa0:	4643      	mov	r3, r8
 8000fa2:	427f      	negs	r7, r7
 8000fa4:	1a18      	subs	r0, r3, r0
 8000fa6:	4655      	mov	r5, sl
 8000fa8:	1bc7      	subs	r7, r0, r7
 8000faa:	e5f7      	b.n	8000b9c <__aeabi_dadd+0xac>
 8000fac:	08c9      	lsrs	r1, r1, #3
 8000fae:	077b      	lsls	r3, r7, #29
 8000fb0:	4655      	mov	r5, sl
 8000fb2:	430b      	orrs	r3, r1
 8000fb4:	08f8      	lsrs	r0, r7, #3
 8000fb6:	e6c8      	b.n	8000d4a <__aeabi_dadd+0x25a>
 8000fb8:	2c00      	cmp	r4, #0
 8000fba:	d000      	beq.n	8000fbe <__aeabi_dadd+0x4ce>
 8000fbc:	e081      	b.n	80010c2 <__aeabi_dadd+0x5d2>
 8000fbe:	4643      	mov	r3, r8
 8000fc0:	430b      	orrs	r3, r1
 8000fc2:	d115      	bne.n	8000ff0 <__aeabi_dadd+0x500>
 8000fc4:	2080      	movs	r0, #128	; 0x80
 8000fc6:	2500      	movs	r5, #0
 8000fc8:	0300      	lsls	r0, r0, #12
 8000fca:	e6e3      	b.n	8000d94 <__aeabi_dadd+0x2a4>
 8000fcc:	1a5c      	subs	r4, r3, r1
 8000fce:	42a3      	cmp	r3, r4
 8000fd0:	419b      	sbcs	r3, r3
 8000fd2:	1bc7      	subs	r7, r0, r7
 8000fd4:	425b      	negs	r3, r3
 8000fd6:	2601      	movs	r6, #1
 8000fd8:	1aff      	subs	r7, r7, r3
 8000fda:	e5da      	b.n	8000b92 <__aeabi_dadd+0xa2>
 8000fdc:	0742      	lsls	r2, r0, #29
 8000fde:	08db      	lsrs	r3, r3, #3
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	08c0      	lsrs	r0, r0, #3
 8000fe4:	e6d2      	b.n	8000d8c <__aeabi_dadd+0x29c>
 8000fe6:	0742      	lsls	r2, r0, #29
 8000fe8:	08db      	lsrs	r3, r3, #3
 8000fea:	4313      	orrs	r3, r2
 8000fec:	08c0      	lsrs	r0, r0, #3
 8000fee:	e6ac      	b.n	8000d4a <__aeabi_dadd+0x25a>
 8000ff0:	4643      	mov	r3, r8
 8000ff2:	4642      	mov	r2, r8
 8000ff4:	08c9      	lsrs	r1, r1, #3
 8000ff6:	075b      	lsls	r3, r3, #29
 8000ff8:	4655      	mov	r5, sl
 8000ffa:	430b      	orrs	r3, r1
 8000ffc:	08d0      	lsrs	r0, r2, #3
 8000ffe:	e6c5      	b.n	8000d8c <__aeabi_dadd+0x29c>
 8001000:	4643      	mov	r3, r8
 8001002:	4642      	mov	r2, r8
 8001004:	075b      	lsls	r3, r3, #29
 8001006:	08c9      	lsrs	r1, r1, #3
 8001008:	430b      	orrs	r3, r1
 800100a:	08d0      	lsrs	r0, r2, #3
 800100c:	e6be      	b.n	8000d8c <__aeabi_dadd+0x29c>
 800100e:	4303      	orrs	r3, r0
 8001010:	001c      	movs	r4, r3
 8001012:	1e63      	subs	r3, r4, #1
 8001014:	419c      	sbcs	r4, r3
 8001016:	e6fc      	b.n	8000e12 <__aeabi_dadd+0x322>
 8001018:	0002      	movs	r2, r0
 800101a:	3c20      	subs	r4, #32
 800101c:	40e2      	lsrs	r2, r4
 800101e:	0014      	movs	r4, r2
 8001020:	4662      	mov	r2, ip
 8001022:	2a20      	cmp	r2, #32
 8001024:	d003      	beq.n	800102e <__aeabi_dadd+0x53e>
 8001026:	2540      	movs	r5, #64	; 0x40
 8001028:	1aad      	subs	r5, r5, r2
 800102a:	40a8      	lsls	r0, r5
 800102c:	4303      	orrs	r3, r0
 800102e:	1e58      	subs	r0, r3, #1
 8001030:	4183      	sbcs	r3, r0
 8001032:	4323      	orrs	r3, r4
 8001034:	e775      	b.n	8000f22 <__aeabi_dadd+0x432>
 8001036:	2a00      	cmp	r2, #0
 8001038:	d0e2      	beq.n	8001000 <__aeabi_dadd+0x510>
 800103a:	003a      	movs	r2, r7
 800103c:	430a      	orrs	r2, r1
 800103e:	d0cd      	beq.n	8000fdc <__aeabi_dadd+0x4ec>
 8001040:	0742      	lsls	r2, r0, #29
 8001042:	08db      	lsrs	r3, r3, #3
 8001044:	4313      	orrs	r3, r2
 8001046:	2280      	movs	r2, #128	; 0x80
 8001048:	08c0      	lsrs	r0, r0, #3
 800104a:	0312      	lsls	r2, r2, #12
 800104c:	4210      	tst	r0, r2
 800104e:	d006      	beq.n	800105e <__aeabi_dadd+0x56e>
 8001050:	08fc      	lsrs	r4, r7, #3
 8001052:	4214      	tst	r4, r2
 8001054:	d103      	bne.n	800105e <__aeabi_dadd+0x56e>
 8001056:	0020      	movs	r0, r4
 8001058:	08cb      	lsrs	r3, r1, #3
 800105a:	077a      	lsls	r2, r7, #29
 800105c:	4313      	orrs	r3, r2
 800105e:	0f5a      	lsrs	r2, r3, #29
 8001060:	00db      	lsls	r3, r3, #3
 8001062:	0752      	lsls	r2, r2, #29
 8001064:	08db      	lsrs	r3, r3, #3
 8001066:	4313      	orrs	r3, r2
 8001068:	e690      	b.n	8000d8c <__aeabi_dadd+0x29c>
 800106a:	4643      	mov	r3, r8
 800106c:	430b      	orrs	r3, r1
 800106e:	d100      	bne.n	8001072 <__aeabi_dadd+0x582>
 8001070:	e709      	b.n	8000e86 <__aeabi_dadd+0x396>
 8001072:	4643      	mov	r3, r8
 8001074:	4642      	mov	r2, r8
 8001076:	08c9      	lsrs	r1, r1, #3
 8001078:	075b      	lsls	r3, r3, #29
 800107a:	4655      	mov	r5, sl
 800107c:	430b      	orrs	r3, r1
 800107e:	08d0      	lsrs	r0, r2, #3
 8001080:	e666      	b.n	8000d50 <__aeabi_dadd+0x260>
 8001082:	1acc      	subs	r4, r1, r3
 8001084:	42a1      	cmp	r1, r4
 8001086:	4189      	sbcs	r1, r1
 8001088:	1a3f      	subs	r7, r7, r0
 800108a:	4249      	negs	r1, r1
 800108c:	4655      	mov	r5, sl
 800108e:	2601      	movs	r6, #1
 8001090:	1a7f      	subs	r7, r7, r1
 8001092:	e57e      	b.n	8000b92 <__aeabi_dadd+0xa2>
 8001094:	4642      	mov	r2, r8
 8001096:	1a5c      	subs	r4, r3, r1
 8001098:	1a87      	subs	r7, r0, r2
 800109a:	42a3      	cmp	r3, r4
 800109c:	4192      	sbcs	r2, r2
 800109e:	4252      	negs	r2, r2
 80010a0:	1abf      	subs	r7, r7, r2
 80010a2:	023a      	lsls	r2, r7, #8
 80010a4:	d53d      	bpl.n	8001122 <__aeabi_dadd+0x632>
 80010a6:	1acc      	subs	r4, r1, r3
 80010a8:	42a1      	cmp	r1, r4
 80010aa:	4189      	sbcs	r1, r1
 80010ac:	4643      	mov	r3, r8
 80010ae:	4249      	negs	r1, r1
 80010b0:	1a1f      	subs	r7, r3, r0
 80010b2:	4655      	mov	r5, sl
 80010b4:	1a7f      	subs	r7, r7, r1
 80010b6:	e595      	b.n	8000be4 <__aeabi_dadd+0xf4>
 80010b8:	077b      	lsls	r3, r7, #29
 80010ba:	08c9      	lsrs	r1, r1, #3
 80010bc:	430b      	orrs	r3, r1
 80010be:	08f8      	lsrs	r0, r7, #3
 80010c0:	e643      	b.n	8000d4a <__aeabi_dadd+0x25a>
 80010c2:	4644      	mov	r4, r8
 80010c4:	08db      	lsrs	r3, r3, #3
 80010c6:	430c      	orrs	r4, r1
 80010c8:	d130      	bne.n	800112c <__aeabi_dadd+0x63c>
 80010ca:	0742      	lsls	r2, r0, #29
 80010cc:	4313      	orrs	r3, r2
 80010ce:	08c0      	lsrs	r0, r0, #3
 80010d0:	e65c      	b.n	8000d8c <__aeabi_dadd+0x29c>
 80010d2:	077b      	lsls	r3, r7, #29
 80010d4:	08c9      	lsrs	r1, r1, #3
 80010d6:	430b      	orrs	r3, r1
 80010d8:	08f8      	lsrs	r0, r7, #3
 80010da:	e639      	b.n	8000d50 <__aeabi_dadd+0x260>
 80010dc:	185c      	adds	r4, r3, r1
 80010de:	429c      	cmp	r4, r3
 80010e0:	419b      	sbcs	r3, r3
 80010e2:	4440      	add	r0, r8
 80010e4:	425b      	negs	r3, r3
 80010e6:	18c7      	adds	r7, r0, r3
 80010e8:	023b      	lsls	r3, r7, #8
 80010ea:	d400      	bmi.n	80010ee <__aeabi_dadd+0x5fe>
 80010ec:	e625      	b.n	8000d3a <__aeabi_dadd+0x24a>
 80010ee:	4b1d      	ldr	r3, [pc, #116]	; (8001164 <__aeabi_dadd+0x674>)
 80010f0:	2601      	movs	r6, #1
 80010f2:	401f      	ands	r7, r3
 80010f4:	e621      	b.n	8000d3a <__aeabi_dadd+0x24a>
 80010f6:	0004      	movs	r4, r0
 80010f8:	3a20      	subs	r2, #32
 80010fa:	40d4      	lsrs	r4, r2
 80010fc:	4662      	mov	r2, ip
 80010fe:	2a20      	cmp	r2, #32
 8001100:	d004      	beq.n	800110c <__aeabi_dadd+0x61c>
 8001102:	2240      	movs	r2, #64	; 0x40
 8001104:	4666      	mov	r6, ip
 8001106:	1b92      	subs	r2, r2, r6
 8001108:	4090      	lsls	r0, r2
 800110a:	4303      	orrs	r3, r0
 800110c:	1e5a      	subs	r2, r3, #1
 800110e:	4193      	sbcs	r3, r2
 8001110:	431c      	orrs	r4, r3
 8001112:	e67e      	b.n	8000e12 <__aeabi_dadd+0x322>
 8001114:	185c      	adds	r4, r3, r1
 8001116:	428c      	cmp	r4, r1
 8001118:	4189      	sbcs	r1, r1
 800111a:	4440      	add	r0, r8
 800111c:	4249      	negs	r1, r1
 800111e:	1847      	adds	r7, r0, r1
 8001120:	e6dd      	b.n	8000ede <__aeabi_dadd+0x3ee>
 8001122:	0023      	movs	r3, r4
 8001124:	433b      	orrs	r3, r7
 8001126:	d100      	bne.n	800112a <__aeabi_dadd+0x63a>
 8001128:	e6ad      	b.n	8000e86 <__aeabi_dadd+0x396>
 800112a:	e606      	b.n	8000d3a <__aeabi_dadd+0x24a>
 800112c:	0744      	lsls	r4, r0, #29
 800112e:	4323      	orrs	r3, r4
 8001130:	2480      	movs	r4, #128	; 0x80
 8001132:	08c0      	lsrs	r0, r0, #3
 8001134:	0324      	lsls	r4, r4, #12
 8001136:	4220      	tst	r0, r4
 8001138:	d008      	beq.n	800114c <__aeabi_dadd+0x65c>
 800113a:	4642      	mov	r2, r8
 800113c:	08d6      	lsrs	r6, r2, #3
 800113e:	4226      	tst	r6, r4
 8001140:	d104      	bne.n	800114c <__aeabi_dadd+0x65c>
 8001142:	4655      	mov	r5, sl
 8001144:	0030      	movs	r0, r6
 8001146:	08cb      	lsrs	r3, r1, #3
 8001148:	0751      	lsls	r1, r2, #29
 800114a:	430b      	orrs	r3, r1
 800114c:	0f5a      	lsrs	r2, r3, #29
 800114e:	00db      	lsls	r3, r3, #3
 8001150:	08db      	lsrs	r3, r3, #3
 8001152:	0752      	lsls	r2, r2, #29
 8001154:	4313      	orrs	r3, r2
 8001156:	e619      	b.n	8000d8c <__aeabi_dadd+0x29c>
 8001158:	2300      	movs	r3, #0
 800115a:	4a01      	ldr	r2, [pc, #4]	; (8001160 <__aeabi_dadd+0x670>)
 800115c:	001f      	movs	r7, r3
 800115e:	e55e      	b.n	8000c1e <__aeabi_dadd+0x12e>
 8001160:	000007ff 	.word	0x000007ff
 8001164:	ff7fffff 	.word	0xff7fffff

08001168 <__aeabi_ddiv>:
 8001168:	b5f0      	push	{r4, r5, r6, r7, lr}
 800116a:	4657      	mov	r7, sl
 800116c:	464e      	mov	r6, r9
 800116e:	4645      	mov	r5, r8
 8001170:	46de      	mov	lr, fp
 8001172:	b5e0      	push	{r5, r6, r7, lr}
 8001174:	4681      	mov	r9, r0
 8001176:	0005      	movs	r5, r0
 8001178:	030c      	lsls	r4, r1, #12
 800117a:	0048      	lsls	r0, r1, #1
 800117c:	4692      	mov	sl, r2
 800117e:	001f      	movs	r7, r3
 8001180:	b085      	sub	sp, #20
 8001182:	0b24      	lsrs	r4, r4, #12
 8001184:	0d40      	lsrs	r0, r0, #21
 8001186:	0fce      	lsrs	r6, r1, #31
 8001188:	2800      	cmp	r0, #0
 800118a:	d100      	bne.n	800118e <__aeabi_ddiv+0x26>
 800118c:	e156      	b.n	800143c <__aeabi_ddiv+0x2d4>
 800118e:	4bd4      	ldr	r3, [pc, #848]	; (80014e0 <__aeabi_ddiv+0x378>)
 8001190:	4298      	cmp	r0, r3
 8001192:	d100      	bne.n	8001196 <__aeabi_ddiv+0x2e>
 8001194:	e172      	b.n	800147c <__aeabi_ddiv+0x314>
 8001196:	0f6b      	lsrs	r3, r5, #29
 8001198:	00e4      	lsls	r4, r4, #3
 800119a:	431c      	orrs	r4, r3
 800119c:	2380      	movs	r3, #128	; 0x80
 800119e:	041b      	lsls	r3, r3, #16
 80011a0:	4323      	orrs	r3, r4
 80011a2:	4698      	mov	r8, r3
 80011a4:	4bcf      	ldr	r3, [pc, #828]	; (80014e4 <__aeabi_ddiv+0x37c>)
 80011a6:	00ed      	lsls	r5, r5, #3
 80011a8:	469b      	mov	fp, r3
 80011aa:	2300      	movs	r3, #0
 80011ac:	4699      	mov	r9, r3
 80011ae:	4483      	add	fp, r0
 80011b0:	9300      	str	r3, [sp, #0]
 80011b2:	033c      	lsls	r4, r7, #12
 80011b4:	007b      	lsls	r3, r7, #1
 80011b6:	4650      	mov	r0, sl
 80011b8:	0b24      	lsrs	r4, r4, #12
 80011ba:	0d5b      	lsrs	r3, r3, #21
 80011bc:	0fff      	lsrs	r7, r7, #31
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d100      	bne.n	80011c4 <__aeabi_ddiv+0x5c>
 80011c2:	e11f      	b.n	8001404 <__aeabi_ddiv+0x29c>
 80011c4:	4ac6      	ldr	r2, [pc, #792]	; (80014e0 <__aeabi_ddiv+0x378>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d100      	bne.n	80011cc <__aeabi_ddiv+0x64>
 80011ca:	e162      	b.n	8001492 <__aeabi_ddiv+0x32a>
 80011cc:	49c5      	ldr	r1, [pc, #788]	; (80014e4 <__aeabi_ddiv+0x37c>)
 80011ce:	0f42      	lsrs	r2, r0, #29
 80011d0:	468c      	mov	ip, r1
 80011d2:	00e4      	lsls	r4, r4, #3
 80011d4:	4659      	mov	r1, fp
 80011d6:	4314      	orrs	r4, r2
 80011d8:	2280      	movs	r2, #128	; 0x80
 80011da:	4463      	add	r3, ip
 80011dc:	0412      	lsls	r2, r2, #16
 80011de:	1acb      	subs	r3, r1, r3
 80011e0:	4314      	orrs	r4, r2
 80011e2:	469b      	mov	fp, r3
 80011e4:	00c2      	lsls	r2, r0, #3
 80011e6:	2000      	movs	r0, #0
 80011e8:	0033      	movs	r3, r6
 80011ea:	407b      	eors	r3, r7
 80011ec:	469a      	mov	sl, r3
 80011ee:	464b      	mov	r3, r9
 80011f0:	2b0f      	cmp	r3, #15
 80011f2:	d827      	bhi.n	8001244 <__aeabi_ddiv+0xdc>
 80011f4:	49bc      	ldr	r1, [pc, #752]	; (80014e8 <__aeabi_ddiv+0x380>)
 80011f6:	009b      	lsls	r3, r3, #2
 80011f8:	58cb      	ldr	r3, [r1, r3]
 80011fa:	469f      	mov	pc, r3
 80011fc:	46b2      	mov	sl, r6
 80011fe:	9b00      	ldr	r3, [sp, #0]
 8001200:	2b02      	cmp	r3, #2
 8001202:	d016      	beq.n	8001232 <__aeabi_ddiv+0xca>
 8001204:	2b03      	cmp	r3, #3
 8001206:	d100      	bne.n	800120a <__aeabi_ddiv+0xa2>
 8001208:	e28e      	b.n	8001728 <__aeabi_ddiv+0x5c0>
 800120a:	2b01      	cmp	r3, #1
 800120c:	d000      	beq.n	8001210 <__aeabi_ddiv+0xa8>
 800120e:	e0d9      	b.n	80013c4 <__aeabi_ddiv+0x25c>
 8001210:	2300      	movs	r3, #0
 8001212:	2400      	movs	r4, #0
 8001214:	2500      	movs	r5, #0
 8001216:	4652      	mov	r2, sl
 8001218:	051b      	lsls	r3, r3, #20
 800121a:	4323      	orrs	r3, r4
 800121c:	07d2      	lsls	r2, r2, #31
 800121e:	4313      	orrs	r3, r2
 8001220:	0028      	movs	r0, r5
 8001222:	0019      	movs	r1, r3
 8001224:	b005      	add	sp, #20
 8001226:	bcf0      	pop	{r4, r5, r6, r7}
 8001228:	46bb      	mov	fp, r7
 800122a:	46b2      	mov	sl, r6
 800122c:	46a9      	mov	r9, r5
 800122e:	46a0      	mov	r8, r4
 8001230:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001232:	2400      	movs	r4, #0
 8001234:	2500      	movs	r5, #0
 8001236:	4baa      	ldr	r3, [pc, #680]	; (80014e0 <__aeabi_ddiv+0x378>)
 8001238:	e7ed      	b.n	8001216 <__aeabi_ddiv+0xae>
 800123a:	46ba      	mov	sl, r7
 800123c:	46a0      	mov	r8, r4
 800123e:	0015      	movs	r5, r2
 8001240:	9000      	str	r0, [sp, #0]
 8001242:	e7dc      	b.n	80011fe <__aeabi_ddiv+0x96>
 8001244:	4544      	cmp	r4, r8
 8001246:	d200      	bcs.n	800124a <__aeabi_ddiv+0xe2>
 8001248:	e1c7      	b.n	80015da <__aeabi_ddiv+0x472>
 800124a:	d100      	bne.n	800124e <__aeabi_ddiv+0xe6>
 800124c:	e1c2      	b.n	80015d4 <__aeabi_ddiv+0x46c>
 800124e:	2301      	movs	r3, #1
 8001250:	425b      	negs	r3, r3
 8001252:	469c      	mov	ip, r3
 8001254:	002e      	movs	r6, r5
 8001256:	4640      	mov	r0, r8
 8001258:	2500      	movs	r5, #0
 800125a:	44e3      	add	fp, ip
 800125c:	0223      	lsls	r3, r4, #8
 800125e:	0e14      	lsrs	r4, r2, #24
 8001260:	431c      	orrs	r4, r3
 8001262:	0c1b      	lsrs	r3, r3, #16
 8001264:	4699      	mov	r9, r3
 8001266:	0423      	lsls	r3, r4, #16
 8001268:	0c1f      	lsrs	r7, r3, #16
 800126a:	0212      	lsls	r2, r2, #8
 800126c:	4649      	mov	r1, r9
 800126e:	9200      	str	r2, [sp, #0]
 8001270:	9701      	str	r7, [sp, #4]
 8001272:	f7fe ffeb 	bl	800024c <__aeabi_uidivmod>
 8001276:	0002      	movs	r2, r0
 8001278:	437a      	muls	r2, r7
 800127a:	040b      	lsls	r3, r1, #16
 800127c:	0c31      	lsrs	r1, r6, #16
 800127e:	4680      	mov	r8, r0
 8001280:	4319      	orrs	r1, r3
 8001282:	428a      	cmp	r2, r1
 8001284:	d907      	bls.n	8001296 <__aeabi_ddiv+0x12e>
 8001286:	2301      	movs	r3, #1
 8001288:	425b      	negs	r3, r3
 800128a:	469c      	mov	ip, r3
 800128c:	1909      	adds	r1, r1, r4
 800128e:	44e0      	add	r8, ip
 8001290:	428c      	cmp	r4, r1
 8001292:	d800      	bhi.n	8001296 <__aeabi_ddiv+0x12e>
 8001294:	e207      	b.n	80016a6 <__aeabi_ddiv+0x53e>
 8001296:	1a88      	subs	r0, r1, r2
 8001298:	4649      	mov	r1, r9
 800129a:	f7fe ffd7 	bl	800024c <__aeabi_uidivmod>
 800129e:	0409      	lsls	r1, r1, #16
 80012a0:	468c      	mov	ip, r1
 80012a2:	0431      	lsls	r1, r6, #16
 80012a4:	4666      	mov	r6, ip
 80012a6:	9a01      	ldr	r2, [sp, #4]
 80012a8:	0c09      	lsrs	r1, r1, #16
 80012aa:	4342      	muls	r2, r0
 80012ac:	0003      	movs	r3, r0
 80012ae:	4331      	orrs	r1, r6
 80012b0:	428a      	cmp	r2, r1
 80012b2:	d904      	bls.n	80012be <__aeabi_ddiv+0x156>
 80012b4:	1909      	adds	r1, r1, r4
 80012b6:	3b01      	subs	r3, #1
 80012b8:	428c      	cmp	r4, r1
 80012ba:	d800      	bhi.n	80012be <__aeabi_ddiv+0x156>
 80012bc:	e1ed      	b.n	800169a <__aeabi_ddiv+0x532>
 80012be:	1a88      	subs	r0, r1, r2
 80012c0:	4642      	mov	r2, r8
 80012c2:	0412      	lsls	r2, r2, #16
 80012c4:	431a      	orrs	r2, r3
 80012c6:	4690      	mov	r8, r2
 80012c8:	4641      	mov	r1, r8
 80012ca:	9b00      	ldr	r3, [sp, #0]
 80012cc:	040e      	lsls	r6, r1, #16
 80012ce:	0c1b      	lsrs	r3, r3, #16
 80012d0:	001f      	movs	r7, r3
 80012d2:	9302      	str	r3, [sp, #8]
 80012d4:	9b00      	ldr	r3, [sp, #0]
 80012d6:	0c36      	lsrs	r6, r6, #16
 80012d8:	041b      	lsls	r3, r3, #16
 80012da:	0c19      	lsrs	r1, r3, #16
 80012dc:	000b      	movs	r3, r1
 80012de:	4373      	muls	r3, r6
 80012e0:	0c12      	lsrs	r2, r2, #16
 80012e2:	437e      	muls	r6, r7
 80012e4:	9103      	str	r1, [sp, #12]
 80012e6:	4351      	muls	r1, r2
 80012e8:	437a      	muls	r2, r7
 80012ea:	0c1f      	lsrs	r7, r3, #16
 80012ec:	46bc      	mov	ip, r7
 80012ee:	1876      	adds	r6, r6, r1
 80012f0:	4466      	add	r6, ip
 80012f2:	42b1      	cmp	r1, r6
 80012f4:	d903      	bls.n	80012fe <__aeabi_ddiv+0x196>
 80012f6:	2180      	movs	r1, #128	; 0x80
 80012f8:	0249      	lsls	r1, r1, #9
 80012fa:	468c      	mov	ip, r1
 80012fc:	4462      	add	r2, ip
 80012fe:	0c31      	lsrs	r1, r6, #16
 8001300:	188a      	adds	r2, r1, r2
 8001302:	0431      	lsls	r1, r6, #16
 8001304:	041e      	lsls	r6, r3, #16
 8001306:	0c36      	lsrs	r6, r6, #16
 8001308:	198e      	adds	r6, r1, r6
 800130a:	4290      	cmp	r0, r2
 800130c:	d302      	bcc.n	8001314 <__aeabi_ddiv+0x1ac>
 800130e:	d112      	bne.n	8001336 <__aeabi_ddiv+0x1ce>
 8001310:	42b5      	cmp	r5, r6
 8001312:	d210      	bcs.n	8001336 <__aeabi_ddiv+0x1ce>
 8001314:	4643      	mov	r3, r8
 8001316:	1e59      	subs	r1, r3, #1
 8001318:	9b00      	ldr	r3, [sp, #0]
 800131a:	469c      	mov	ip, r3
 800131c:	4465      	add	r5, ip
 800131e:	001f      	movs	r7, r3
 8001320:	429d      	cmp	r5, r3
 8001322:	419b      	sbcs	r3, r3
 8001324:	425b      	negs	r3, r3
 8001326:	191b      	adds	r3, r3, r4
 8001328:	18c0      	adds	r0, r0, r3
 800132a:	4284      	cmp	r4, r0
 800132c:	d200      	bcs.n	8001330 <__aeabi_ddiv+0x1c8>
 800132e:	e1a0      	b.n	8001672 <__aeabi_ddiv+0x50a>
 8001330:	d100      	bne.n	8001334 <__aeabi_ddiv+0x1cc>
 8001332:	e19b      	b.n	800166c <__aeabi_ddiv+0x504>
 8001334:	4688      	mov	r8, r1
 8001336:	1bae      	subs	r6, r5, r6
 8001338:	42b5      	cmp	r5, r6
 800133a:	41ad      	sbcs	r5, r5
 800133c:	1a80      	subs	r0, r0, r2
 800133e:	426d      	negs	r5, r5
 8001340:	1b40      	subs	r0, r0, r5
 8001342:	4284      	cmp	r4, r0
 8001344:	d100      	bne.n	8001348 <__aeabi_ddiv+0x1e0>
 8001346:	e1d5      	b.n	80016f4 <__aeabi_ddiv+0x58c>
 8001348:	4649      	mov	r1, r9
 800134a:	f7fe ff7f 	bl	800024c <__aeabi_uidivmod>
 800134e:	9a01      	ldr	r2, [sp, #4]
 8001350:	040b      	lsls	r3, r1, #16
 8001352:	4342      	muls	r2, r0
 8001354:	0c31      	lsrs	r1, r6, #16
 8001356:	0005      	movs	r5, r0
 8001358:	4319      	orrs	r1, r3
 800135a:	428a      	cmp	r2, r1
 800135c:	d900      	bls.n	8001360 <__aeabi_ddiv+0x1f8>
 800135e:	e16c      	b.n	800163a <__aeabi_ddiv+0x4d2>
 8001360:	1a88      	subs	r0, r1, r2
 8001362:	4649      	mov	r1, r9
 8001364:	f7fe ff72 	bl	800024c <__aeabi_uidivmod>
 8001368:	9a01      	ldr	r2, [sp, #4]
 800136a:	0436      	lsls	r6, r6, #16
 800136c:	4342      	muls	r2, r0
 800136e:	0409      	lsls	r1, r1, #16
 8001370:	0c36      	lsrs	r6, r6, #16
 8001372:	0003      	movs	r3, r0
 8001374:	430e      	orrs	r6, r1
 8001376:	42b2      	cmp	r2, r6
 8001378:	d900      	bls.n	800137c <__aeabi_ddiv+0x214>
 800137a:	e153      	b.n	8001624 <__aeabi_ddiv+0x4bc>
 800137c:	9803      	ldr	r0, [sp, #12]
 800137e:	1ab6      	subs	r6, r6, r2
 8001380:	0002      	movs	r2, r0
 8001382:	042d      	lsls	r5, r5, #16
 8001384:	431d      	orrs	r5, r3
 8001386:	9f02      	ldr	r7, [sp, #8]
 8001388:	042b      	lsls	r3, r5, #16
 800138a:	0c1b      	lsrs	r3, r3, #16
 800138c:	435a      	muls	r2, r3
 800138e:	437b      	muls	r3, r7
 8001390:	469c      	mov	ip, r3
 8001392:	0c29      	lsrs	r1, r5, #16
 8001394:	4348      	muls	r0, r1
 8001396:	0c13      	lsrs	r3, r2, #16
 8001398:	4484      	add	ip, r0
 800139a:	4463      	add	r3, ip
 800139c:	4379      	muls	r1, r7
 800139e:	4298      	cmp	r0, r3
 80013a0:	d903      	bls.n	80013aa <__aeabi_ddiv+0x242>
 80013a2:	2080      	movs	r0, #128	; 0x80
 80013a4:	0240      	lsls	r0, r0, #9
 80013a6:	4684      	mov	ip, r0
 80013a8:	4461      	add	r1, ip
 80013aa:	0c18      	lsrs	r0, r3, #16
 80013ac:	0412      	lsls	r2, r2, #16
 80013ae:	041b      	lsls	r3, r3, #16
 80013b0:	0c12      	lsrs	r2, r2, #16
 80013b2:	1841      	adds	r1, r0, r1
 80013b4:	189b      	adds	r3, r3, r2
 80013b6:	428e      	cmp	r6, r1
 80013b8:	d200      	bcs.n	80013bc <__aeabi_ddiv+0x254>
 80013ba:	e0ff      	b.n	80015bc <__aeabi_ddiv+0x454>
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x258>
 80013be:	e0fa      	b.n	80015b6 <__aeabi_ddiv+0x44e>
 80013c0:	2301      	movs	r3, #1
 80013c2:	431d      	orrs	r5, r3
 80013c4:	4a49      	ldr	r2, [pc, #292]	; (80014ec <__aeabi_ddiv+0x384>)
 80013c6:	445a      	add	r2, fp
 80013c8:	2a00      	cmp	r2, #0
 80013ca:	dc00      	bgt.n	80013ce <__aeabi_ddiv+0x266>
 80013cc:	e0aa      	b.n	8001524 <__aeabi_ddiv+0x3bc>
 80013ce:	076b      	lsls	r3, r5, #29
 80013d0:	d000      	beq.n	80013d4 <__aeabi_ddiv+0x26c>
 80013d2:	e13d      	b.n	8001650 <__aeabi_ddiv+0x4e8>
 80013d4:	08ed      	lsrs	r5, r5, #3
 80013d6:	4643      	mov	r3, r8
 80013d8:	01db      	lsls	r3, r3, #7
 80013da:	d506      	bpl.n	80013ea <__aeabi_ddiv+0x282>
 80013dc:	4642      	mov	r2, r8
 80013de:	4b44      	ldr	r3, [pc, #272]	; (80014f0 <__aeabi_ddiv+0x388>)
 80013e0:	401a      	ands	r2, r3
 80013e2:	4690      	mov	r8, r2
 80013e4:	2280      	movs	r2, #128	; 0x80
 80013e6:	00d2      	lsls	r2, r2, #3
 80013e8:	445a      	add	r2, fp
 80013ea:	4b42      	ldr	r3, [pc, #264]	; (80014f4 <__aeabi_ddiv+0x38c>)
 80013ec:	429a      	cmp	r2, r3
 80013ee:	dd00      	ble.n	80013f2 <__aeabi_ddiv+0x28a>
 80013f0:	e71f      	b.n	8001232 <__aeabi_ddiv+0xca>
 80013f2:	4643      	mov	r3, r8
 80013f4:	075b      	lsls	r3, r3, #29
 80013f6:	431d      	orrs	r5, r3
 80013f8:	4643      	mov	r3, r8
 80013fa:	0552      	lsls	r2, r2, #21
 80013fc:	025c      	lsls	r4, r3, #9
 80013fe:	0b24      	lsrs	r4, r4, #12
 8001400:	0d53      	lsrs	r3, r2, #21
 8001402:	e708      	b.n	8001216 <__aeabi_ddiv+0xae>
 8001404:	4652      	mov	r2, sl
 8001406:	4322      	orrs	r2, r4
 8001408:	d100      	bne.n	800140c <__aeabi_ddiv+0x2a4>
 800140a:	e07b      	b.n	8001504 <__aeabi_ddiv+0x39c>
 800140c:	2c00      	cmp	r4, #0
 800140e:	d100      	bne.n	8001412 <__aeabi_ddiv+0x2aa>
 8001410:	e0fa      	b.n	8001608 <__aeabi_ddiv+0x4a0>
 8001412:	0020      	movs	r0, r4
 8001414:	f001 f99a 	bl	800274c <__clzsi2>
 8001418:	0002      	movs	r2, r0
 800141a:	3a0b      	subs	r2, #11
 800141c:	231d      	movs	r3, #29
 800141e:	0001      	movs	r1, r0
 8001420:	1a9b      	subs	r3, r3, r2
 8001422:	4652      	mov	r2, sl
 8001424:	3908      	subs	r1, #8
 8001426:	40da      	lsrs	r2, r3
 8001428:	408c      	lsls	r4, r1
 800142a:	4314      	orrs	r4, r2
 800142c:	4652      	mov	r2, sl
 800142e:	408a      	lsls	r2, r1
 8001430:	4b31      	ldr	r3, [pc, #196]	; (80014f8 <__aeabi_ddiv+0x390>)
 8001432:	4458      	add	r0, fp
 8001434:	469b      	mov	fp, r3
 8001436:	4483      	add	fp, r0
 8001438:	2000      	movs	r0, #0
 800143a:	e6d5      	b.n	80011e8 <__aeabi_ddiv+0x80>
 800143c:	464b      	mov	r3, r9
 800143e:	4323      	orrs	r3, r4
 8001440:	4698      	mov	r8, r3
 8001442:	d044      	beq.n	80014ce <__aeabi_ddiv+0x366>
 8001444:	2c00      	cmp	r4, #0
 8001446:	d100      	bne.n	800144a <__aeabi_ddiv+0x2e2>
 8001448:	e0ce      	b.n	80015e8 <__aeabi_ddiv+0x480>
 800144a:	0020      	movs	r0, r4
 800144c:	f001 f97e 	bl	800274c <__clzsi2>
 8001450:	0001      	movs	r1, r0
 8001452:	0002      	movs	r2, r0
 8001454:	390b      	subs	r1, #11
 8001456:	231d      	movs	r3, #29
 8001458:	1a5b      	subs	r3, r3, r1
 800145a:	4649      	mov	r1, r9
 800145c:	0010      	movs	r0, r2
 800145e:	40d9      	lsrs	r1, r3
 8001460:	3808      	subs	r0, #8
 8001462:	4084      	lsls	r4, r0
 8001464:	000b      	movs	r3, r1
 8001466:	464d      	mov	r5, r9
 8001468:	4323      	orrs	r3, r4
 800146a:	4698      	mov	r8, r3
 800146c:	4085      	lsls	r5, r0
 800146e:	4823      	ldr	r0, [pc, #140]	; (80014fc <__aeabi_ddiv+0x394>)
 8001470:	1a83      	subs	r3, r0, r2
 8001472:	469b      	mov	fp, r3
 8001474:	2300      	movs	r3, #0
 8001476:	4699      	mov	r9, r3
 8001478:	9300      	str	r3, [sp, #0]
 800147a:	e69a      	b.n	80011b2 <__aeabi_ddiv+0x4a>
 800147c:	464b      	mov	r3, r9
 800147e:	4323      	orrs	r3, r4
 8001480:	4698      	mov	r8, r3
 8001482:	d11d      	bne.n	80014c0 <__aeabi_ddiv+0x358>
 8001484:	2308      	movs	r3, #8
 8001486:	4699      	mov	r9, r3
 8001488:	3b06      	subs	r3, #6
 800148a:	2500      	movs	r5, #0
 800148c:	4683      	mov	fp, r0
 800148e:	9300      	str	r3, [sp, #0]
 8001490:	e68f      	b.n	80011b2 <__aeabi_ddiv+0x4a>
 8001492:	4652      	mov	r2, sl
 8001494:	4322      	orrs	r2, r4
 8001496:	d109      	bne.n	80014ac <__aeabi_ddiv+0x344>
 8001498:	2302      	movs	r3, #2
 800149a:	4649      	mov	r1, r9
 800149c:	4319      	orrs	r1, r3
 800149e:	4b18      	ldr	r3, [pc, #96]	; (8001500 <__aeabi_ddiv+0x398>)
 80014a0:	4689      	mov	r9, r1
 80014a2:	469c      	mov	ip, r3
 80014a4:	2400      	movs	r4, #0
 80014a6:	2002      	movs	r0, #2
 80014a8:	44e3      	add	fp, ip
 80014aa:	e69d      	b.n	80011e8 <__aeabi_ddiv+0x80>
 80014ac:	2303      	movs	r3, #3
 80014ae:	464a      	mov	r2, r9
 80014b0:	431a      	orrs	r2, r3
 80014b2:	4b13      	ldr	r3, [pc, #76]	; (8001500 <__aeabi_ddiv+0x398>)
 80014b4:	4691      	mov	r9, r2
 80014b6:	469c      	mov	ip, r3
 80014b8:	4652      	mov	r2, sl
 80014ba:	2003      	movs	r0, #3
 80014bc:	44e3      	add	fp, ip
 80014be:	e693      	b.n	80011e8 <__aeabi_ddiv+0x80>
 80014c0:	230c      	movs	r3, #12
 80014c2:	4699      	mov	r9, r3
 80014c4:	3b09      	subs	r3, #9
 80014c6:	46a0      	mov	r8, r4
 80014c8:	4683      	mov	fp, r0
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	e671      	b.n	80011b2 <__aeabi_ddiv+0x4a>
 80014ce:	2304      	movs	r3, #4
 80014d0:	4699      	mov	r9, r3
 80014d2:	2300      	movs	r3, #0
 80014d4:	469b      	mov	fp, r3
 80014d6:	3301      	adds	r3, #1
 80014d8:	2500      	movs	r5, #0
 80014da:	9300      	str	r3, [sp, #0]
 80014dc:	e669      	b.n	80011b2 <__aeabi_ddiv+0x4a>
 80014de:	46c0      	nop			; (mov r8, r8)
 80014e0:	000007ff 	.word	0x000007ff
 80014e4:	fffffc01 	.word	0xfffffc01
 80014e8:	080099d0 	.word	0x080099d0
 80014ec:	000003ff 	.word	0x000003ff
 80014f0:	feffffff 	.word	0xfeffffff
 80014f4:	000007fe 	.word	0x000007fe
 80014f8:	000003f3 	.word	0x000003f3
 80014fc:	fffffc0d 	.word	0xfffffc0d
 8001500:	fffff801 	.word	0xfffff801
 8001504:	4649      	mov	r1, r9
 8001506:	2301      	movs	r3, #1
 8001508:	4319      	orrs	r1, r3
 800150a:	4689      	mov	r9, r1
 800150c:	2400      	movs	r4, #0
 800150e:	2001      	movs	r0, #1
 8001510:	e66a      	b.n	80011e8 <__aeabi_ddiv+0x80>
 8001512:	2300      	movs	r3, #0
 8001514:	2480      	movs	r4, #128	; 0x80
 8001516:	469a      	mov	sl, r3
 8001518:	2500      	movs	r5, #0
 800151a:	4b8a      	ldr	r3, [pc, #552]	; (8001744 <__aeabi_ddiv+0x5dc>)
 800151c:	0324      	lsls	r4, r4, #12
 800151e:	e67a      	b.n	8001216 <__aeabi_ddiv+0xae>
 8001520:	2501      	movs	r5, #1
 8001522:	426d      	negs	r5, r5
 8001524:	2301      	movs	r3, #1
 8001526:	1a9b      	subs	r3, r3, r2
 8001528:	2b38      	cmp	r3, #56	; 0x38
 800152a:	dd00      	ble.n	800152e <__aeabi_ddiv+0x3c6>
 800152c:	e670      	b.n	8001210 <__aeabi_ddiv+0xa8>
 800152e:	2b1f      	cmp	r3, #31
 8001530:	dc00      	bgt.n	8001534 <__aeabi_ddiv+0x3cc>
 8001532:	e0bf      	b.n	80016b4 <__aeabi_ddiv+0x54c>
 8001534:	211f      	movs	r1, #31
 8001536:	4249      	negs	r1, r1
 8001538:	1a8a      	subs	r2, r1, r2
 800153a:	4641      	mov	r1, r8
 800153c:	40d1      	lsrs	r1, r2
 800153e:	000a      	movs	r2, r1
 8001540:	2b20      	cmp	r3, #32
 8001542:	d004      	beq.n	800154e <__aeabi_ddiv+0x3e6>
 8001544:	4641      	mov	r1, r8
 8001546:	4b80      	ldr	r3, [pc, #512]	; (8001748 <__aeabi_ddiv+0x5e0>)
 8001548:	445b      	add	r3, fp
 800154a:	4099      	lsls	r1, r3
 800154c:	430d      	orrs	r5, r1
 800154e:	1e6b      	subs	r3, r5, #1
 8001550:	419d      	sbcs	r5, r3
 8001552:	2307      	movs	r3, #7
 8001554:	432a      	orrs	r2, r5
 8001556:	001d      	movs	r5, r3
 8001558:	2400      	movs	r4, #0
 800155a:	4015      	ands	r5, r2
 800155c:	4213      	tst	r3, r2
 800155e:	d100      	bne.n	8001562 <__aeabi_ddiv+0x3fa>
 8001560:	e0d4      	b.n	800170c <__aeabi_ddiv+0x5a4>
 8001562:	210f      	movs	r1, #15
 8001564:	2300      	movs	r3, #0
 8001566:	4011      	ands	r1, r2
 8001568:	2904      	cmp	r1, #4
 800156a:	d100      	bne.n	800156e <__aeabi_ddiv+0x406>
 800156c:	e0cb      	b.n	8001706 <__aeabi_ddiv+0x59e>
 800156e:	1d11      	adds	r1, r2, #4
 8001570:	4291      	cmp	r1, r2
 8001572:	4192      	sbcs	r2, r2
 8001574:	4252      	negs	r2, r2
 8001576:	189b      	adds	r3, r3, r2
 8001578:	000a      	movs	r2, r1
 800157a:	0219      	lsls	r1, r3, #8
 800157c:	d400      	bmi.n	8001580 <__aeabi_ddiv+0x418>
 800157e:	e0c2      	b.n	8001706 <__aeabi_ddiv+0x59e>
 8001580:	2301      	movs	r3, #1
 8001582:	2400      	movs	r4, #0
 8001584:	2500      	movs	r5, #0
 8001586:	e646      	b.n	8001216 <__aeabi_ddiv+0xae>
 8001588:	2380      	movs	r3, #128	; 0x80
 800158a:	4641      	mov	r1, r8
 800158c:	031b      	lsls	r3, r3, #12
 800158e:	4219      	tst	r1, r3
 8001590:	d008      	beq.n	80015a4 <__aeabi_ddiv+0x43c>
 8001592:	421c      	tst	r4, r3
 8001594:	d106      	bne.n	80015a4 <__aeabi_ddiv+0x43c>
 8001596:	431c      	orrs	r4, r3
 8001598:	0324      	lsls	r4, r4, #12
 800159a:	46ba      	mov	sl, r7
 800159c:	0015      	movs	r5, r2
 800159e:	4b69      	ldr	r3, [pc, #420]	; (8001744 <__aeabi_ddiv+0x5dc>)
 80015a0:	0b24      	lsrs	r4, r4, #12
 80015a2:	e638      	b.n	8001216 <__aeabi_ddiv+0xae>
 80015a4:	2480      	movs	r4, #128	; 0x80
 80015a6:	4643      	mov	r3, r8
 80015a8:	0324      	lsls	r4, r4, #12
 80015aa:	431c      	orrs	r4, r3
 80015ac:	0324      	lsls	r4, r4, #12
 80015ae:	46b2      	mov	sl, r6
 80015b0:	4b64      	ldr	r3, [pc, #400]	; (8001744 <__aeabi_ddiv+0x5dc>)
 80015b2:	0b24      	lsrs	r4, r4, #12
 80015b4:	e62f      	b.n	8001216 <__aeabi_ddiv+0xae>
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d100      	bne.n	80015bc <__aeabi_ddiv+0x454>
 80015ba:	e703      	b.n	80013c4 <__aeabi_ddiv+0x25c>
 80015bc:	19a6      	adds	r6, r4, r6
 80015be:	1e68      	subs	r0, r5, #1
 80015c0:	42a6      	cmp	r6, r4
 80015c2:	d200      	bcs.n	80015c6 <__aeabi_ddiv+0x45e>
 80015c4:	e08d      	b.n	80016e2 <__aeabi_ddiv+0x57a>
 80015c6:	428e      	cmp	r6, r1
 80015c8:	d200      	bcs.n	80015cc <__aeabi_ddiv+0x464>
 80015ca:	e0a3      	b.n	8001714 <__aeabi_ddiv+0x5ac>
 80015cc:	d100      	bne.n	80015d0 <__aeabi_ddiv+0x468>
 80015ce:	e0b3      	b.n	8001738 <__aeabi_ddiv+0x5d0>
 80015d0:	0005      	movs	r5, r0
 80015d2:	e6f5      	b.n	80013c0 <__aeabi_ddiv+0x258>
 80015d4:	42aa      	cmp	r2, r5
 80015d6:	d900      	bls.n	80015da <__aeabi_ddiv+0x472>
 80015d8:	e639      	b.n	800124e <__aeabi_ddiv+0xe6>
 80015da:	4643      	mov	r3, r8
 80015dc:	07de      	lsls	r6, r3, #31
 80015de:	0858      	lsrs	r0, r3, #1
 80015e0:	086b      	lsrs	r3, r5, #1
 80015e2:	431e      	orrs	r6, r3
 80015e4:	07ed      	lsls	r5, r5, #31
 80015e6:	e639      	b.n	800125c <__aeabi_ddiv+0xf4>
 80015e8:	4648      	mov	r0, r9
 80015ea:	f001 f8af 	bl	800274c <__clzsi2>
 80015ee:	0001      	movs	r1, r0
 80015f0:	0002      	movs	r2, r0
 80015f2:	3115      	adds	r1, #21
 80015f4:	3220      	adds	r2, #32
 80015f6:	291c      	cmp	r1, #28
 80015f8:	dc00      	bgt.n	80015fc <__aeabi_ddiv+0x494>
 80015fa:	e72c      	b.n	8001456 <__aeabi_ddiv+0x2ee>
 80015fc:	464b      	mov	r3, r9
 80015fe:	3808      	subs	r0, #8
 8001600:	4083      	lsls	r3, r0
 8001602:	2500      	movs	r5, #0
 8001604:	4698      	mov	r8, r3
 8001606:	e732      	b.n	800146e <__aeabi_ddiv+0x306>
 8001608:	f001 f8a0 	bl	800274c <__clzsi2>
 800160c:	0003      	movs	r3, r0
 800160e:	001a      	movs	r2, r3
 8001610:	3215      	adds	r2, #21
 8001612:	3020      	adds	r0, #32
 8001614:	2a1c      	cmp	r2, #28
 8001616:	dc00      	bgt.n	800161a <__aeabi_ddiv+0x4b2>
 8001618:	e700      	b.n	800141c <__aeabi_ddiv+0x2b4>
 800161a:	4654      	mov	r4, sl
 800161c:	3b08      	subs	r3, #8
 800161e:	2200      	movs	r2, #0
 8001620:	409c      	lsls	r4, r3
 8001622:	e705      	b.n	8001430 <__aeabi_ddiv+0x2c8>
 8001624:	1936      	adds	r6, r6, r4
 8001626:	3b01      	subs	r3, #1
 8001628:	42b4      	cmp	r4, r6
 800162a:	d900      	bls.n	800162e <__aeabi_ddiv+0x4c6>
 800162c:	e6a6      	b.n	800137c <__aeabi_ddiv+0x214>
 800162e:	42b2      	cmp	r2, r6
 8001630:	d800      	bhi.n	8001634 <__aeabi_ddiv+0x4cc>
 8001632:	e6a3      	b.n	800137c <__aeabi_ddiv+0x214>
 8001634:	1e83      	subs	r3, r0, #2
 8001636:	1936      	adds	r6, r6, r4
 8001638:	e6a0      	b.n	800137c <__aeabi_ddiv+0x214>
 800163a:	1909      	adds	r1, r1, r4
 800163c:	3d01      	subs	r5, #1
 800163e:	428c      	cmp	r4, r1
 8001640:	d900      	bls.n	8001644 <__aeabi_ddiv+0x4dc>
 8001642:	e68d      	b.n	8001360 <__aeabi_ddiv+0x1f8>
 8001644:	428a      	cmp	r2, r1
 8001646:	d800      	bhi.n	800164a <__aeabi_ddiv+0x4e2>
 8001648:	e68a      	b.n	8001360 <__aeabi_ddiv+0x1f8>
 800164a:	1e85      	subs	r5, r0, #2
 800164c:	1909      	adds	r1, r1, r4
 800164e:	e687      	b.n	8001360 <__aeabi_ddiv+0x1f8>
 8001650:	230f      	movs	r3, #15
 8001652:	402b      	ands	r3, r5
 8001654:	2b04      	cmp	r3, #4
 8001656:	d100      	bne.n	800165a <__aeabi_ddiv+0x4f2>
 8001658:	e6bc      	b.n	80013d4 <__aeabi_ddiv+0x26c>
 800165a:	2305      	movs	r3, #5
 800165c:	425b      	negs	r3, r3
 800165e:	42ab      	cmp	r3, r5
 8001660:	419b      	sbcs	r3, r3
 8001662:	3504      	adds	r5, #4
 8001664:	425b      	negs	r3, r3
 8001666:	08ed      	lsrs	r5, r5, #3
 8001668:	4498      	add	r8, r3
 800166a:	e6b4      	b.n	80013d6 <__aeabi_ddiv+0x26e>
 800166c:	42af      	cmp	r7, r5
 800166e:	d900      	bls.n	8001672 <__aeabi_ddiv+0x50a>
 8001670:	e660      	b.n	8001334 <__aeabi_ddiv+0x1cc>
 8001672:	4282      	cmp	r2, r0
 8001674:	d804      	bhi.n	8001680 <__aeabi_ddiv+0x518>
 8001676:	d000      	beq.n	800167a <__aeabi_ddiv+0x512>
 8001678:	e65c      	b.n	8001334 <__aeabi_ddiv+0x1cc>
 800167a:	42ae      	cmp	r6, r5
 800167c:	d800      	bhi.n	8001680 <__aeabi_ddiv+0x518>
 800167e:	e659      	b.n	8001334 <__aeabi_ddiv+0x1cc>
 8001680:	2302      	movs	r3, #2
 8001682:	425b      	negs	r3, r3
 8001684:	469c      	mov	ip, r3
 8001686:	9b00      	ldr	r3, [sp, #0]
 8001688:	44e0      	add	r8, ip
 800168a:	469c      	mov	ip, r3
 800168c:	4465      	add	r5, ip
 800168e:	429d      	cmp	r5, r3
 8001690:	419b      	sbcs	r3, r3
 8001692:	425b      	negs	r3, r3
 8001694:	191b      	adds	r3, r3, r4
 8001696:	18c0      	adds	r0, r0, r3
 8001698:	e64d      	b.n	8001336 <__aeabi_ddiv+0x1ce>
 800169a:	428a      	cmp	r2, r1
 800169c:	d800      	bhi.n	80016a0 <__aeabi_ddiv+0x538>
 800169e:	e60e      	b.n	80012be <__aeabi_ddiv+0x156>
 80016a0:	1e83      	subs	r3, r0, #2
 80016a2:	1909      	adds	r1, r1, r4
 80016a4:	e60b      	b.n	80012be <__aeabi_ddiv+0x156>
 80016a6:	428a      	cmp	r2, r1
 80016a8:	d800      	bhi.n	80016ac <__aeabi_ddiv+0x544>
 80016aa:	e5f4      	b.n	8001296 <__aeabi_ddiv+0x12e>
 80016ac:	1e83      	subs	r3, r0, #2
 80016ae:	4698      	mov	r8, r3
 80016b0:	1909      	adds	r1, r1, r4
 80016b2:	e5f0      	b.n	8001296 <__aeabi_ddiv+0x12e>
 80016b4:	4925      	ldr	r1, [pc, #148]	; (800174c <__aeabi_ddiv+0x5e4>)
 80016b6:	0028      	movs	r0, r5
 80016b8:	4459      	add	r1, fp
 80016ba:	408d      	lsls	r5, r1
 80016bc:	4642      	mov	r2, r8
 80016be:	408a      	lsls	r2, r1
 80016c0:	1e69      	subs	r1, r5, #1
 80016c2:	418d      	sbcs	r5, r1
 80016c4:	4641      	mov	r1, r8
 80016c6:	40d8      	lsrs	r0, r3
 80016c8:	40d9      	lsrs	r1, r3
 80016ca:	4302      	orrs	r2, r0
 80016cc:	432a      	orrs	r2, r5
 80016ce:	000b      	movs	r3, r1
 80016d0:	0751      	lsls	r1, r2, #29
 80016d2:	d100      	bne.n	80016d6 <__aeabi_ddiv+0x56e>
 80016d4:	e751      	b.n	800157a <__aeabi_ddiv+0x412>
 80016d6:	210f      	movs	r1, #15
 80016d8:	4011      	ands	r1, r2
 80016da:	2904      	cmp	r1, #4
 80016dc:	d000      	beq.n	80016e0 <__aeabi_ddiv+0x578>
 80016de:	e746      	b.n	800156e <__aeabi_ddiv+0x406>
 80016e0:	e74b      	b.n	800157a <__aeabi_ddiv+0x412>
 80016e2:	0005      	movs	r5, r0
 80016e4:	428e      	cmp	r6, r1
 80016e6:	d000      	beq.n	80016ea <__aeabi_ddiv+0x582>
 80016e8:	e66a      	b.n	80013c0 <__aeabi_ddiv+0x258>
 80016ea:	9a00      	ldr	r2, [sp, #0]
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d000      	beq.n	80016f2 <__aeabi_ddiv+0x58a>
 80016f0:	e666      	b.n	80013c0 <__aeabi_ddiv+0x258>
 80016f2:	e667      	b.n	80013c4 <__aeabi_ddiv+0x25c>
 80016f4:	4a16      	ldr	r2, [pc, #88]	; (8001750 <__aeabi_ddiv+0x5e8>)
 80016f6:	445a      	add	r2, fp
 80016f8:	2a00      	cmp	r2, #0
 80016fa:	dc00      	bgt.n	80016fe <__aeabi_ddiv+0x596>
 80016fc:	e710      	b.n	8001520 <__aeabi_ddiv+0x3b8>
 80016fe:	2301      	movs	r3, #1
 8001700:	2500      	movs	r5, #0
 8001702:	4498      	add	r8, r3
 8001704:	e667      	b.n	80013d6 <__aeabi_ddiv+0x26e>
 8001706:	075d      	lsls	r5, r3, #29
 8001708:	025b      	lsls	r3, r3, #9
 800170a:	0b1c      	lsrs	r4, r3, #12
 800170c:	08d2      	lsrs	r2, r2, #3
 800170e:	2300      	movs	r3, #0
 8001710:	4315      	orrs	r5, r2
 8001712:	e580      	b.n	8001216 <__aeabi_ddiv+0xae>
 8001714:	9800      	ldr	r0, [sp, #0]
 8001716:	3d02      	subs	r5, #2
 8001718:	0042      	lsls	r2, r0, #1
 800171a:	4282      	cmp	r2, r0
 800171c:	41bf      	sbcs	r7, r7
 800171e:	427f      	negs	r7, r7
 8001720:	193c      	adds	r4, r7, r4
 8001722:	1936      	adds	r6, r6, r4
 8001724:	9200      	str	r2, [sp, #0]
 8001726:	e7dd      	b.n	80016e4 <__aeabi_ddiv+0x57c>
 8001728:	2480      	movs	r4, #128	; 0x80
 800172a:	4643      	mov	r3, r8
 800172c:	0324      	lsls	r4, r4, #12
 800172e:	431c      	orrs	r4, r3
 8001730:	0324      	lsls	r4, r4, #12
 8001732:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__aeabi_ddiv+0x5dc>)
 8001734:	0b24      	lsrs	r4, r4, #12
 8001736:	e56e      	b.n	8001216 <__aeabi_ddiv+0xae>
 8001738:	9a00      	ldr	r2, [sp, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d3ea      	bcc.n	8001714 <__aeabi_ddiv+0x5ac>
 800173e:	0005      	movs	r5, r0
 8001740:	e7d3      	b.n	80016ea <__aeabi_ddiv+0x582>
 8001742:	46c0      	nop			; (mov r8, r8)
 8001744:	000007ff 	.word	0x000007ff
 8001748:	0000043e 	.word	0x0000043e
 800174c:	0000041e 	.word	0x0000041e
 8001750:	000003ff 	.word	0x000003ff

08001754 <__eqdf2>:
 8001754:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001756:	464e      	mov	r6, r9
 8001758:	4645      	mov	r5, r8
 800175a:	46de      	mov	lr, fp
 800175c:	4657      	mov	r7, sl
 800175e:	4690      	mov	r8, r2
 8001760:	b5e0      	push	{r5, r6, r7, lr}
 8001762:	0017      	movs	r7, r2
 8001764:	031a      	lsls	r2, r3, #12
 8001766:	0b12      	lsrs	r2, r2, #12
 8001768:	0005      	movs	r5, r0
 800176a:	4684      	mov	ip, r0
 800176c:	4819      	ldr	r0, [pc, #100]	; (80017d4 <__eqdf2+0x80>)
 800176e:	030e      	lsls	r6, r1, #12
 8001770:	004c      	lsls	r4, r1, #1
 8001772:	4691      	mov	r9, r2
 8001774:	005a      	lsls	r2, r3, #1
 8001776:	0fdb      	lsrs	r3, r3, #31
 8001778:	469b      	mov	fp, r3
 800177a:	0b36      	lsrs	r6, r6, #12
 800177c:	0d64      	lsrs	r4, r4, #21
 800177e:	0fc9      	lsrs	r1, r1, #31
 8001780:	0d52      	lsrs	r2, r2, #21
 8001782:	4284      	cmp	r4, r0
 8001784:	d019      	beq.n	80017ba <__eqdf2+0x66>
 8001786:	4282      	cmp	r2, r0
 8001788:	d010      	beq.n	80017ac <__eqdf2+0x58>
 800178a:	2001      	movs	r0, #1
 800178c:	4294      	cmp	r4, r2
 800178e:	d10e      	bne.n	80017ae <__eqdf2+0x5a>
 8001790:	454e      	cmp	r6, r9
 8001792:	d10c      	bne.n	80017ae <__eqdf2+0x5a>
 8001794:	2001      	movs	r0, #1
 8001796:	45c4      	cmp	ip, r8
 8001798:	d109      	bne.n	80017ae <__eqdf2+0x5a>
 800179a:	4559      	cmp	r1, fp
 800179c:	d017      	beq.n	80017ce <__eqdf2+0x7a>
 800179e:	2c00      	cmp	r4, #0
 80017a0:	d105      	bne.n	80017ae <__eqdf2+0x5a>
 80017a2:	0030      	movs	r0, r6
 80017a4:	4328      	orrs	r0, r5
 80017a6:	1e43      	subs	r3, r0, #1
 80017a8:	4198      	sbcs	r0, r3
 80017aa:	e000      	b.n	80017ae <__eqdf2+0x5a>
 80017ac:	2001      	movs	r0, #1
 80017ae:	bcf0      	pop	{r4, r5, r6, r7}
 80017b0:	46bb      	mov	fp, r7
 80017b2:	46b2      	mov	sl, r6
 80017b4:	46a9      	mov	r9, r5
 80017b6:	46a0      	mov	r8, r4
 80017b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017ba:	0033      	movs	r3, r6
 80017bc:	2001      	movs	r0, #1
 80017be:	432b      	orrs	r3, r5
 80017c0:	d1f5      	bne.n	80017ae <__eqdf2+0x5a>
 80017c2:	42a2      	cmp	r2, r4
 80017c4:	d1f3      	bne.n	80017ae <__eqdf2+0x5a>
 80017c6:	464b      	mov	r3, r9
 80017c8:	433b      	orrs	r3, r7
 80017ca:	d1f0      	bne.n	80017ae <__eqdf2+0x5a>
 80017cc:	e7e2      	b.n	8001794 <__eqdf2+0x40>
 80017ce:	2000      	movs	r0, #0
 80017d0:	e7ed      	b.n	80017ae <__eqdf2+0x5a>
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	000007ff 	.word	0x000007ff

080017d8 <__gedf2>:
 80017d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017da:	4647      	mov	r7, r8
 80017dc:	46ce      	mov	lr, r9
 80017de:	0004      	movs	r4, r0
 80017e0:	0018      	movs	r0, r3
 80017e2:	0016      	movs	r6, r2
 80017e4:	031b      	lsls	r3, r3, #12
 80017e6:	0b1b      	lsrs	r3, r3, #12
 80017e8:	4d2d      	ldr	r5, [pc, #180]	; (80018a0 <__gedf2+0xc8>)
 80017ea:	004a      	lsls	r2, r1, #1
 80017ec:	4699      	mov	r9, r3
 80017ee:	b580      	push	{r7, lr}
 80017f0:	0043      	lsls	r3, r0, #1
 80017f2:	030f      	lsls	r7, r1, #12
 80017f4:	46a4      	mov	ip, r4
 80017f6:	46b0      	mov	r8, r6
 80017f8:	0b3f      	lsrs	r7, r7, #12
 80017fa:	0d52      	lsrs	r2, r2, #21
 80017fc:	0fc9      	lsrs	r1, r1, #31
 80017fe:	0d5b      	lsrs	r3, r3, #21
 8001800:	0fc0      	lsrs	r0, r0, #31
 8001802:	42aa      	cmp	r2, r5
 8001804:	d021      	beq.n	800184a <__gedf2+0x72>
 8001806:	42ab      	cmp	r3, r5
 8001808:	d013      	beq.n	8001832 <__gedf2+0x5a>
 800180a:	2a00      	cmp	r2, #0
 800180c:	d122      	bne.n	8001854 <__gedf2+0x7c>
 800180e:	433c      	orrs	r4, r7
 8001810:	2b00      	cmp	r3, #0
 8001812:	d102      	bne.n	800181a <__gedf2+0x42>
 8001814:	464d      	mov	r5, r9
 8001816:	432e      	orrs	r6, r5
 8001818:	d022      	beq.n	8001860 <__gedf2+0x88>
 800181a:	2c00      	cmp	r4, #0
 800181c:	d010      	beq.n	8001840 <__gedf2+0x68>
 800181e:	4281      	cmp	r1, r0
 8001820:	d022      	beq.n	8001868 <__gedf2+0x90>
 8001822:	2002      	movs	r0, #2
 8001824:	3901      	subs	r1, #1
 8001826:	4008      	ands	r0, r1
 8001828:	3801      	subs	r0, #1
 800182a:	bcc0      	pop	{r6, r7}
 800182c:	46b9      	mov	r9, r7
 800182e:	46b0      	mov	r8, r6
 8001830:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001832:	464d      	mov	r5, r9
 8001834:	432e      	orrs	r6, r5
 8001836:	d129      	bne.n	800188c <__gedf2+0xb4>
 8001838:	2a00      	cmp	r2, #0
 800183a:	d1f0      	bne.n	800181e <__gedf2+0x46>
 800183c:	433c      	orrs	r4, r7
 800183e:	d1ee      	bne.n	800181e <__gedf2+0x46>
 8001840:	2800      	cmp	r0, #0
 8001842:	d1f2      	bne.n	800182a <__gedf2+0x52>
 8001844:	2001      	movs	r0, #1
 8001846:	4240      	negs	r0, r0
 8001848:	e7ef      	b.n	800182a <__gedf2+0x52>
 800184a:	003d      	movs	r5, r7
 800184c:	4325      	orrs	r5, r4
 800184e:	d11d      	bne.n	800188c <__gedf2+0xb4>
 8001850:	4293      	cmp	r3, r2
 8001852:	d0ee      	beq.n	8001832 <__gedf2+0x5a>
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e2      	bne.n	800181e <__gedf2+0x46>
 8001858:	464c      	mov	r4, r9
 800185a:	4326      	orrs	r6, r4
 800185c:	d1df      	bne.n	800181e <__gedf2+0x46>
 800185e:	e7e0      	b.n	8001822 <__gedf2+0x4a>
 8001860:	2000      	movs	r0, #0
 8001862:	2c00      	cmp	r4, #0
 8001864:	d0e1      	beq.n	800182a <__gedf2+0x52>
 8001866:	e7dc      	b.n	8001822 <__gedf2+0x4a>
 8001868:	429a      	cmp	r2, r3
 800186a:	dc0a      	bgt.n	8001882 <__gedf2+0xaa>
 800186c:	dbe8      	blt.n	8001840 <__gedf2+0x68>
 800186e:	454f      	cmp	r7, r9
 8001870:	d8d7      	bhi.n	8001822 <__gedf2+0x4a>
 8001872:	d00e      	beq.n	8001892 <__gedf2+0xba>
 8001874:	2000      	movs	r0, #0
 8001876:	454f      	cmp	r7, r9
 8001878:	d2d7      	bcs.n	800182a <__gedf2+0x52>
 800187a:	2900      	cmp	r1, #0
 800187c:	d0e2      	beq.n	8001844 <__gedf2+0x6c>
 800187e:	0008      	movs	r0, r1
 8001880:	e7d3      	b.n	800182a <__gedf2+0x52>
 8001882:	4243      	negs	r3, r0
 8001884:	4158      	adcs	r0, r3
 8001886:	0040      	lsls	r0, r0, #1
 8001888:	3801      	subs	r0, #1
 800188a:	e7ce      	b.n	800182a <__gedf2+0x52>
 800188c:	2002      	movs	r0, #2
 800188e:	4240      	negs	r0, r0
 8001890:	e7cb      	b.n	800182a <__gedf2+0x52>
 8001892:	45c4      	cmp	ip, r8
 8001894:	d8c5      	bhi.n	8001822 <__gedf2+0x4a>
 8001896:	2000      	movs	r0, #0
 8001898:	45c4      	cmp	ip, r8
 800189a:	d2c6      	bcs.n	800182a <__gedf2+0x52>
 800189c:	e7ed      	b.n	800187a <__gedf2+0xa2>
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	000007ff 	.word	0x000007ff

080018a4 <__ledf2>:
 80018a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a6:	4647      	mov	r7, r8
 80018a8:	46ce      	mov	lr, r9
 80018aa:	0004      	movs	r4, r0
 80018ac:	0018      	movs	r0, r3
 80018ae:	0016      	movs	r6, r2
 80018b0:	031b      	lsls	r3, r3, #12
 80018b2:	0b1b      	lsrs	r3, r3, #12
 80018b4:	4d2c      	ldr	r5, [pc, #176]	; (8001968 <__ledf2+0xc4>)
 80018b6:	004a      	lsls	r2, r1, #1
 80018b8:	4699      	mov	r9, r3
 80018ba:	b580      	push	{r7, lr}
 80018bc:	0043      	lsls	r3, r0, #1
 80018be:	030f      	lsls	r7, r1, #12
 80018c0:	46a4      	mov	ip, r4
 80018c2:	46b0      	mov	r8, r6
 80018c4:	0b3f      	lsrs	r7, r7, #12
 80018c6:	0d52      	lsrs	r2, r2, #21
 80018c8:	0fc9      	lsrs	r1, r1, #31
 80018ca:	0d5b      	lsrs	r3, r3, #21
 80018cc:	0fc0      	lsrs	r0, r0, #31
 80018ce:	42aa      	cmp	r2, r5
 80018d0:	d00d      	beq.n	80018ee <__ledf2+0x4a>
 80018d2:	42ab      	cmp	r3, r5
 80018d4:	d010      	beq.n	80018f8 <__ledf2+0x54>
 80018d6:	2a00      	cmp	r2, #0
 80018d8:	d127      	bne.n	800192a <__ledf2+0x86>
 80018da:	433c      	orrs	r4, r7
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d111      	bne.n	8001904 <__ledf2+0x60>
 80018e0:	464d      	mov	r5, r9
 80018e2:	432e      	orrs	r6, r5
 80018e4:	d10e      	bne.n	8001904 <__ledf2+0x60>
 80018e6:	2000      	movs	r0, #0
 80018e8:	2c00      	cmp	r4, #0
 80018ea:	d015      	beq.n	8001918 <__ledf2+0x74>
 80018ec:	e00e      	b.n	800190c <__ledf2+0x68>
 80018ee:	003d      	movs	r5, r7
 80018f0:	4325      	orrs	r5, r4
 80018f2:	d110      	bne.n	8001916 <__ledf2+0x72>
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d118      	bne.n	800192a <__ledf2+0x86>
 80018f8:	464d      	mov	r5, r9
 80018fa:	432e      	orrs	r6, r5
 80018fc:	d10b      	bne.n	8001916 <__ledf2+0x72>
 80018fe:	2a00      	cmp	r2, #0
 8001900:	d102      	bne.n	8001908 <__ledf2+0x64>
 8001902:	433c      	orrs	r4, r7
 8001904:	2c00      	cmp	r4, #0
 8001906:	d00b      	beq.n	8001920 <__ledf2+0x7c>
 8001908:	4281      	cmp	r1, r0
 800190a:	d014      	beq.n	8001936 <__ledf2+0x92>
 800190c:	2002      	movs	r0, #2
 800190e:	3901      	subs	r1, #1
 8001910:	4008      	ands	r0, r1
 8001912:	3801      	subs	r0, #1
 8001914:	e000      	b.n	8001918 <__ledf2+0x74>
 8001916:	2002      	movs	r0, #2
 8001918:	bcc0      	pop	{r6, r7}
 800191a:	46b9      	mov	r9, r7
 800191c:	46b0      	mov	r8, r6
 800191e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001920:	2800      	cmp	r0, #0
 8001922:	d1f9      	bne.n	8001918 <__ledf2+0x74>
 8001924:	2001      	movs	r0, #1
 8001926:	4240      	negs	r0, r0
 8001928:	e7f6      	b.n	8001918 <__ledf2+0x74>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d1ec      	bne.n	8001908 <__ledf2+0x64>
 800192e:	464c      	mov	r4, r9
 8001930:	4326      	orrs	r6, r4
 8001932:	d1e9      	bne.n	8001908 <__ledf2+0x64>
 8001934:	e7ea      	b.n	800190c <__ledf2+0x68>
 8001936:	429a      	cmp	r2, r3
 8001938:	dd04      	ble.n	8001944 <__ledf2+0xa0>
 800193a:	4243      	negs	r3, r0
 800193c:	4158      	adcs	r0, r3
 800193e:	0040      	lsls	r0, r0, #1
 8001940:	3801      	subs	r0, #1
 8001942:	e7e9      	b.n	8001918 <__ledf2+0x74>
 8001944:	429a      	cmp	r2, r3
 8001946:	dbeb      	blt.n	8001920 <__ledf2+0x7c>
 8001948:	454f      	cmp	r7, r9
 800194a:	d8df      	bhi.n	800190c <__ledf2+0x68>
 800194c:	d006      	beq.n	800195c <__ledf2+0xb8>
 800194e:	2000      	movs	r0, #0
 8001950:	454f      	cmp	r7, r9
 8001952:	d2e1      	bcs.n	8001918 <__ledf2+0x74>
 8001954:	2900      	cmp	r1, #0
 8001956:	d0e5      	beq.n	8001924 <__ledf2+0x80>
 8001958:	0008      	movs	r0, r1
 800195a:	e7dd      	b.n	8001918 <__ledf2+0x74>
 800195c:	45c4      	cmp	ip, r8
 800195e:	d8d5      	bhi.n	800190c <__ledf2+0x68>
 8001960:	2000      	movs	r0, #0
 8001962:	45c4      	cmp	ip, r8
 8001964:	d2d8      	bcs.n	8001918 <__ledf2+0x74>
 8001966:	e7f5      	b.n	8001954 <__ledf2+0xb0>
 8001968:	000007ff 	.word	0x000007ff

0800196c <__aeabi_dmul>:
 800196c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800196e:	4657      	mov	r7, sl
 8001970:	464e      	mov	r6, r9
 8001972:	4645      	mov	r5, r8
 8001974:	46de      	mov	lr, fp
 8001976:	b5e0      	push	{r5, r6, r7, lr}
 8001978:	4698      	mov	r8, r3
 800197a:	030c      	lsls	r4, r1, #12
 800197c:	004b      	lsls	r3, r1, #1
 800197e:	0006      	movs	r6, r0
 8001980:	4692      	mov	sl, r2
 8001982:	b087      	sub	sp, #28
 8001984:	0b24      	lsrs	r4, r4, #12
 8001986:	0d5b      	lsrs	r3, r3, #21
 8001988:	0fcf      	lsrs	r7, r1, #31
 800198a:	2b00      	cmp	r3, #0
 800198c:	d100      	bne.n	8001990 <__aeabi_dmul+0x24>
 800198e:	e15c      	b.n	8001c4a <__aeabi_dmul+0x2de>
 8001990:	4ad9      	ldr	r2, [pc, #868]	; (8001cf8 <__aeabi_dmul+0x38c>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d100      	bne.n	8001998 <__aeabi_dmul+0x2c>
 8001996:	e175      	b.n	8001c84 <__aeabi_dmul+0x318>
 8001998:	0f42      	lsrs	r2, r0, #29
 800199a:	00e4      	lsls	r4, r4, #3
 800199c:	4314      	orrs	r4, r2
 800199e:	2280      	movs	r2, #128	; 0x80
 80019a0:	0412      	lsls	r2, r2, #16
 80019a2:	4314      	orrs	r4, r2
 80019a4:	4ad5      	ldr	r2, [pc, #852]	; (8001cfc <__aeabi_dmul+0x390>)
 80019a6:	00c5      	lsls	r5, r0, #3
 80019a8:	4694      	mov	ip, r2
 80019aa:	4463      	add	r3, ip
 80019ac:	9300      	str	r3, [sp, #0]
 80019ae:	2300      	movs	r3, #0
 80019b0:	4699      	mov	r9, r3
 80019b2:	469b      	mov	fp, r3
 80019b4:	4643      	mov	r3, r8
 80019b6:	4642      	mov	r2, r8
 80019b8:	031e      	lsls	r6, r3, #12
 80019ba:	0fd2      	lsrs	r2, r2, #31
 80019bc:	005b      	lsls	r3, r3, #1
 80019be:	4650      	mov	r0, sl
 80019c0:	4690      	mov	r8, r2
 80019c2:	0b36      	lsrs	r6, r6, #12
 80019c4:	0d5b      	lsrs	r3, r3, #21
 80019c6:	d100      	bne.n	80019ca <__aeabi_dmul+0x5e>
 80019c8:	e120      	b.n	8001c0c <__aeabi_dmul+0x2a0>
 80019ca:	4acb      	ldr	r2, [pc, #812]	; (8001cf8 <__aeabi_dmul+0x38c>)
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dmul+0x66>
 80019d0:	e162      	b.n	8001c98 <__aeabi_dmul+0x32c>
 80019d2:	49ca      	ldr	r1, [pc, #808]	; (8001cfc <__aeabi_dmul+0x390>)
 80019d4:	0f42      	lsrs	r2, r0, #29
 80019d6:	468c      	mov	ip, r1
 80019d8:	9900      	ldr	r1, [sp, #0]
 80019da:	4463      	add	r3, ip
 80019dc:	00f6      	lsls	r6, r6, #3
 80019de:	468c      	mov	ip, r1
 80019e0:	4316      	orrs	r6, r2
 80019e2:	2280      	movs	r2, #128	; 0x80
 80019e4:	449c      	add	ip, r3
 80019e6:	0412      	lsls	r2, r2, #16
 80019e8:	4663      	mov	r3, ip
 80019ea:	4316      	orrs	r6, r2
 80019ec:	00c2      	lsls	r2, r0, #3
 80019ee:	2000      	movs	r0, #0
 80019f0:	9300      	str	r3, [sp, #0]
 80019f2:	9900      	ldr	r1, [sp, #0]
 80019f4:	4643      	mov	r3, r8
 80019f6:	3101      	adds	r1, #1
 80019f8:	468c      	mov	ip, r1
 80019fa:	4649      	mov	r1, r9
 80019fc:	407b      	eors	r3, r7
 80019fe:	9301      	str	r3, [sp, #4]
 8001a00:	290f      	cmp	r1, #15
 8001a02:	d826      	bhi.n	8001a52 <__aeabi_dmul+0xe6>
 8001a04:	4bbe      	ldr	r3, [pc, #760]	; (8001d00 <__aeabi_dmul+0x394>)
 8001a06:	0089      	lsls	r1, r1, #2
 8001a08:	5859      	ldr	r1, [r3, r1]
 8001a0a:	468f      	mov	pc, r1
 8001a0c:	4643      	mov	r3, r8
 8001a0e:	9301      	str	r3, [sp, #4]
 8001a10:	0034      	movs	r4, r6
 8001a12:	0015      	movs	r5, r2
 8001a14:	4683      	mov	fp, r0
 8001a16:	465b      	mov	r3, fp
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d016      	beq.n	8001a4a <__aeabi_dmul+0xde>
 8001a1c:	2b03      	cmp	r3, #3
 8001a1e:	d100      	bne.n	8001a22 <__aeabi_dmul+0xb6>
 8001a20:	e203      	b.n	8001e2a <__aeabi_dmul+0x4be>
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d000      	beq.n	8001a28 <__aeabi_dmul+0xbc>
 8001a26:	e0cd      	b.n	8001bc4 <__aeabi_dmul+0x258>
 8001a28:	2200      	movs	r2, #0
 8001a2a:	2400      	movs	r4, #0
 8001a2c:	2500      	movs	r5, #0
 8001a2e:	9b01      	ldr	r3, [sp, #4]
 8001a30:	0512      	lsls	r2, r2, #20
 8001a32:	4322      	orrs	r2, r4
 8001a34:	07db      	lsls	r3, r3, #31
 8001a36:	431a      	orrs	r2, r3
 8001a38:	0028      	movs	r0, r5
 8001a3a:	0011      	movs	r1, r2
 8001a3c:	b007      	add	sp, #28
 8001a3e:	bcf0      	pop	{r4, r5, r6, r7}
 8001a40:	46bb      	mov	fp, r7
 8001a42:	46b2      	mov	sl, r6
 8001a44:	46a9      	mov	r9, r5
 8001a46:	46a0      	mov	r8, r4
 8001a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001a4a:	2400      	movs	r4, #0
 8001a4c:	2500      	movs	r5, #0
 8001a4e:	4aaa      	ldr	r2, [pc, #680]	; (8001cf8 <__aeabi_dmul+0x38c>)
 8001a50:	e7ed      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001a52:	0c28      	lsrs	r0, r5, #16
 8001a54:	042d      	lsls	r5, r5, #16
 8001a56:	0c2d      	lsrs	r5, r5, #16
 8001a58:	002b      	movs	r3, r5
 8001a5a:	0c11      	lsrs	r1, r2, #16
 8001a5c:	0412      	lsls	r2, r2, #16
 8001a5e:	0c12      	lsrs	r2, r2, #16
 8001a60:	4353      	muls	r3, r2
 8001a62:	4698      	mov	r8, r3
 8001a64:	0013      	movs	r3, r2
 8001a66:	002f      	movs	r7, r5
 8001a68:	4343      	muls	r3, r0
 8001a6a:	4699      	mov	r9, r3
 8001a6c:	434f      	muls	r7, r1
 8001a6e:	444f      	add	r7, r9
 8001a70:	46bb      	mov	fp, r7
 8001a72:	4647      	mov	r7, r8
 8001a74:	000b      	movs	r3, r1
 8001a76:	0c3f      	lsrs	r7, r7, #16
 8001a78:	46ba      	mov	sl, r7
 8001a7a:	4343      	muls	r3, r0
 8001a7c:	44da      	add	sl, fp
 8001a7e:	9302      	str	r3, [sp, #8]
 8001a80:	45d1      	cmp	r9, sl
 8001a82:	d904      	bls.n	8001a8e <__aeabi_dmul+0x122>
 8001a84:	2780      	movs	r7, #128	; 0x80
 8001a86:	027f      	lsls	r7, r7, #9
 8001a88:	46b9      	mov	r9, r7
 8001a8a:	444b      	add	r3, r9
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	4653      	mov	r3, sl
 8001a90:	0c1b      	lsrs	r3, r3, #16
 8001a92:	469b      	mov	fp, r3
 8001a94:	4653      	mov	r3, sl
 8001a96:	041f      	lsls	r7, r3, #16
 8001a98:	4643      	mov	r3, r8
 8001a9a:	041b      	lsls	r3, r3, #16
 8001a9c:	0c1b      	lsrs	r3, r3, #16
 8001a9e:	4698      	mov	r8, r3
 8001aa0:	003b      	movs	r3, r7
 8001aa2:	4443      	add	r3, r8
 8001aa4:	9304      	str	r3, [sp, #16]
 8001aa6:	0c33      	lsrs	r3, r6, #16
 8001aa8:	0436      	lsls	r6, r6, #16
 8001aaa:	0c36      	lsrs	r6, r6, #16
 8001aac:	4698      	mov	r8, r3
 8001aae:	0033      	movs	r3, r6
 8001ab0:	4343      	muls	r3, r0
 8001ab2:	4699      	mov	r9, r3
 8001ab4:	4643      	mov	r3, r8
 8001ab6:	4343      	muls	r3, r0
 8001ab8:	002f      	movs	r7, r5
 8001aba:	469a      	mov	sl, r3
 8001abc:	4643      	mov	r3, r8
 8001abe:	4377      	muls	r7, r6
 8001ac0:	435d      	muls	r5, r3
 8001ac2:	0c38      	lsrs	r0, r7, #16
 8001ac4:	444d      	add	r5, r9
 8001ac6:	1945      	adds	r5, r0, r5
 8001ac8:	45a9      	cmp	r9, r5
 8001aca:	d903      	bls.n	8001ad4 <__aeabi_dmul+0x168>
 8001acc:	2380      	movs	r3, #128	; 0x80
 8001ace:	025b      	lsls	r3, r3, #9
 8001ad0:	4699      	mov	r9, r3
 8001ad2:	44ca      	add	sl, r9
 8001ad4:	043f      	lsls	r7, r7, #16
 8001ad6:	0c28      	lsrs	r0, r5, #16
 8001ad8:	0c3f      	lsrs	r7, r7, #16
 8001ada:	042d      	lsls	r5, r5, #16
 8001adc:	19ed      	adds	r5, r5, r7
 8001ade:	0c27      	lsrs	r7, r4, #16
 8001ae0:	0424      	lsls	r4, r4, #16
 8001ae2:	0c24      	lsrs	r4, r4, #16
 8001ae4:	0003      	movs	r3, r0
 8001ae6:	0020      	movs	r0, r4
 8001ae8:	4350      	muls	r0, r2
 8001aea:	437a      	muls	r2, r7
 8001aec:	4691      	mov	r9, r2
 8001aee:	003a      	movs	r2, r7
 8001af0:	4453      	add	r3, sl
 8001af2:	9305      	str	r3, [sp, #20]
 8001af4:	0c03      	lsrs	r3, r0, #16
 8001af6:	469a      	mov	sl, r3
 8001af8:	434a      	muls	r2, r1
 8001afa:	4361      	muls	r1, r4
 8001afc:	4449      	add	r1, r9
 8001afe:	4451      	add	r1, sl
 8001b00:	44ab      	add	fp, r5
 8001b02:	4589      	cmp	r9, r1
 8001b04:	d903      	bls.n	8001b0e <__aeabi_dmul+0x1a2>
 8001b06:	2380      	movs	r3, #128	; 0x80
 8001b08:	025b      	lsls	r3, r3, #9
 8001b0a:	4699      	mov	r9, r3
 8001b0c:	444a      	add	r2, r9
 8001b0e:	0400      	lsls	r0, r0, #16
 8001b10:	0c0b      	lsrs	r3, r1, #16
 8001b12:	0c00      	lsrs	r0, r0, #16
 8001b14:	0409      	lsls	r1, r1, #16
 8001b16:	1809      	adds	r1, r1, r0
 8001b18:	0020      	movs	r0, r4
 8001b1a:	4699      	mov	r9, r3
 8001b1c:	4643      	mov	r3, r8
 8001b1e:	4370      	muls	r0, r6
 8001b20:	435c      	muls	r4, r3
 8001b22:	437e      	muls	r6, r7
 8001b24:	435f      	muls	r7, r3
 8001b26:	0c03      	lsrs	r3, r0, #16
 8001b28:	4698      	mov	r8, r3
 8001b2a:	19a4      	adds	r4, r4, r6
 8001b2c:	4444      	add	r4, r8
 8001b2e:	444a      	add	r2, r9
 8001b30:	9703      	str	r7, [sp, #12]
 8001b32:	42a6      	cmp	r6, r4
 8001b34:	d904      	bls.n	8001b40 <__aeabi_dmul+0x1d4>
 8001b36:	2380      	movs	r3, #128	; 0x80
 8001b38:	025b      	lsls	r3, r3, #9
 8001b3a:	4698      	mov	r8, r3
 8001b3c:	4447      	add	r7, r8
 8001b3e:	9703      	str	r7, [sp, #12]
 8001b40:	0423      	lsls	r3, r4, #16
 8001b42:	9e02      	ldr	r6, [sp, #8]
 8001b44:	469a      	mov	sl, r3
 8001b46:	9b05      	ldr	r3, [sp, #20]
 8001b48:	445e      	add	r6, fp
 8001b4a:	4698      	mov	r8, r3
 8001b4c:	42ae      	cmp	r6, r5
 8001b4e:	41ad      	sbcs	r5, r5
 8001b50:	1876      	adds	r6, r6, r1
 8001b52:	428e      	cmp	r6, r1
 8001b54:	4189      	sbcs	r1, r1
 8001b56:	0400      	lsls	r0, r0, #16
 8001b58:	0c00      	lsrs	r0, r0, #16
 8001b5a:	4450      	add	r0, sl
 8001b5c:	4440      	add	r0, r8
 8001b5e:	426d      	negs	r5, r5
 8001b60:	1947      	adds	r7, r0, r5
 8001b62:	46b8      	mov	r8, r7
 8001b64:	4693      	mov	fp, r2
 8001b66:	4249      	negs	r1, r1
 8001b68:	4689      	mov	r9, r1
 8001b6a:	44c3      	add	fp, r8
 8001b6c:	44d9      	add	r9, fp
 8001b6e:	4298      	cmp	r0, r3
 8001b70:	4180      	sbcs	r0, r0
 8001b72:	45a8      	cmp	r8, r5
 8001b74:	41ad      	sbcs	r5, r5
 8001b76:	4593      	cmp	fp, r2
 8001b78:	4192      	sbcs	r2, r2
 8001b7a:	4589      	cmp	r9, r1
 8001b7c:	4189      	sbcs	r1, r1
 8001b7e:	426d      	negs	r5, r5
 8001b80:	4240      	negs	r0, r0
 8001b82:	4328      	orrs	r0, r5
 8001b84:	0c24      	lsrs	r4, r4, #16
 8001b86:	4252      	negs	r2, r2
 8001b88:	4249      	negs	r1, r1
 8001b8a:	430a      	orrs	r2, r1
 8001b8c:	9b03      	ldr	r3, [sp, #12]
 8001b8e:	1900      	adds	r0, r0, r4
 8001b90:	1880      	adds	r0, r0, r2
 8001b92:	18c7      	adds	r7, r0, r3
 8001b94:	464b      	mov	r3, r9
 8001b96:	0ddc      	lsrs	r4, r3, #23
 8001b98:	9b04      	ldr	r3, [sp, #16]
 8001b9a:	0275      	lsls	r5, r6, #9
 8001b9c:	431d      	orrs	r5, r3
 8001b9e:	1e6a      	subs	r2, r5, #1
 8001ba0:	4195      	sbcs	r5, r2
 8001ba2:	464b      	mov	r3, r9
 8001ba4:	0df6      	lsrs	r6, r6, #23
 8001ba6:	027f      	lsls	r7, r7, #9
 8001ba8:	4335      	orrs	r5, r6
 8001baa:	025a      	lsls	r2, r3, #9
 8001bac:	433c      	orrs	r4, r7
 8001bae:	4315      	orrs	r5, r2
 8001bb0:	01fb      	lsls	r3, r7, #7
 8001bb2:	d400      	bmi.n	8001bb6 <__aeabi_dmul+0x24a>
 8001bb4:	e11c      	b.n	8001df0 <__aeabi_dmul+0x484>
 8001bb6:	2101      	movs	r1, #1
 8001bb8:	086a      	lsrs	r2, r5, #1
 8001bba:	400d      	ands	r5, r1
 8001bbc:	4315      	orrs	r5, r2
 8001bbe:	07e2      	lsls	r2, r4, #31
 8001bc0:	4315      	orrs	r5, r2
 8001bc2:	0864      	lsrs	r4, r4, #1
 8001bc4:	494f      	ldr	r1, [pc, #316]	; (8001d04 <__aeabi_dmul+0x398>)
 8001bc6:	4461      	add	r1, ip
 8001bc8:	2900      	cmp	r1, #0
 8001bca:	dc00      	bgt.n	8001bce <__aeabi_dmul+0x262>
 8001bcc:	e0b0      	b.n	8001d30 <__aeabi_dmul+0x3c4>
 8001bce:	076b      	lsls	r3, r5, #29
 8001bd0:	d009      	beq.n	8001be6 <__aeabi_dmul+0x27a>
 8001bd2:	220f      	movs	r2, #15
 8001bd4:	402a      	ands	r2, r5
 8001bd6:	2a04      	cmp	r2, #4
 8001bd8:	d005      	beq.n	8001be6 <__aeabi_dmul+0x27a>
 8001bda:	1d2a      	adds	r2, r5, #4
 8001bdc:	42aa      	cmp	r2, r5
 8001bde:	41ad      	sbcs	r5, r5
 8001be0:	426d      	negs	r5, r5
 8001be2:	1964      	adds	r4, r4, r5
 8001be4:	0015      	movs	r5, r2
 8001be6:	01e3      	lsls	r3, r4, #7
 8001be8:	d504      	bpl.n	8001bf4 <__aeabi_dmul+0x288>
 8001bea:	2180      	movs	r1, #128	; 0x80
 8001bec:	4a46      	ldr	r2, [pc, #280]	; (8001d08 <__aeabi_dmul+0x39c>)
 8001bee:	00c9      	lsls	r1, r1, #3
 8001bf0:	4014      	ands	r4, r2
 8001bf2:	4461      	add	r1, ip
 8001bf4:	4a45      	ldr	r2, [pc, #276]	; (8001d0c <__aeabi_dmul+0x3a0>)
 8001bf6:	4291      	cmp	r1, r2
 8001bf8:	dd00      	ble.n	8001bfc <__aeabi_dmul+0x290>
 8001bfa:	e726      	b.n	8001a4a <__aeabi_dmul+0xde>
 8001bfc:	0762      	lsls	r2, r4, #29
 8001bfe:	08ed      	lsrs	r5, r5, #3
 8001c00:	0264      	lsls	r4, r4, #9
 8001c02:	0549      	lsls	r1, r1, #21
 8001c04:	4315      	orrs	r5, r2
 8001c06:	0b24      	lsrs	r4, r4, #12
 8001c08:	0d4a      	lsrs	r2, r1, #21
 8001c0a:	e710      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001c0c:	4652      	mov	r2, sl
 8001c0e:	4332      	orrs	r2, r6
 8001c10:	d100      	bne.n	8001c14 <__aeabi_dmul+0x2a8>
 8001c12:	e07f      	b.n	8001d14 <__aeabi_dmul+0x3a8>
 8001c14:	2e00      	cmp	r6, #0
 8001c16:	d100      	bne.n	8001c1a <__aeabi_dmul+0x2ae>
 8001c18:	e0dc      	b.n	8001dd4 <__aeabi_dmul+0x468>
 8001c1a:	0030      	movs	r0, r6
 8001c1c:	f000 fd96 	bl	800274c <__clzsi2>
 8001c20:	0002      	movs	r2, r0
 8001c22:	3a0b      	subs	r2, #11
 8001c24:	231d      	movs	r3, #29
 8001c26:	0001      	movs	r1, r0
 8001c28:	1a9b      	subs	r3, r3, r2
 8001c2a:	4652      	mov	r2, sl
 8001c2c:	3908      	subs	r1, #8
 8001c2e:	40da      	lsrs	r2, r3
 8001c30:	408e      	lsls	r6, r1
 8001c32:	4316      	orrs	r6, r2
 8001c34:	4652      	mov	r2, sl
 8001c36:	408a      	lsls	r2, r1
 8001c38:	9b00      	ldr	r3, [sp, #0]
 8001c3a:	4935      	ldr	r1, [pc, #212]	; (8001d10 <__aeabi_dmul+0x3a4>)
 8001c3c:	1a18      	subs	r0, r3, r0
 8001c3e:	0003      	movs	r3, r0
 8001c40:	468c      	mov	ip, r1
 8001c42:	4463      	add	r3, ip
 8001c44:	2000      	movs	r0, #0
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	e6d3      	b.n	80019f2 <__aeabi_dmul+0x86>
 8001c4a:	0025      	movs	r5, r4
 8001c4c:	4305      	orrs	r5, r0
 8001c4e:	d04a      	beq.n	8001ce6 <__aeabi_dmul+0x37a>
 8001c50:	2c00      	cmp	r4, #0
 8001c52:	d100      	bne.n	8001c56 <__aeabi_dmul+0x2ea>
 8001c54:	e0b0      	b.n	8001db8 <__aeabi_dmul+0x44c>
 8001c56:	0020      	movs	r0, r4
 8001c58:	f000 fd78 	bl	800274c <__clzsi2>
 8001c5c:	0001      	movs	r1, r0
 8001c5e:	0002      	movs	r2, r0
 8001c60:	390b      	subs	r1, #11
 8001c62:	231d      	movs	r3, #29
 8001c64:	0010      	movs	r0, r2
 8001c66:	1a5b      	subs	r3, r3, r1
 8001c68:	0031      	movs	r1, r6
 8001c6a:	0035      	movs	r5, r6
 8001c6c:	3808      	subs	r0, #8
 8001c6e:	4084      	lsls	r4, r0
 8001c70:	40d9      	lsrs	r1, r3
 8001c72:	4085      	lsls	r5, r0
 8001c74:	430c      	orrs	r4, r1
 8001c76:	4826      	ldr	r0, [pc, #152]	; (8001d10 <__aeabi_dmul+0x3a4>)
 8001c78:	1a83      	subs	r3, r0, r2
 8001c7a:	9300      	str	r3, [sp, #0]
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	4699      	mov	r9, r3
 8001c80:	469b      	mov	fp, r3
 8001c82:	e697      	b.n	80019b4 <__aeabi_dmul+0x48>
 8001c84:	0005      	movs	r5, r0
 8001c86:	4325      	orrs	r5, r4
 8001c88:	d126      	bne.n	8001cd8 <__aeabi_dmul+0x36c>
 8001c8a:	2208      	movs	r2, #8
 8001c8c:	9300      	str	r3, [sp, #0]
 8001c8e:	2302      	movs	r3, #2
 8001c90:	2400      	movs	r4, #0
 8001c92:	4691      	mov	r9, r2
 8001c94:	469b      	mov	fp, r3
 8001c96:	e68d      	b.n	80019b4 <__aeabi_dmul+0x48>
 8001c98:	4652      	mov	r2, sl
 8001c9a:	9b00      	ldr	r3, [sp, #0]
 8001c9c:	4332      	orrs	r2, r6
 8001c9e:	d110      	bne.n	8001cc2 <__aeabi_dmul+0x356>
 8001ca0:	4915      	ldr	r1, [pc, #84]	; (8001cf8 <__aeabi_dmul+0x38c>)
 8001ca2:	2600      	movs	r6, #0
 8001ca4:	468c      	mov	ip, r1
 8001ca6:	4463      	add	r3, ip
 8001ca8:	4649      	mov	r1, r9
 8001caa:	9300      	str	r3, [sp, #0]
 8001cac:	2302      	movs	r3, #2
 8001cae:	4319      	orrs	r1, r3
 8001cb0:	4689      	mov	r9, r1
 8001cb2:	2002      	movs	r0, #2
 8001cb4:	e69d      	b.n	80019f2 <__aeabi_dmul+0x86>
 8001cb6:	465b      	mov	r3, fp
 8001cb8:	9701      	str	r7, [sp, #4]
 8001cba:	2b02      	cmp	r3, #2
 8001cbc:	d000      	beq.n	8001cc0 <__aeabi_dmul+0x354>
 8001cbe:	e6ad      	b.n	8001a1c <__aeabi_dmul+0xb0>
 8001cc0:	e6c3      	b.n	8001a4a <__aeabi_dmul+0xde>
 8001cc2:	4a0d      	ldr	r2, [pc, #52]	; (8001cf8 <__aeabi_dmul+0x38c>)
 8001cc4:	2003      	movs	r0, #3
 8001cc6:	4694      	mov	ip, r2
 8001cc8:	4463      	add	r3, ip
 8001cca:	464a      	mov	r2, r9
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	2303      	movs	r3, #3
 8001cd0:	431a      	orrs	r2, r3
 8001cd2:	4691      	mov	r9, r2
 8001cd4:	4652      	mov	r2, sl
 8001cd6:	e68c      	b.n	80019f2 <__aeabi_dmul+0x86>
 8001cd8:	220c      	movs	r2, #12
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	2303      	movs	r3, #3
 8001cde:	0005      	movs	r5, r0
 8001ce0:	4691      	mov	r9, r2
 8001ce2:	469b      	mov	fp, r3
 8001ce4:	e666      	b.n	80019b4 <__aeabi_dmul+0x48>
 8001ce6:	2304      	movs	r3, #4
 8001ce8:	4699      	mov	r9, r3
 8001cea:	2300      	movs	r3, #0
 8001cec:	9300      	str	r3, [sp, #0]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	2400      	movs	r4, #0
 8001cf2:	469b      	mov	fp, r3
 8001cf4:	e65e      	b.n	80019b4 <__aeabi_dmul+0x48>
 8001cf6:	46c0      	nop			; (mov r8, r8)
 8001cf8:	000007ff 	.word	0x000007ff
 8001cfc:	fffffc01 	.word	0xfffffc01
 8001d00:	08009a10 	.word	0x08009a10
 8001d04:	000003ff 	.word	0x000003ff
 8001d08:	feffffff 	.word	0xfeffffff
 8001d0c:	000007fe 	.word	0x000007fe
 8001d10:	fffffc0d 	.word	0xfffffc0d
 8001d14:	4649      	mov	r1, r9
 8001d16:	2301      	movs	r3, #1
 8001d18:	4319      	orrs	r1, r3
 8001d1a:	4689      	mov	r9, r1
 8001d1c:	2600      	movs	r6, #0
 8001d1e:	2001      	movs	r0, #1
 8001d20:	e667      	b.n	80019f2 <__aeabi_dmul+0x86>
 8001d22:	2300      	movs	r3, #0
 8001d24:	2480      	movs	r4, #128	; 0x80
 8001d26:	2500      	movs	r5, #0
 8001d28:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <__aeabi_dmul+0x4cc>)
 8001d2a:	9301      	str	r3, [sp, #4]
 8001d2c:	0324      	lsls	r4, r4, #12
 8001d2e:	e67e      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001d30:	2001      	movs	r0, #1
 8001d32:	1a40      	subs	r0, r0, r1
 8001d34:	2838      	cmp	r0, #56	; 0x38
 8001d36:	dd00      	ble.n	8001d3a <__aeabi_dmul+0x3ce>
 8001d38:	e676      	b.n	8001a28 <__aeabi_dmul+0xbc>
 8001d3a:	281f      	cmp	r0, #31
 8001d3c:	dd5b      	ble.n	8001df6 <__aeabi_dmul+0x48a>
 8001d3e:	221f      	movs	r2, #31
 8001d40:	0023      	movs	r3, r4
 8001d42:	4252      	negs	r2, r2
 8001d44:	1a51      	subs	r1, r2, r1
 8001d46:	40cb      	lsrs	r3, r1
 8001d48:	0019      	movs	r1, r3
 8001d4a:	2820      	cmp	r0, #32
 8001d4c:	d003      	beq.n	8001d56 <__aeabi_dmul+0x3ea>
 8001d4e:	4a3b      	ldr	r2, [pc, #236]	; (8001e3c <__aeabi_dmul+0x4d0>)
 8001d50:	4462      	add	r2, ip
 8001d52:	4094      	lsls	r4, r2
 8001d54:	4325      	orrs	r5, r4
 8001d56:	1e6a      	subs	r2, r5, #1
 8001d58:	4195      	sbcs	r5, r2
 8001d5a:	002a      	movs	r2, r5
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	2107      	movs	r1, #7
 8001d60:	000d      	movs	r5, r1
 8001d62:	2400      	movs	r4, #0
 8001d64:	4015      	ands	r5, r2
 8001d66:	4211      	tst	r1, r2
 8001d68:	d05b      	beq.n	8001e22 <__aeabi_dmul+0x4b6>
 8001d6a:	210f      	movs	r1, #15
 8001d6c:	2400      	movs	r4, #0
 8001d6e:	4011      	ands	r1, r2
 8001d70:	2904      	cmp	r1, #4
 8001d72:	d053      	beq.n	8001e1c <__aeabi_dmul+0x4b0>
 8001d74:	1d11      	adds	r1, r2, #4
 8001d76:	4291      	cmp	r1, r2
 8001d78:	4192      	sbcs	r2, r2
 8001d7a:	4252      	negs	r2, r2
 8001d7c:	18a4      	adds	r4, r4, r2
 8001d7e:	000a      	movs	r2, r1
 8001d80:	0223      	lsls	r3, r4, #8
 8001d82:	d54b      	bpl.n	8001e1c <__aeabi_dmul+0x4b0>
 8001d84:	2201      	movs	r2, #1
 8001d86:	2400      	movs	r4, #0
 8001d88:	2500      	movs	r5, #0
 8001d8a:	e650      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001d8c:	2380      	movs	r3, #128	; 0x80
 8001d8e:	031b      	lsls	r3, r3, #12
 8001d90:	421c      	tst	r4, r3
 8001d92:	d009      	beq.n	8001da8 <__aeabi_dmul+0x43c>
 8001d94:	421e      	tst	r6, r3
 8001d96:	d107      	bne.n	8001da8 <__aeabi_dmul+0x43c>
 8001d98:	4333      	orrs	r3, r6
 8001d9a:	031c      	lsls	r4, r3, #12
 8001d9c:	4643      	mov	r3, r8
 8001d9e:	0015      	movs	r5, r2
 8001da0:	0b24      	lsrs	r4, r4, #12
 8001da2:	4a25      	ldr	r2, [pc, #148]	; (8001e38 <__aeabi_dmul+0x4cc>)
 8001da4:	9301      	str	r3, [sp, #4]
 8001da6:	e642      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001da8:	2280      	movs	r2, #128	; 0x80
 8001daa:	0312      	lsls	r2, r2, #12
 8001dac:	4314      	orrs	r4, r2
 8001dae:	0324      	lsls	r4, r4, #12
 8001db0:	4a21      	ldr	r2, [pc, #132]	; (8001e38 <__aeabi_dmul+0x4cc>)
 8001db2:	0b24      	lsrs	r4, r4, #12
 8001db4:	9701      	str	r7, [sp, #4]
 8001db6:	e63a      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001db8:	f000 fcc8 	bl	800274c <__clzsi2>
 8001dbc:	0001      	movs	r1, r0
 8001dbe:	0002      	movs	r2, r0
 8001dc0:	3115      	adds	r1, #21
 8001dc2:	3220      	adds	r2, #32
 8001dc4:	291c      	cmp	r1, #28
 8001dc6:	dc00      	bgt.n	8001dca <__aeabi_dmul+0x45e>
 8001dc8:	e74b      	b.n	8001c62 <__aeabi_dmul+0x2f6>
 8001dca:	0034      	movs	r4, r6
 8001dcc:	3808      	subs	r0, #8
 8001dce:	2500      	movs	r5, #0
 8001dd0:	4084      	lsls	r4, r0
 8001dd2:	e750      	b.n	8001c76 <__aeabi_dmul+0x30a>
 8001dd4:	f000 fcba 	bl	800274c <__clzsi2>
 8001dd8:	0003      	movs	r3, r0
 8001dda:	001a      	movs	r2, r3
 8001ddc:	3215      	adds	r2, #21
 8001dde:	3020      	adds	r0, #32
 8001de0:	2a1c      	cmp	r2, #28
 8001de2:	dc00      	bgt.n	8001de6 <__aeabi_dmul+0x47a>
 8001de4:	e71e      	b.n	8001c24 <__aeabi_dmul+0x2b8>
 8001de6:	4656      	mov	r6, sl
 8001de8:	3b08      	subs	r3, #8
 8001dea:	2200      	movs	r2, #0
 8001dec:	409e      	lsls	r6, r3
 8001dee:	e723      	b.n	8001c38 <__aeabi_dmul+0x2cc>
 8001df0:	9b00      	ldr	r3, [sp, #0]
 8001df2:	469c      	mov	ip, r3
 8001df4:	e6e6      	b.n	8001bc4 <__aeabi_dmul+0x258>
 8001df6:	4912      	ldr	r1, [pc, #72]	; (8001e40 <__aeabi_dmul+0x4d4>)
 8001df8:	0022      	movs	r2, r4
 8001dfa:	4461      	add	r1, ip
 8001dfc:	002e      	movs	r6, r5
 8001dfe:	408d      	lsls	r5, r1
 8001e00:	408a      	lsls	r2, r1
 8001e02:	40c6      	lsrs	r6, r0
 8001e04:	1e69      	subs	r1, r5, #1
 8001e06:	418d      	sbcs	r5, r1
 8001e08:	4332      	orrs	r2, r6
 8001e0a:	432a      	orrs	r2, r5
 8001e0c:	40c4      	lsrs	r4, r0
 8001e0e:	0753      	lsls	r3, r2, #29
 8001e10:	d0b6      	beq.n	8001d80 <__aeabi_dmul+0x414>
 8001e12:	210f      	movs	r1, #15
 8001e14:	4011      	ands	r1, r2
 8001e16:	2904      	cmp	r1, #4
 8001e18:	d1ac      	bne.n	8001d74 <__aeabi_dmul+0x408>
 8001e1a:	e7b1      	b.n	8001d80 <__aeabi_dmul+0x414>
 8001e1c:	0765      	lsls	r5, r4, #29
 8001e1e:	0264      	lsls	r4, r4, #9
 8001e20:	0b24      	lsrs	r4, r4, #12
 8001e22:	08d2      	lsrs	r2, r2, #3
 8001e24:	4315      	orrs	r5, r2
 8001e26:	2200      	movs	r2, #0
 8001e28:	e601      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001e2a:	2280      	movs	r2, #128	; 0x80
 8001e2c:	0312      	lsls	r2, r2, #12
 8001e2e:	4314      	orrs	r4, r2
 8001e30:	0324      	lsls	r4, r4, #12
 8001e32:	4a01      	ldr	r2, [pc, #4]	; (8001e38 <__aeabi_dmul+0x4cc>)
 8001e34:	0b24      	lsrs	r4, r4, #12
 8001e36:	e5fa      	b.n	8001a2e <__aeabi_dmul+0xc2>
 8001e38:	000007ff 	.word	0x000007ff
 8001e3c:	0000043e 	.word	0x0000043e
 8001e40:	0000041e 	.word	0x0000041e

08001e44 <__aeabi_dsub>:
 8001e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e46:	4657      	mov	r7, sl
 8001e48:	464e      	mov	r6, r9
 8001e4a:	4645      	mov	r5, r8
 8001e4c:	46de      	mov	lr, fp
 8001e4e:	b5e0      	push	{r5, r6, r7, lr}
 8001e50:	001e      	movs	r6, r3
 8001e52:	0017      	movs	r7, r2
 8001e54:	004a      	lsls	r2, r1, #1
 8001e56:	030b      	lsls	r3, r1, #12
 8001e58:	0d52      	lsrs	r2, r2, #21
 8001e5a:	0a5b      	lsrs	r3, r3, #9
 8001e5c:	4690      	mov	r8, r2
 8001e5e:	0f42      	lsrs	r2, r0, #29
 8001e60:	431a      	orrs	r2, r3
 8001e62:	0fcd      	lsrs	r5, r1, #31
 8001e64:	4ccd      	ldr	r4, [pc, #820]	; (800219c <__aeabi_dsub+0x358>)
 8001e66:	0331      	lsls	r1, r6, #12
 8001e68:	00c3      	lsls	r3, r0, #3
 8001e6a:	4694      	mov	ip, r2
 8001e6c:	0070      	lsls	r0, r6, #1
 8001e6e:	0f7a      	lsrs	r2, r7, #29
 8001e70:	0a49      	lsrs	r1, r1, #9
 8001e72:	00ff      	lsls	r7, r7, #3
 8001e74:	469a      	mov	sl, r3
 8001e76:	46b9      	mov	r9, r7
 8001e78:	0d40      	lsrs	r0, r0, #21
 8001e7a:	0ff6      	lsrs	r6, r6, #31
 8001e7c:	4311      	orrs	r1, r2
 8001e7e:	42a0      	cmp	r0, r4
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x40>
 8001e82:	e0b1      	b.n	8001fe8 <__aeabi_dsub+0x1a4>
 8001e84:	2201      	movs	r2, #1
 8001e86:	4056      	eors	r6, r2
 8001e88:	46b3      	mov	fp, r6
 8001e8a:	42b5      	cmp	r5, r6
 8001e8c:	d100      	bne.n	8001e90 <__aeabi_dsub+0x4c>
 8001e8e:	e088      	b.n	8001fa2 <__aeabi_dsub+0x15e>
 8001e90:	4642      	mov	r2, r8
 8001e92:	1a12      	subs	r2, r2, r0
 8001e94:	2a00      	cmp	r2, #0
 8001e96:	dc00      	bgt.n	8001e9a <__aeabi_dsub+0x56>
 8001e98:	e0ae      	b.n	8001ff8 <__aeabi_dsub+0x1b4>
 8001e9a:	2800      	cmp	r0, #0
 8001e9c:	d100      	bne.n	8001ea0 <__aeabi_dsub+0x5c>
 8001e9e:	e0c1      	b.n	8002024 <__aeabi_dsub+0x1e0>
 8001ea0:	48be      	ldr	r0, [pc, #760]	; (800219c <__aeabi_dsub+0x358>)
 8001ea2:	4580      	cmp	r8, r0
 8001ea4:	d100      	bne.n	8001ea8 <__aeabi_dsub+0x64>
 8001ea6:	e151      	b.n	800214c <__aeabi_dsub+0x308>
 8001ea8:	2080      	movs	r0, #128	; 0x80
 8001eaa:	0400      	lsls	r0, r0, #16
 8001eac:	4301      	orrs	r1, r0
 8001eae:	2a38      	cmp	r2, #56	; 0x38
 8001eb0:	dd00      	ble.n	8001eb4 <__aeabi_dsub+0x70>
 8001eb2:	e17b      	b.n	80021ac <__aeabi_dsub+0x368>
 8001eb4:	2a1f      	cmp	r2, #31
 8001eb6:	dd00      	ble.n	8001eba <__aeabi_dsub+0x76>
 8001eb8:	e1ee      	b.n	8002298 <__aeabi_dsub+0x454>
 8001eba:	2020      	movs	r0, #32
 8001ebc:	003e      	movs	r6, r7
 8001ebe:	1a80      	subs	r0, r0, r2
 8001ec0:	000c      	movs	r4, r1
 8001ec2:	40d6      	lsrs	r6, r2
 8001ec4:	40d1      	lsrs	r1, r2
 8001ec6:	4087      	lsls	r7, r0
 8001ec8:	4662      	mov	r2, ip
 8001eca:	4084      	lsls	r4, r0
 8001ecc:	1a52      	subs	r2, r2, r1
 8001ece:	1e78      	subs	r0, r7, #1
 8001ed0:	4187      	sbcs	r7, r0
 8001ed2:	4694      	mov	ip, r2
 8001ed4:	4334      	orrs	r4, r6
 8001ed6:	4327      	orrs	r7, r4
 8001ed8:	1bdc      	subs	r4, r3, r7
 8001eda:	42a3      	cmp	r3, r4
 8001edc:	419b      	sbcs	r3, r3
 8001ede:	4662      	mov	r2, ip
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	4699      	mov	r9, r3
 8001ee6:	464b      	mov	r3, r9
 8001ee8:	021b      	lsls	r3, r3, #8
 8001eea:	d400      	bmi.n	8001eee <__aeabi_dsub+0xaa>
 8001eec:	e118      	b.n	8002120 <__aeabi_dsub+0x2dc>
 8001eee:	464b      	mov	r3, r9
 8001ef0:	0258      	lsls	r0, r3, #9
 8001ef2:	0a43      	lsrs	r3, r0, #9
 8001ef4:	4699      	mov	r9, r3
 8001ef6:	464b      	mov	r3, r9
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d100      	bne.n	8001efe <__aeabi_dsub+0xba>
 8001efc:	e137      	b.n	800216e <__aeabi_dsub+0x32a>
 8001efe:	4648      	mov	r0, r9
 8001f00:	f000 fc24 	bl	800274c <__clzsi2>
 8001f04:	0001      	movs	r1, r0
 8001f06:	3908      	subs	r1, #8
 8001f08:	2320      	movs	r3, #32
 8001f0a:	0022      	movs	r2, r4
 8001f0c:	4648      	mov	r0, r9
 8001f0e:	1a5b      	subs	r3, r3, r1
 8001f10:	40da      	lsrs	r2, r3
 8001f12:	4088      	lsls	r0, r1
 8001f14:	408c      	lsls	r4, r1
 8001f16:	4643      	mov	r3, r8
 8001f18:	4310      	orrs	r0, r2
 8001f1a:	4588      	cmp	r8, r1
 8001f1c:	dd00      	ble.n	8001f20 <__aeabi_dsub+0xdc>
 8001f1e:	e136      	b.n	800218e <__aeabi_dsub+0x34a>
 8001f20:	1ac9      	subs	r1, r1, r3
 8001f22:	1c4b      	adds	r3, r1, #1
 8001f24:	2b1f      	cmp	r3, #31
 8001f26:	dd00      	ble.n	8001f2a <__aeabi_dsub+0xe6>
 8001f28:	e0ea      	b.n	8002100 <__aeabi_dsub+0x2bc>
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	0026      	movs	r6, r4
 8001f2e:	1ad2      	subs	r2, r2, r3
 8001f30:	0001      	movs	r1, r0
 8001f32:	4094      	lsls	r4, r2
 8001f34:	40de      	lsrs	r6, r3
 8001f36:	40d8      	lsrs	r0, r3
 8001f38:	2300      	movs	r3, #0
 8001f3a:	4091      	lsls	r1, r2
 8001f3c:	1e62      	subs	r2, r4, #1
 8001f3e:	4194      	sbcs	r4, r2
 8001f40:	4681      	mov	r9, r0
 8001f42:	4698      	mov	r8, r3
 8001f44:	4331      	orrs	r1, r6
 8001f46:	430c      	orrs	r4, r1
 8001f48:	0763      	lsls	r3, r4, #29
 8001f4a:	d009      	beq.n	8001f60 <__aeabi_dsub+0x11c>
 8001f4c:	230f      	movs	r3, #15
 8001f4e:	4023      	ands	r3, r4
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d005      	beq.n	8001f60 <__aeabi_dsub+0x11c>
 8001f54:	1d23      	adds	r3, r4, #4
 8001f56:	42a3      	cmp	r3, r4
 8001f58:	41a4      	sbcs	r4, r4
 8001f5a:	4264      	negs	r4, r4
 8001f5c:	44a1      	add	r9, r4
 8001f5e:	001c      	movs	r4, r3
 8001f60:	464b      	mov	r3, r9
 8001f62:	021b      	lsls	r3, r3, #8
 8001f64:	d400      	bmi.n	8001f68 <__aeabi_dsub+0x124>
 8001f66:	e0de      	b.n	8002126 <__aeabi_dsub+0x2e2>
 8001f68:	4641      	mov	r1, r8
 8001f6a:	4b8c      	ldr	r3, [pc, #560]	; (800219c <__aeabi_dsub+0x358>)
 8001f6c:	3101      	adds	r1, #1
 8001f6e:	4299      	cmp	r1, r3
 8001f70:	d100      	bne.n	8001f74 <__aeabi_dsub+0x130>
 8001f72:	e0e7      	b.n	8002144 <__aeabi_dsub+0x300>
 8001f74:	464b      	mov	r3, r9
 8001f76:	488a      	ldr	r0, [pc, #552]	; (80021a0 <__aeabi_dsub+0x35c>)
 8001f78:	08e4      	lsrs	r4, r4, #3
 8001f7a:	4003      	ands	r3, r0
 8001f7c:	0018      	movs	r0, r3
 8001f7e:	0549      	lsls	r1, r1, #21
 8001f80:	075b      	lsls	r3, r3, #29
 8001f82:	0240      	lsls	r0, r0, #9
 8001f84:	4323      	orrs	r3, r4
 8001f86:	0d4a      	lsrs	r2, r1, #21
 8001f88:	0b04      	lsrs	r4, r0, #12
 8001f8a:	0512      	lsls	r2, r2, #20
 8001f8c:	07ed      	lsls	r5, r5, #31
 8001f8e:	4322      	orrs	r2, r4
 8001f90:	432a      	orrs	r2, r5
 8001f92:	0018      	movs	r0, r3
 8001f94:	0011      	movs	r1, r2
 8001f96:	bcf0      	pop	{r4, r5, r6, r7}
 8001f98:	46bb      	mov	fp, r7
 8001f9a:	46b2      	mov	sl, r6
 8001f9c:	46a9      	mov	r9, r5
 8001f9e:	46a0      	mov	r8, r4
 8001fa0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001fa2:	4642      	mov	r2, r8
 8001fa4:	1a12      	subs	r2, r2, r0
 8001fa6:	2a00      	cmp	r2, #0
 8001fa8:	dd52      	ble.n	8002050 <__aeabi_dsub+0x20c>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_dsub+0x16c>
 8001fae:	e09c      	b.n	80020ea <__aeabi_dsub+0x2a6>
 8001fb0:	45a0      	cmp	r8, r4
 8001fb2:	d100      	bne.n	8001fb6 <__aeabi_dsub+0x172>
 8001fb4:	e0ca      	b.n	800214c <__aeabi_dsub+0x308>
 8001fb6:	2080      	movs	r0, #128	; 0x80
 8001fb8:	0400      	lsls	r0, r0, #16
 8001fba:	4301      	orrs	r1, r0
 8001fbc:	2a38      	cmp	r2, #56	; 0x38
 8001fbe:	dd00      	ble.n	8001fc2 <__aeabi_dsub+0x17e>
 8001fc0:	e149      	b.n	8002256 <__aeabi_dsub+0x412>
 8001fc2:	2a1f      	cmp	r2, #31
 8001fc4:	dc00      	bgt.n	8001fc8 <__aeabi_dsub+0x184>
 8001fc6:	e197      	b.n	80022f8 <__aeabi_dsub+0x4b4>
 8001fc8:	0010      	movs	r0, r2
 8001fca:	000e      	movs	r6, r1
 8001fcc:	3820      	subs	r0, #32
 8001fce:	40c6      	lsrs	r6, r0
 8001fd0:	2a20      	cmp	r2, #32
 8001fd2:	d004      	beq.n	8001fde <__aeabi_dsub+0x19a>
 8001fd4:	2040      	movs	r0, #64	; 0x40
 8001fd6:	1a82      	subs	r2, r0, r2
 8001fd8:	4091      	lsls	r1, r2
 8001fda:	430f      	orrs	r7, r1
 8001fdc:	46b9      	mov	r9, r7
 8001fde:	464c      	mov	r4, r9
 8001fe0:	1e62      	subs	r2, r4, #1
 8001fe2:	4194      	sbcs	r4, r2
 8001fe4:	4334      	orrs	r4, r6
 8001fe6:	e13a      	b.n	800225e <__aeabi_dsub+0x41a>
 8001fe8:	000a      	movs	r2, r1
 8001fea:	433a      	orrs	r2, r7
 8001fec:	d028      	beq.n	8002040 <__aeabi_dsub+0x1fc>
 8001fee:	46b3      	mov	fp, r6
 8001ff0:	42b5      	cmp	r5, r6
 8001ff2:	d02b      	beq.n	800204c <__aeabi_dsub+0x208>
 8001ff4:	4a6b      	ldr	r2, [pc, #428]	; (80021a4 <__aeabi_dsub+0x360>)
 8001ff6:	4442      	add	r2, r8
 8001ff8:	2a00      	cmp	r2, #0
 8001ffa:	d05d      	beq.n	80020b8 <__aeabi_dsub+0x274>
 8001ffc:	4642      	mov	r2, r8
 8001ffe:	4644      	mov	r4, r8
 8002000:	1a82      	subs	r2, r0, r2
 8002002:	2c00      	cmp	r4, #0
 8002004:	d000      	beq.n	8002008 <__aeabi_dsub+0x1c4>
 8002006:	e0f5      	b.n	80021f4 <__aeabi_dsub+0x3b0>
 8002008:	4665      	mov	r5, ip
 800200a:	431d      	orrs	r5, r3
 800200c:	d100      	bne.n	8002010 <__aeabi_dsub+0x1cc>
 800200e:	e19c      	b.n	800234a <__aeabi_dsub+0x506>
 8002010:	1e55      	subs	r5, r2, #1
 8002012:	2a01      	cmp	r2, #1
 8002014:	d100      	bne.n	8002018 <__aeabi_dsub+0x1d4>
 8002016:	e1fb      	b.n	8002410 <__aeabi_dsub+0x5cc>
 8002018:	4c60      	ldr	r4, [pc, #384]	; (800219c <__aeabi_dsub+0x358>)
 800201a:	42a2      	cmp	r2, r4
 800201c:	d100      	bne.n	8002020 <__aeabi_dsub+0x1dc>
 800201e:	e1bd      	b.n	800239c <__aeabi_dsub+0x558>
 8002020:	002a      	movs	r2, r5
 8002022:	e0f0      	b.n	8002206 <__aeabi_dsub+0x3c2>
 8002024:	0008      	movs	r0, r1
 8002026:	4338      	orrs	r0, r7
 8002028:	d100      	bne.n	800202c <__aeabi_dsub+0x1e8>
 800202a:	e0c3      	b.n	80021b4 <__aeabi_dsub+0x370>
 800202c:	1e50      	subs	r0, r2, #1
 800202e:	2a01      	cmp	r2, #1
 8002030:	d100      	bne.n	8002034 <__aeabi_dsub+0x1f0>
 8002032:	e1a8      	b.n	8002386 <__aeabi_dsub+0x542>
 8002034:	4c59      	ldr	r4, [pc, #356]	; (800219c <__aeabi_dsub+0x358>)
 8002036:	42a2      	cmp	r2, r4
 8002038:	d100      	bne.n	800203c <__aeabi_dsub+0x1f8>
 800203a:	e087      	b.n	800214c <__aeabi_dsub+0x308>
 800203c:	0002      	movs	r2, r0
 800203e:	e736      	b.n	8001eae <__aeabi_dsub+0x6a>
 8002040:	2201      	movs	r2, #1
 8002042:	4056      	eors	r6, r2
 8002044:	46b3      	mov	fp, r6
 8002046:	42b5      	cmp	r5, r6
 8002048:	d000      	beq.n	800204c <__aeabi_dsub+0x208>
 800204a:	e721      	b.n	8001e90 <__aeabi_dsub+0x4c>
 800204c:	4a55      	ldr	r2, [pc, #340]	; (80021a4 <__aeabi_dsub+0x360>)
 800204e:	4442      	add	r2, r8
 8002050:	2a00      	cmp	r2, #0
 8002052:	d100      	bne.n	8002056 <__aeabi_dsub+0x212>
 8002054:	e0b5      	b.n	80021c2 <__aeabi_dsub+0x37e>
 8002056:	4642      	mov	r2, r8
 8002058:	4644      	mov	r4, r8
 800205a:	1a82      	subs	r2, r0, r2
 800205c:	2c00      	cmp	r4, #0
 800205e:	d100      	bne.n	8002062 <__aeabi_dsub+0x21e>
 8002060:	e138      	b.n	80022d4 <__aeabi_dsub+0x490>
 8002062:	4e4e      	ldr	r6, [pc, #312]	; (800219c <__aeabi_dsub+0x358>)
 8002064:	42b0      	cmp	r0, r6
 8002066:	d100      	bne.n	800206a <__aeabi_dsub+0x226>
 8002068:	e1de      	b.n	8002428 <__aeabi_dsub+0x5e4>
 800206a:	2680      	movs	r6, #128	; 0x80
 800206c:	4664      	mov	r4, ip
 800206e:	0436      	lsls	r6, r6, #16
 8002070:	4334      	orrs	r4, r6
 8002072:	46a4      	mov	ip, r4
 8002074:	2a38      	cmp	r2, #56	; 0x38
 8002076:	dd00      	ble.n	800207a <__aeabi_dsub+0x236>
 8002078:	e196      	b.n	80023a8 <__aeabi_dsub+0x564>
 800207a:	2a1f      	cmp	r2, #31
 800207c:	dd00      	ble.n	8002080 <__aeabi_dsub+0x23c>
 800207e:	e224      	b.n	80024ca <__aeabi_dsub+0x686>
 8002080:	2620      	movs	r6, #32
 8002082:	1ab4      	subs	r4, r6, r2
 8002084:	46a2      	mov	sl, r4
 8002086:	4664      	mov	r4, ip
 8002088:	4656      	mov	r6, sl
 800208a:	40b4      	lsls	r4, r6
 800208c:	46a1      	mov	r9, r4
 800208e:	001c      	movs	r4, r3
 8002090:	464e      	mov	r6, r9
 8002092:	40d4      	lsrs	r4, r2
 8002094:	4326      	orrs	r6, r4
 8002096:	0034      	movs	r4, r6
 8002098:	4656      	mov	r6, sl
 800209a:	40b3      	lsls	r3, r6
 800209c:	1e5e      	subs	r6, r3, #1
 800209e:	41b3      	sbcs	r3, r6
 80020a0:	431c      	orrs	r4, r3
 80020a2:	4663      	mov	r3, ip
 80020a4:	40d3      	lsrs	r3, r2
 80020a6:	18c9      	adds	r1, r1, r3
 80020a8:	19e4      	adds	r4, r4, r7
 80020aa:	42bc      	cmp	r4, r7
 80020ac:	41bf      	sbcs	r7, r7
 80020ae:	427f      	negs	r7, r7
 80020b0:	46b9      	mov	r9, r7
 80020b2:	4680      	mov	r8, r0
 80020b4:	4489      	add	r9, r1
 80020b6:	e0d8      	b.n	800226a <__aeabi_dsub+0x426>
 80020b8:	4640      	mov	r0, r8
 80020ba:	4c3b      	ldr	r4, [pc, #236]	; (80021a8 <__aeabi_dsub+0x364>)
 80020bc:	3001      	adds	r0, #1
 80020be:	4220      	tst	r0, r4
 80020c0:	d000      	beq.n	80020c4 <__aeabi_dsub+0x280>
 80020c2:	e0b4      	b.n	800222e <__aeabi_dsub+0x3ea>
 80020c4:	4640      	mov	r0, r8
 80020c6:	2800      	cmp	r0, #0
 80020c8:	d000      	beq.n	80020cc <__aeabi_dsub+0x288>
 80020ca:	e144      	b.n	8002356 <__aeabi_dsub+0x512>
 80020cc:	4660      	mov	r0, ip
 80020ce:	4318      	orrs	r0, r3
 80020d0:	d100      	bne.n	80020d4 <__aeabi_dsub+0x290>
 80020d2:	e190      	b.n	80023f6 <__aeabi_dsub+0x5b2>
 80020d4:	0008      	movs	r0, r1
 80020d6:	4338      	orrs	r0, r7
 80020d8:	d000      	beq.n	80020dc <__aeabi_dsub+0x298>
 80020da:	e1aa      	b.n	8002432 <__aeabi_dsub+0x5ee>
 80020dc:	4661      	mov	r1, ip
 80020de:	08db      	lsrs	r3, r3, #3
 80020e0:	0749      	lsls	r1, r1, #29
 80020e2:	430b      	orrs	r3, r1
 80020e4:	4661      	mov	r1, ip
 80020e6:	08cc      	lsrs	r4, r1, #3
 80020e8:	e027      	b.n	800213a <__aeabi_dsub+0x2f6>
 80020ea:	0008      	movs	r0, r1
 80020ec:	4338      	orrs	r0, r7
 80020ee:	d061      	beq.n	80021b4 <__aeabi_dsub+0x370>
 80020f0:	1e50      	subs	r0, r2, #1
 80020f2:	2a01      	cmp	r2, #1
 80020f4:	d100      	bne.n	80020f8 <__aeabi_dsub+0x2b4>
 80020f6:	e139      	b.n	800236c <__aeabi_dsub+0x528>
 80020f8:	42a2      	cmp	r2, r4
 80020fa:	d027      	beq.n	800214c <__aeabi_dsub+0x308>
 80020fc:	0002      	movs	r2, r0
 80020fe:	e75d      	b.n	8001fbc <__aeabi_dsub+0x178>
 8002100:	0002      	movs	r2, r0
 8002102:	391f      	subs	r1, #31
 8002104:	40ca      	lsrs	r2, r1
 8002106:	0011      	movs	r1, r2
 8002108:	2b20      	cmp	r3, #32
 800210a:	d003      	beq.n	8002114 <__aeabi_dsub+0x2d0>
 800210c:	2240      	movs	r2, #64	; 0x40
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	4098      	lsls	r0, r3
 8002112:	4304      	orrs	r4, r0
 8002114:	1e63      	subs	r3, r4, #1
 8002116:	419c      	sbcs	r4, r3
 8002118:	2300      	movs	r3, #0
 800211a:	4699      	mov	r9, r3
 800211c:	4698      	mov	r8, r3
 800211e:	430c      	orrs	r4, r1
 8002120:	0763      	lsls	r3, r4, #29
 8002122:	d000      	beq.n	8002126 <__aeabi_dsub+0x2e2>
 8002124:	e712      	b.n	8001f4c <__aeabi_dsub+0x108>
 8002126:	464b      	mov	r3, r9
 8002128:	464a      	mov	r2, r9
 800212a:	08e4      	lsrs	r4, r4, #3
 800212c:	075b      	lsls	r3, r3, #29
 800212e:	4323      	orrs	r3, r4
 8002130:	08d4      	lsrs	r4, r2, #3
 8002132:	4642      	mov	r2, r8
 8002134:	4919      	ldr	r1, [pc, #100]	; (800219c <__aeabi_dsub+0x358>)
 8002136:	428a      	cmp	r2, r1
 8002138:	d00e      	beq.n	8002158 <__aeabi_dsub+0x314>
 800213a:	0324      	lsls	r4, r4, #12
 800213c:	0552      	lsls	r2, r2, #21
 800213e:	0b24      	lsrs	r4, r4, #12
 8002140:	0d52      	lsrs	r2, r2, #21
 8002142:	e722      	b.n	8001f8a <__aeabi_dsub+0x146>
 8002144:	000a      	movs	r2, r1
 8002146:	2400      	movs	r4, #0
 8002148:	2300      	movs	r3, #0
 800214a:	e71e      	b.n	8001f8a <__aeabi_dsub+0x146>
 800214c:	08db      	lsrs	r3, r3, #3
 800214e:	4662      	mov	r2, ip
 8002150:	0752      	lsls	r2, r2, #29
 8002152:	4313      	orrs	r3, r2
 8002154:	4662      	mov	r2, ip
 8002156:	08d4      	lsrs	r4, r2, #3
 8002158:	001a      	movs	r2, r3
 800215a:	4322      	orrs	r2, r4
 800215c:	d100      	bne.n	8002160 <__aeabi_dsub+0x31c>
 800215e:	e1fc      	b.n	800255a <__aeabi_dsub+0x716>
 8002160:	2280      	movs	r2, #128	; 0x80
 8002162:	0312      	lsls	r2, r2, #12
 8002164:	4314      	orrs	r4, r2
 8002166:	0324      	lsls	r4, r4, #12
 8002168:	4a0c      	ldr	r2, [pc, #48]	; (800219c <__aeabi_dsub+0x358>)
 800216a:	0b24      	lsrs	r4, r4, #12
 800216c:	e70d      	b.n	8001f8a <__aeabi_dsub+0x146>
 800216e:	0020      	movs	r0, r4
 8002170:	f000 faec 	bl	800274c <__clzsi2>
 8002174:	0001      	movs	r1, r0
 8002176:	3118      	adds	r1, #24
 8002178:	291f      	cmp	r1, #31
 800217a:	dc00      	bgt.n	800217e <__aeabi_dsub+0x33a>
 800217c:	e6c4      	b.n	8001f08 <__aeabi_dsub+0xc4>
 800217e:	3808      	subs	r0, #8
 8002180:	4084      	lsls	r4, r0
 8002182:	4643      	mov	r3, r8
 8002184:	0020      	movs	r0, r4
 8002186:	2400      	movs	r4, #0
 8002188:	4588      	cmp	r8, r1
 800218a:	dc00      	bgt.n	800218e <__aeabi_dsub+0x34a>
 800218c:	e6c8      	b.n	8001f20 <__aeabi_dsub+0xdc>
 800218e:	4a04      	ldr	r2, [pc, #16]	; (80021a0 <__aeabi_dsub+0x35c>)
 8002190:	1a5b      	subs	r3, r3, r1
 8002192:	4010      	ands	r0, r2
 8002194:	4698      	mov	r8, r3
 8002196:	4681      	mov	r9, r0
 8002198:	e6d6      	b.n	8001f48 <__aeabi_dsub+0x104>
 800219a:	46c0      	nop			; (mov r8, r8)
 800219c:	000007ff 	.word	0x000007ff
 80021a0:	ff7fffff 	.word	0xff7fffff
 80021a4:	fffff801 	.word	0xfffff801
 80021a8:	000007fe 	.word	0x000007fe
 80021ac:	430f      	orrs	r7, r1
 80021ae:	1e7a      	subs	r2, r7, #1
 80021b0:	4197      	sbcs	r7, r2
 80021b2:	e691      	b.n	8001ed8 <__aeabi_dsub+0x94>
 80021b4:	4661      	mov	r1, ip
 80021b6:	08db      	lsrs	r3, r3, #3
 80021b8:	0749      	lsls	r1, r1, #29
 80021ba:	430b      	orrs	r3, r1
 80021bc:	4661      	mov	r1, ip
 80021be:	08cc      	lsrs	r4, r1, #3
 80021c0:	e7b8      	b.n	8002134 <__aeabi_dsub+0x2f0>
 80021c2:	4640      	mov	r0, r8
 80021c4:	4cd3      	ldr	r4, [pc, #844]	; (8002514 <__aeabi_dsub+0x6d0>)
 80021c6:	3001      	adds	r0, #1
 80021c8:	4220      	tst	r0, r4
 80021ca:	d000      	beq.n	80021ce <__aeabi_dsub+0x38a>
 80021cc:	e0a2      	b.n	8002314 <__aeabi_dsub+0x4d0>
 80021ce:	4640      	mov	r0, r8
 80021d0:	2800      	cmp	r0, #0
 80021d2:	d000      	beq.n	80021d6 <__aeabi_dsub+0x392>
 80021d4:	e101      	b.n	80023da <__aeabi_dsub+0x596>
 80021d6:	4660      	mov	r0, ip
 80021d8:	4318      	orrs	r0, r3
 80021da:	d100      	bne.n	80021de <__aeabi_dsub+0x39a>
 80021dc:	e15e      	b.n	800249c <__aeabi_dsub+0x658>
 80021de:	0008      	movs	r0, r1
 80021e0:	4338      	orrs	r0, r7
 80021e2:	d000      	beq.n	80021e6 <__aeabi_dsub+0x3a2>
 80021e4:	e15f      	b.n	80024a6 <__aeabi_dsub+0x662>
 80021e6:	4661      	mov	r1, ip
 80021e8:	08db      	lsrs	r3, r3, #3
 80021ea:	0749      	lsls	r1, r1, #29
 80021ec:	430b      	orrs	r3, r1
 80021ee:	4661      	mov	r1, ip
 80021f0:	08cc      	lsrs	r4, r1, #3
 80021f2:	e7a2      	b.n	800213a <__aeabi_dsub+0x2f6>
 80021f4:	4dc8      	ldr	r5, [pc, #800]	; (8002518 <__aeabi_dsub+0x6d4>)
 80021f6:	42a8      	cmp	r0, r5
 80021f8:	d100      	bne.n	80021fc <__aeabi_dsub+0x3b8>
 80021fa:	e0cf      	b.n	800239c <__aeabi_dsub+0x558>
 80021fc:	2580      	movs	r5, #128	; 0x80
 80021fe:	4664      	mov	r4, ip
 8002200:	042d      	lsls	r5, r5, #16
 8002202:	432c      	orrs	r4, r5
 8002204:	46a4      	mov	ip, r4
 8002206:	2a38      	cmp	r2, #56	; 0x38
 8002208:	dc56      	bgt.n	80022b8 <__aeabi_dsub+0x474>
 800220a:	2a1f      	cmp	r2, #31
 800220c:	dd00      	ble.n	8002210 <__aeabi_dsub+0x3cc>
 800220e:	e0d1      	b.n	80023b4 <__aeabi_dsub+0x570>
 8002210:	2520      	movs	r5, #32
 8002212:	001e      	movs	r6, r3
 8002214:	1aad      	subs	r5, r5, r2
 8002216:	4664      	mov	r4, ip
 8002218:	40ab      	lsls	r3, r5
 800221a:	40ac      	lsls	r4, r5
 800221c:	40d6      	lsrs	r6, r2
 800221e:	1e5d      	subs	r5, r3, #1
 8002220:	41ab      	sbcs	r3, r5
 8002222:	4334      	orrs	r4, r6
 8002224:	4323      	orrs	r3, r4
 8002226:	4664      	mov	r4, ip
 8002228:	40d4      	lsrs	r4, r2
 800222a:	1b09      	subs	r1, r1, r4
 800222c:	e049      	b.n	80022c2 <__aeabi_dsub+0x47e>
 800222e:	4660      	mov	r0, ip
 8002230:	1bdc      	subs	r4, r3, r7
 8002232:	1a46      	subs	r6, r0, r1
 8002234:	42a3      	cmp	r3, r4
 8002236:	4180      	sbcs	r0, r0
 8002238:	4240      	negs	r0, r0
 800223a:	4681      	mov	r9, r0
 800223c:	0030      	movs	r0, r6
 800223e:	464e      	mov	r6, r9
 8002240:	1b80      	subs	r0, r0, r6
 8002242:	4681      	mov	r9, r0
 8002244:	0200      	lsls	r0, r0, #8
 8002246:	d476      	bmi.n	8002336 <__aeabi_dsub+0x4f2>
 8002248:	464b      	mov	r3, r9
 800224a:	4323      	orrs	r3, r4
 800224c:	d000      	beq.n	8002250 <__aeabi_dsub+0x40c>
 800224e:	e652      	b.n	8001ef6 <__aeabi_dsub+0xb2>
 8002250:	2400      	movs	r4, #0
 8002252:	2500      	movs	r5, #0
 8002254:	e771      	b.n	800213a <__aeabi_dsub+0x2f6>
 8002256:	4339      	orrs	r1, r7
 8002258:	000c      	movs	r4, r1
 800225a:	1e62      	subs	r2, r4, #1
 800225c:	4194      	sbcs	r4, r2
 800225e:	18e4      	adds	r4, r4, r3
 8002260:	429c      	cmp	r4, r3
 8002262:	419b      	sbcs	r3, r3
 8002264:	425b      	negs	r3, r3
 8002266:	4463      	add	r3, ip
 8002268:	4699      	mov	r9, r3
 800226a:	464b      	mov	r3, r9
 800226c:	021b      	lsls	r3, r3, #8
 800226e:	d400      	bmi.n	8002272 <__aeabi_dsub+0x42e>
 8002270:	e756      	b.n	8002120 <__aeabi_dsub+0x2dc>
 8002272:	2301      	movs	r3, #1
 8002274:	469c      	mov	ip, r3
 8002276:	4ba8      	ldr	r3, [pc, #672]	; (8002518 <__aeabi_dsub+0x6d4>)
 8002278:	44e0      	add	r8, ip
 800227a:	4598      	cmp	r8, r3
 800227c:	d038      	beq.n	80022f0 <__aeabi_dsub+0x4ac>
 800227e:	464b      	mov	r3, r9
 8002280:	48a6      	ldr	r0, [pc, #664]	; (800251c <__aeabi_dsub+0x6d8>)
 8002282:	2201      	movs	r2, #1
 8002284:	4003      	ands	r3, r0
 8002286:	0018      	movs	r0, r3
 8002288:	0863      	lsrs	r3, r4, #1
 800228a:	4014      	ands	r4, r2
 800228c:	431c      	orrs	r4, r3
 800228e:	07c3      	lsls	r3, r0, #31
 8002290:	431c      	orrs	r4, r3
 8002292:	0843      	lsrs	r3, r0, #1
 8002294:	4699      	mov	r9, r3
 8002296:	e657      	b.n	8001f48 <__aeabi_dsub+0x104>
 8002298:	0010      	movs	r0, r2
 800229a:	000e      	movs	r6, r1
 800229c:	3820      	subs	r0, #32
 800229e:	40c6      	lsrs	r6, r0
 80022a0:	2a20      	cmp	r2, #32
 80022a2:	d004      	beq.n	80022ae <__aeabi_dsub+0x46a>
 80022a4:	2040      	movs	r0, #64	; 0x40
 80022a6:	1a82      	subs	r2, r0, r2
 80022a8:	4091      	lsls	r1, r2
 80022aa:	430f      	orrs	r7, r1
 80022ac:	46b9      	mov	r9, r7
 80022ae:	464f      	mov	r7, r9
 80022b0:	1e7a      	subs	r2, r7, #1
 80022b2:	4197      	sbcs	r7, r2
 80022b4:	4337      	orrs	r7, r6
 80022b6:	e60f      	b.n	8001ed8 <__aeabi_dsub+0x94>
 80022b8:	4662      	mov	r2, ip
 80022ba:	431a      	orrs	r2, r3
 80022bc:	0013      	movs	r3, r2
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	4193      	sbcs	r3, r2
 80022c2:	1afc      	subs	r4, r7, r3
 80022c4:	42a7      	cmp	r7, r4
 80022c6:	41bf      	sbcs	r7, r7
 80022c8:	427f      	negs	r7, r7
 80022ca:	1bcb      	subs	r3, r1, r7
 80022cc:	4699      	mov	r9, r3
 80022ce:	465d      	mov	r5, fp
 80022d0:	4680      	mov	r8, r0
 80022d2:	e608      	b.n	8001ee6 <__aeabi_dsub+0xa2>
 80022d4:	4666      	mov	r6, ip
 80022d6:	431e      	orrs	r6, r3
 80022d8:	d100      	bne.n	80022dc <__aeabi_dsub+0x498>
 80022da:	e0be      	b.n	800245a <__aeabi_dsub+0x616>
 80022dc:	1e56      	subs	r6, r2, #1
 80022de:	2a01      	cmp	r2, #1
 80022e0:	d100      	bne.n	80022e4 <__aeabi_dsub+0x4a0>
 80022e2:	e109      	b.n	80024f8 <__aeabi_dsub+0x6b4>
 80022e4:	4c8c      	ldr	r4, [pc, #560]	; (8002518 <__aeabi_dsub+0x6d4>)
 80022e6:	42a2      	cmp	r2, r4
 80022e8:	d100      	bne.n	80022ec <__aeabi_dsub+0x4a8>
 80022ea:	e119      	b.n	8002520 <__aeabi_dsub+0x6dc>
 80022ec:	0032      	movs	r2, r6
 80022ee:	e6c1      	b.n	8002074 <__aeabi_dsub+0x230>
 80022f0:	4642      	mov	r2, r8
 80022f2:	2400      	movs	r4, #0
 80022f4:	2300      	movs	r3, #0
 80022f6:	e648      	b.n	8001f8a <__aeabi_dsub+0x146>
 80022f8:	2020      	movs	r0, #32
 80022fa:	000c      	movs	r4, r1
 80022fc:	1a80      	subs	r0, r0, r2
 80022fe:	003e      	movs	r6, r7
 8002300:	4087      	lsls	r7, r0
 8002302:	4084      	lsls	r4, r0
 8002304:	40d6      	lsrs	r6, r2
 8002306:	1e78      	subs	r0, r7, #1
 8002308:	4187      	sbcs	r7, r0
 800230a:	40d1      	lsrs	r1, r2
 800230c:	4334      	orrs	r4, r6
 800230e:	433c      	orrs	r4, r7
 8002310:	448c      	add	ip, r1
 8002312:	e7a4      	b.n	800225e <__aeabi_dsub+0x41a>
 8002314:	4a80      	ldr	r2, [pc, #512]	; (8002518 <__aeabi_dsub+0x6d4>)
 8002316:	4290      	cmp	r0, r2
 8002318:	d100      	bne.n	800231c <__aeabi_dsub+0x4d8>
 800231a:	e0e9      	b.n	80024f0 <__aeabi_dsub+0x6ac>
 800231c:	19df      	adds	r7, r3, r7
 800231e:	429f      	cmp	r7, r3
 8002320:	419b      	sbcs	r3, r3
 8002322:	4461      	add	r1, ip
 8002324:	425b      	negs	r3, r3
 8002326:	18c9      	adds	r1, r1, r3
 8002328:	07cc      	lsls	r4, r1, #31
 800232a:	087f      	lsrs	r7, r7, #1
 800232c:	084b      	lsrs	r3, r1, #1
 800232e:	4699      	mov	r9, r3
 8002330:	4680      	mov	r8, r0
 8002332:	433c      	orrs	r4, r7
 8002334:	e6f4      	b.n	8002120 <__aeabi_dsub+0x2dc>
 8002336:	1afc      	subs	r4, r7, r3
 8002338:	42a7      	cmp	r7, r4
 800233a:	41bf      	sbcs	r7, r7
 800233c:	4663      	mov	r3, ip
 800233e:	427f      	negs	r7, r7
 8002340:	1ac9      	subs	r1, r1, r3
 8002342:	1bcb      	subs	r3, r1, r7
 8002344:	4699      	mov	r9, r3
 8002346:	465d      	mov	r5, fp
 8002348:	e5d5      	b.n	8001ef6 <__aeabi_dsub+0xb2>
 800234a:	08ff      	lsrs	r7, r7, #3
 800234c:	074b      	lsls	r3, r1, #29
 800234e:	465d      	mov	r5, fp
 8002350:	433b      	orrs	r3, r7
 8002352:	08cc      	lsrs	r4, r1, #3
 8002354:	e6ee      	b.n	8002134 <__aeabi_dsub+0x2f0>
 8002356:	4662      	mov	r2, ip
 8002358:	431a      	orrs	r2, r3
 800235a:	d000      	beq.n	800235e <__aeabi_dsub+0x51a>
 800235c:	e082      	b.n	8002464 <__aeabi_dsub+0x620>
 800235e:	000b      	movs	r3, r1
 8002360:	433b      	orrs	r3, r7
 8002362:	d11b      	bne.n	800239c <__aeabi_dsub+0x558>
 8002364:	2480      	movs	r4, #128	; 0x80
 8002366:	2500      	movs	r5, #0
 8002368:	0324      	lsls	r4, r4, #12
 800236a:	e6f9      	b.n	8002160 <__aeabi_dsub+0x31c>
 800236c:	19dc      	adds	r4, r3, r7
 800236e:	429c      	cmp	r4, r3
 8002370:	419b      	sbcs	r3, r3
 8002372:	4461      	add	r1, ip
 8002374:	4689      	mov	r9, r1
 8002376:	425b      	negs	r3, r3
 8002378:	4499      	add	r9, r3
 800237a:	464b      	mov	r3, r9
 800237c:	021b      	lsls	r3, r3, #8
 800237e:	d444      	bmi.n	800240a <__aeabi_dsub+0x5c6>
 8002380:	2301      	movs	r3, #1
 8002382:	4698      	mov	r8, r3
 8002384:	e6cc      	b.n	8002120 <__aeabi_dsub+0x2dc>
 8002386:	1bdc      	subs	r4, r3, r7
 8002388:	4662      	mov	r2, ip
 800238a:	42a3      	cmp	r3, r4
 800238c:	419b      	sbcs	r3, r3
 800238e:	1a51      	subs	r1, r2, r1
 8002390:	425b      	negs	r3, r3
 8002392:	1acb      	subs	r3, r1, r3
 8002394:	4699      	mov	r9, r3
 8002396:	2301      	movs	r3, #1
 8002398:	4698      	mov	r8, r3
 800239a:	e5a4      	b.n	8001ee6 <__aeabi_dsub+0xa2>
 800239c:	08ff      	lsrs	r7, r7, #3
 800239e:	074b      	lsls	r3, r1, #29
 80023a0:	465d      	mov	r5, fp
 80023a2:	433b      	orrs	r3, r7
 80023a4:	08cc      	lsrs	r4, r1, #3
 80023a6:	e6d7      	b.n	8002158 <__aeabi_dsub+0x314>
 80023a8:	4662      	mov	r2, ip
 80023aa:	431a      	orrs	r2, r3
 80023ac:	0014      	movs	r4, r2
 80023ae:	1e63      	subs	r3, r4, #1
 80023b0:	419c      	sbcs	r4, r3
 80023b2:	e679      	b.n	80020a8 <__aeabi_dsub+0x264>
 80023b4:	0015      	movs	r5, r2
 80023b6:	4664      	mov	r4, ip
 80023b8:	3d20      	subs	r5, #32
 80023ba:	40ec      	lsrs	r4, r5
 80023bc:	46a0      	mov	r8, r4
 80023be:	2a20      	cmp	r2, #32
 80023c0:	d005      	beq.n	80023ce <__aeabi_dsub+0x58a>
 80023c2:	2540      	movs	r5, #64	; 0x40
 80023c4:	4664      	mov	r4, ip
 80023c6:	1aaa      	subs	r2, r5, r2
 80023c8:	4094      	lsls	r4, r2
 80023ca:	4323      	orrs	r3, r4
 80023cc:	469a      	mov	sl, r3
 80023ce:	4654      	mov	r4, sl
 80023d0:	1e63      	subs	r3, r4, #1
 80023d2:	419c      	sbcs	r4, r3
 80023d4:	4643      	mov	r3, r8
 80023d6:	4323      	orrs	r3, r4
 80023d8:	e773      	b.n	80022c2 <__aeabi_dsub+0x47e>
 80023da:	4662      	mov	r2, ip
 80023dc:	431a      	orrs	r2, r3
 80023de:	d023      	beq.n	8002428 <__aeabi_dsub+0x5e4>
 80023e0:	000a      	movs	r2, r1
 80023e2:	433a      	orrs	r2, r7
 80023e4:	d000      	beq.n	80023e8 <__aeabi_dsub+0x5a4>
 80023e6:	e0a0      	b.n	800252a <__aeabi_dsub+0x6e6>
 80023e8:	4662      	mov	r2, ip
 80023ea:	08db      	lsrs	r3, r3, #3
 80023ec:	0752      	lsls	r2, r2, #29
 80023ee:	4313      	orrs	r3, r2
 80023f0:	4662      	mov	r2, ip
 80023f2:	08d4      	lsrs	r4, r2, #3
 80023f4:	e6b0      	b.n	8002158 <__aeabi_dsub+0x314>
 80023f6:	000b      	movs	r3, r1
 80023f8:	433b      	orrs	r3, r7
 80023fa:	d100      	bne.n	80023fe <__aeabi_dsub+0x5ba>
 80023fc:	e728      	b.n	8002250 <__aeabi_dsub+0x40c>
 80023fe:	08ff      	lsrs	r7, r7, #3
 8002400:	074b      	lsls	r3, r1, #29
 8002402:	465d      	mov	r5, fp
 8002404:	433b      	orrs	r3, r7
 8002406:	08cc      	lsrs	r4, r1, #3
 8002408:	e697      	b.n	800213a <__aeabi_dsub+0x2f6>
 800240a:	2302      	movs	r3, #2
 800240c:	4698      	mov	r8, r3
 800240e:	e736      	b.n	800227e <__aeabi_dsub+0x43a>
 8002410:	1afc      	subs	r4, r7, r3
 8002412:	42a7      	cmp	r7, r4
 8002414:	41bf      	sbcs	r7, r7
 8002416:	4663      	mov	r3, ip
 8002418:	427f      	negs	r7, r7
 800241a:	1ac9      	subs	r1, r1, r3
 800241c:	1bcb      	subs	r3, r1, r7
 800241e:	4699      	mov	r9, r3
 8002420:	2301      	movs	r3, #1
 8002422:	465d      	mov	r5, fp
 8002424:	4698      	mov	r8, r3
 8002426:	e55e      	b.n	8001ee6 <__aeabi_dsub+0xa2>
 8002428:	074b      	lsls	r3, r1, #29
 800242a:	08ff      	lsrs	r7, r7, #3
 800242c:	433b      	orrs	r3, r7
 800242e:	08cc      	lsrs	r4, r1, #3
 8002430:	e692      	b.n	8002158 <__aeabi_dsub+0x314>
 8002432:	1bdc      	subs	r4, r3, r7
 8002434:	4660      	mov	r0, ip
 8002436:	42a3      	cmp	r3, r4
 8002438:	41b6      	sbcs	r6, r6
 800243a:	1a40      	subs	r0, r0, r1
 800243c:	4276      	negs	r6, r6
 800243e:	1b80      	subs	r0, r0, r6
 8002440:	4681      	mov	r9, r0
 8002442:	0200      	lsls	r0, r0, #8
 8002444:	d560      	bpl.n	8002508 <__aeabi_dsub+0x6c4>
 8002446:	1afc      	subs	r4, r7, r3
 8002448:	42a7      	cmp	r7, r4
 800244a:	41bf      	sbcs	r7, r7
 800244c:	4663      	mov	r3, ip
 800244e:	427f      	negs	r7, r7
 8002450:	1ac9      	subs	r1, r1, r3
 8002452:	1bcb      	subs	r3, r1, r7
 8002454:	4699      	mov	r9, r3
 8002456:	465d      	mov	r5, fp
 8002458:	e576      	b.n	8001f48 <__aeabi_dsub+0x104>
 800245a:	08ff      	lsrs	r7, r7, #3
 800245c:	074b      	lsls	r3, r1, #29
 800245e:	433b      	orrs	r3, r7
 8002460:	08cc      	lsrs	r4, r1, #3
 8002462:	e667      	b.n	8002134 <__aeabi_dsub+0x2f0>
 8002464:	000a      	movs	r2, r1
 8002466:	08db      	lsrs	r3, r3, #3
 8002468:	433a      	orrs	r2, r7
 800246a:	d100      	bne.n	800246e <__aeabi_dsub+0x62a>
 800246c:	e66f      	b.n	800214e <__aeabi_dsub+0x30a>
 800246e:	4662      	mov	r2, ip
 8002470:	0752      	lsls	r2, r2, #29
 8002472:	4313      	orrs	r3, r2
 8002474:	4662      	mov	r2, ip
 8002476:	08d4      	lsrs	r4, r2, #3
 8002478:	2280      	movs	r2, #128	; 0x80
 800247a:	0312      	lsls	r2, r2, #12
 800247c:	4214      	tst	r4, r2
 800247e:	d007      	beq.n	8002490 <__aeabi_dsub+0x64c>
 8002480:	08c8      	lsrs	r0, r1, #3
 8002482:	4210      	tst	r0, r2
 8002484:	d104      	bne.n	8002490 <__aeabi_dsub+0x64c>
 8002486:	465d      	mov	r5, fp
 8002488:	0004      	movs	r4, r0
 800248a:	08fb      	lsrs	r3, r7, #3
 800248c:	0749      	lsls	r1, r1, #29
 800248e:	430b      	orrs	r3, r1
 8002490:	0f5a      	lsrs	r2, r3, #29
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	08db      	lsrs	r3, r3, #3
 8002496:	0752      	lsls	r2, r2, #29
 8002498:	4313      	orrs	r3, r2
 800249a:	e65d      	b.n	8002158 <__aeabi_dsub+0x314>
 800249c:	074b      	lsls	r3, r1, #29
 800249e:	08ff      	lsrs	r7, r7, #3
 80024a0:	433b      	orrs	r3, r7
 80024a2:	08cc      	lsrs	r4, r1, #3
 80024a4:	e649      	b.n	800213a <__aeabi_dsub+0x2f6>
 80024a6:	19dc      	adds	r4, r3, r7
 80024a8:	429c      	cmp	r4, r3
 80024aa:	419b      	sbcs	r3, r3
 80024ac:	4461      	add	r1, ip
 80024ae:	4689      	mov	r9, r1
 80024b0:	425b      	negs	r3, r3
 80024b2:	4499      	add	r9, r3
 80024b4:	464b      	mov	r3, r9
 80024b6:	021b      	lsls	r3, r3, #8
 80024b8:	d400      	bmi.n	80024bc <__aeabi_dsub+0x678>
 80024ba:	e631      	b.n	8002120 <__aeabi_dsub+0x2dc>
 80024bc:	464a      	mov	r2, r9
 80024be:	4b17      	ldr	r3, [pc, #92]	; (800251c <__aeabi_dsub+0x6d8>)
 80024c0:	401a      	ands	r2, r3
 80024c2:	2301      	movs	r3, #1
 80024c4:	4691      	mov	r9, r2
 80024c6:	4698      	mov	r8, r3
 80024c8:	e62a      	b.n	8002120 <__aeabi_dsub+0x2dc>
 80024ca:	0016      	movs	r6, r2
 80024cc:	4664      	mov	r4, ip
 80024ce:	3e20      	subs	r6, #32
 80024d0:	40f4      	lsrs	r4, r6
 80024d2:	46a0      	mov	r8, r4
 80024d4:	2a20      	cmp	r2, #32
 80024d6:	d005      	beq.n	80024e4 <__aeabi_dsub+0x6a0>
 80024d8:	2640      	movs	r6, #64	; 0x40
 80024da:	4664      	mov	r4, ip
 80024dc:	1ab2      	subs	r2, r6, r2
 80024de:	4094      	lsls	r4, r2
 80024e0:	4323      	orrs	r3, r4
 80024e2:	469a      	mov	sl, r3
 80024e4:	4654      	mov	r4, sl
 80024e6:	1e63      	subs	r3, r4, #1
 80024e8:	419c      	sbcs	r4, r3
 80024ea:	4643      	mov	r3, r8
 80024ec:	431c      	orrs	r4, r3
 80024ee:	e5db      	b.n	80020a8 <__aeabi_dsub+0x264>
 80024f0:	0002      	movs	r2, r0
 80024f2:	2400      	movs	r4, #0
 80024f4:	2300      	movs	r3, #0
 80024f6:	e548      	b.n	8001f8a <__aeabi_dsub+0x146>
 80024f8:	19dc      	adds	r4, r3, r7
 80024fa:	42bc      	cmp	r4, r7
 80024fc:	41bf      	sbcs	r7, r7
 80024fe:	4461      	add	r1, ip
 8002500:	4689      	mov	r9, r1
 8002502:	427f      	negs	r7, r7
 8002504:	44b9      	add	r9, r7
 8002506:	e738      	b.n	800237a <__aeabi_dsub+0x536>
 8002508:	464b      	mov	r3, r9
 800250a:	4323      	orrs	r3, r4
 800250c:	d100      	bne.n	8002510 <__aeabi_dsub+0x6cc>
 800250e:	e69f      	b.n	8002250 <__aeabi_dsub+0x40c>
 8002510:	e606      	b.n	8002120 <__aeabi_dsub+0x2dc>
 8002512:	46c0      	nop			; (mov r8, r8)
 8002514:	000007fe 	.word	0x000007fe
 8002518:	000007ff 	.word	0x000007ff
 800251c:	ff7fffff 	.word	0xff7fffff
 8002520:	08ff      	lsrs	r7, r7, #3
 8002522:	074b      	lsls	r3, r1, #29
 8002524:	433b      	orrs	r3, r7
 8002526:	08cc      	lsrs	r4, r1, #3
 8002528:	e616      	b.n	8002158 <__aeabi_dsub+0x314>
 800252a:	4662      	mov	r2, ip
 800252c:	08db      	lsrs	r3, r3, #3
 800252e:	0752      	lsls	r2, r2, #29
 8002530:	4313      	orrs	r3, r2
 8002532:	4662      	mov	r2, ip
 8002534:	08d4      	lsrs	r4, r2, #3
 8002536:	2280      	movs	r2, #128	; 0x80
 8002538:	0312      	lsls	r2, r2, #12
 800253a:	4214      	tst	r4, r2
 800253c:	d007      	beq.n	800254e <__aeabi_dsub+0x70a>
 800253e:	08c8      	lsrs	r0, r1, #3
 8002540:	4210      	tst	r0, r2
 8002542:	d104      	bne.n	800254e <__aeabi_dsub+0x70a>
 8002544:	465d      	mov	r5, fp
 8002546:	0004      	movs	r4, r0
 8002548:	08fb      	lsrs	r3, r7, #3
 800254a:	0749      	lsls	r1, r1, #29
 800254c:	430b      	orrs	r3, r1
 800254e:	0f5a      	lsrs	r2, r3, #29
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	0752      	lsls	r2, r2, #29
 8002554:	08db      	lsrs	r3, r3, #3
 8002556:	4313      	orrs	r3, r2
 8002558:	e5fe      	b.n	8002158 <__aeabi_dsub+0x314>
 800255a:	2300      	movs	r3, #0
 800255c:	4a01      	ldr	r2, [pc, #4]	; (8002564 <__aeabi_dsub+0x720>)
 800255e:	001c      	movs	r4, r3
 8002560:	e513      	b.n	8001f8a <__aeabi_dsub+0x146>
 8002562:	46c0      	nop			; (mov r8, r8)
 8002564:	000007ff 	.word	0x000007ff

08002568 <__aeabi_dcmpun>:
 8002568:	b570      	push	{r4, r5, r6, lr}
 800256a:	0005      	movs	r5, r0
 800256c:	480c      	ldr	r0, [pc, #48]	; (80025a0 <__aeabi_dcmpun+0x38>)
 800256e:	031c      	lsls	r4, r3, #12
 8002570:	0016      	movs	r6, r2
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	030a      	lsls	r2, r1, #12
 8002576:	0049      	lsls	r1, r1, #1
 8002578:	0b12      	lsrs	r2, r2, #12
 800257a:	0d49      	lsrs	r1, r1, #21
 800257c:	0b24      	lsrs	r4, r4, #12
 800257e:	0d5b      	lsrs	r3, r3, #21
 8002580:	4281      	cmp	r1, r0
 8002582:	d008      	beq.n	8002596 <__aeabi_dcmpun+0x2e>
 8002584:	4a06      	ldr	r2, [pc, #24]	; (80025a0 <__aeabi_dcmpun+0x38>)
 8002586:	2000      	movs	r0, #0
 8002588:	4293      	cmp	r3, r2
 800258a:	d103      	bne.n	8002594 <__aeabi_dcmpun+0x2c>
 800258c:	0020      	movs	r0, r4
 800258e:	4330      	orrs	r0, r6
 8002590:	1e43      	subs	r3, r0, #1
 8002592:	4198      	sbcs	r0, r3
 8002594:	bd70      	pop	{r4, r5, r6, pc}
 8002596:	2001      	movs	r0, #1
 8002598:	432a      	orrs	r2, r5
 800259a:	d1fb      	bne.n	8002594 <__aeabi_dcmpun+0x2c>
 800259c:	e7f2      	b.n	8002584 <__aeabi_dcmpun+0x1c>
 800259e:	46c0      	nop			; (mov r8, r8)
 80025a0:	000007ff 	.word	0x000007ff

080025a4 <__aeabi_d2iz>:
 80025a4:	000a      	movs	r2, r1
 80025a6:	b530      	push	{r4, r5, lr}
 80025a8:	4c13      	ldr	r4, [pc, #76]	; (80025f8 <__aeabi_d2iz+0x54>)
 80025aa:	0053      	lsls	r3, r2, #1
 80025ac:	0309      	lsls	r1, r1, #12
 80025ae:	0005      	movs	r5, r0
 80025b0:	0b09      	lsrs	r1, r1, #12
 80025b2:	2000      	movs	r0, #0
 80025b4:	0d5b      	lsrs	r3, r3, #21
 80025b6:	0fd2      	lsrs	r2, r2, #31
 80025b8:	42a3      	cmp	r3, r4
 80025ba:	dd04      	ble.n	80025c6 <__aeabi_d2iz+0x22>
 80025bc:	480f      	ldr	r0, [pc, #60]	; (80025fc <__aeabi_d2iz+0x58>)
 80025be:	4283      	cmp	r3, r0
 80025c0:	dd02      	ble.n	80025c8 <__aeabi_d2iz+0x24>
 80025c2:	4b0f      	ldr	r3, [pc, #60]	; (8002600 <__aeabi_d2iz+0x5c>)
 80025c4:	18d0      	adds	r0, r2, r3
 80025c6:	bd30      	pop	{r4, r5, pc}
 80025c8:	2080      	movs	r0, #128	; 0x80
 80025ca:	0340      	lsls	r0, r0, #13
 80025cc:	4301      	orrs	r1, r0
 80025ce:	480d      	ldr	r0, [pc, #52]	; (8002604 <__aeabi_d2iz+0x60>)
 80025d0:	1ac0      	subs	r0, r0, r3
 80025d2:	281f      	cmp	r0, #31
 80025d4:	dd08      	ble.n	80025e8 <__aeabi_d2iz+0x44>
 80025d6:	480c      	ldr	r0, [pc, #48]	; (8002608 <__aeabi_d2iz+0x64>)
 80025d8:	1ac3      	subs	r3, r0, r3
 80025da:	40d9      	lsrs	r1, r3
 80025dc:	000b      	movs	r3, r1
 80025de:	4258      	negs	r0, r3
 80025e0:	2a00      	cmp	r2, #0
 80025e2:	d1f0      	bne.n	80025c6 <__aeabi_d2iz+0x22>
 80025e4:	0018      	movs	r0, r3
 80025e6:	e7ee      	b.n	80025c6 <__aeabi_d2iz+0x22>
 80025e8:	4c08      	ldr	r4, [pc, #32]	; (800260c <__aeabi_d2iz+0x68>)
 80025ea:	40c5      	lsrs	r5, r0
 80025ec:	46a4      	mov	ip, r4
 80025ee:	4463      	add	r3, ip
 80025f0:	4099      	lsls	r1, r3
 80025f2:	000b      	movs	r3, r1
 80025f4:	432b      	orrs	r3, r5
 80025f6:	e7f2      	b.n	80025de <__aeabi_d2iz+0x3a>
 80025f8:	000003fe 	.word	0x000003fe
 80025fc:	0000041d 	.word	0x0000041d
 8002600:	7fffffff 	.word	0x7fffffff
 8002604:	00000433 	.word	0x00000433
 8002608:	00000413 	.word	0x00000413
 800260c:	fffffbed 	.word	0xfffffbed

08002610 <__aeabi_i2d>:
 8002610:	b570      	push	{r4, r5, r6, lr}
 8002612:	2800      	cmp	r0, #0
 8002614:	d016      	beq.n	8002644 <__aeabi_i2d+0x34>
 8002616:	17c3      	asrs	r3, r0, #31
 8002618:	18c5      	adds	r5, r0, r3
 800261a:	405d      	eors	r5, r3
 800261c:	0fc4      	lsrs	r4, r0, #31
 800261e:	0028      	movs	r0, r5
 8002620:	f000 f894 	bl	800274c <__clzsi2>
 8002624:	4a11      	ldr	r2, [pc, #68]	; (800266c <__aeabi_i2d+0x5c>)
 8002626:	1a12      	subs	r2, r2, r0
 8002628:	280a      	cmp	r0, #10
 800262a:	dc16      	bgt.n	800265a <__aeabi_i2d+0x4a>
 800262c:	0003      	movs	r3, r0
 800262e:	002e      	movs	r6, r5
 8002630:	3315      	adds	r3, #21
 8002632:	409e      	lsls	r6, r3
 8002634:	230b      	movs	r3, #11
 8002636:	1a18      	subs	r0, r3, r0
 8002638:	40c5      	lsrs	r5, r0
 800263a:	0552      	lsls	r2, r2, #21
 800263c:	032d      	lsls	r5, r5, #12
 800263e:	0b2d      	lsrs	r5, r5, #12
 8002640:	0d53      	lsrs	r3, r2, #21
 8002642:	e003      	b.n	800264c <__aeabi_i2d+0x3c>
 8002644:	2400      	movs	r4, #0
 8002646:	2300      	movs	r3, #0
 8002648:	2500      	movs	r5, #0
 800264a:	2600      	movs	r6, #0
 800264c:	051b      	lsls	r3, r3, #20
 800264e:	432b      	orrs	r3, r5
 8002650:	07e4      	lsls	r4, r4, #31
 8002652:	4323      	orrs	r3, r4
 8002654:	0030      	movs	r0, r6
 8002656:	0019      	movs	r1, r3
 8002658:	bd70      	pop	{r4, r5, r6, pc}
 800265a:	380b      	subs	r0, #11
 800265c:	4085      	lsls	r5, r0
 800265e:	0552      	lsls	r2, r2, #21
 8002660:	032d      	lsls	r5, r5, #12
 8002662:	2600      	movs	r6, #0
 8002664:	0b2d      	lsrs	r5, r5, #12
 8002666:	0d53      	lsrs	r3, r2, #21
 8002668:	e7f0      	b.n	800264c <__aeabi_i2d+0x3c>
 800266a:	46c0      	nop			; (mov r8, r8)
 800266c:	0000041e 	.word	0x0000041e

08002670 <__aeabi_ui2d>:
 8002670:	b510      	push	{r4, lr}
 8002672:	1e04      	subs	r4, r0, #0
 8002674:	d010      	beq.n	8002698 <__aeabi_ui2d+0x28>
 8002676:	f000 f869 	bl	800274c <__clzsi2>
 800267a:	4b0f      	ldr	r3, [pc, #60]	; (80026b8 <__aeabi_ui2d+0x48>)
 800267c:	1a1b      	subs	r3, r3, r0
 800267e:	280a      	cmp	r0, #10
 8002680:	dc11      	bgt.n	80026a6 <__aeabi_ui2d+0x36>
 8002682:	220b      	movs	r2, #11
 8002684:	0021      	movs	r1, r4
 8002686:	1a12      	subs	r2, r2, r0
 8002688:	40d1      	lsrs	r1, r2
 800268a:	3015      	adds	r0, #21
 800268c:	030a      	lsls	r2, r1, #12
 800268e:	055b      	lsls	r3, r3, #21
 8002690:	4084      	lsls	r4, r0
 8002692:	0b12      	lsrs	r2, r2, #12
 8002694:	0d5b      	lsrs	r3, r3, #21
 8002696:	e001      	b.n	800269c <__aeabi_ui2d+0x2c>
 8002698:	2300      	movs	r3, #0
 800269a:	2200      	movs	r2, #0
 800269c:	051b      	lsls	r3, r3, #20
 800269e:	4313      	orrs	r3, r2
 80026a0:	0020      	movs	r0, r4
 80026a2:	0019      	movs	r1, r3
 80026a4:	bd10      	pop	{r4, pc}
 80026a6:	0022      	movs	r2, r4
 80026a8:	380b      	subs	r0, #11
 80026aa:	4082      	lsls	r2, r0
 80026ac:	055b      	lsls	r3, r3, #21
 80026ae:	0312      	lsls	r2, r2, #12
 80026b0:	2400      	movs	r4, #0
 80026b2:	0b12      	lsrs	r2, r2, #12
 80026b4:	0d5b      	lsrs	r3, r3, #21
 80026b6:	e7f1      	b.n	800269c <__aeabi_ui2d+0x2c>
 80026b8:	0000041e 	.word	0x0000041e

080026bc <__aeabi_f2d>:
 80026bc:	b570      	push	{r4, r5, r6, lr}
 80026be:	0043      	lsls	r3, r0, #1
 80026c0:	0246      	lsls	r6, r0, #9
 80026c2:	0fc4      	lsrs	r4, r0, #31
 80026c4:	20fe      	movs	r0, #254	; 0xfe
 80026c6:	0e1b      	lsrs	r3, r3, #24
 80026c8:	1c59      	adds	r1, r3, #1
 80026ca:	0a75      	lsrs	r5, r6, #9
 80026cc:	4208      	tst	r0, r1
 80026ce:	d00c      	beq.n	80026ea <__aeabi_f2d+0x2e>
 80026d0:	22e0      	movs	r2, #224	; 0xe0
 80026d2:	0092      	lsls	r2, r2, #2
 80026d4:	4694      	mov	ip, r2
 80026d6:	076d      	lsls	r5, r5, #29
 80026d8:	0b36      	lsrs	r6, r6, #12
 80026da:	4463      	add	r3, ip
 80026dc:	051b      	lsls	r3, r3, #20
 80026de:	4333      	orrs	r3, r6
 80026e0:	07e4      	lsls	r4, r4, #31
 80026e2:	4323      	orrs	r3, r4
 80026e4:	0028      	movs	r0, r5
 80026e6:	0019      	movs	r1, r3
 80026e8:	bd70      	pop	{r4, r5, r6, pc}
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d114      	bne.n	8002718 <__aeabi_f2d+0x5c>
 80026ee:	2d00      	cmp	r5, #0
 80026f0:	d01b      	beq.n	800272a <__aeabi_f2d+0x6e>
 80026f2:	0028      	movs	r0, r5
 80026f4:	f000 f82a 	bl	800274c <__clzsi2>
 80026f8:	280a      	cmp	r0, #10
 80026fa:	dc1c      	bgt.n	8002736 <__aeabi_f2d+0x7a>
 80026fc:	230b      	movs	r3, #11
 80026fe:	002e      	movs	r6, r5
 8002700:	1a1b      	subs	r3, r3, r0
 8002702:	40de      	lsrs	r6, r3
 8002704:	0003      	movs	r3, r0
 8002706:	3315      	adds	r3, #21
 8002708:	409d      	lsls	r5, r3
 800270a:	4a0e      	ldr	r2, [pc, #56]	; (8002744 <__aeabi_f2d+0x88>)
 800270c:	0336      	lsls	r6, r6, #12
 800270e:	1a12      	subs	r2, r2, r0
 8002710:	0552      	lsls	r2, r2, #21
 8002712:	0b36      	lsrs	r6, r6, #12
 8002714:	0d53      	lsrs	r3, r2, #21
 8002716:	e7e1      	b.n	80026dc <__aeabi_f2d+0x20>
 8002718:	2d00      	cmp	r5, #0
 800271a:	d009      	beq.n	8002730 <__aeabi_f2d+0x74>
 800271c:	2280      	movs	r2, #128	; 0x80
 800271e:	0b36      	lsrs	r6, r6, #12
 8002720:	0312      	lsls	r2, r2, #12
 8002722:	4b09      	ldr	r3, [pc, #36]	; (8002748 <__aeabi_f2d+0x8c>)
 8002724:	076d      	lsls	r5, r5, #29
 8002726:	4316      	orrs	r6, r2
 8002728:	e7d8      	b.n	80026dc <__aeabi_f2d+0x20>
 800272a:	2300      	movs	r3, #0
 800272c:	2600      	movs	r6, #0
 800272e:	e7d5      	b.n	80026dc <__aeabi_f2d+0x20>
 8002730:	2600      	movs	r6, #0
 8002732:	4b05      	ldr	r3, [pc, #20]	; (8002748 <__aeabi_f2d+0x8c>)
 8002734:	e7d2      	b.n	80026dc <__aeabi_f2d+0x20>
 8002736:	0003      	movs	r3, r0
 8002738:	3b0b      	subs	r3, #11
 800273a:	409d      	lsls	r5, r3
 800273c:	002e      	movs	r6, r5
 800273e:	2500      	movs	r5, #0
 8002740:	e7e3      	b.n	800270a <__aeabi_f2d+0x4e>
 8002742:	46c0      	nop			; (mov r8, r8)
 8002744:	00000389 	.word	0x00000389
 8002748:	000007ff 	.word	0x000007ff

0800274c <__clzsi2>:
 800274c:	211c      	movs	r1, #28
 800274e:	2301      	movs	r3, #1
 8002750:	041b      	lsls	r3, r3, #16
 8002752:	4298      	cmp	r0, r3
 8002754:	d301      	bcc.n	800275a <__clzsi2+0xe>
 8002756:	0c00      	lsrs	r0, r0, #16
 8002758:	3910      	subs	r1, #16
 800275a:	0a1b      	lsrs	r3, r3, #8
 800275c:	4298      	cmp	r0, r3
 800275e:	d301      	bcc.n	8002764 <__clzsi2+0x18>
 8002760:	0a00      	lsrs	r0, r0, #8
 8002762:	3908      	subs	r1, #8
 8002764:	091b      	lsrs	r3, r3, #4
 8002766:	4298      	cmp	r0, r3
 8002768:	d301      	bcc.n	800276e <__clzsi2+0x22>
 800276a:	0900      	lsrs	r0, r0, #4
 800276c:	3904      	subs	r1, #4
 800276e:	a202      	add	r2, pc, #8	; (adr r2, 8002778 <__clzsi2+0x2c>)
 8002770:	5c10      	ldrb	r0, [r2, r0]
 8002772:	1840      	adds	r0, r0, r1
 8002774:	4770      	bx	lr
 8002776:	46c0      	nop			; (mov r8, r8)
 8002778:	02020304 	.word	0x02020304
 800277c:	01010101 	.word	0x01010101
	...

08002788 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002788:	b5f0      	push	{r4, r5, r6, r7, lr}
 800278a:	4caa      	ldr	r4, [pc, #680]	; (8002a34 <main+0x2ac>)
 800278c:	44a5      	add	sp, r4
 800278e:	af0a      	add	r7, sp, #40	; 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002790:	f001 fc78 	bl	8004084 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002794:	f000 f968 	bl	8002a68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002798:	f000 fa14 	bl	8002bc4 <MX_GPIO_Init>
  MX_SPI2_Init();
 800279c:	f000 f9a4 	bl	8002ae8 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 80027a0:	f000 f9e0 	bl	8002b64 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  icm20948_init();
 80027a4:	f000 fa58 	bl	8002c58 <icm20948_init>
 // ak09916_init();

  //This displays the header which explains the formating of the data outputted.
  uint8_t header[77];
  sprintf((char*)header, "\r\nAccel X (g),Accel Y (g),Accel Z (g),Gyro X (dps),Gyro Y (dps),Gyro Z (dps)");
 80027a8:	4aa3      	ldr	r2, [pc, #652]	; (8002a38 <main+0x2b0>)
 80027aa:	24e0      	movs	r4, #224	; 0xe0
 80027ac:	0064      	lsls	r4, r4, #1
 80027ae:	2520      	movs	r5, #32
 80027b0:	1963      	adds	r3, r4, r5
 80027b2:	19db      	adds	r3, r3, r7
 80027b4:	0011      	movs	r1, r2
 80027b6:	0018      	movs	r0, r3
 80027b8:	f004 fb44 	bl	8006e44 <siprintf>
  HAL_UART_Transmit(&huart2, header, sizeof(header), 1000);
 80027bc:	23fa      	movs	r3, #250	; 0xfa
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	1962      	adds	r2, r4, r5
 80027c2:	19d1      	adds	r1, r2, r7
 80027c4:	489d      	ldr	r0, [pc, #628]	; (8002a3c <main+0x2b4>)
 80027c6:	224d      	movs	r2, #77	; 0x4d
 80027c8:	f003 fae8 	bl	8005d9c <HAL_UART_Transmit>

  int numReadings = 10; // number of sensor readings you want to take
 80027cc:	230a      	movs	r3, #10
 80027ce:	2284      	movs	r2, #132	; 0x84
 80027d0:	0092      	lsls	r2, r2, #2
 80027d2:	1952      	adds	r2, r2, r5
 80027d4:	19d2      	adds	r2, r2, r7
 80027d6:	6013      	str	r3, [r2, #0]
  int numDataRecordings =0;
 80027d8:	2300      	movs	r3, #0
 80027da:	2287      	movs	r2, #135	; 0x87
 80027dc:	0092      	lsls	r2, r2, #2
 80027de:	1952      	adds	r2, r2, r5
 80027e0:	19d2      	adds	r2, r2, r7
 80027e2:	6013      	str	r3, [r2, #0]
  int run = 0; // whether or not to run encrypt&compress
 80027e4:	2300      	movs	r3, #0
 80027e6:	2286      	movs	r2, #134	; 0x86
 80027e8:	0092      	lsls	r2, r2, #2
 80027ea:	1952      	adds	r2, r2, r5
 80027ec:	19d2      	adds	r2, r2, r7
 80027ee:	6013      	str	r3, [r2, #0]

  char inputArray[390] =""; // size = numReadings * 37+1
 80027f0:	4b93      	ldr	r3, [pc, #588]	; (8002a40 <main+0x2b8>)
 80027f2:	2288      	movs	r2, #136	; 0x88
 80027f4:	0092      	lsls	r2, r2, #2
 80027f6:	189b      	adds	r3, r3, r2
 80027f8:	2220      	movs	r2, #32
 80027fa:	4694      	mov	ip, r2
 80027fc:	44bc      	add	ip, r7
 80027fe:	4463      	add	r3, ip
 8002800:	2200      	movs	r2, #0
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	3304      	adds	r3, #4
 8002806:	22c1      	movs	r2, #193	; 0xc1
 8002808:	0052      	lsls	r2, r2, #1
 800280a:	2100      	movs	r1, #0
 800280c:	0018      	movs	r0, r3
 800280e:	f003 fea2 	bl	8006556 <memset>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// raw data
	icm20948_accel_read(&my_accel);
 8002812:	4b8c      	ldr	r3, [pc, #560]	; (8002a44 <main+0x2bc>)
 8002814:	0018      	movs	r0, r3
 8002816:	f000 fab4 	bl	8002d82 <icm20948_accel_read>
	icm20948_gyro_read(&my_gyro);
 800281a:	4b8b      	ldr	r3, [pc, #556]	; (8002a48 <main+0x2c0>)
 800281c:	0018      	movs	r0, r3
 800281e:	f000 fa4b 	bl	8002cb8 <icm20948_gyro_read>

	// or unit conversion
	icm20948_gyro_read_dps(&my_gyro);
 8002822:	4b89      	ldr	r3, [pc, #548]	; (8002a48 <main+0x2c0>)
 8002824:	0018      	movs	r0, r3
 8002826:	f000 fb11 	bl	8002e4c <icm20948_gyro_read_dps>
	icm20948_accel_read_g(&my_accel);
 800282a:	4b86      	ldr	r3, [pc, #536]	; (8002a44 <main+0x2bc>)
 800282c:	0018      	movs	r0, r3
 800282e:	f000 fb3f 	bl	8002eb0 <icm20948_accel_read_g>

	if(numDataRecordings <=numReadings-1){
 8002832:	2684      	movs	r6, #132	; 0x84
 8002834:	00b6      	lsls	r6, r6, #2
 8002836:	2520      	movs	r5, #32
 8002838:	1973      	adds	r3, r6, r5
 800283a:	19db      	adds	r3, r3, r7
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2387      	movs	r3, #135	; 0x87
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	195b      	adds	r3, r3, r5
 8002844:	19d9      	adds	r1, r3, r7
 8002846:	680b      	ldr	r3, [r1, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	dc00      	bgt.n	800284e <main+0xc6>
 800284c:	e087      	b.n	800295e <main+0x1d6>
		/*
		 * If any changes are made to the formatting of the readings, inputArray[] size needs to be updated.
		 * The reading array size must also be updated. The strncat() must also be updated.
		 */
		char reading[40];
		sprintf(reading, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f;",my_accel.x,my_accel.y,my_accel.z,
 800284e:	4b7d      	ldr	r3, [pc, #500]	; (8002a44 <main+0x2bc>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	1c18      	adds	r0, r3, #0
 8002854:	f7ff ff32 	bl	80026bc <__aeabi_f2d>
 8002858:	61b8      	str	r0, [r7, #24]
 800285a:	61f9      	str	r1, [r7, #28]
 800285c:	4b79      	ldr	r3, [pc, #484]	; (8002a44 <main+0x2bc>)
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	1c18      	adds	r0, r3, #0
 8002862:	f7ff ff2b 	bl	80026bc <__aeabi_f2d>
 8002866:	0004      	movs	r4, r0
 8002868:	000d      	movs	r5, r1
 800286a:	4b76      	ldr	r3, [pc, #472]	; (8002a44 <main+0x2bc>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	1c18      	adds	r0, r3, #0
 8002870:	f7ff ff24 	bl	80026bc <__aeabi_f2d>
 8002874:	6138      	str	r0, [r7, #16]
 8002876:	6179      	str	r1, [r7, #20]
				my_gyro.x,my_gyro.y,my_gyro.z);
 8002878:	4b73      	ldr	r3, [pc, #460]	; (8002a48 <main+0x2c0>)
 800287a:	681b      	ldr	r3, [r3, #0]
		sprintf(reading, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f;",my_accel.x,my_accel.y,my_accel.z,
 800287c:	1c18      	adds	r0, r3, #0
 800287e:	f7ff ff1d 	bl	80026bc <__aeabi_f2d>
 8002882:	60b8      	str	r0, [r7, #8]
 8002884:	60f9      	str	r1, [r7, #12]
				my_gyro.x,my_gyro.y,my_gyro.z);
 8002886:	4b70      	ldr	r3, [pc, #448]	; (8002a48 <main+0x2c0>)
 8002888:	685b      	ldr	r3, [r3, #4]
		sprintf(reading, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f;",my_accel.x,my_accel.y,my_accel.z,
 800288a:	1c18      	adds	r0, r3, #0
 800288c:	f7ff ff16 	bl	80026bc <__aeabi_f2d>
 8002890:	6038      	str	r0, [r7, #0]
 8002892:	6079      	str	r1, [r7, #4]
				my_gyro.x,my_gyro.y,my_gyro.z);
 8002894:	4b6c      	ldr	r3, [pc, #432]	; (8002a48 <main+0x2c0>)
 8002896:	689b      	ldr	r3, [r3, #8]
		sprintf(reading, "\r\n%.2f,%.2f,%.2f,%.2f,%.2f,%.2f;",my_accel.x,my_accel.y,my_accel.z,
 8002898:	1c18      	adds	r0, r3, #0
 800289a:	f7ff ff0f 	bl	80026bc <__aeabi_f2d>
 800289e:	0002      	movs	r2, r0
 80028a0:	000b      	movs	r3, r1
 80028a2:	496a      	ldr	r1, [pc, #424]	; (8002a4c <main+0x2c4>)
 80028a4:	2024      	movs	r0, #36	; 0x24
 80028a6:	1838      	adds	r0, r7, r0
 80028a8:	9208      	str	r2, [sp, #32]
 80028aa:	9309      	str	r3, [sp, #36]	; 0x24
 80028ac:	683a      	ldr	r2, [r7, #0]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	9206      	str	r2, [sp, #24]
 80028b2:	9307      	str	r3, [sp, #28]
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	9204      	str	r2, [sp, #16]
 80028ba:	9305      	str	r3, [sp, #20]
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	9202      	str	r2, [sp, #8]
 80028c2:	9303      	str	r3, [sp, #12]
 80028c4:	9400      	str	r4, [sp, #0]
 80028c6:	9501      	str	r5, [sp, #4]
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	f004 faba 	bl	8006e44 <siprintf>
		// HAL_UART_Transmit(&huart2, (uint8_t*)reading, sizeof(reading), 1000);

		strncat(inputArray,reading,37); //if reading formatting is changed this length needs to be updated
 80028d0:	2324      	movs	r3, #36	; 0x24
 80028d2:	18f9      	adds	r1, r7, r3
 80028d4:	2438      	movs	r4, #56	; 0x38
 80028d6:	2520      	movs	r5, #32
 80028d8:	1963      	adds	r3, r4, r5
 80028da:	19db      	adds	r3, r3, r7
 80028dc:	2225      	movs	r2, #37	; 0x25
 80028de:	0018      	movs	r0, r3
 80028e0:	f004 fad0 	bl	8006e84 <strncat>

		if(numDataRecordings ==numReadings-1){
 80028e4:	1973      	adds	r3, r6, r5
 80028e6:	19d9      	adds	r1, r3, r7
 80028e8:	680b      	ldr	r3, [r1, #0]
 80028ea:	3b01      	subs	r3, #1
 80028ec:	2287      	movs	r2, #135	; 0x87
 80028ee:	0092      	lsls	r2, r2, #2
 80028f0:	1952      	adds	r2, r2, r5
 80028f2:	19d2      	adds	r2, r2, r7
 80028f4:	6812      	ldr	r2, [r2, #0]
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d127      	bne.n	800294a <main+0x1c2>
			strcat(inputArray,"}");
 80028fa:	1963      	adds	r3, r4, r5
 80028fc:	19db      	adds	r3, r3, r7
 80028fe:	0018      	movs	r0, r3
 8002900:	f7fd fc02 	bl	8000108 <strlen>
 8002904:	0003      	movs	r3, r0
 8002906:	001a      	movs	r2, r3
 8002908:	1963      	adds	r3, r4, r5
 800290a:	19db      	adds	r3, r3, r7
 800290c:	189a      	adds	r2, r3, r2
 800290e:	4b50      	ldr	r3, [pc, #320]	; (8002a50 <main+0x2c8>)
 8002910:	0010      	movs	r0, r2
 8002912:	0019      	movs	r1, r3
 8002914:	2302      	movs	r3, #2
 8002916:	001a      	movs	r2, r3
 8002918:	f003 fe14 	bl	8006544 <memcpy>
			HAL_UART_Transmit(&huart2, (uint8_t*)inputArray, sizeof(inputArray), 1000);
 800291c:	23fa      	movs	r3, #250	; 0xfa
 800291e:	009b      	lsls	r3, r3, #2
 8002920:	22c3      	movs	r2, #195	; 0xc3
 8002922:	0052      	lsls	r2, r2, #1
 8002924:	1961      	adds	r1, r4, r5
 8002926:	19c9      	adds	r1, r1, r7
 8002928:	4844      	ldr	r0, [pc, #272]	; (8002a3c <main+0x2b4>)
 800292a:	f003 fa37 	bl	8005d9c <HAL_UART_Transmit>
			HAL_Delay(1000);
 800292e:	23fa      	movs	r3, #250	; 0xfa
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	0018      	movs	r0, r3
 8002934:	f001 fc0a 	bl	800414c <HAL_Delay>
			run++;
 8002938:	2286      	movs	r2, #134	; 0x86
 800293a:	0092      	lsls	r2, r2, #2
 800293c:	1953      	adds	r3, r2, r5
 800293e:	19db      	adds	r3, r3, r7
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	3301      	adds	r3, #1
 8002944:	1952      	adds	r2, r2, r5
 8002946:	19d2      	adds	r2, r2, r7
 8002948:	6013      	str	r3, [r2, #0]
		}
		numDataRecordings++;
 800294a:	2287      	movs	r2, #135	; 0x87
 800294c:	0092      	lsls	r2, r2, #2
 800294e:	2120      	movs	r1, #32
 8002950:	1853      	adds	r3, r2, r1
 8002952:	19db      	adds	r3, r3, r7
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	3301      	adds	r3, #1
 8002958:	1852      	adds	r2, r2, r1
 800295a:	19d2      	adds	r2, r2, r7
 800295c:	6013      	str	r3, [r2, #0]
	}

	/* Run compression and encryption */
	if (run ==1) {
 800295e:	2386      	movs	r3, #134	; 0x86
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	2520      	movs	r5, #32
 8002964:	195b      	adds	r3, r3, r5
 8002966:	19db      	adds	r3, r3, r7
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b01      	cmp	r3, #1
 800296c:	d000      	beq.n	8002970 <main+0x1e8>
 800296e:	e750      	b.n	8002812 <main+0x8a>
		char start[4];
		sprintf(start, "\r\n#");
 8002970:	4a38      	ldr	r2, [pc, #224]	; (8002a54 <main+0x2cc>)
 8002972:	2434      	movs	r4, #52	; 0x34
 8002974:	1963      	adds	r3, r4, r5
 8002976:	19db      	adds	r3, r3, r7
 8002978:	0011      	movs	r1, r2
 800297a:	0018      	movs	r0, r3
 800297c:	f004 fa62 	bl	8006e44 <siprintf>
		HAL_UART_Transmit(&huart2, (uint8_t*)start, sizeof(start), 1000);
 8002980:	23fa      	movs	r3, #250	; 0xfa
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	1962      	adds	r2, r4, r5
 8002986:	19d1      	adds	r1, r2, r7
 8002988:	482c      	ldr	r0, [pc, #176]	; (8002a3c <main+0x2b4>)
 800298a:	2204      	movs	r2, #4
 800298c:	f003 fa06 	bl	8005d9c <HAL_UART_Transmit>

		encrypt(inputArray);
 8002990:	2338      	movs	r3, #56	; 0x38
 8002992:	195b      	adds	r3, r3, r5
 8002994:	19db      	adds	r3, r3, r7
 8002996:	0018      	movs	r0, r3
 8002998:	f001 f970 	bl	8003c7c <encrypt>
		int count = 0;
 800299c:	2300      	movs	r3, #0
 800299e:	2285      	movs	r2, #133	; 0x85
 80029a0:	0092      	lsls	r2, r2, #2
 80029a2:	1952      	adds	r2, r2, r5
 80029a4:	19d2      	adds	r2, r2, r7
 80029a6:	6013      	str	r3, [r2, #0]
		while (count < compressedBits) {
 80029a8:	e01f      	b.n	80029ea <main+0x262>
			/*
			 * note that the numbers are of different lengths and so this causes extra blank space in the formatting
			 * which the transmission will fill with random characters. Make sure to used clean.py or adapt it to remove
			 * the unwanted characters.
			 */
			sprintf(temp, "\r\n%d,",compressed[count]);
 80029aa:	4b2b      	ldr	r3, [pc, #172]	; (8002a58 <main+0x2d0>)
 80029ac:	2485      	movs	r4, #133	; 0x85
 80029ae:	00a4      	lsls	r4, r4, #2
 80029b0:	2620      	movs	r6, #32
 80029b2:	19a2      	adds	r2, r4, r6
 80029b4:	19d2      	adds	r2, r2, r7
 80029b6:	6812      	ldr	r2, [r2, #0]
 80029b8:	0092      	lsls	r2, r2, #2
 80029ba:	58d2      	ldr	r2, [r2, r3]
 80029bc:	4927      	ldr	r1, [pc, #156]	; (8002a5c <main+0x2d4>)
 80029be:	252c      	movs	r5, #44	; 0x2c
 80029c0:	19ab      	adds	r3, r5, r6
 80029c2:	19db      	adds	r3, r3, r7
 80029c4:	0018      	movs	r0, r3
 80029c6:	f004 fa3d 	bl	8006e44 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)temp, sizeof(temp), 1000);
 80029ca:	23fa      	movs	r3, #250	; 0xfa
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	19aa      	adds	r2, r5, r6
 80029d0:	19d1      	adds	r1, r2, r7
 80029d2:	481a      	ldr	r0, [pc, #104]	; (8002a3c <main+0x2b4>)
 80029d4:	2207      	movs	r2, #7
 80029d6:	f003 f9e1 	bl	8005d9c <HAL_UART_Transmit>
			count++;
 80029da:	0032      	movs	r2, r6
 80029dc:	19a3      	adds	r3, r4, r6
 80029de:	19db      	adds	r3, r3, r7
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	3301      	adds	r3, #1
 80029e4:	18a2      	adds	r2, r4, r2
 80029e6:	19d2      	adds	r2, r2, r7
 80029e8:	6013      	str	r3, [r2, #0]
		while (count < compressedBits) {
 80029ea:	4b1d      	ldr	r3, [pc, #116]	; (8002a60 <main+0x2d8>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	2285      	movs	r2, #133	; 0x85
 80029f0:	0092      	lsls	r2, r2, #2
 80029f2:	2120      	movs	r1, #32
 80029f4:	1852      	adds	r2, r2, r1
 80029f6:	19d2      	adds	r2, r2, r7
 80029f8:	6812      	ldr	r2, [r2, #0]
 80029fa:	429a      	cmp	r2, r3
 80029fc:	dbd5      	blt.n	80029aa <main+0x222>
		}
		// TO ONLY TRANSMIT ONCE, COMMENT THESE LINES OUT
		/** Reset the values for continued transmission **/
		run=1;
 80029fe:	2301      	movs	r3, #1
 8002a00:	2286      	movs	r2, #134	; 0x86
 8002a02:	0092      	lsls	r2, r2, #2
 8002a04:	1852      	adds	r2, r2, r1
 8002a06:	19d2      	adds	r2, r2, r7
 8002a08:	6013      	str	r3, [r2, #0]
		numDataRecordings = 0;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	2287      	movs	r2, #135	; 0x87
 8002a0e:	0092      	lsls	r2, r2, #2
 8002a10:	1852      	adds	r2, r2, r1
 8002a12:	19d2      	adds	r2, r2, r7
 8002a14:	6013      	str	r3, [r2, #0]
		memset(inputArray, 0, sizeof(inputArray));
 8002a16:	23c3      	movs	r3, #195	; 0xc3
 8002a18:	005a      	lsls	r2, r3, #1
 8002a1a:	2338      	movs	r3, #56	; 0x38
 8002a1c:	185b      	adds	r3, r3, r1
 8002a1e:	19db      	adds	r3, r3, r7
 8002a20:	2100      	movs	r1, #0
 8002a22:	0018      	movs	r0, r3
 8002a24:	f003 fd97 	bl	8006556 <memset>
		HAL_Delay(5000); //add a delay before getting next block of recordings
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <main+0x2dc>)
 8002a2a:	0018      	movs	r0, r3
 8002a2c:	f001 fb8e 	bl	800414c <HAL_Delay>
	icm20948_accel_read(&my_accel);
 8002a30:	e6ef      	b.n	8002812 <main+0x8a>
 8002a32:	46c0      	nop			; (mov r8, r8)
 8002a34:	fffffd94 	.word	0xfffffd94
 8002a38:	080098a8 	.word	0x080098a8
 8002a3c:	20000268 	.word	0x20000268
 8002a40:	fffffe18 	.word	0xfffffe18
 8002a44:	200002f8 	.word	0x200002f8
 8002a48:	200002ec 	.word	0x200002ec
 8002a4c:	080098f8 	.word	0x080098f8
 8002a50:	0800991c 	.word	0x0800991c
 8002a54:	08009920 	.word	0x08009920
 8002a58:	20000510 	.word	0x20000510
 8002a5c:	08009924 	.word	0x08009924
 8002a60:	20000ce0 	.word	0x20000ce0
 8002a64:	00001388 	.word	0x00001388

08002a68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a68:	b590      	push	{r4, r7, lr}
 8002a6a:	b091      	sub	sp, #68	; 0x44
 8002a6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002a6e:	2410      	movs	r4, #16
 8002a70:	193b      	adds	r3, r7, r4
 8002a72:	0018      	movs	r0, r3
 8002a74:	2330      	movs	r3, #48	; 0x30
 8002a76:	001a      	movs	r2, r3
 8002a78:	2100      	movs	r1, #0
 8002a7a:	f003 fd6c 	bl	8006556 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002a7e:	003b      	movs	r3, r7
 8002a80:	0018      	movs	r0, r3
 8002a82:	2310      	movs	r3, #16
 8002a84:	001a      	movs	r2, r3
 8002a86:	2100      	movs	r1, #0
 8002a88:	f003 fd65 	bl	8006556 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002a8c:	0021      	movs	r1, r4
 8002a8e:	187b      	adds	r3, r7, r1
 8002a90:	2202      	movs	r2, #2
 8002a92:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002a94:	187b      	adds	r3, r7, r1
 8002a96:	2201      	movs	r2, #1
 8002a98:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002a9a:	187b      	adds	r3, r7, r1
 8002a9c:	2210      	movs	r2, #16
 8002a9e:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002aa0:	187b      	adds	r3, r7, r1
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002aa6:	187b      	adds	r3, r7, r1
 8002aa8:	0018      	movs	r0, r3
 8002aaa:	f001 fdb5 	bl	8004618 <HAL_RCC_OscConfig>
 8002aae:	1e03      	subs	r3, r0, #0
 8002ab0:	d001      	beq.n	8002ab6 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8002ab2:	f001 f91f 	bl	8003cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002ab6:	003b      	movs	r3, r7
 8002ab8:	2207      	movs	r2, #7
 8002aba:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002abc:	003b      	movs	r3, r7
 8002abe:	2200      	movs	r2, #0
 8002ac0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002ac2:	003b      	movs	r3, r7
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002ac8:	003b      	movs	r3, r7
 8002aca:	2200      	movs	r2, #0
 8002acc:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002ace:	003b      	movs	r3, r7
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	0018      	movs	r0, r3
 8002ad4:	f002 f8ba 	bl	8004c4c <HAL_RCC_ClockConfig>
 8002ad8:	1e03      	subs	r3, r0, #0
 8002ada:	d001      	beq.n	8002ae0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8002adc:	f001 f90a 	bl	8003cf4 <Error_Handler>
  }
}
 8002ae0:	46c0      	nop			; (mov r8, r8)
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	b011      	add	sp, #68	; 0x44
 8002ae6:	bd90      	pop	{r4, r7, pc}

08002ae8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8002aec:	4b1b      	ldr	r3, [pc, #108]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002aee:	4a1c      	ldr	r2, [pc, #112]	; (8002b60 <MX_SPI2_Init+0x78>)
 8002af0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8002af2:	4b1a      	ldr	r3, [pc, #104]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002af4:	2282      	movs	r2, #130	; 0x82
 8002af6:	0052      	lsls	r2, r2, #1
 8002af8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002afa:	4b18      	ldr	r3, [pc, #96]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002b00:	4b16      	ldr	r3, [pc, #88]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b02:	22e0      	movs	r2, #224	; 0xe0
 8002b04:	00d2      	lsls	r2, r2, #3
 8002b06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b08:	4b14      	ldr	r3, [pc, #80]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002b0e:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b10:	2200      	movs	r2, #0
 8002b12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8002b14:	4b11      	ldr	r3, [pc, #68]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b16:	2280      	movs	r2, #128	; 0x80
 8002b18:	0092      	lsls	r2, r2, #2
 8002b1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b1c:	4b0f      	ldr	r3, [pc, #60]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002b22:	4b0e      	ldr	r3, [pc, #56]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8002b28:	4b0c      	ldr	r3, [pc, #48]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b2e:	4b0b      	ldr	r3, [pc, #44]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b30:	2200      	movs	r2, #0
 8002b32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8002b34:	4b09      	ldr	r3, [pc, #36]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b36:	2207      	movs	r2, #7
 8002b38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002b3a:	4b08      	ldr	r3, [pc, #32]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8002b40:	4b06      	ldr	r3, [pc, #24]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b42:	2208      	movs	r2, #8
 8002b44:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8002b46:	4b05      	ldr	r3, [pc, #20]	; (8002b5c <MX_SPI2_Init+0x74>)
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f002 f9d1 	bl	8004ef0 <HAL_SPI_Init>
 8002b4e:	1e03      	subs	r3, r0, #0
 8002b50:	d001      	beq.n	8002b56 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8002b52:	f001 f8cf 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8002b56:	46c0      	nop			; (mov r8, r8)
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	20000204 	.word	0x20000204
 8002b60:	40003800 	.word	0x40003800

08002b64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002b68:	4b14      	ldr	r3, [pc, #80]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <MX_USART2_UART_Init+0x5c>)
 8002b6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8002b6e:	4b13      	ldr	r3, [pc, #76]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b70:	2296      	movs	r2, #150	; 0x96
 8002b72:	0192      	lsls	r2, r2, #6
 8002b74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002b76:	4b11      	ldr	r3, [pc, #68]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b78:	2200      	movs	r2, #0
 8002b7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002b7c:	4b0f      	ldr	r3, [pc, #60]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b7e:	2200      	movs	r2, #0
 8002b80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002b82:	4b0e      	ldr	r3, [pc, #56]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b84:	2200      	movs	r2, #0
 8002b86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002b88:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b8a:	220c      	movs	r2, #12
 8002b8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b8e:	4b0b      	ldr	r3, [pc, #44]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b90:	2200      	movs	r2, #0
 8002b92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b94:	4b09      	ldr	r3, [pc, #36]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b96:	2200      	movs	r2, #0
 8002b98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002b9a:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ba0:	4b06      	ldr	r3, [pc, #24]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ba6:	4b05      	ldr	r3, [pc, #20]	; (8002bbc <MX_USART2_UART_Init+0x58>)
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f003 f8a3 	bl	8005cf4 <HAL_UART_Init>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d001      	beq.n	8002bb6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002bb2:	f001 f89f 	bl	8003cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000268 	.word	0x20000268
 8002bc0:	40004400 	.word	0x40004400

08002bc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002bc4:	b590      	push	{r4, r7, lr}
 8002bc6:	b089      	sub	sp, #36	; 0x24
 8002bc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bca:	240c      	movs	r4, #12
 8002bcc:	193b      	adds	r3, r7, r4
 8002bce:	0018      	movs	r0, r3
 8002bd0:	2314      	movs	r3, #20
 8002bd2:	001a      	movs	r2, r3
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	f003 fcbe 	bl	8006556 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002bda:	4b1d      	ldr	r3, [pc, #116]	; (8002c50 <MX_GPIO_Init+0x8c>)
 8002bdc:	695a      	ldr	r2, [r3, #20]
 8002bde:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <MX_GPIO_Init+0x8c>)
 8002be0:	2180      	movs	r1, #128	; 0x80
 8002be2:	0289      	lsls	r1, r1, #10
 8002be4:	430a      	orrs	r2, r1
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <MX_GPIO_Init+0x8c>)
 8002bea:	695a      	ldr	r2, [r3, #20]
 8002bec:	2380      	movs	r3, #128	; 0x80
 8002bee:	029b      	lsls	r3, r3, #10
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	60bb      	str	r3, [r7, #8]
 8002bf4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bf6:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <MX_GPIO_Init+0x8c>)
 8002bf8:	695a      	ldr	r2, [r3, #20]
 8002bfa:	4b15      	ldr	r3, [pc, #84]	; (8002c50 <MX_GPIO_Init+0x8c>)
 8002bfc:	2180      	movs	r1, #128	; 0x80
 8002bfe:	02c9      	lsls	r1, r1, #11
 8002c00:	430a      	orrs	r2, r1
 8002c02:	615a      	str	r2, [r3, #20]
 8002c04:	4b12      	ldr	r3, [pc, #72]	; (8002c50 <MX_GPIO_Init+0x8c>)
 8002c06:	695a      	ldr	r2, [r3, #20]
 8002c08:	2380      	movs	r3, #128	; 0x80
 8002c0a:	02db      	lsls	r3, r3, #11
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8002c12:	2380      	movs	r3, #128	; 0x80
 8002c14:	015b      	lsls	r3, r3, #5
 8002c16:	480f      	ldr	r0, [pc, #60]	; (8002c54 <MX_GPIO_Init+0x90>)
 8002c18:	2201      	movs	r2, #1
 8002c1a:	0019      	movs	r1, r3
 8002c1c:	f001 fcde 	bl	80045dc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8002c20:	193b      	adds	r3, r7, r4
 8002c22:	2280      	movs	r2, #128	; 0x80
 8002c24:	0152      	lsls	r2, r2, #5
 8002c26:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002c28:	193b      	adds	r3, r7, r4
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c2e:	193b      	adds	r3, r7, r4
 8002c30:	2200      	movs	r2, #0
 8002c32:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	2200      	movs	r2, #0
 8002c38:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8002c3a:	193b      	adds	r3, r7, r4
 8002c3c:	4a05      	ldr	r2, [pc, #20]	; (8002c54 <MX_GPIO_Init+0x90>)
 8002c3e:	0019      	movs	r1, r3
 8002c40:	0010      	movs	r0, r2
 8002c42:	f001 fb5b 	bl	80042fc <HAL_GPIO_Init>

}
 8002c46:	46c0      	nop			; (mov r8, r8)
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	b009      	add	sp, #36	; 0x24
 8002c4c:	bd90      	pop	{r4, r7, pc}
 8002c4e:	46c0      	nop			; (mov r8, r8)
 8002c50:	40021000 	.word	0x40021000
 8002c54:	48000400 	.word	0x48000400

08002c58 <icm20948_init>:
/* USER CODE BEGIN 4 */
/********************************
 * THIS IS THE IMU SENSOR CODE
 *******************************/
void icm20948_init()
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8002c5c:	46c0      	nop			; (mov r8, r8)
 8002c5e:	f000 f959 	bl	8002f14 <icm20948_who_am_i>
 8002c62:	0003      	movs	r3, r0
 8002c64:	001a      	movs	r2, r3
 8002c66:	2301      	movs	r3, #1
 8002c68:	4053      	eors	r3, r2
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1f6      	bne.n	8002c5e <icm20948_init+0x6>

	icm20948_device_reset();
 8002c70:	f000 f965 	bl	8002f3e <icm20948_device_reset>
	icm20948_wakeup();
 8002c74:	f000 f970 	bl	8002f58 <icm20948_wakeup>

	icm20948_clock_source(1);
 8002c78:	2001      	movs	r0, #1
 8002c7a:	f000 f9a6 	bl	8002fca <icm20948_clock_source>
	icm20948_odr_align_enable();
 8002c7e:	f000 f9c5 	bl	800300c <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8002c82:	f000 f987 	bl	8002f94 <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f9ca 	bl	8003020 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8002c8c:	2000      	movs	r0, #0
 8002c8e:	f000 f9eb 	bl	8003068 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8002c92:	2000      	movs	r0, #0
 8002c94:	f000 fa0c 	bl	80030b0 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8002c98:	2000      	movs	r0, #0
 8002c9a:	f000 fa1a 	bl	80030d2 <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8002c9e:	f000 fa3f 	bl	8003120 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8002ca2:	f000 fb03 	bl	80032ac <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8002ca6:	2003      	movs	r0, #3
 8002ca8:	f000 fc54 	bl	8003554 <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_2g);
 8002cac:	2000      	movs	r0, #0
 8002cae:	f000 fcad 	bl	800360c <icm20948_accel_full_scale_select>
}
 8002cb2:	46c0      	nop			; (mov r8, r8)
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8002cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cba:	b085      	sub	sp, #20
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
	uint8_t tempH = read_single_icm20948_reg(ub_0, B0_GYRO_XOUT_H);
 8002cc0:	250f      	movs	r5, #15
 8002cc2:	197c      	adds	r4, r7, r5
 8002cc4:	2133      	movs	r1, #51	; 0x33
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	f000 fd32 	bl	8003730 <read_single_icm20948_reg>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	7023      	strb	r3, [r4, #0]
	uint8_t tempL = read_single_icm20948_reg(ub_0, B0_GYRO_XOUT_L);
 8002cd0:	260e      	movs	r6, #14
 8002cd2:	19bc      	adds	r4, r7, r6
 8002cd4:	2134      	movs	r1, #52	; 0x34
 8002cd6:	2000      	movs	r0, #0
 8002cd8:	f000 fd2a 	bl	8003730 <read_single_icm20948_reg>
 8002cdc:	0003      	movs	r3, r0
 8002cde:	7023      	strb	r3, [r4, #0]

	data->x = (int16_t)(tempH<< 8|tempL);
 8002ce0:	002c      	movs	r4, r5
 8002ce2:	193b      	adds	r3, r7, r4
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	b21a      	sxth	r2, r3
 8002cea:	19bb      	adds	r3, r7, r6
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	b21b      	sxth	r3, r3
 8002cf4:	0018      	movs	r0, r3
 8002cf6:	f7fd fead 	bl	8000a54 <__aeabi_i2f>
 8002cfa:	1c02      	adds	r2, r0, #0
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	601a      	str	r2, [r3, #0]

	tempH = read_single_icm20948_reg(ub_0, B0_GYRO_YOUT_H);
 8002d00:	0025      	movs	r5, r4
 8002d02:	193c      	adds	r4, r7, r4
 8002d04:	2135      	movs	r1, #53	; 0x35
 8002d06:	2000      	movs	r0, #0
 8002d08:	f000 fd12 	bl	8003730 <read_single_icm20948_reg>
 8002d0c:	0003      	movs	r3, r0
 8002d0e:	7023      	strb	r3, [r4, #0]
	tempL = read_single_icm20948_reg(ub_0, B0_GYRO_YOUT_L);
 8002d10:	19bc      	adds	r4, r7, r6
 8002d12:	2136      	movs	r1, #54	; 0x36
 8002d14:	2000      	movs	r0, #0
 8002d16:	f000 fd0b 	bl	8003730 <read_single_icm20948_reg>
 8002d1a:	0003      	movs	r3, r0
 8002d1c:	7023      	strb	r3, [r4, #0]
	data->y = (int16_t)(tempH<< 8|tempL);
 8002d1e:	002c      	movs	r4, r5
 8002d20:	193b      	adds	r3, r7, r4
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	021b      	lsls	r3, r3, #8
 8002d26:	b21a      	sxth	r2, r3
 8002d28:	19bb      	adds	r3, r7, r6
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	b21b      	sxth	r3, r3
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	b21b      	sxth	r3, r3
 8002d32:	0018      	movs	r0, r3
 8002d34:	f7fd fe8e 	bl	8000a54 <__aeabi_i2f>
 8002d38:	1c02      	adds	r2, r0, #0
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	605a      	str	r2, [r3, #4]

	tempH = read_single_icm20948_reg(ub_0, B0_GYRO_ZOUT_H);
 8002d3e:	0025      	movs	r5, r4
 8002d40:	193c      	adds	r4, r7, r4
 8002d42:	2137      	movs	r1, #55	; 0x37
 8002d44:	2000      	movs	r0, #0
 8002d46:	f000 fcf3 	bl	8003730 <read_single_icm20948_reg>
 8002d4a:	0003      	movs	r3, r0
 8002d4c:	7023      	strb	r3, [r4, #0]
	tempL = read_single_icm20948_reg(ub_0, B0_GYRO_ZOUT_L);
 8002d4e:	19bc      	adds	r4, r7, r6
 8002d50:	2138      	movs	r1, #56	; 0x38
 8002d52:	2000      	movs	r0, #0
 8002d54:	f000 fcec 	bl	8003730 <read_single_icm20948_reg>
 8002d58:	0003      	movs	r3, r0
 8002d5a:	7023      	strb	r3, [r4, #0]
	data->z = (int16_t)(tempH<< 8|tempL);
 8002d5c:	197b      	adds	r3, r7, r5
 8002d5e:	781b      	ldrb	r3, [r3, #0]
 8002d60:	021b      	lsls	r3, r3, #8
 8002d62:	b21a      	sxth	r2, r3
 8002d64:	19bb      	adds	r3, r7, r6
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	b21b      	sxth	r3, r3
 8002d6a:	4313      	orrs	r3, r2
 8002d6c:	b21b      	sxth	r3, r3
 8002d6e:	0018      	movs	r0, r3
 8002d70:	f7fd fe70 	bl	8000a54 <__aeabi_i2f>
 8002d74:	1c02      	adds	r2, r0, #0
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	609a      	str	r2, [r3, #8]
}
 8002d7a:	46c0      	nop			; (mov r8, r8)
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	b005      	add	sp, #20
 8002d80:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d82 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8002d82:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d84:	b085      	sub	sp, #20
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	6078      	str	r0, [r7, #4]
	uint8_t tempH = read_single_icm20948_reg(ub_0, B0_ACCEL_XOUT_H);
 8002d8a:	250f      	movs	r5, #15
 8002d8c:	197c      	adds	r4, r7, r5
 8002d8e:	212d      	movs	r1, #45	; 0x2d
 8002d90:	2000      	movs	r0, #0
 8002d92:	f000 fccd 	bl	8003730 <read_single_icm20948_reg>
 8002d96:	0003      	movs	r3, r0
 8002d98:	7023      	strb	r3, [r4, #0]
	uint8_t tempL = read_single_icm20948_reg(ub_0, B0_ACCEL_XOUT_L);
 8002d9a:	260e      	movs	r6, #14
 8002d9c:	19bc      	adds	r4, r7, r6
 8002d9e:	212e      	movs	r1, #46	; 0x2e
 8002da0:	2000      	movs	r0, #0
 8002da2:	f000 fcc5 	bl	8003730 <read_single_icm20948_reg>
 8002da6:	0003      	movs	r3, r0
 8002da8:	7023      	strb	r3, [r4, #0]

	data->x = (int16_t)(tempH<< 8|tempL);
 8002daa:	002c      	movs	r4, r5
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	021b      	lsls	r3, r3, #8
 8002db2:	b21a      	sxth	r2, r3
 8002db4:	19bb      	adds	r3, r7, r6
 8002db6:	781b      	ldrb	r3, [r3, #0]
 8002db8:	b21b      	sxth	r3, r3
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	b21b      	sxth	r3, r3
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	f7fd fe48 	bl	8000a54 <__aeabi_i2f>
 8002dc4:	1c02      	adds	r2, r0, #0
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	601a      	str	r2, [r3, #0]

	tempH = read_single_icm20948_reg(ub_0, B0_ACCEL_YOUT_H);
 8002dca:	0025      	movs	r5, r4
 8002dcc:	193c      	adds	r4, r7, r4
 8002dce:	212f      	movs	r1, #47	; 0x2f
 8002dd0:	2000      	movs	r0, #0
 8002dd2:	f000 fcad 	bl	8003730 <read_single_icm20948_reg>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	7023      	strb	r3, [r4, #0]
	tempL = read_single_icm20948_reg(ub_0, B0_ACCEL_YOUT_L);
 8002dda:	19bc      	adds	r4, r7, r6
 8002ddc:	2130      	movs	r1, #48	; 0x30
 8002dde:	2000      	movs	r0, #0
 8002de0:	f000 fca6 	bl	8003730 <read_single_icm20948_reg>
 8002de4:	0003      	movs	r3, r0
 8002de6:	7023      	strb	r3, [r4, #0]
	data->y = (int16_t)(tempH<< 8|tempL);
 8002de8:	002c      	movs	r4, r5
 8002dea:	193b      	adds	r3, r7, r4
 8002dec:	781b      	ldrb	r3, [r3, #0]
 8002dee:	021b      	lsls	r3, r3, #8
 8002df0:	b21a      	sxth	r2, r3
 8002df2:	19bb      	adds	r3, r7, r6
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	b21b      	sxth	r3, r3
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	b21b      	sxth	r3, r3
 8002dfc:	0018      	movs	r0, r3
 8002dfe:	f7fd fe29 	bl	8000a54 <__aeabi_i2f>
 8002e02:	1c02      	adds	r2, r0, #0
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	605a      	str	r2, [r3, #4]

	tempH = read_single_icm20948_reg(ub_0, B0_ACCEL_ZOUT_H);
 8002e08:	0025      	movs	r5, r4
 8002e0a:	193c      	adds	r4, r7, r4
 8002e0c:	2131      	movs	r1, #49	; 0x31
 8002e0e:	2000      	movs	r0, #0
 8002e10:	f000 fc8e 	bl	8003730 <read_single_icm20948_reg>
 8002e14:	0003      	movs	r3, r0
 8002e16:	7023      	strb	r3, [r4, #0]
	tempL = read_single_icm20948_reg(ub_0, B0_ACCEL_ZOUT_L);
 8002e18:	19bc      	adds	r4, r7, r6
 8002e1a:	2132      	movs	r1, #50	; 0x32
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	f000 fc87 	bl	8003730 <read_single_icm20948_reg>
 8002e22:	0003      	movs	r3, r0
 8002e24:	7023      	strb	r3, [r4, #0]
	data->z = (int16_t)(tempH<< 8|tempL);
 8002e26:	197b      	adds	r3, r7, r5
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	021b      	lsls	r3, r3, #8
 8002e2c:	b21a      	sxth	r2, r3
 8002e2e:	19bb      	adds	r3, r7, r6
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b21b      	sxth	r3, r3
 8002e34:	4313      	orrs	r3, r2
 8002e36:	b21b      	sxth	r3, r3
 8002e38:	0018      	movs	r0, r3
 8002e3a:	f7fd fe0b 	bl	8000a54 <__aeabi_i2f>
 8002e3e:	1c02      	adds	r2, r0, #0
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8002e44:	46c0      	nop			; (mov r8, r8)
 8002e46:	46bd      	mov	sp, r7
 8002e48:	b005      	add	sp, #20
 8002e4a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e4c <icm20948_gyro_read_dps>:

void icm20948_gyro_read_dps(axises* data)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
	icm20948_gyro_read(data);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	0018      	movs	r0, r3
 8002e58:	f7ff ff2e 	bl	8002cb8 <icm20948_gyro_read>

	data->x /= gyro_scale_factor;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	4b12      	ldr	r3, [pc, #72]	; (8002eac <icm20948_gyro_read_dps+0x60>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	1c19      	adds	r1, r3, #0
 8002e66:	1c10      	adds	r0, r2, #0
 8002e68:	f7fd fcbc 	bl	80007e4 <__aeabi_fdiv>
 8002e6c:	1c03      	adds	r3, r0, #0
 8002e6e:	1c1a      	adds	r2, r3, #0
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	601a      	str	r2, [r3, #0]
	data->y /= gyro_scale_factor;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4b0c      	ldr	r3, [pc, #48]	; (8002eac <icm20948_gyro_read_dps+0x60>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	1c19      	adds	r1, r3, #0
 8002e7e:	1c10      	adds	r0, r2, #0
 8002e80:	f7fd fcb0 	bl	80007e4 <__aeabi_fdiv>
 8002e84:	1c03      	adds	r3, r0, #0
 8002e86:	1c1a      	adds	r2, r3, #0
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	605a      	str	r2, [r3, #4]
	data->z /= gyro_scale_factor;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	4b06      	ldr	r3, [pc, #24]	; (8002eac <icm20948_gyro_read_dps+0x60>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	1c19      	adds	r1, r3, #0
 8002e96:	1c10      	adds	r0, r2, #0
 8002e98:	f7fd fca4 	bl	80007e4 <__aeabi_fdiv>
 8002e9c:	1c03      	adds	r3, r0, #0
 8002e9e:	1c1a      	adds	r2, r3, #0
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	609a      	str	r2, [r3, #8]
}
 8002ea4:	46c0      	nop			; (mov r8, r8)
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	b002      	add	sp, #8
 8002eaa:	bd80      	pop	{r7, pc}
 8002eac:	20000304 	.word	0x20000304

08002eb0 <icm20948_accel_read_g>:

void icm20948_accel_read_g(axises* data)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b082      	sub	sp, #8
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
	icm20948_accel_read(data);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	0018      	movs	r0, r3
 8002ebc:	f7ff ff61 	bl	8002d82 <icm20948_accel_read>

	data->x /= accel_scale_factor;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	4b12      	ldr	r3, [pc, #72]	; (8002f10 <icm20948_accel_read_g+0x60>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	1c19      	adds	r1, r3, #0
 8002eca:	1c10      	adds	r0, r2, #0
 8002ecc:	f7fd fc8a 	bl	80007e4 <__aeabi_fdiv>
 8002ed0:	1c03      	adds	r3, r0, #0
 8002ed2:	1c1a      	adds	r2, r3, #0
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	601a      	str	r2, [r3, #0]
	data->y /= accel_scale_factor;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	685a      	ldr	r2, [r3, #4]
 8002edc:	4b0c      	ldr	r3, [pc, #48]	; (8002f10 <icm20948_accel_read_g+0x60>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	1c19      	adds	r1, r3, #0
 8002ee2:	1c10      	adds	r0, r2, #0
 8002ee4:	f7fd fc7e 	bl	80007e4 <__aeabi_fdiv>
 8002ee8:	1c03      	adds	r3, r0, #0
 8002eea:	1c1a      	adds	r2, r3, #0
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	605a      	str	r2, [r3, #4]
	data->z /= accel_scale_factor;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <icm20948_accel_read_g+0x60>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	1c19      	adds	r1, r3, #0
 8002efa:	1c10      	adds	r0, r2, #0
 8002efc:	f7fd fc72 	bl	80007e4 <__aeabi_fdiv>
 8002f00:	1c03      	adds	r3, r0, #0
 8002f02:	1c1a      	adds	r2, r3, #0
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	609a      	str	r2, [r3, #8]
}
 8002f08:	46c0      	nop			; (mov r8, r8)
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	b002      	add	sp, #8
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000308 	.word	0x20000308

08002f14 <icm20948_who_am_i>:

bool icm20948_who_am_i()
{
 8002f14:	b590      	push	{r4, r7, lr}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8002f1a:	1dfc      	adds	r4, r7, #7
 8002f1c:	2100      	movs	r1, #0
 8002f1e:	2000      	movs	r0, #0
 8002f20:	f000 fc06 	bl	8003730 <read_single_icm20948_reg>
 8002f24:	0003      	movs	r3, r0
 8002f26:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8002f28:	1dfb      	adds	r3, r7, #7
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2bea      	cmp	r3, #234	; 0xea
 8002f2e:	d101      	bne.n	8002f34 <icm20948_who_am_i+0x20>
		return true;
 8002f30:	2301      	movs	r3, #1
 8002f32:	e000      	b.n	8002f36 <icm20948_who_am_i+0x22>
	else
		return false;
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	0018      	movs	r0, r3
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	b003      	add	sp, #12
 8002f3c:	bd90      	pop	{r4, r7, pc}

08002f3e <icm20948_device_reset>:

void icm20948_device_reset()
{
 8002f3e:	b580      	push	{r7, lr}
 8002f40:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8002f42:	22c1      	movs	r2, #193	; 0xc1
 8002f44:	2106      	movs	r1, #6
 8002f46:	2000      	movs	r0, #0
 8002f48:	f000 fc24 	bl	8003794 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002f4c:	2064      	movs	r0, #100	; 0x64
 8002f4e:	f001 f8fd 	bl	800414c <HAL_Delay>
}
 8002f52:	46c0      	nop			; (mov r8, r8)
 8002f54:	46bd      	mov	sp, r7
 8002f56:	bd80      	pop	{r7, pc}

08002f58 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8002f58:	b590      	push	{r4, r7, lr}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002f5e:	1dfc      	adds	r4, r7, #7
 8002f60:	2106      	movs	r1, #6
 8002f62:	2000      	movs	r0, #0
 8002f64:	f000 fbe4 	bl	8003730 <read_single_icm20948_reg>
 8002f68:	0003      	movs	r3, r0
 8002f6a:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8002f6c:	1dfb      	adds	r3, r7, #7
 8002f6e:	1dfa      	adds	r2, r7, #7
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	438a      	bics	r2, r1
 8002f76:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002f78:	1dfb      	adds	r3, r7, #7
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	001a      	movs	r2, r3
 8002f7e:	2106      	movs	r1, #6
 8002f80:	2000      	movs	r0, #0
 8002f82:	f000 fc07 	bl	8003794 <write_single_icm20948_reg>
	HAL_Delay(100);
 8002f86:	2064      	movs	r0, #100	; 0x64
 8002f88:	f001 f8e0 	bl	800414c <HAL_Delay>
}
 8002f8c:	46c0      	nop			; (mov r8, r8)
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	b003      	add	sp, #12
 8002f92:	bd90      	pop	{r4, r7, pc}

08002f94 <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8002f94:	b590      	push	{r4, r7, lr}
 8002f96:	b083      	sub	sp, #12
 8002f98:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8002f9a:	1dfc      	adds	r4, r7, #7
 8002f9c:	2103      	movs	r1, #3
 8002f9e:	2000      	movs	r0, #0
 8002fa0:	f000 fbc6 	bl	8003730 <read_single_icm20948_reg>
 8002fa4:	0003      	movs	r3, r0
 8002fa6:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8002fa8:	1dfb      	adds	r3, r7, #7
 8002faa:	1dfa      	adds	r2, r7, #7
 8002fac:	7812      	ldrb	r2, [r2, #0]
 8002fae:	2110      	movs	r1, #16
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8002fb4:	1dfb      	adds	r3, r7, #7
 8002fb6:	781b      	ldrb	r3, [r3, #0]
 8002fb8:	001a      	movs	r2, r3
 8002fba:	2103      	movs	r1, #3
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	f000 fbe9 	bl	8003794 <write_single_icm20948_reg>
}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b003      	add	sp, #12
 8002fc8:	bd90      	pop	{r4, r7, pc}

08002fca <icm20948_clock_source>:

void icm20948_clock_source(uint8_t source)
{
 8002fca:	b5b0      	push	{r4, r5, r7, lr}
 8002fcc:	b084      	sub	sp, #16
 8002fce:	af00      	add	r7, sp, #0
 8002fd0:	0002      	movs	r2, r0
 8002fd2:	1dfb      	adds	r3, r7, #7
 8002fd4:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8002fd6:	250f      	movs	r5, #15
 8002fd8:	197c      	adds	r4, r7, r5
 8002fda:	2106      	movs	r1, #6
 8002fdc:	2000      	movs	r0, #0
 8002fde:	f000 fba7 	bl	8003730 <read_single_icm20948_reg>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8002fe6:	0028      	movs	r0, r5
 8002fe8:	183b      	adds	r3, r7, r0
 8002fea:	1839      	adds	r1, r7, r0
 8002fec:	1dfa      	adds	r2, r7, #7
 8002fee:	7809      	ldrb	r1, [r1, #0]
 8002ff0:	7812      	ldrb	r2, [r2, #0]
 8002ff2:	430a      	orrs	r2, r1
 8002ff4:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8002ff6:	183b      	adds	r3, r7, r0
 8002ff8:	781b      	ldrb	r3, [r3, #0]
 8002ffa:	001a      	movs	r2, r3
 8002ffc:	2106      	movs	r1, #6
 8002ffe:	2000      	movs	r0, #0
 8003000:	f000 fbc8 	bl	8003794 <write_single_icm20948_reg>
}
 8003004:	46c0      	nop			; (mov r8, r8)
 8003006:	46bd      	mov	sp, r7
 8003008:	b004      	add	sp, #16
 800300a:	bdb0      	pop	{r4, r5, r7, pc}

0800300c <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 800300c:	b580      	push	{r7, lr}
 800300e:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8003010:	2201      	movs	r2, #1
 8003012:	2109      	movs	r1, #9
 8003014:	2020      	movs	r0, #32
 8003016:	f000 fbbd 	bl	8003794 <write_single_icm20948_reg>
}
 800301a:	46c0      	nop			; (mov r8, r8)
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8003020:	b5b0      	push	{r4, r5, r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	0002      	movs	r2, r0
 8003028:	1dfb      	adds	r3, r7, #7
 800302a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 800302c:	250f      	movs	r5, #15
 800302e:	197c      	adds	r4, r7, r5
 8003030:	2101      	movs	r1, #1
 8003032:	2020      	movs	r0, #32
 8003034:	f000 fb7c 	bl	8003730 <read_single_icm20948_reg>
 8003038:	0003      	movs	r3, r0
 800303a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 800303c:	1dfb      	adds	r3, r7, #7
 800303e:	781b      	ldrb	r3, [r3, #0]
 8003040:	00db      	lsls	r3, r3, #3
 8003042:	b25a      	sxtb	r2, r3
 8003044:	197b      	adds	r3, r7, r5
 8003046:	781b      	ldrb	r3, [r3, #0]
 8003048:	b25b      	sxtb	r3, r3
 800304a:	4313      	orrs	r3, r2
 800304c:	b25a      	sxtb	r2, r3
 800304e:	197b      	adds	r3, r7, r5
 8003050:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8003052:	197b      	adds	r3, r7, r5
 8003054:	781b      	ldrb	r3, [r3, #0]
 8003056:	001a      	movs	r2, r3
 8003058:	2101      	movs	r1, #1
 800305a:	2020      	movs	r0, #32
 800305c:	f000 fb9a 	bl	8003794 <write_single_icm20948_reg>
}
 8003060:	46c0      	nop			; (mov r8, r8)
 8003062:	46bd      	mov	sp, r7
 8003064:	b004      	add	sp, #16
 8003066:	bdb0      	pop	{r4, r5, r7, pc}

08003068 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8003068:	b5b0      	push	{r4, r5, r7, lr}
 800306a:	b084      	sub	sp, #16
 800306c:	af00      	add	r7, sp, #0
 800306e:	0002      	movs	r2, r0
 8003070:	1dfb      	adds	r3, r7, #7
 8003072:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8003074:	250f      	movs	r5, #15
 8003076:	197c      	adds	r4, r7, r5
 8003078:	2114      	movs	r1, #20
 800307a:	2020      	movs	r0, #32
 800307c:	f000 fb58 	bl	8003730 <read_single_icm20948_reg>
 8003080:	0003      	movs	r3, r0
 8003082:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8003084:	1dfb      	adds	r3, r7, #7
 8003086:	781b      	ldrb	r3, [r3, #0]
 8003088:	00db      	lsls	r3, r3, #3
 800308a:	b25a      	sxtb	r2, r3
 800308c:	197b      	adds	r3, r7, r5
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b25b      	sxtb	r3, r3
 8003092:	4313      	orrs	r3, r2
 8003094:	b25a      	sxtb	r2, r3
 8003096:	197b      	adds	r3, r7, r5
 8003098:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 800309a:	197b      	adds	r3, r7, r5
 800309c:	781b      	ldrb	r3, [r3, #0]
 800309e:	001a      	movs	r2, r3
 80030a0:	2101      	movs	r1, #1
 80030a2:	2020      	movs	r0, #32
 80030a4:	f000 fb76 	bl	8003794 <write_single_icm20948_reg>
}
 80030a8:	46c0      	nop			; (mov r8, r8)
 80030aa:	46bd      	mov	sp, r7
 80030ac:	b004      	add	sp, #16
 80030ae:	bdb0      	pop	{r4, r5, r7, pc}

080030b0 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b082      	sub	sp, #8
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	0002      	movs	r2, r0
 80030b8:	1dfb      	adds	r3, r7, #7
 80030ba:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 80030bc:	1dfb      	adds	r3, r7, #7
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	001a      	movs	r2, r3
 80030c2:	2100      	movs	r1, #0
 80030c4:	2020      	movs	r0, #32
 80030c6:	f000 fb65 	bl	8003794 <write_single_icm20948_reg>
}
 80030ca:	46c0      	nop			; (mov r8, r8)
 80030cc:	46bd      	mov	sp, r7
 80030ce:	b002      	add	sp, #8
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 80030d2:	b590      	push	{r4, r7, lr}
 80030d4:	b085      	sub	sp, #20
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	0002      	movs	r2, r0
 80030da:	1dbb      	adds	r3, r7, #6
 80030dc:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 80030de:	1dbb      	adds	r3, r7, #6
 80030e0:	881b      	ldrh	r3, [r3, #0]
 80030e2:	0a1b      	lsrs	r3, r3, #8
 80030e4:	b29a      	uxth	r2, r3
 80030e6:	200f      	movs	r0, #15
 80030e8:	183b      	adds	r3, r7, r0
 80030ea:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 80030ec:	1dbb      	adds	r3, r7, #6
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	b2da      	uxtb	r2, r3
 80030f2:	240e      	movs	r4, #14
 80030f4:	193b      	adds	r3, r7, r4
 80030f6:	210f      	movs	r1, #15
 80030f8:	400a      	ands	r2, r1
 80030fa:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 80030fc:	183b      	adds	r3, r7, r0
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	001a      	movs	r2, r3
 8003102:	2110      	movs	r1, #16
 8003104:	2020      	movs	r0, #32
 8003106:	f000 fb45 	bl	8003794 <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 800310a:	193b      	adds	r3, r7, r4
 800310c:	781b      	ldrb	r3, [r3, #0]
 800310e:	001a      	movs	r2, r3
 8003110:	2111      	movs	r1, #17
 8003112:	2020      	movs	r0, #32
 8003114:	f000 fb3e 	bl	8003794 <write_single_icm20948_reg>
}
 8003118:	46c0      	nop			; (mov r8, r8)
 800311a:	46bd      	mov	sp, r7
 800311c:	b005      	add	sp, #20
 800311e:	bd90      	pop	{r4, r7, pc}

08003120 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8003120:	b5b0      	push	{r4, r5, r7, lr}
 8003122:	b08a      	sub	sp, #40	; 0x28
 8003124:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8003126:	230c      	movs	r3, #12
 8003128:	18fb      	adds	r3, r7, r3
 800312a:	0018      	movs	r0, r3
 800312c:	230c      	movs	r3, #12
 800312e:	001a      	movs	r2, r3
 8003130:	2100      	movs	r1, #0
 8003132:	f003 fa10 	bl	8006556 <memset>
	uint8_t gyro_offset[6] = {0};
 8003136:	1d3b      	adds	r3, r7, #4
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]
 800313c:	2200      	movs	r2, #0
 800313e:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8003140:	2300      	movs	r3, #0
 8003142:	627b      	str	r3, [r7, #36]	; 0x24
 8003144:	e041      	b.n	80031ca <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 8003146:	2518      	movs	r5, #24
 8003148:	197b      	adds	r3, r7, r5
 800314a:	0018      	movs	r0, r3
 800314c:	f7ff fdb4 	bl	8002cb8 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8003150:	240c      	movs	r4, #12
 8003152:	193b      	adds	r3, r7, r4
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	0018      	movs	r0, r3
 8003158:	f7fd fc7c 	bl	8000a54 <__aeabi_i2f>
 800315c:	1c02      	adds	r2, r0, #0
 800315e:	197b      	adds	r3, r7, r5
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1c19      	adds	r1, r3, #0
 8003164:	1c10      	adds	r0, r2, #0
 8003166:	f7fd f99f 	bl	80004a8 <__aeabi_fadd>
 800316a:	1c03      	adds	r3, r0, #0
 800316c:	1c18      	adds	r0, r3, #0
 800316e:	f7fd fc51 	bl	8000a14 <__aeabi_f2iz>
 8003172:	0002      	movs	r2, r0
 8003174:	193b      	adds	r3, r7, r4
 8003176:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8003178:	193b      	adds	r3, r7, r4
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0018      	movs	r0, r3
 800317e:	f7fd fc69 	bl	8000a54 <__aeabi_i2f>
 8003182:	1c02      	adds	r2, r0, #0
 8003184:	197b      	adds	r3, r7, r5
 8003186:	685b      	ldr	r3, [r3, #4]
 8003188:	1c19      	adds	r1, r3, #0
 800318a:	1c10      	adds	r0, r2, #0
 800318c:	f7fd f98c 	bl	80004a8 <__aeabi_fadd>
 8003190:	1c03      	adds	r3, r0, #0
 8003192:	1c18      	adds	r0, r3, #0
 8003194:	f7fd fc3e 	bl	8000a14 <__aeabi_f2iz>
 8003198:	0002      	movs	r2, r0
 800319a:	193b      	adds	r3, r7, r4
 800319c:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 800319e:	193b      	adds	r3, r7, r4
 80031a0:	689b      	ldr	r3, [r3, #8]
 80031a2:	0018      	movs	r0, r3
 80031a4:	f7fd fc56 	bl	8000a54 <__aeabi_i2f>
 80031a8:	1c02      	adds	r2, r0, #0
 80031aa:	197b      	adds	r3, r7, r5
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	1c19      	adds	r1, r3, #0
 80031b0:	1c10      	adds	r0, r2, #0
 80031b2:	f7fd f979 	bl	80004a8 <__aeabi_fadd>
 80031b6:	1c03      	adds	r3, r0, #0
 80031b8:	1c18      	adds	r0, r3, #0
 80031ba:	f7fd fc2b 	bl	8000a14 <__aeabi_f2iz>
 80031be:	0002      	movs	r2, r0
 80031c0:	193b      	adds	r3, r7, r4
 80031c2:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 80031c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031c6:	3301      	adds	r3, #1
 80031c8:	627b      	str	r3, [r7, #36]	; 0x24
 80031ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031cc:	2b63      	cmp	r3, #99	; 0x63
 80031ce:	ddba      	ble.n	8003146 <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 80031d0:	240c      	movs	r4, #12
 80031d2:	193b      	adds	r3, r7, r4
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	2164      	movs	r1, #100	; 0x64
 80031d8:	0018      	movs	r0, r3
 80031da:	f7fd f83b 	bl	8000254 <__divsi3>
 80031de:	0003      	movs	r3, r0
 80031e0:	001a      	movs	r2, r3
 80031e2:	193b      	adds	r3, r7, r4
 80031e4:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 80031e6:	193b      	adds	r3, r7, r4
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	2164      	movs	r1, #100	; 0x64
 80031ec:	0018      	movs	r0, r3
 80031ee:	f7fd f831 	bl	8000254 <__divsi3>
 80031f2:	0003      	movs	r3, r0
 80031f4:	001a      	movs	r2, r3
 80031f6:	193b      	adds	r3, r7, r4
 80031f8:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 80031fa:	193b      	adds	r3, r7, r4
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2164      	movs	r1, #100	; 0x64
 8003200:	0018      	movs	r0, r3
 8003202:	f7fd f827 	bl	8000254 <__divsi3>
 8003206:	0003      	movs	r3, r0
 8003208:	001a      	movs	r2, r3
 800320a:	193b      	adds	r3, r7, r4
 800320c:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 800320e:	193b      	adds	r3, r7, r4
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	425b      	negs	r3, r3
 8003214:	2b00      	cmp	r3, #0
 8003216:	da00      	bge.n	800321a <icm20948_gyro_calibration+0xfa>
 8003218:	3303      	adds	r3, #3
 800321a:	109b      	asrs	r3, r3, #2
 800321c:	121b      	asrs	r3, r3, #8
 800321e:	b2da      	uxtb	r2, r3
 8003220:	1d3b      	adds	r3, r7, #4
 8003222:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8003224:	230c      	movs	r3, #12
 8003226:	18fb      	adds	r3, r7, r3
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	425b      	negs	r3, r3
 800322c:	2b00      	cmp	r3, #0
 800322e:	da00      	bge.n	8003232 <icm20948_gyro_calibration+0x112>
 8003230:	3303      	adds	r3, #3
 8003232:	109b      	asrs	r3, r3, #2
 8003234:	b2da      	uxtb	r2, r3
 8003236:	1d3b      	adds	r3, r7, #4
 8003238:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 800323a:	230c      	movs	r3, #12
 800323c:	18fb      	adds	r3, r7, r3
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	425b      	negs	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	da00      	bge.n	8003248 <icm20948_gyro_calibration+0x128>
 8003246:	3303      	adds	r3, #3
 8003248:	109b      	asrs	r3, r3, #2
 800324a:	121b      	asrs	r3, r3, #8
 800324c:	b2da      	uxtb	r2, r3
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8003252:	230c      	movs	r3, #12
 8003254:	18fb      	adds	r3, r7, r3
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	425b      	negs	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	da00      	bge.n	8003260 <icm20948_gyro_calibration+0x140>
 800325e:	3303      	adds	r3, #3
 8003260:	109b      	asrs	r3, r3, #2
 8003262:	b2da      	uxtb	r2, r3
 8003264:	1d3b      	adds	r3, r7, #4
 8003266:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8003268:	230c      	movs	r3, #12
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	689b      	ldr	r3, [r3, #8]
 800326e:	425b      	negs	r3, r3
 8003270:	2b00      	cmp	r3, #0
 8003272:	da00      	bge.n	8003276 <icm20948_gyro_calibration+0x156>
 8003274:	3303      	adds	r3, #3
 8003276:	109b      	asrs	r3, r3, #2
 8003278:	121b      	asrs	r3, r3, #8
 800327a:	b2da      	uxtb	r2, r3
 800327c:	1d3b      	adds	r3, r7, #4
 800327e:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8003280:	230c      	movs	r3, #12
 8003282:	18fb      	adds	r3, r7, r3
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	425b      	negs	r3, r3
 8003288:	2b00      	cmp	r3, #0
 800328a:	da00      	bge.n	800328e <icm20948_gyro_calibration+0x16e>
 800328c:	3303      	adds	r3, #3
 800328e:	109b      	asrs	r3, r3, #2
 8003290:	b2da      	uxtb	r2, r3
 8003292:	1d3b      	adds	r3, r7, #4
 8003294:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 8003296:	1d3a      	adds	r2, r7, #4
 8003298:	2306      	movs	r3, #6
 800329a:	2103      	movs	r1, #3
 800329c:	2020      	movs	r0, #32
 800329e:	f000 fae1 	bl	8003864 <write_multiple_icm20948_reg>
}
 80032a2:	46c0      	nop			; (mov r8, r8)
 80032a4:	46bd      	mov	sp, r7
 80032a6:	b00a      	add	sp, #40	; 0x28
 80032a8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080032ac <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 80032ac:	b5b0      	push	{r4, r5, r7, lr}
 80032ae:	b090      	sub	sp, #64	; 0x40
 80032b0:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 80032b2:	2318      	movs	r3, #24
 80032b4:	18fb      	adds	r3, r7, r3
 80032b6:	0018      	movs	r0, r3
 80032b8:	230c      	movs	r3, #12
 80032ba:	001a      	movs	r2, r3
 80032bc:	2100      	movs	r1, #0
 80032be:	f003 f94a 	bl	8006556 <memset>
	int32_t accel_bias_reg[3] = {0};
 80032c2:	230c      	movs	r3, #12
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	0018      	movs	r0, r3
 80032c8:	230c      	movs	r3, #12
 80032ca:	001a      	movs	r2, r3
 80032cc:	2100      	movs	r1, #0
 80032ce:	f003 f942 	bl	8006556 <memset>
	uint8_t accel_offset[6] = {0};
 80032d2:	1d3b      	adds	r3, r7, #4
 80032d4:	2200      	movs	r2, #0
 80032d6:	601a      	str	r2, [r3, #0]
 80032d8:	2200      	movs	r2, #0
 80032da:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 80032dc:	2300      	movs	r3, #0
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	e041      	b.n	8003366 <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 80032e2:	2524      	movs	r5, #36	; 0x24
 80032e4:	197b      	adds	r3, r7, r5
 80032e6:	0018      	movs	r0, r3
 80032e8:	f7ff fd4b 	bl	8002d82 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 80032ec:	2418      	movs	r4, #24
 80032ee:	193b      	adds	r3, r7, r4
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7fd fbae 	bl	8000a54 <__aeabi_i2f>
 80032f8:	1c02      	adds	r2, r0, #0
 80032fa:	197b      	adds	r3, r7, r5
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	1c19      	adds	r1, r3, #0
 8003300:	1c10      	adds	r0, r2, #0
 8003302:	f7fd f8d1 	bl	80004a8 <__aeabi_fadd>
 8003306:	1c03      	adds	r3, r0, #0
 8003308:	1c18      	adds	r0, r3, #0
 800330a:	f7fd fb83 	bl	8000a14 <__aeabi_f2iz>
 800330e:	0002      	movs	r2, r0
 8003310:	193b      	adds	r3, r7, r4
 8003312:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 8003314:	193b      	adds	r3, r7, r4
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	0018      	movs	r0, r3
 800331a:	f7fd fb9b 	bl	8000a54 <__aeabi_i2f>
 800331e:	1c02      	adds	r2, r0, #0
 8003320:	197b      	adds	r3, r7, r5
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	1c19      	adds	r1, r3, #0
 8003326:	1c10      	adds	r0, r2, #0
 8003328:	f7fd f8be 	bl	80004a8 <__aeabi_fadd>
 800332c:	1c03      	adds	r3, r0, #0
 800332e:	1c18      	adds	r0, r3, #0
 8003330:	f7fd fb70 	bl	8000a14 <__aeabi_f2iz>
 8003334:	0002      	movs	r2, r0
 8003336:	193b      	adds	r3, r7, r4
 8003338:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 800333a:	193b      	adds	r3, r7, r4
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	0018      	movs	r0, r3
 8003340:	f7fd fb88 	bl	8000a54 <__aeabi_i2f>
 8003344:	1c02      	adds	r2, r0, #0
 8003346:	197b      	adds	r3, r7, r5
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	1c19      	adds	r1, r3, #0
 800334c:	1c10      	adds	r0, r2, #0
 800334e:	f7fd f8ab 	bl	80004a8 <__aeabi_fadd>
 8003352:	1c03      	adds	r3, r0, #0
 8003354:	1c18      	adds	r0, r3, #0
 8003356:	f7fd fb5d 	bl	8000a14 <__aeabi_f2iz>
 800335a:	0002      	movs	r2, r0
 800335c:	193b      	adds	r3, r7, r4
 800335e:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8003360:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003362:	3301      	adds	r3, #1
 8003364:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003368:	2b63      	cmp	r3, #99	; 0x63
 800336a:	ddba      	ble.n	80032e2 <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 800336c:	2418      	movs	r4, #24
 800336e:	193b      	adds	r3, r7, r4
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	2164      	movs	r1, #100	; 0x64
 8003374:	0018      	movs	r0, r3
 8003376:	f7fc ff6d 	bl	8000254 <__divsi3>
 800337a:	0003      	movs	r3, r0
 800337c:	001a      	movs	r2, r3
 800337e:	193b      	adds	r3, r7, r4
 8003380:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 8003382:	193b      	adds	r3, r7, r4
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2164      	movs	r1, #100	; 0x64
 8003388:	0018      	movs	r0, r3
 800338a:	f7fc ff63 	bl	8000254 <__divsi3>
 800338e:	0003      	movs	r3, r0
 8003390:	001a      	movs	r2, r3
 8003392:	193b      	adds	r3, r7, r4
 8003394:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 8003396:	193b      	adds	r3, r7, r4
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	2164      	movs	r1, #100	; 0x64
 800339c:	0018      	movs	r0, r3
 800339e:	f7fc ff59 	bl	8000254 <__divsi3>
 80033a2:	0003      	movs	r3, r0
 80033a4:	001a      	movs	r2, r3
 80033a6:	193b      	adds	r3, r7, r4
 80033a8:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 80033aa:	003b      	movs	r3, r7
 80033ac:	4a68      	ldr	r2, [pc, #416]	; (8003550 <icm20948_accel_calibration+0x2a4>)
 80033ae:	8811      	ldrh	r1, [r2, #0]
 80033b0:	8019      	strh	r1, [r3, #0]
 80033b2:	7892      	ldrb	r2, [r2, #2]
 80033b4:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 80033b6:	2202      	movs	r2, #2
 80033b8:	2114      	movs	r1, #20
 80033ba:	2010      	movs	r0, #16
 80033bc:	f000 fa18 	bl	80037f0 <read_multiple_icm20948_reg>
 80033c0:	0003      	movs	r3, r0
 80033c2:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 80033c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c6:	781b      	ldrb	r3, [r3, #0]
 80033c8:	021b      	lsls	r3, r3, #8
 80033ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033cc:	3201      	adds	r2, #1
 80033ce:	7812      	ldrb	r2, [r2, #0]
 80033d0:	431a      	orrs	r2, r3
 80033d2:	250c      	movs	r5, #12
 80033d4:	197b      	adds	r3, r7, r5
 80033d6:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 80033d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033da:	3301      	adds	r3, #1
 80033dc:	781b      	ldrb	r3, [r3, #0]
 80033de:	2201      	movs	r2, #1
 80033e0:	4013      	ands	r3, r2
 80033e2:	b2da      	uxtb	r2, r3
 80033e4:	003b      	movs	r3, r7
 80033e6:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 80033e8:	2202      	movs	r2, #2
 80033ea:	2117      	movs	r1, #23
 80033ec:	2010      	movs	r0, #16
 80033ee:	f000 f9ff 	bl	80037f0 <read_multiple_icm20948_reg>
 80033f2:	0003      	movs	r3, r0
 80033f4:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 80033f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033f8:	781b      	ldrb	r3, [r3, #0]
 80033fa:	021b      	lsls	r3, r3, #8
 80033fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033fe:	3201      	adds	r2, #1
 8003400:	7812      	ldrb	r2, [r2, #0]
 8003402:	431a      	orrs	r2, r3
 8003404:	197b      	adds	r3, r7, r5
 8003406:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 8003408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800340a:	3301      	adds	r3, #1
 800340c:	781b      	ldrb	r3, [r3, #0]
 800340e:	2201      	movs	r2, #1
 8003410:	4013      	ands	r3, r2
 8003412:	b2da      	uxtb	r2, r3
 8003414:	003b      	movs	r3, r7
 8003416:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 8003418:	2202      	movs	r2, #2
 800341a:	211a      	movs	r1, #26
 800341c:	2010      	movs	r0, #16
 800341e:	f000 f9e7 	bl	80037f0 <read_multiple_icm20948_reg>
 8003422:	0003      	movs	r3, r0
 8003424:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 8003426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800342e:	3201      	adds	r2, #1
 8003430:	7812      	ldrb	r2, [r2, #0]
 8003432:	431a      	orrs	r2, r3
 8003434:	197b      	adds	r3, r7, r5
 8003436:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	3301      	adds	r3, #1
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2201      	movs	r2, #1
 8003440:	4013      	ands	r3, r2
 8003442:	b2da      	uxtb	r2, r3
 8003444:	003b      	movs	r3, r7
 8003446:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 8003448:	197b      	adds	r3, r7, r5
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	193b      	adds	r3, r7, r4
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	2b00      	cmp	r3, #0
 8003452:	da00      	bge.n	8003456 <icm20948_accel_calibration+0x1aa>
 8003454:	3307      	adds	r3, #7
 8003456:	10db      	asrs	r3, r3, #3
 8003458:	425b      	negs	r3, r3
 800345a:	18d2      	adds	r2, r2, r3
 800345c:	210c      	movs	r1, #12
 800345e:	187b      	adds	r3, r7, r1
 8003460:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 8003462:	187b      	adds	r3, r7, r1
 8003464:	685a      	ldr	r2, [r3, #4]
 8003466:	2318      	movs	r3, #24
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	da00      	bge.n	8003472 <icm20948_accel_calibration+0x1c6>
 8003470:	3307      	adds	r3, #7
 8003472:	10db      	asrs	r3, r3, #3
 8003474:	425b      	negs	r3, r3
 8003476:	18d2      	adds	r2, r2, r3
 8003478:	210c      	movs	r1, #12
 800347a:	187b      	adds	r3, r7, r1
 800347c:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 800347e:	187b      	adds	r3, r7, r1
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	2318      	movs	r3, #24
 8003484:	18fb      	adds	r3, r7, r3
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	da00      	bge.n	800348e <icm20948_accel_calibration+0x1e2>
 800348c:	3307      	adds	r3, #7
 800348e:	10db      	asrs	r3, r3, #3
 8003490:	425b      	negs	r3, r3
 8003492:	18d2      	adds	r2, r2, r3
 8003494:	210c      	movs	r1, #12
 8003496:	187b      	adds	r3, r7, r1
 8003498:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 800349a:	187b      	adds	r3, r7, r1
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	121b      	asrs	r3, r3, #8
 80034a0:	b2da      	uxtb	r2, r3
 80034a2:	1d3b      	adds	r3, r7, #4
 80034a4:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 80034a6:	187b      	adds	r3, r7, r1
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	b2db      	uxtb	r3, r3
 80034ac:	2201      	movs	r2, #1
 80034ae:	4393      	bics	r3, r2
 80034b0:	b2da      	uxtb	r2, r3
 80034b2:	1d3b      	adds	r3, r7, #4
 80034b4:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 80034b6:	1d3b      	adds	r3, r7, #4
 80034b8:	785a      	ldrb	r2, [r3, #1]
 80034ba:	003b      	movs	r3, r7
 80034bc:	781b      	ldrb	r3, [r3, #0]
 80034be:	4313      	orrs	r3, r2
 80034c0:	b2da      	uxtb	r2, r3
 80034c2:	1d3b      	adds	r3, r7, #4
 80034c4:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 80034c6:	187b      	adds	r3, r7, r1
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	121b      	asrs	r3, r3, #8
 80034cc:	b2da      	uxtb	r2, r3
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 80034d2:	187b      	adds	r3, r7, r1
 80034d4:	685b      	ldr	r3, [r3, #4]
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	2201      	movs	r2, #1
 80034da:	4393      	bics	r3, r2
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	1d3b      	adds	r3, r7, #4
 80034e0:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 80034e2:	1d3b      	adds	r3, r7, #4
 80034e4:	78da      	ldrb	r2, [r3, #3]
 80034e6:	003b      	movs	r3, r7
 80034e8:	785b      	ldrb	r3, [r3, #1]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	b2da      	uxtb	r2, r3
 80034ee:	1d3b      	adds	r3, r7, #4
 80034f0:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 80034f2:	187b      	adds	r3, r7, r1
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	121b      	asrs	r3, r3, #8
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	1d3b      	adds	r3, r7, #4
 80034fc:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80034fe:	187b      	adds	r3, r7, r1
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2201      	movs	r2, #1
 8003506:	4393      	bics	r3, r2
 8003508:	b2da      	uxtb	r2, r3
 800350a:	1d3b      	adds	r3, r7, #4
 800350c:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 800350e:	1d3b      	adds	r3, r7, #4
 8003510:	795a      	ldrb	r2, [r3, #5]
 8003512:	003b      	movs	r3, r7
 8003514:	789b      	ldrb	r3, [r3, #2]
 8003516:	4313      	orrs	r3, r2
 8003518:	b2da      	uxtb	r2, r3
 800351a:	1d3b      	adds	r3, r7, #4
 800351c:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 800351e:	1d3a      	adds	r2, r7, #4
 8003520:	2302      	movs	r3, #2
 8003522:	2114      	movs	r1, #20
 8003524:	2010      	movs	r0, #16
 8003526:	f000 f99d 	bl	8003864 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	1c9a      	adds	r2, r3, #2
 800352e:	2302      	movs	r3, #2
 8003530:	2117      	movs	r1, #23
 8003532:	2010      	movs	r0, #16
 8003534:	f000 f996 	bl	8003864 <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 8003538:	1d3b      	adds	r3, r7, #4
 800353a:	1d1a      	adds	r2, r3, #4
 800353c:	2302      	movs	r3, #2
 800353e:	211a      	movs	r1, #26
 8003540:	2010      	movs	r0, #16
 8003542:	f000 f98f 	bl	8003864 <write_multiple_icm20948_reg>
}
 8003546:	46c0      	nop			; (mov r8, r8)
 8003548:	46bd      	mov	sp, r7
 800354a:	b010      	add	sp, #64	; 0x40
 800354c:	bdb0      	pop	{r4, r5, r7, pc}
 800354e:	46c0      	nop			; (mov r8, r8)
 8003550:	0800992c 	.word	0x0800992c

08003554 <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 8003554:	b590      	push	{r4, r7, lr}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	0002      	movs	r2, r0
 800355c:	1dfb      	adds	r3, r7, #7
 800355e:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8003560:	230f      	movs	r3, #15
 8003562:	18fc      	adds	r4, r7, r3
 8003564:	2101      	movs	r1, #1
 8003566:	2020      	movs	r0, #32
 8003568:	f000 f8e2 	bl	8003730 <read_single_icm20948_reg>
 800356c:	0003      	movs	r3, r0
 800356e:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8003570:	1dfb      	adds	r3, r7, #7
 8003572:	781b      	ldrb	r3, [r3, #0]
 8003574:	2b03      	cmp	r3, #3
 8003576:	d027      	beq.n	80035c8 <icm20948_gyro_full_scale_select+0x74>
 8003578:	dc31      	bgt.n	80035de <icm20948_gyro_full_scale_select+0x8a>
 800357a:	2b02      	cmp	r3, #2
 800357c:	d019      	beq.n	80035b2 <icm20948_gyro_full_scale_select+0x5e>
 800357e:	dc2e      	bgt.n	80035de <icm20948_gyro_full_scale_select+0x8a>
 8003580:	2b00      	cmp	r3, #0
 8003582:	d002      	beq.n	800358a <icm20948_gyro_full_scale_select+0x36>
 8003584:	2b01      	cmp	r3, #1
 8003586:	d009      	beq.n	800359c <icm20948_gyro_full_scale_select+0x48>
 8003588:	e029      	b.n	80035de <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 800358a:	220f      	movs	r2, #15
 800358c:	18bb      	adds	r3, r7, r2
 800358e:	18ba      	adds	r2, r7, r2
 8003590:	7812      	ldrb	r2, [r2, #0]
 8003592:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 8003594:	4b18      	ldr	r3, [pc, #96]	; (80035f8 <icm20948_gyro_full_scale_select+0xa4>)
 8003596:	4a19      	ldr	r2, [pc, #100]	; (80035fc <icm20948_gyro_full_scale_select+0xa8>)
 8003598:	601a      	str	r2, [r3, #0]
			break;
 800359a:	e020      	b.n	80035de <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 800359c:	220f      	movs	r2, #15
 800359e:	18bb      	adds	r3, r7, r2
 80035a0:	18ba      	adds	r2, r7, r2
 80035a2:	7812      	ldrb	r2, [r2, #0]
 80035a4:	2102      	movs	r1, #2
 80035a6:	430a      	orrs	r2, r1
 80035a8:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 80035aa:	4b13      	ldr	r3, [pc, #76]	; (80035f8 <icm20948_gyro_full_scale_select+0xa4>)
 80035ac:	4a14      	ldr	r2, [pc, #80]	; (8003600 <icm20948_gyro_full_scale_select+0xac>)
 80035ae:	601a      	str	r2, [r3, #0]
			break;
 80035b0:	e015      	b.n	80035de <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 80035b2:	220f      	movs	r2, #15
 80035b4:	18bb      	adds	r3, r7, r2
 80035b6:	18ba      	adds	r2, r7, r2
 80035b8:	7812      	ldrb	r2, [r2, #0]
 80035ba:	2104      	movs	r1, #4
 80035bc:	430a      	orrs	r2, r1
 80035be:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 80035c0:	4b0d      	ldr	r3, [pc, #52]	; (80035f8 <icm20948_gyro_full_scale_select+0xa4>)
 80035c2:	4a10      	ldr	r2, [pc, #64]	; (8003604 <icm20948_gyro_full_scale_select+0xb0>)
 80035c4:	601a      	str	r2, [r3, #0]
			break;
 80035c6:	e00a      	b.n	80035de <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 80035c8:	220f      	movs	r2, #15
 80035ca:	18bb      	adds	r3, r7, r2
 80035cc:	18ba      	adds	r2, r7, r2
 80035ce:	7812      	ldrb	r2, [r2, #0]
 80035d0:	2106      	movs	r1, #6
 80035d2:	430a      	orrs	r2, r1
 80035d4:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 80035d6:	4b08      	ldr	r3, [pc, #32]	; (80035f8 <icm20948_gyro_full_scale_select+0xa4>)
 80035d8:	4a0b      	ldr	r2, [pc, #44]	; (8003608 <icm20948_gyro_full_scale_select+0xb4>)
 80035da:	601a      	str	r2, [r3, #0]
			break;
 80035dc:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 80035de:	230f      	movs	r3, #15
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	781b      	ldrb	r3, [r3, #0]
 80035e4:	001a      	movs	r2, r3
 80035e6:	2101      	movs	r1, #1
 80035e8:	2020      	movs	r0, #32
 80035ea:	f000 f8d3 	bl	8003794 <write_single_icm20948_reg>
}
 80035ee:	46c0      	nop			; (mov r8, r8)
 80035f0:	46bd      	mov	sp, r7
 80035f2:	b005      	add	sp, #20
 80035f4:	bd90      	pop	{r4, r7, pc}
 80035f6:	46c0      	nop			; (mov r8, r8)
 80035f8:	20000304 	.word	0x20000304
 80035fc:	43030000 	.word	0x43030000
 8003600:	42830000 	.word	0x42830000
 8003604:	42033333 	.word	0x42033333
 8003608:	41833333 	.word	0x41833333

0800360c <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 800360c:	b590      	push	{r4, r7, lr}
 800360e:	b085      	sub	sp, #20
 8003610:	af00      	add	r7, sp, #0
 8003612:	0002      	movs	r2, r0
 8003614:	1dfb      	adds	r3, r7, #7
 8003616:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8003618:	230f      	movs	r3, #15
 800361a:	18fc      	adds	r4, r7, r3
 800361c:	2114      	movs	r1, #20
 800361e:	2020      	movs	r0, #32
 8003620:	f000 f886 	bl	8003730 <read_single_icm20948_reg>
 8003624:	0003      	movs	r3, r0
 8003626:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8003628:	1dfb      	adds	r3, r7, #7
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b03      	cmp	r3, #3
 800362e:	d02a      	beq.n	8003686 <icm20948_accel_full_scale_select+0x7a>
 8003630:	dc35      	bgt.n	800369e <icm20948_accel_full_scale_select+0x92>
 8003632:	2b02      	cmp	r3, #2
 8003634:	d01b      	beq.n	800366e <icm20948_accel_full_scale_select+0x62>
 8003636:	dc32      	bgt.n	800369e <icm20948_accel_full_scale_select+0x92>
 8003638:	2b00      	cmp	r3, #0
 800363a:	d002      	beq.n	8003642 <icm20948_accel_full_scale_select+0x36>
 800363c:	2b01      	cmp	r3, #1
 800363e:	d00a      	beq.n	8003656 <icm20948_accel_full_scale_select+0x4a>
 8003640:	e02d      	b.n	800369e <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 8003642:	220f      	movs	r2, #15
 8003644:	18bb      	adds	r3, r7, r2
 8003646:	18ba      	adds	r2, r7, r2
 8003648:	7812      	ldrb	r2, [r2, #0]
 800364a:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 800364c:	4b1a      	ldr	r3, [pc, #104]	; (80036b8 <icm20948_accel_full_scale_select+0xac>)
 800364e:	228d      	movs	r2, #141	; 0x8d
 8003650:	05d2      	lsls	r2, r2, #23
 8003652:	601a      	str	r2, [r3, #0]
			break;
 8003654:	e023      	b.n	800369e <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 8003656:	220f      	movs	r2, #15
 8003658:	18bb      	adds	r3, r7, r2
 800365a:	18ba      	adds	r2, r7, r2
 800365c:	7812      	ldrb	r2, [r2, #0]
 800365e:	2102      	movs	r1, #2
 8003660:	430a      	orrs	r2, r1
 8003662:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 8003664:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <icm20948_accel_full_scale_select+0xac>)
 8003666:	228c      	movs	r2, #140	; 0x8c
 8003668:	05d2      	lsls	r2, r2, #23
 800366a:	601a      	str	r2, [r3, #0]
			break;
 800366c:	e017      	b.n	800369e <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 800366e:	220f      	movs	r2, #15
 8003670:	18bb      	adds	r3, r7, r2
 8003672:	18ba      	adds	r2, r7, r2
 8003674:	7812      	ldrb	r2, [r2, #0]
 8003676:	2104      	movs	r1, #4
 8003678:	430a      	orrs	r2, r1
 800367a:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 800367c:	4b0e      	ldr	r3, [pc, #56]	; (80036b8 <icm20948_accel_full_scale_select+0xac>)
 800367e:	228b      	movs	r2, #139	; 0x8b
 8003680:	05d2      	lsls	r2, r2, #23
 8003682:	601a      	str	r2, [r3, #0]
			break;
 8003684:	e00b      	b.n	800369e <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 8003686:	220f      	movs	r2, #15
 8003688:	18bb      	adds	r3, r7, r2
 800368a:	18ba      	adds	r2, r7, r2
 800368c:	7812      	ldrb	r2, [r2, #0]
 800368e:	2106      	movs	r1, #6
 8003690:	430a      	orrs	r2, r1
 8003692:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 8003694:	4b08      	ldr	r3, [pc, #32]	; (80036b8 <icm20948_accel_full_scale_select+0xac>)
 8003696:	228a      	movs	r2, #138	; 0x8a
 8003698:	05d2      	lsls	r2, r2, #23
 800369a:	601a      	str	r2, [r3, #0]
			break;
 800369c:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 800369e:	230f      	movs	r3, #15
 80036a0:	18fb      	adds	r3, r7, r3
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	001a      	movs	r2, r3
 80036a6:	2114      	movs	r1, #20
 80036a8:	2020      	movs	r0, #32
 80036aa:	f000 f873 	bl	8003794 <write_single_icm20948_reg>
}
 80036ae:	46c0      	nop			; (mov r8, r8)
 80036b0:	46bd      	mov	sp, r7
 80036b2:	b005      	add	sp, #20
 80036b4:	bd90      	pop	{r4, r7, pc}
 80036b6:	46c0      	nop			; (mov r8, r8)
 80036b8:	20000308 	.word	0x20000308

080036bc <cs_high>:

/* Static Functions */

static void cs_high()
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 80036c0:	2380      	movs	r3, #128	; 0x80
 80036c2:	015b      	lsls	r3, r3, #5
 80036c4:	4803      	ldr	r0, [pc, #12]	; (80036d4 <cs_high+0x18>)
 80036c6:	2201      	movs	r2, #1
 80036c8:	0019      	movs	r1, r3
 80036ca:	f000 ff87 	bl	80045dc <HAL_GPIO_WritePin>
}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	48000400 	.word	0x48000400

080036d8 <cs_low>:

static void cs_low()
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 80036dc:	2380      	movs	r3, #128	; 0x80
 80036de:	015b      	lsls	r3, r3, #5
 80036e0:	4803      	ldr	r0, [pc, #12]	; (80036f0 <cs_low+0x18>)
 80036e2:	2200      	movs	r2, #0
 80036e4:	0019      	movs	r1, r3
 80036e6:	f000 ff79 	bl	80045dc <HAL_GPIO_WritePin>
}
 80036ea:	46c0      	nop			; (mov r8, r8)
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	48000400 	.word	0x48000400

080036f4 <select_user_bank>:

static void select_user_bank(userbank ub)
{
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b085      	sub	sp, #20
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	0002      	movs	r2, r0
 80036fc:	1dfb      	adds	r3, r7, #7
 80036fe:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 8003700:	240c      	movs	r4, #12
 8003702:	193b      	adds	r3, r7, r4
 8003704:	227f      	movs	r2, #127	; 0x7f
 8003706:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 8003708:	193b      	adds	r3, r7, r4
 800370a:	1dfa      	adds	r2, r7, #7
 800370c:	7812      	ldrb	r2, [r2, #0]
 800370e:	705a      	strb	r2, [r3, #1]

	cs_low();
 8003710:	f7ff ffe2 	bl	80036d8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 8003714:	1939      	adds	r1, r7, r4
 8003716:	4805      	ldr	r0, [pc, #20]	; (800372c <select_user_bank+0x38>)
 8003718:	230a      	movs	r3, #10
 800371a:	2202      	movs	r2, #2
 800371c:	f001 fca0 	bl	8005060 <HAL_SPI_Transmit>
	cs_high();
 8003720:	f7ff ffcc 	bl	80036bc <cs_high>
}
 8003724:	46c0      	nop			; (mov r8, r8)
 8003726:	46bd      	mov	sp, r7
 8003728:	b005      	add	sp, #20
 800372a:	bd90      	pop	{r4, r7, pc}
 800372c:	20000204 	.word	0x20000204

08003730 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 8003730:	b590      	push	{r4, r7, lr}
 8003732:	b085      	sub	sp, #20
 8003734:	af00      	add	r7, sp, #0
 8003736:	0002      	movs	r2, r0
 8003738:	1dfb      	adds	r3, r7, #7
 800373a:	701a      	strb	r2, [r3, #0]
 800373c:	1dbb      	adds	r3, r7, #6
 800373e:	1c0a      	adds	r2, r1, #0
 8003740:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 8003742:	1dbb      	adds	r3, r7, #6
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2280      	movs	r2, #128	; 0x80
 8003748:	4252      	negs	r2, r2
 800374a:	4313      	orrs	r3, r2
 800374c:	b2da      	uxtb	r2, r3
 800374e:	240f      	movs	r4, #15
 8003750:	193b      	adds	r3, r7, r4
 8003752:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 8003754:	1dfb      	adds	r3, r7, #7
 8003756:	781b      	ldrb	r3, [r3, #0]
 8003758:	0018      	movs	r0, r3
 800375a:	f7ff ffcb 	bl	80036f4 <select_user_bank>

	cs_low();
 800375e:	f7ff ffbb 	bl	80036d8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 8003762:	23fa      	movs	r3, #250	; 0xfa
 8003764:	009b      	lsls	r3, r3, #2
 8003766:	1939      	adds	r1, r7, r4
 8003768:	4809      	ldr	r0, [pc, #36]	; (8003790 <read_single_icm20948_reg+0x60>)
 800376a:	2201      	movs	r2, #1
 800376c:	f001 fc78 	bl	8005060 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8003770:	23fa      	movs	r3, #250	; 0xfa
 8003772:	009b      	lsls	r3, r3, #2
 8003774:	240e      	movs	r4, #14
 8003776:	1939      	adds	r1, r7, r4
 8003778:	4805      	ldr	r0, [pc, #20]	; (8003790 <read_single_icm20948_reg+0x60>)
 800377a:	2201      	movs	r2, #1
 800377c:	f001 fdc8 	bl	8005310 <HAL_SPI_Receive>
	cs_high();
 8003780:	f7ff ff9c 	bl	80036bc <cs_high>

	return reg_val;
 8003784:	193b      	adds	r3, r7, r4
 8003786:	781b      	ldrb	r3, [r3, #0]
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b005      	add	sp, #20
 800378e:	bd90      	pop	{r4, r7, pc}
 8003790:	20000204 	.word	0x20000204

08003794 <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 8003794:	b590      	push	{r4, r7, lr}
 8003796:	b085      	sub	sp, #20
 8003798:	af00      	add	r7, sp, #0
 800379a:	0004      	movs	r4, r0
 800379c:	0008      	movs	r0, r1
 800379e:	0011      	movs	r1, r2
 80037a0:	1dfb      	adds	r3, r7, #7
 80037a2:	1c22      	adds	r2, r4, #0
 80037a4:	701a      	strb	r2, [r3, #0]
 80037a6:	1dbb      	adds	r3, r7, #6
 80037a8:	1c02      	adds	r2, r0, #0
 80037aa:	701a      	strb	r2, [r3, #0]
 80037ac:	1d7b      	adds	r3, r7, #5
 80037ae:	1c0a      	adds	r2, r1, #0
 80037b0:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 80037b2:	240c      	movs	r4, #12
 80037b4:	193b      	adds	r3, r7, r4
 80037b6:	1dba      	adds	r2, r7, #6
 80037b8:	7812      	ldrb	r2, [r2, #0]
 80037ba:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 80037bc:	193b      	adds	r3, r7, r4
 80037be:	1d7a      	adds	r2, r7, #5
 80037c0:	7812      	ldrb	r2, [r2, #0]
 80037c2:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 80037c4:	1dfb      	adds	r3, r7, #7
 80037c6:	781b      	ldrb	r3, [r3, #0]
 80037c8:	0018      	movs	r0, r3
 80037ca:	f7ff ff93 	bl	80036f4 <select_user_bank>

	cs_low();
 80037ce:	f7ff ff83 	bl	80036d8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 80037d2:	23fa      	movs	r3, #250	; 0xfa
 80037d4:	009b      	lsls	r3, r3, #2
 80037d6:	1939      	adds	r1, r7, r4
 80037d8:	4804      	ldr	r0, [pc, #16]	; (80037ec <write_single_icm20948_reg+0x58>)
 80037da:	2202      	movs	r2, #2
 80037dc:	f001 fc40 	bl	8005060 <HAL_SPI_Transmit>
	cs_high();
 80037e0:	f7ff ff6c 	bl	80036bc <cs_high>
}
 80037e4:	46c0      	nop			; (mov r8, r8)
 80037e6:	46bd      	mov	sp, r7
 80037e8:	b005      	add	sp, #20
 80037ea:	bd90      	pop	{r4, r7, pc}
 80037ec:	20000204 	.word	0x20000204

080037f0 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 80037f0:	b590      	push	{r4, r7, lr}
 80037f2:	b085      	sub	sp, #20
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	0004      	movs	r4, r0
 80037f8:	0008      	movs	r0, r1
 80037fa:	0011      	movs	r1, r2
 80037fc:	1dfb      	adds	r3, r7, #7
 80037fe:	1c22      	adds	r2, r4, #0
 8003800:	701a      	strb	r2, [r3, #0]
 8003802:	1dbb      	adds	r3, r7, #6
 8003804:	1c02      	adds	r2, r0, #0
 8003806:	701a      	strb	r2, [r3, #0]
 8003808:	1d7b      	adds	r3, r7, #5
 800380a:	1c0a      	adds	r2, r1, #0
 800380c:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 800380e:	1dbb      	adds	r3, r7, #6
 8003810:	781b      	ldrb	r3, [r3, #0]
 8003812:	2280      	movs	r2, #128	; 0x80
 8003814:	4252      	negs	r2, r2
 8003816:	4313      	orrs	r3, r2
 8003818:	b2da      	uxtb	r2, r3
 800381a:	240f      	movs	r4, #15
 800381c:	193b      	adds	r3, r7, r4
 800381e:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 8003820:	1dfb      	adds	r3, r7, #7
 8003822:	781b      	ldrb	r3, [r3, #0]
 8003824:	0018      	movs	r0, r3
 8003826:	f7ff ff65 	bl	80036f4 <select_user_bank>

	cs_low();
 800382a:	f7ff ff55 	bl	80036d8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800382e:	23fa      	movs	r3, #250	; 0xfa
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	1939      	adds	r1, r7, r4
 8003834:	4809      	ldr	r0, [pc, #36]	; (800385c <read_multiple_icm20948_reg+0x6c>)
 8003836:	2201      	movs	r2, #1
 8003838:	f001 fc12 	bl	8005060 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 800383c:	1d7b      	adds	r3, r7, #5
 800383e:	781b      	ldrb	r3, [r3, #0]
 8003840:	b29a      	uxth	r2, r3
 8003842:	23fa      	movs	r3, #250	; 0xfa
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	4906      	ldr	r1, [pc, #24]	; (8003860 <read_multiple_icm20948_reg+0x70>)
 8003848:	4804      	ldr	r0, [pc, #16]	; (800385c <read_multiple_icm20948_reg+0x6c>)
 800384a:	f001 fd61 	bl	8005310 <HAL_SPI_Receive>
	cs_high();
 800384e:	f7ff ff35 	bl	80036bc <cs_high>

	return reg_val;
 8003852:	4b03      	ldr	r3, [pc, #12]	; (8003860 <read_multiple_icm20948_reg+0x70>)
}
 8003854:	0018      	movs	r0, r3
 8003856:	46bd      	mov	sp, r7
 8003858:	b005      	add	sp, #20
 800385a:	bd90      	pop	{r4, r7, pc}
 800385c:	20000204 	.word	0x20000204
 8003860:	200014b8 	.word	0x200014b8

08003864 <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 8003864:	b590      	push	{r4, r7, lr}
 8003866:	b085      	sub	sp, #20
 8003868:	af00      	add	r7, sp, #0
 800386a:	0004      	movs	r4, r0
 800386c:	0008      	movs	r0, r1
 800386e:	603a      	str	r2, [r7, #0]
 8003870:	0019      	movs	r1, r3
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	1c22      	adds	r2, r4, #0
 8003876:	701a      	strb	r2, [r3, #0]
 8003878:	1dbb      	adds	r3, r7, #6
 800387a:	1c02      	adds	r2, r0, #0
 800387c:	701a      	strb	r2, [r3, #0]
 800387e:	1d7b      	adds	r3, r7, #5
 8003880:	1c0a      	adds	r2, r1, #0
 8003882:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 8003884:	240f      	movs	r4, #15
 8003886:	193b      	adds	r3, r7, r4
 8003888:	1dba      	adds	r2, r7, #6
 800388a:	7812      	ldrb	r2, [r2, #0]
 800388c:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 800388e:	1dfb      	adds	r3, r7, #7
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	0018      	movs	r0, r3
 8003894:	f7ff ff2e 	bl	80036f4 <select_user_bank>

	cs_low();
 8003898:	f7ff ff1e 	bl	80036d8 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 800389c:	23fa      	movs	r3, #250	; 0xfa
 800389e:	009b      	lsls	r3, r3, #2
 80038a0:	1939      	adds	r1, r7, r4
 80038a2:	4809      	ldr	r0, [pc, #36]	; (80038c8 <write_multiple_icm20948_reg+0x64>)
 80038a4:	2201      	movs	r2, #1
 80038a6:	f001 fbdb 	bl	8005060 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 80038aa:	1d7b      	adds	r3, r7, #5
 80038ac:	781b      	ldrb	r3, [r3, #0]
 80038ae:	b29a      	uxth	r2, r3
 80038b0:	23fa      	movs	r3, #250	; 0xfa
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	6839      	ldr	r1, [r7, #0]
 80038b6:	4804      	ldr	r0, [pc, #16]	; (80038c8 <write_multiple_icm20948_reg+0x64>)
 80038b8:	f001 fbd2 	bl	8005060 <HAL_SPI_Transmit>
	cs_high();
 80038bc:	f7ff fefe 	bl	80036bc <cs_high>
}
 80038c0:	46c0      	nop			; (mov r8, r8)
 80038c2:	46bd      	mov	sp, r7
 80038c4:	b005      	add	sp, #20
 80038c6:	bd90      	pop	{r4, r7, pc}
 80038c8:	20000204 	.word	0x20000204

080038cc <correctBitbuffer>:
/********************************
 * THIS IS THE COMPRESSION CODE
 *******************************/
int correctBitbuffer(int bitbuffer) {
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
	int val;
	int tempvar = (int)log2(bitbuffer)+1;
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7fe fe9b 	bl	8002610 <__aeabi_i2d>
 80038da:	0002      	movs	r2, r0
 80038dc:	000b      	movs	r3, r1
 80038de:	0010      	movs	r0, r2
 80038e0:	0019      	movs	r1, r3
 80038e2:	f005 fde7 	bl	80094b4 <log>
 80038e6:	4a0f      	ldr	r2, [pc, #60]	; (8003924 <correctBitbuffer+0x58>)
 80038e8:	4b0f      	ldr	r3, [pc, #60]	; (8003928 <correctBitbuffer+0x5c>)
 80038ea:	f7fd fc3d 	bl	8001168 <__aeabi_ddiv>
 80038ee:	0002      	movs	r2, r0
 80038f0:	000b      	movs	r3, r1
 80038f2:	0010      	movs	r0, r2
 80038f4:	0019      	movs	r1, r3
 80038f6:	f7fe fe55 	bl	80025a4 <__aeabi_d2iz>
 80038fa:	0003      	movs	r3, r0
 80038fc:	3301      	adds	r3, #1
 80038fe:	60fb      	str	r3, [r7, #12]
	if (tempvar >=8) {
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2b07      	cmp	r3, #7
 8003904:	dd09      	ble.n	800391a <correctBitbuffer+0x4e>
		val = 256 - bitbuffer;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2280      	movs	r2, #128	; 0x80
 800390a:	0052      	lsls	r2, r2, #1
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	60bb      	str	r3, [r7, #8]
		val = -1 * val;
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	425b      	negs	r3, r3
 8003914:	60bb      	str	r3, [r7, #8]
		return val;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	e000      	b.n	800391c <correctBitbuffer+0x50>
	}
	return bitbuffer;
 800391a:	687b      	ldr	r3, [r7, #4]
}
 800391c:	0018      	movs	r0, r3
 800391e:	46bd      	mov	sp, r7
 8003920:	b004      	add	sp, #16
 8003922:	bd80      	pop	{r7, pc}
 8003924:	fefa39ef 	.word	0xfefa39ef
 8003928:	3fe62e42 	.word	0x3fe62e42

0800392c <store>:
/**
 * This method has been added to store the compression encoded bits in one array for printing/transmission.
 */
void store(int bitbuffer){
 800392c:	b590      	push	{r4, r7, lr}
 800392e:	b083      	sub	sp, #12
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
	compressed[compressedBits] = correctBitbuffer(bitbuffer);
 8003934:	4b09      	ldr	r3, [pc, #36]	; (800395c <store+0x30>)
 8003936:	681c      	ldr	r4, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	0018      	movs	r0, r3
 800393c:	f7ff ffc6 	bl	80038cc <correctBitbuffer>
 8003940:	0001      	movs	r1, r0
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <store+0x34>)
 8003944:	00a2      	lsls	r2, r4, #2
 8003946:	50d1      	str	r1, [r2, r3]
    compressedBits++;
 8003948:	4b04      	ldr	r3, [pc, #16]	; (800395c <store+0x30>)
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	1c5a      	adds	r2, r3, #1
 800394e:	4b03      	ldr	r3, [pc, #12]	; (800395c <store+0x30>)
 8003950:	601a      	str	r2, [r3, #0]
}
 8003952:	46c0      	nop			; (mov r8, r8)
 8003954:	46bd      	mov	sp, r7
 8003956:	b003      	add	sp, #12
 8003958:	bd90      	pop	{r4, r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	20000ce0 	.word	0x20000ce0
 8003960:	20000510 	.word	0x20000510

08003964 <putbit1>:

void putbit1(void)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	af00      	add	r7, sp, #0
    bit_buffer |= bit_mask;
 8003968:	4b0e      	ldr	r3, [pc, #56]	; (80039a4 <putbit1+0x40>)
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	4b0e      	ldr	r3, [pc, #56]	; (80039a8 <putbit1+0x44>)
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	431a      	orrs	r2, r3
 8003972:	4b0c      	ldr	r3, [pc, #48]	; (80039a4 <putbit1+0x40>)
 8003974:	601a      	str	r2, [r3, #0]
    if ((bit_mask >>= 1) == 0) {
 8003976:	4b0c      	ldr	r3, [pc, #48]	; (80039a8 <putbit1+0x44>)
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	105a      	asrs	r2, r3, #1
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <putbit1+0x44>)
 800397e:	601a      	str	r2, [r3, #0]
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <putbit1+0x44>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d10a      	bne.n	800399e <putbit1+0x3a>
        store(bit_buffer);
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <putbit1+0x40>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	0018      	movs	r0, r3
 800398e:	f7ff ffcd 	bl	800392c <store>
        bit_buffer = 0;  bit_mask = 128;
 8003992:	4b04      	ldr	r3, [pc, #16]	; (80039a4 <putbit1+0x40>)
 8003994:	2200      	movs	r2, #0
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	4b03      	ldr	r3, [pc, #12]	; (80039a8 <putbit1+0x44>)
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	601a      	str	r2, [r3, #0]
    }
}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000030c 	.word	0x2000030c
 80039a8:	20000000 	.word	0x20000000

080039ac <putbit0>:

void putbit0(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
    if ((bit_mask >>= 1) == 0) {
 80039b0:	4b0b      	ldr	r3, [pc, #44]	; (80039e0 <putbit0+0x34>)
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	105a      	asrs	r2, r3, #1
 80039b6:	4b0a      	ldr	r3, [pc, #40]	; (80039e0 <putbit0+0x34>)
 80039b8:	601a      	str	r2, [r3, #0]
 80039ba:	4b09      	ldr	r3, [pc, #36]	; (80039e0 <putbit0+0x34>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10a      	bne.n	80039d8 <putbit0+0x2c>
        store(bit_buffer);
 80039c2:	4b08      	ldr	r3, [pc, #32]	; (80039e4 <putbit0+0x38>)
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	0018      	movs	r0, r3
 80039c8:	f7ff ffb0 	bl	800392c <store>
        bit_buffer = 0;
 80039cc:	4b05      	ldr	r3, [pc, #20]	; (80039e4 <putbit0+0x38>)
 80039ce:	2200      	movs	r2, #0
 80039d0:	601a      	str	r2, [r3, #0]
        bit_mask = 128;
 80039d2:	4b03      	ldr	r3, [pc, #12]	; (80039e0 <putbit0+0x34>)
 80039d4:	2280      	movs	r2, #128	; 0x80
 80039d6:	601a      	str	r2, [r3, #0]
    }
}
 80039d8:	46c0      	nop			; (mov r8, r8)
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	46c0      	nop			; (mov r8, r8)
 80039e0:	20000000 	.word	0x20000000
 80039e4:	2000030c 	.word	0x2000030c

080039e8 <output1>:
        store(bit_buffer);
    }
}

void output1(int c)
{
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b084      	sub	sp, #16
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
    int mask;

    putbit1();
 80039f0:	f7ff ffb8 	bl	8003964 <putbit1>
    mask = 256;
 80039f4:	2380      	movs	r3, #128	; 0x80
 80039f6:	005b      	lsls	r3, r3, #1
 80039f8:	60fb      	str	r3, [r7, #12]
    while (mask >>= 1) {
 80039fa:	e008      	b.n	8003a0e <output1+0x26>
        if (c & mask) putbit1();
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4013      	ands	r3, r2
 8003a02:	d002      	beq.n	8003a0a <output1+0x22>
 8003a04:	f7ff ffae 	bl	8003964 <putbit1>
 8003a08:	e001      	b.n	8003a0e <output1+0x26>
        else putbit0();
 8003a0a:	f7ff ffcf 	bl	80039ac <putbit0>
    while (mask >>= 1) {
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	105b      	asrs	r3, r3, #1
 8003a12:	60fb      	str	r3, [r7, #12]
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d1f0      	bne.n	80039fc <output1+0x14>
    }
}
 8003a1a:	46c0      	nop			; (mov r8, r8)
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}

08003a24 <output2>:

void output2(int x, int y)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	b084      	sub	sp, #16
 8003a28:	af00      	add	r7, sp, #0
 8003a2a:	6078      	str	r0, [r7, #4]
 8003a2c:	6039      	str	r1, [r7, #0]
    int mask;

    putbit0();
 8003a2e:	f7ff ffbd 	bl	80039ac <putbit0>
    mask = N;
 8003a32:	2340      	movs	r3, #64	; 0x40
 8003a34:	60fb      	str	r3, [r7, #12]
    while (mask >>= 1) {
 8003a36:	e008      	b.n	8003a4a <output2+0x26>
        if (x & mask) putbit1();
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	68fa      	ldr	r2, [r7, #12]
 8003a3c:	4013      	ands	r3, r2
 8003a3e:	d002      	beq.n	8003a46 <output2+0x22>
 8003a40:	f7ff ff90 	bl	8003964 <putbit1>
 8003a44:	e001      	b.n	8003a4a <output2+0x26>
        else putbit0();
 8003a46:	f7ff ffb1 	bl	80039ac <putbit0>
    while (mask >>= 1) {
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	105b      	asrs	r3, r3, #1
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d1f0      	bne.n	8003a38 <output2+0x14>
    }
    mask = (1 << EJ);
 8003a56:	2320      	movs	r3, #32
 8003a58:	60fb      	str	r3, [r7, #12]
    while (mask >>= 1) {
 8003a5a:	e008      	b.n	8003a6e <output2+0x4a>
        if (y & mask) putbit1();
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	4013      	ands	r3, r2
 8003a62:	d002      	beq.n	8003a6a <output2+0x46>
 8003a64:	f7ff ff7e 	bl	8003964 <putbit1>
 8003a68:	e001      	b.n	8003a6e <output2+0x4a>
        else putbit0();
 8003a6a:	f7ff ff9f 	bl	80039ac <putbit0>
    while (mask >>= 1) {
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	105b      	asrs	r3, r3, #1
 8003a72:	60fb      	str	r3, [r7, #12]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1f0      	bne.n	8003a5c <output2+0x38>
    }
}
 8003a7a:	46c0      	nop			; (mov r8, r8)
 8003a7c:	46c0      	nop			; (mov r8, r8)
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	b004      	add	sp, #16
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <compress>:

void compress(int encryptedData[], int encryptedBits)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b08c      	sub	sp, #48	; 0x30
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	6078      	str	r0, [r7, #4]
 8003a8c:	6039      	str	r1, [r7, #0]
    int i, j, f1, x, y, r, s, bufferend, c;
    int counter = 0;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	613b      	str	r3, [r7, #16]

    for (i = 0; i < N - F; i++) buffer[i] = ' ';
 8003a92:	2300      	movs	r3, #0
 8003a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a96:	e007      	b.n	8003aa8 <compress+0x24>
 8003a98:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <compress+0x1b4>)
 8003a9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a9c:	0092      	lsls	r2, r2, #2
 8003a9e:	2120      	movs	r1, #32
 8003aa0:	50d1      	str	r1, [r2, r3]
 8003aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aaa:	2b1e      	cmp	r3, #30
 8003aac:	ddf4      	ble.n	8003a98 <compress+0x14>
    for (i = N - F; i < N * 2; i++) {
 8003aae:	231f      	movs	r3, #31
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ab2:	e014      	b.n	8003ade <compress+0x5a>
        if (counter > encryptedBits) break;
 8003ab4:	693a      	ldr	r2, [r7, #16]
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	429a      	cmp	r2, r3
 8003aba:	dc14      	bgt.n	8003ae6 <compress+0x62>
        c = encryptedData[counter];
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	18d3      	adds	r3, r2, r3
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	60fb      	str	r3, [r7, #12]
        buffer[i] = c;  counter++;
 8003ac8:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <compress+0x1b4>)
 8003aca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003acc:	0092      	lsls	r2, r2, #2
 8003ace:	68f9      	ldr	r1, [r7, #12]
 8003ad0:	50d1      	str	r1, [r2, r3]
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	613b      	str	r3, [r7, #16]
    for (i = N - F; i < N * 2; i++) {
 8003ad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ada:	3301      	adds	r3, #1
 8003adc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae0:	2b7f      	cmp	r3, #127	; 0x7f
 8003ae2:	dde7      	ble.n	8003ab4 <compress+0x30>
 8003ae4:	e000      	b.n	8003ae8 <compress+0x64>
        if (counter > encryptedBits) break;
 8003ae6:	46c0      	nop			; (mov r8, r8)
        //printf("HERE2: %d\n",buffer[i]);
        //printf("c = %d\n", c);;
    }
    bufferend = i;  r = N - F;  s = 0;
 8003ae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aea:	617b      	str	r3, [r7, #20]
 8003aec:	231f      	movs	r3, #31
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	2300      	movs	r3, #0
 8003af2:	61bb      	str	r3, [r7, #24]
    while (r < bufferend) {
 8003af4:	e096      	b.n	8003c24 <compress+0x1a0>
        f1 = (F <= bufferend - r) ? F : bufferend - r;
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	69fb      	ldr	r3, [r7, #28]
 8003afa:	1ad3      	subs	r3, r2, r3
 8003afc:	2b21      	cmp	r3, #33	; 0x21
 8003afe:	dd00      	ble.n	8003b02 <compress+0x7e>
 8003b00:	2321      	movs	r3, #33	; 0x21
 8003b02:	60bb      	str	r3, [r7, #8]
        x = 0;  y = 1;  c = buffer[r];
 8003b04:	2300      	movs	r3, #0
 8003b06:	627b      	str	r3, [r7, #36]	; 0x24
 8003b08:	2301      	movs	r3, #1
 8003b0a:	623b      	str	r3, [r7, #32]
 8003b0c:	4b4a      	ldr	r3, [pc, #296]	; (8003c38 <compress+0x1b4>)
 8003b0e:	69fa      	ldr	r2, [r7, #28]
 8003b10:	0092      	lsls	r2, r2, #2
 8003b12:	58d3      	ldr	r3, [r2, r3]
 8003b14:	60fb      	str	r3, [r7, #12]
        for (i = r - 1; i >= s; i--)
 8003b16:	69fb      	ldr	r3, [r7, #28]
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b1c:	e02b      	b.n	8003b76 <compress+0xf2>
            if (buffer[i] == c) {
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <compress+0x1b4>)
 8003b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b22:	0092      	lsls	r2, r2, #2
 8003b24:	58d3      	ldr	r3, [r2, r3]
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d121      	bne.n	8003b70 <compress+0xec>
                for (j = 1; j < f1; j++)
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b30:	e010      	b.n	8003b54 <compress+0xd0>
                    if (buffer[i + j] != buffer[r + j]) break;
 8003b32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b36:	18d2      	adds	r2, r2, r3
 8003b38:	4b3f      	ldr	r3, [pc, #252]	; (8003c38 <compress+0x1b4>)
 8003b3a:	0092      	lsls	r2, r2, #2
 8003b3c:	58d2      	ldr	r2, [r2, r3]
 8003b3e:	69f9      	ldr	r1, [r7, #28]
 8003b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b42:	18c9      	adds	r1, r1, r3
 8003b44:	4b3c      	ldr	r3, [pc, #240]	; (8003c38 <compress+0x1b4>)
 8003b46:	0089      	lsls	r1, r1, #2
 8003b48:	58cb      	ldr	r3, [r1, r3]
 8003b4a:	429a      	cmp	r2, r3
 8003b4c:	d107      	bne.n	8003b5e <compress+0xda>
                for (j = 1; j < f1; j++)
 8003b4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b50:	3301      	adds	r3, #1
 8003b52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	dbea      	blt.n	8003b32 <compress+0xae>
 8003b5c:	e000      	b.n	8003b60 <compress+0xdc>
                    if (buffer[i + j] != buffer[r + j]) break;
 8003b5e:	46c0      	nop			; (mov r8, r8)
                if (j > y) {
 8003b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003b62:	6a3b      	ldr	r3, [r7, #32]
 8003b64:	429a      	cmp	r2, r3
 8003b66:	dd03      	ble.n	8003b70 <compress+0xec>
                    x = i;  y = j;
 8003b68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6e:	623b      	str	r3, [r7, #32]
        for (i = r - 1; i >= s; i--)
 8003b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b72:	3b01      	subs	r3, #1
 8003b74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003b78:	69bb      	ldr	r3, [r7, #24]
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	dacf      	bge.n	8003b1e <compress+0x9a>
                }
            }
        if (y <= P) {  y = 1;  output1(c);  }
 8003b7e:	6a3b      	ldr	r3, [r7, #32]
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	dc06      	bgt.n	8003b92 <compress+0x10e>
 8003b84:	2301      	movs	r3, #1
 8003b86:	623b      	str	r3, [r7, #32]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	0018      	movs	r0, r3
 8003b8c:	f7ff ff2c 	bl	80039e8 <output1>
 8003b90:	e008      	b.n	8003ba4 <compress+0x120>
        else output2(x & (N - 1), y - 2);
 8003b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b94:	223f      	movs	r2, #63	; 0x3f
 8003b96:	401a      	ands	r2, r3
 8003b98:	6a3b      	ldr	r3, [r7, #32]
 8003b9a:	3b02      	subs	r3, #2
 8003b9c:	0019      	movs	r1, r3
 8003b9e:	0010      	movs	r0, r2
 8003ba0:	f7ff ff40 	bl	8003a24 <output2>
        r += y;  s += y;
 8003ba4:	69fa      	ldr	r2, [r7, #28]
 8003ba6:	6a3b      	ldr	r3, [r7, #32]
 8003ba8:	18d3      	adds	r3, r2, r3
 8003baa:	61fb      	str	r3, [r7, #28]
 8003bac:	69ba      	ldr	r2, [r7, #24]
 8003bae:	6a3b      	ldr	r3, [r7, #32]
 8003bb0:	18d3      	adds	r3, r2, r3
 8003bb2:	61bb      	str	r3, [r7, #24]
        if (r >= N * 2 - F) {
 8003bb4:	69fb      	ldr	r3, [r7, #28]
 8003bb6:	2b5e      	cmp	r3, #94	; 0x5e
 8003bb8:	dd34      	ble.n	8003c24 <compress+0x1a0>
            for (i = 0; i < N; i++) buffer[i] = buffer[i + N];
 8003bba:	2300      	movs	r3, #0
 8003bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bbe:	e00c      	b.n	8003bda <compress+0x156>
 8003bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bc2:	3340      	adds	r3, #64	; 0x40
 8003bc4:	001a      	movs	r2, r3
 8003bc6:	4b1c      	ldr	r3, [pc, #112]	; (8003c38 <compress+0x1b4>)
 8003bc8:	0092      	lsls	r2, r2, #2
 8003bca:	58d1      	ldr	r1, [r2, r3]
 8003bcc:	4b1a      	ldr	r3, [pc, #104]	; (8003c38 <compress+0x1b4>)
 8003bce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bd0:	0092      	lsls	r2, r2, #2
 8003bd2:	50d1      	str	r1, [r2, r3]
 8003bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bd6:	3301      	adds	r3, #1
 8003bd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bdc:	2b3f      	cmp	r3, #63	; 0x3f
 8003bde:	ddef      	ble.n	8003bc0 <compress+0x13c>
            bufferend -= N;  r -= N;  s -= N;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	3b40      	subs	r3, #64	; 0x40
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	69fb      	ldr	r3, [r7, #28]
 8003be8:	3b40      	subs	r3, #64	; 0x40
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	69bb      	ldr	r3, [r7, #24]
 8003bee:	3b40      	subs	r3, #64	; 0x40
 8003bf0:	61bb      	str	r3, [r7, #24]
            while (bufferend < N * 2) {
 8003bf2:	e014      	b.n	8003c1e <compress+0x19a>
                if (counter > encryptedBits) break;
 8003bf4:	693a      	ldr	r2, [r7, #16]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	429a      	cmp	r2, r3
 8003bfa:	dd00      	ble.n	8003bfe <compress+0x17a>
 8003bfc:	e012      	b.n	8003c24 <compress+0x1a0>
                c = encryptedData[counter];
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	687a      	ldr	r2, [r7, #4]
 8003c04:	18d3      	adds	r3, r2, r3
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	60fb      	str	r3, [r7, #12]
                buffer[bufferend++] = c;  counter++;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	1c5a      	adds	r2, r3, #1
 8003c0e:	617a      	str	r2, [r7, #20]
 8003c10:	4a09      	ldr	r2, [pc, #36]	; (8003c38 <compress+0x1b4>)
 8003c12:	009b      	lsls	r3, r3, #2
 8003c14:	68f9      	ldr	r1, [r7, #12]
 8003c16:	5099      	str	r1, [r3, r2]
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	613b      	str	r3, [r7, #16]
            while (bufferend < N * 2) {
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b7f      	cmp	r3, #127	; 0x7f
 8003c22:	dde7      	ble.n	8003bf4 <compress+0x170>
    while (r < bufferend) {
 8003c24:	69fa      	ldr	r2, [r7, #28]
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	da00      	bge.n	8003c2e <compress+0x1aa>
 8003c2c:	e763      	b.n	8003af6 <compress+0x72>
		sprintf(temp, "%i, ",compressed[count]);
		HAL_UART_Transmit(&huart2, temp, sizeof(temp), 1000);
		count++;
    } */

}
 8003c2e:	46c0      	nop			; (mov r8, r8)
 8003c30:	46c0      	nop			; (mov r8, r8)
 8003c32:	46bd      	mov	sp, r7
 8003c34:	b00c      	add	sp, #48	; 0x30
 8003c36:	bd80      	pop	{r7, pc}
 8003c38:	20000310 	.word	0x20000310

08003c3c <ENCmodpow>:

/********************************
 * THIS IS THE ENCRYPTION CODE
 *******************************/
 int ENCmodpow(int base, int power, int mod)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b086      	sub	sp, #24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
        int i;
        int result = 1;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	613b      	str	r3, [r7, #16]
        for (i = 0; i < power; i++)
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	e00b      	b.n	8003c6a <ENCmodpow+0x2e>
        {
                result = (result * base) % mod;
 8003c52:	693b      	ldr	r3, [r7, #16]
 8003c54:	68fa      	ldr	r2, [r7, #12]
 8003c56:	4353      	muls	r3, r2
 8003c58:	6879      	ldr	r1, [r7, #4]
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f7fc fbe0 	bl	8000420 <__aeabi_idivmod>
 8003c60:	000b      	movs	r3, r1
 8003c62:	613b      	str	r3, [r7, #16]
        for (i = 0; i < power; i++)
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	3301      	adds	r3, #1
 8003c68:	617b      	str	r3, [r7, #20]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	429a      	cmp	r2, r3
 8003c70:	dbef      	blt.n	8003c52 <ENCmodpow+0x16>
        }
        return result;
 8003c72:	693b      	ldr	r3, [r7, #16]
}
 8003c74:	0018      	movs	r0, r3
 8003c76:	46bd      	mov	sp, r7
 8003c78:	b006      	add	sp, #24
 8003c7a:	bd80      	pop	{r7, pc}

08003c7c <encrypt>:

void encrypt(char msg[]) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b084      	sub	sp, #16
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
    int c;
	int i;
        for (i = 0; msg[i]!= '}'; i++)
 8003c84:	2300      	movs	r3, #0
 8003c86:	60fb      	str	r3, [r7, #12]
 8003c88:	e01a      	b.n	8003cc0 <encrypt+0x44>
        {
            c = ENCmodpow(msg[i],e,n);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	687a      	ldr	r2, [r7, #4]
 8003c8e:	18d3      	adds	r3, r2, r3
 8003c90:	781b      	ldrb	r3, [r3, #0]
 8003c92:	0018      	movs	r0, r3
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <encrypt+0x68>)
 8003c96:	6819      	ldr	r1, [r3, #0]
 8003c98:	4b13      	ldr	r3, [pc, #76]	; (8003ce8 <encrypt+0x6c>)
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	001a      	movs	r2, r3
 8003c9e:	f7ff ffcd 	bl	8003c3c <ENCmodpow>
 8003ca2:	0003      	movs	r3, r0
 8003ca4:	60bb      	str	r3, [r7, #8]
            encryptedData[i] = c;
 8003ca6:	4b11      	ldr	r3, [pc, #68]	; (8003cec <encrypt+0x70>)
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	0092      	lsls	r2, r2, #2
 8003cac:	68b9      	ldr	r1, [r7, #8]
 8003cae:	50d1      	str	r1, [r2, r3]
            encryptedBits++;
 8003cb0:	4b0f      	ldr	r3, [pc, #60]	; (8003cf0 <encrypt+0x74>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	1c5a      	adds	r2, r3, #1
 8003cb6:	4b0e      	ldr	r3, [pc, #56]	; (8003cf0 <encrypt+0x74>)
 8003cb8:	601a      	str	r2, [r3, #0]
        for (i = 0; msg[i]!= '}'; i++)
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	3301      	adds	r3, #1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	18d3      	adds	r3, r2, r3
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b7d      	cmp	r3, #125	; 0x7d
 8003cca:	d1de      	bne.n	8003c8a <encrypt+0xe>
                sprintf(mesg, "%d and i-1 =%dP",encryptedData[i], encryptedData[i-1]);
                HAL_UART_Transmit(&huart2, mesg, sizeof(mesg), 1000);
            }*/
        }
        //call compression
        compress(encryptedData, encryptedBits);
 8003ccc:	4b08      	ldr	r3, [pc, #32]	; (8003cf0 <encrypt+0x74>)
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	4b06      	ldr	r3, [pc, #24]	; (8003cec <encrypt+0x70>)
 8003cd2:	0011      	movs	r1, r2
 8003cd4:	0018      	movs	r0, r3
 8003cd6:	f7ff fed5 	bl	8003a84 <compress>
}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	b004      	add	sp, #16
 8003ce0:	bd80      	pop	{r7, pc}
 8003ce2:	46c0      	nop			; (mov r8, r8)
 8003ce4:	20000004 	.word	0x20000004
 8003ce8:	20000008 	.word	0x20000008
 8003cec:	20000ce4 	.word	0x20000ce4
 8003cf0:	200014b4 	.word	0x200014b4

08003cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cf8:	b672      	cpsid	i
}
 8003cfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003cfc:	e7fe      	b.n	8003cfc <Error_Handler+0x8>
	...

08003d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b082      	sub	sp, #8
 8003d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d06:	4b0f      	ldr	r3, [pc, #60]	; (8003d44 <HAL_MspInit+0x44>)
 8003d08:	699a      	ldr	r2, [r3, #24]
 8003d0a:	4b0e      	ldr	r3, [pc, #56]	; (8003d44 <HAL_MspInit+0x44>)
 8003d0c:	2101      	movs	r1, #1
 8003d0e:	430a      	orrs	r2, r1
 8003d10:	619a      	str	r2, [r3, #24]
 8003d12:	4b0c      	ldr	r3, [pc, #48]	; (8003d44 <HAL_MspInit+0x44>)
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	2201      	movs	r2, #1
 8003d18:	4013      	ands	r3, r2
 8003d1a:	607b      	str	r3, [r7, #4]
 8003d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d1e:	4b09      	ldr	r3, [pc, #36]	; (8003d44 <HAL_MspInit+0x44>)
 8003d20:	69da      	ldr	r2, [r3, #28]
 8003d22:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <HAL_MspInit+0x44>)
 8003d24:	2180      	movs	r1, #128	; 0x80
 8003d26:	0549      	lsls	r1, r1, #21
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	61da      	str	r2, [r3, #28]
 8003d2c:	4b05      	ldr	r3, [pc, #20]	; (8003d44 <HAL_MspInit+0x44>)
 8003d2e:	69da      	ldr	r2, [r3, #28]
 8003d30:	2380      	movs	r3, #128	; 0x80
 8003d32:	055b      	lsls	r3, r3, #21
 8003d34:	4013      	ands	r3, r2
 8003d36:	603b      	str	r3, [r7, #0]
 8003d38:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d3a:	46c0      	nop			; (mov r8, r8)
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	b002      	add	sp, #8
 8003d40:	bd80      	pop	{r7, pc}
 8003d42:	46c0      	nop			; (mov r8, r8)
 8003d44:	40021000 	.word	0x40021000

08003d48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003d48:	b590      	push	{r4, r7, lr}
 8003d4a:	b08b      	sub	sp, #44	; 0x2c
 8003d4c:	af00      	add	r7, sp, #0
 8003d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d50:	2414      	movs	r4, #20
 8003d52:	193b      	adds	r3, r7, r4
 8003d54:	0018      	movs	r0, r3
 8003d56:	2314      	movs	r3, #20
 8003d58:	001a      	movs	r2, r3
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	f002 fbfb 	bl	8006556 <memset>
  if(hspi->Instance==SPI2)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a1c      	ldr	r2, [pc, #112]	; (8003dd8 <HAL_SPI_MspInit+0x90>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d132      	bne.n	8003dd0 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	; (8003ddc <HAL_SPI_MspInit+0x94>)
 8003d6c:	69da      	ldr	r2, [r3, #28]
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	; (8003ddc <HAL_SPI_MspInit+0x94>)
 8003d70:	2180      	movs	r1, #128	; 0x80
 8003d72:	01c9      	lsls	r1, r1, #7
 8003d74:	430a      	orrs	r2, r1
 8003d76:	61da      	str	r2, [r3, #28]
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <HAL_SPI_MspInit+0x94>)
 8003d7a:	69da      	ldr	r2, [r3, #28]
 8003d7c:	2380      	movs	r3, #128	; 0x80
 8003d7e:	01db      	lsls	r3, r3, #7
 8003d80:	4013      	ands	r3, r2
 8003d82:	613b      	str	r3, [r7, #16]
 8003d84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d86:	4b15      	ldr	r3, [pc, #84]	; (8003ddc <HAL_SPI_MspInit+0x94>)
 8003d88:	695a      	ldr	r2, [r3, #20]
 8003d8a:	4b14      	ldr	r3, [pc, #80]	; (8003ddc <HAL_SPI_MspInit+0x94>)
 8003d8c:	2180      	movs	r1, #128	; 0x80
 8003d8e:	02c9      	lsls	r1, r1, #11
 8003d90:	430a      	orrs	r2, r1
 8003d92:	615a      	str	r2, [r3, #20]
 8003d94:	4b11      	ldr	r3, [pc, #68]	; (8003ddc <HAL_SPI_MspInit+0x94>)
 8003d96:	695a      	ldr	r2, [r3, #20]
 8003d98:	2380      	movs	r3, #128	; 0x80
 8003d9a:	02db      	lsls	r3, r3, #11
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	60fb      	str	r3, [r7, #12]
 8003da0:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003da2:	193b      	adds	r3, r7, r4
 8003da4:	22e0      	movs	r2, #224	; 0xe0
 8003da6:	0212      	lsls	r2, r2, #8
 8003da8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003daa:	0021      	movs	r1, r4
 8003dac:	187b      	adds	r3, r7, r1
 8003dae:	2202      	movs	r2, #2
 8003db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db2:	187b      	adds	r3, r7, r1
 8003db4:	2200      	movs	r2, #0
 8003db6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003db8:	187b      	adds	r3, r7, r1
 8003dba:	2203      	movs	r2, #3
 8003dbc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8003dbe:	187b      	adds	r3, r7, r1
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dc4:	187b      	adds	r3, r7, r1
 8003dc6:	4a06      	ldr	r2, [pc, #24]	; (8003de0 <HAL_SPI_MspInit+0x98>)
 8003dc8:	0019      	movs	r1, r3
 8003dca:	0010      	movs	r0, r2
 8003dcc:	f000 fa96 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003dd0:	46c0      	nop			; (mov r8, r8)
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	b00b      	add	sp, #44	; 0x2c
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	40003800 	.word	0x40003800
 8003ddc:	40021000 	.word	0x40021000
 8003de0:	48000400 	.word	0x48000400

08003de4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b08b      	sub	sp, #44	; 0x2c
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dec:	2414      	movs	r4, #20
 8003dee:	193b      	adds	r3, r7, r4
 8003df0:	0018      	movs	r0, r3
 8003df2:	2314      	movs	r3, #20
 8003df4:	001a      	movs	r2, r3
 8003df6:	2100      	movs	r1, #0
 8003df8:	f002 fbad 	bl	8006556 <memset>
  if(huart->Instance==USART2)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4a1c      	ldr	r2, [pc, #112]	; (8003e74 <HAL_UART_MspInit+0x90>)
 8003e02:	4293      	cmp	r3, r2
 8003e04:	d132      	bne.n	8003e6c <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e06:	4b1c      	ldr	r3, [pc, #112]	; (8003e78 <HAL_UART_MspInit+0x94>)
 8003e08:	69da      	ldr	r2, [r3, #28]
 8003e0a:	4b1b      	ldr	r3, [pc, #108]	; (8003e78 <HAL_UART_MspInit+0x94>)
 8003e0c:	2180      	movs	r1, #128	; 0x80
 8003e0e:	0289      	lsls	r1, r1, #10
 8003e10:	430a      	orrs	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
 8003e14:	4b18      	ldr	r3, [pc, #96]	; (8003e78 <HAL_UART_MspInit+0x94>)
 8003e16:	69da      	ldr	r2, [r3, #28]
 8003e18:	2380      	movs	r3, #128	; 0x80
 8003e1a:	029b      	lsls	r3, r3, #10
 8003e1c:	4013      	ands	r3, r2
 8003e1e:	613b      	str	r3, [r7, #16]
 8003e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e22:	4b15      	ldr	r3, [pc, #84]	; (8003e78 <HAL_UART_MspInit+0x94>)
 8003e24:	695a      	ldr	r2, [r3, #20]
 8003e26:	4b14      	ldr	r3, [pc, #80]	; (8003e78 <HAL_UART_MspInit+0x94>)
 8003e28:	2180      	movs	r1, #128	; 0x80
 8003e2a:	0289      	lsls	r1, r1, #10
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	615a      	str	r2, [r3, #20]
 8003e30:	4b11      	ldr	r3, [pc, #68]	; (8003e78 <HAL_UART_MspInit+0x94>)
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	2380      	movs	r3, #128	; 0x80
 8003e36:	029b      	lsls	r3, r3, #10
 8003e38:	4013      	ands	r3, r2
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e3e:	0021      	movs	r1, r4
 8003e40:	187b      	adds	r3, r7, r1
 8003e42:	220c      	movs	r2, #12
 8003e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e46:	187b      	adds	r3, r7, r1
 8003e48:	2202      	movs	r2, #2
 8003e4a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	187b      	adds	r3, r7, r1
 8003e4e:	2200      	movs	r2, #0
 8003e50:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e52:	187b      	adds	r3, r7, r1
 8003e54:	2203      	movs	r2, #3
 8003e56:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003e58:	187b      	adds	r3, r7, r1
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5e:	187a      	adds	r2, r7, r1
 8003e60:	2390      	movs	r3, #144	; 0x90
 8003e62:	05db      	lsls	r3, r3, #23
 8003e64:	0011      	movs	r1, r2
 8003e66:	0018      	movs	r0, r3
 8003e68:	f000 fa48 	bl	80042fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e6c:	46c0      	nop			; (mov r8, r8)
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	b00b      	add	sp, #44	; 0x2c
 8003e72:	bd90      	pop	{r4, r7, pc}
 8003e74:	40004400 	.word	0x40004400
 8003e78:	40021000 	.word	0x40021000

08003e7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e80:	e7fe      	b.n	8003e80 <NMI_Handler+0x4>

08003e82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e82:	b580      	push	{r7, lr}
 8003e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e86:	e7fe      	b.n	8003e86 <HardFault_Handler+0x4>

08003e88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8003e8c:	46c0      	nop			; (mov r8, r8)
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	bd80      	pop	{r7, pc}

08003e92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e92:	b580      	push	{r7, lr}
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e96:	46c0      	nop			; (mov r8, r8)
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ea0:	f000 f938 	bl	8004114 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ea4:	46c0      	nop			; (mov r8, r8)
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bd80      	pop	{r7, pc}

08003eaa <_getpid>:
 8003eaa:	b580      	push	{r7, lr}
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	2301      	movs	r3, #1
 8003eb0:	0018      	movs	r0, r3
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <_kill>:
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b082      	sub	sp, #8
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
 8003ec0:	f002 fb16 	bl	80064f0 <__errno>
 8003ec4:	0003      	movs	r3, r0
 8003ec6:	2216      	movs	r2, #22
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	2301      	movs	r3, #1
 8003ecc:	425b      	negs	r3, r3
 8003ece:	0018      	movs	r0, r3
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	b002      	add	sp, #8
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <_exit>:
 8003ed6:	b580      	push	{r7, lr}
 8003ed8:	b082      	sub	sp, #8
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
 8003ede:	2301      	movs	r3, #1
 8003ee0:	425a      	negs	r2, r3
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	0011      	movs	r1, r2
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff ffe5 	bl	8003eb6 <_kill>
 8003eec:	e7fe      	b.n	8003eec <_exit+0x16>

08003eee <_read>:
 8003eee:	b580      	push	{r7, lr}
 8003ef0:	b086      	sub	sp, #24
 8003ef2:	af00      	add	r7, sp, #0
 8003ef4:	60f8      	str	r0, [r7, #12]
 8003ef6:	60b9      	str	r1, [r7, #8]
 8003ef8:	607a      	str	r2, [r7, #4]
 8003efa:	2300      	movs	r3, #0
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e00a      	b.n	8003f16 <_read+0x28>
 8003f00:	e000      	b.n	8003f04 <_read+0x16>
 8003f02:	bf00      	nop
 8003f04:	0001      	movs	r1, r0
 8003f06:	68bb      	ldr	r3, [r7, #8]
 8003f08:	1c5a      	adds	r2, r3, #1
 8003f0a:	60ba      	str	r2, [r7, #8]
 8003f0c:	b2ca      	uxtb	r2, r1
 8003f0e:	701a      	strb	r2, [r3, #0]
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	3301      	adds	r3, #1
 8003f14:	617b      	str	r3, [r7, #20]
 8003f16:	697a      	ldr	r2, [r7, #20]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	dbf0      	blt.n	8003f00 <_read+0x12>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	0018      	movs	r0, r3
 8003f22:	46bd      	mov	sp, r7
 8003f24:	b006      	add	sp, #24
 8003f26:	bd80      	pop	{r7, pc}

08003f28 <_write>:
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	60f8      	str	r0, [r7, #12]
 8003f30:	60b9      	str	r1, [r7, #8]
 8003f32:	607a      	str	r2, [r7, #4]
 8003f34:	2300      	movs	r3, #0
 8003f36:	617b      	str	r3, [r7, #20]
 8003f38:	e009      	b.n	8003f4e <_write+0x26>
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	1c5a      	adds	r2, r3, #1
 8003f3e:	60ba      	str	r2, [r7, #8]
 8003f40:	781b      	ldrb	r3, [r3, #0]
 8003f42:	0018      	movs	r0, r3
 8003f44:	e000      	b.n	8003f48 <_write+0x20>
 8003f46:	bf00      	nop
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	3301      	adds	r3, #1
 8003f4c:	617b      	str	r3, [r7, #20]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	dbf1      	blt.n	8003f3a <_write+0x12>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	0018      	movs	r0, r3
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	b006      	add	sp, #24
 8003f5e:	bd80      	pop	{r7, pc}

08003f60 <_close>:
 8003f60:	b580      	push	{r7, lr}
 8003f62:	b082      	sub	sp, #8
 8003f64:	af00      	add	r7, sp, #0
 8003f66:	6078      	str	r0, [r7, #4]
 8003f68:	2301      	movs	r3, #1
 8003f6a:	425b      	negs	r3, r3
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	b002      	add	sp, #8
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <_fstat>:
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b082      	sub	sp, #8
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	2280      	movs	r2, #128	; 0x80
 8003f82:	0192      	lsls	r2, r2, #6
 8003f84:	605a      	str	r2, [r3, #4]
 8003f86:	2300      	movs	r3, #0
 8003f88:	0018      	movs	r0, r3
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	b002      	add	sp, #8
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <_isatty>:
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b082      	sub	sp, #8
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	2301      	movs	r3, #1
 8003f9a:	0018      	movs	r0, r3
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	b002      	add	sp, #8
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <_lseek>:
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b084      	sub	sp, #16
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	60f8      	str	r0, [r7, #12]
 8003faa:	60b9      	str	r1, [r7, #8]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	2300      	movs	r3, #0
 8003fb0:	0018      	movs	r0, r3
 8003fb2:	46bd      	mov	sp, r7
 8003fb4:	b004      	add	sp, #16
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <_sbrk>:
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b086      	sub	sp, #24
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	4a14      	ldr	r2, [pc, #80]	; (8004014 <_sbrk+0x5c>)
 8003fc2:	4b15      	ldr	r3, [pc, #84]	; (8004018 <_sbrk+0x60>)
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	617b      	str	r3, [r7, #20]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	613b      	str	r3, [r7, #16]
 8003fcc:	4b13      	ldr	r3, [pc, #76]	; (800401c <_sbrk+0x64>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d102      	bne.n	8003fda <_sbrk+0x22>
 8003fd4:	4b11      	ldr	r3, [pc, #68]	; (800401c <_sbrk+0x64>)
 8003fd6:	4a12      	ldr	r2, [pc, #72]	; (8004020 <_sbrk+0x68>)
 8003fd8:	601a      	str	r2, [r3, #0]
 8003fda:	4b10      	ldr	r3, [pc, #64]	; (800401c <_sbrk+0x64>)
 8003fdc:	681a      	ldr	r2, [r3, #0]
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	18d3      	adds	r3, r2, r3
 8003fe2:	693a      	ldr	r2, [r7, #16]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d207      	bcs.n	8003ff8 <_sbrk+0x40>
 8003fe8:	f002 fa82 	bl	80064f0 <__errno>
 8003fec:	0003      	movs	r3, r0
 8003fee:	220c      	movs	r2, #12
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	425b      	negs	r3, r3
 8003ff6:	e009      	b.n	800400c <_sbrk+0x54>
 8003ff8:	4b08      	ldr	r3, [pc, #32]	; (800401c <_sbrk+0x64>)
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	60fb      	str	r3, [r7, #12]
 8003ffe:	4b07      	ldr	r3, [pc, #28]	; (800401c <_sbrk+0x64>)
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	18d2      	adds	r2, r2, r3
 8004006:	4b05      	ldr	r3, [pc, #20]	; (800401c <_sbrk+0x64>)
 8004008:	601a      	str	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	0018      	movs	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	b006      	add	sp, #24
 8004012:	bd80      	pop	{r7, pc}
 8004014:	20002000 	.word	0x20002000
 8004018:	00000400 	.word	0x00000400
 800401c:	200014c0 	.word	0x200014c0
 8004020:	200014d8 	.word	0x200014d8

08004024 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8004028:	46c0      	nop			; (mov r8, r8)
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}
	...

08004030 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004030:	480d      	ldr	r0, [pc, #52]	; (8004068 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004032:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004034:	480d      	ldr	r0, [pc, #52]	; (800406c <LoopForever+0x6>)
  ldr r1, =_edata
 8004036:	490e      	ldr	r1, [pc, #56]	; (8004070 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004038:	4a0e      	ldr	r2, [pc, #56]	; (8004074 <LoopForever+0xe>)
  movs r3, #0
 800403a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800403c:	e002      	b.n	8004044 <LoopCopyDataInit>

0800403e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800403e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004040:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004042:	3304      	adds	r3, #4

08004044 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004044:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004046:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004048:	d3f9      	bcc.n	800403e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800404a:	4a0b      	ldr	r2, [pc, #44]	; (8004078 <LoopForever+0x12>)
  ldr r4, =_ebss
 800404c:	4c0b      	ldr	r4, [pc, #44]	; (800407c <LoopForever+0x16>)
  movs r3, #0
 800404e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004050:	e001      	b.n	8004056 <LoopFillZerobss>

08004052 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004052:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004054:	3204      	adds	r2, #4

08004056 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004056:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004058:	d3fb      	bcc.n	8004052 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800405a:	f7ff ffe3 	bl	8004024 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800405e:	f002 fa4d 	bl	80064fc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004062:	f7fe fb91 	bl	8002788 <main>

08004066 <LoopForever>:

LoopForever:
    b LoopForever
 8004066:	e7fe      	b.n	8004066 <LoopForever>
  ldr   r0, =_estack
 8004068:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800406c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004070:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8004074:	08009e4c 	.word	0x08009e4c
  ldr r2, =_sbss
 8004078:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 800407c:	200014d8 	.word	0x200014d8

08004080 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004080:	e7fe      	b.n	8004080 <ADC1_COMP_IRQHandler>
	...

08004084 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004084:	b580      	push	{r7, lr}
 8004086:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004088:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <HAL_Init+0x24>)
 800408a:	681a      	ldr	r2, [r3, #0]
 800408c:	4b06      	ldr	r3, [pc, #24]	; (80040a8 <HAL_Init+0x24>)
 800408e:	2110      	movs	r1, #16
 8004090:	430a      	orrs	r2, r1
 8004092:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8004094:	2003      	movs	r0, #3
 8004096:	f000 f809 	bl	80040ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800409a:	f7ff fe31 	bl	8003d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800409e:	2300      	movs	r3, #0
}
 80040a0:	0018      	movs	r0, r3
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	46c0      	nop			; (mov r8, r8)
 80040a8:	40022000 	.word	0x40022000

080040ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ac:	b590      	push	{r4, r7, lr}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_InitTick+0x5c>)
 80040b6:	681c      	ldr	r4, [r3, #0]
 80040b8:	4b14      	ldr	r3, [pc, #80]	; (800410c <HAL_InitTick+0x60>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	0019      	movs	r1, r3
 80040be:	23fa      	movs	r3, #250	; 0xfa
 80040c0:	0098      	lsls	r0, r3, #2
 80040c2:	f7fc f83d 	bl	8000140 <__udivsi3>
 80040c6:	0003      	movs	r3, r0
 80040c8:	0019      	movs	r1, r3
 80040ca:	0020      	movs	r0, r4
 80040cc:	f7fc f838 	bl	8000140 <__udivsi3>
 80040d0:	0003      	movs	r3, r0
 80040d2:	0018      	movs	r0, r3
 80040d4:	f000 f905 	bl	80042e2 <HAL_SYSTICK_Config>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d001      	beq.n	80040e0 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80040dc:	2301      	movs	r3, #1
 80040de:	e00f      	b.n	8004100 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d80b      	bhi.n	80040fe <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e6:	6879      	ldr	r1, [r7, #4]
 80040e8:	2301      	movs	r3, #1
 80040ea:	425b      	negs	r3, r3
 80040ec:	2200      	movs	r2, #0
 80040ee:	0018      	movs	r0, r3
 80040f0:	f000 f8e2 	bl	80042b8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040f4:	4b06      	ldr	r3, [pc, #24]	; (8004110 <HAL_InitTick+0x64>)
 80040f6:	687a      	ldr	r2, [r7, #4]
 80040f8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e000      	b.n	8004100 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80040fe:	2301      	movs	r3, #1
}
 8004100:	0018      	movs	r0, r3
 8004102:	46bd      	mov	sp, r7
 8004104:	b003      	add	sp, #12
 8004106:	bd90      	pop	{r4, r7, pc}
 8004108:	2000000c 	.word	0x2000000c
 800410c:	20000014 	.word	0x20000014
 8004110:	20000010 	.word	0x20000010

08004114 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004118:	4b05      	ldr	r3, [pc, #20]	; (8004130 <HAL_IncTick+0x1c>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	001a      	movs	r2, r3
 800411e:	4b05      	ldr	r3, [pc, #20]	; (8004134 <HAL_IncTick+0x20>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	18d2      	adds	r2, r2, r3
 8004124:	4b03      	ldr	r3, [pc, #12]	; (8004134 <HAL_IncTick+0x20>)
 8004126:	601a      	str	r2, [r3, #0]
}
 8004128:	46c0      	nop			; (mov r8, r8)
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	46c0      	nop			; (mov r8, r8)
 8004130:	20000014 	.word	0x20000014
 8004134:	200014c4 	.word	0x200014c4

08004138 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	af00      	add	r7, sp, #0
  return uwTick;
 800413c:	4b02      	ldr	r3, [pc, #8]	; (8004148 <HAL_GetTick+0x10>)
 800413e:	681b      	ldr	r3, [r3, #0]
}
 8004140:	0018      	movs	r0, r3
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	200014c4 	.word	0x200014c4

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff fff0 	bl	8004138 <HAL_GetTick>
 8004158:	0003      	movs	r3, r0
 800415a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	3301      	adds	r3, #1
 8004164:	d005      	beq.n	8004172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_Delay+0x44>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	001a      	movs	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	189b      	adds	r3, r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8004172:	46c0      	nop			; (mov r8, r8)
 8004174:	f7ff ffe0 	bl	8004138 <HAL_GetTick>
 8004178:	0002      	movs	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f7      	bhi.n	8004174 <HAL_Delay+0x28>
  {
  }
}
 8004184:	46c0      	nop			; (mov r8, r8)
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	20000014 	.word	0x20000014

08004194 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004194:	b590      	push	{r4, r7, lr}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
 800419a:	0002      	movs	r2, r0
 800419c:	6039      	str	r1, [r7, #0]
 800419e:	1dfb      	adds	r3, r7, #7
 80041a0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041a2:	1dfb      	adds	r3, r7, #7
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	2b7f      	cmp	r3, #127	; 0x7f
 80041a8:	d828      	bhi.n	80041fc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041aa:	4a2f      	ldr	r2, [pc, #188]	; (8004268 <__NVIC_SetPriority+0xd4>)
 80041ac:	1dfb      	adds	r3, r7, #7
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b25b      	sxtb	r3, r3
 80041b2:	089b      	lsrs	r3, r3, #2
 80041b4:	33c0      	adds	r3, #192	; 0xc0
 80041b6:	009b      	lsls	r3, r3, #2
 80041b8:	589b      	ldr	r3, [r3, r2]
 80041ba:	1dfa      	adds	r2, r7, #7
 80041bc:	7812      	ldrb	r2, [r2, #0]
 80041be:	0011      	movs	r1, r2
 80041c0:	2203      	movs	r2, #3
 80041c2:	400a      	ands	r2, r1
 80041c4:	00d2      	lsls	r2, r2, #3
 80041c6:	21ff      	movs	r1, #255	; 0xff
 80041c8:	4091      	lsls	r1, r2
 80041ca:	000a      	movs	r2, r1
 80041cc:	43d2      	mvns	r2, r2
 80041ce:	401a      	ands	r2, r3
 80041d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	019b      	lsls	r3, r3, #6
 80041d6:	22ff      	movs	r2, #255	; 0xff
 80041d8:	401a      	ands	r2, r3
 80041da:	1dfb      	adds	r3, r7, #7
 80041dc:	781b      	ldrb	r3, [r3, #0]
 80041de:	0018      	movs	r0, r3
 80041e0:	2303      	movs	r3, #3
 80041e2:	4003      	ands	r3, r0
 80041e4:	00db      	lsls	r3, r3, #3
 80041e6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041e8:	481f      	ldr	r0, [pc, #124]	; (8004268 <__NVIC_SetPriority+0xd4>)
 80041ea:	1dfb      	adds	r3, r7, #7
 80041ec:	781b      	ldrb	r3, [r3, #0]
 80041ee:	b25b      	sxtb	r3, r3
 80041f0:	089b      	lsrs	r3, r3, #2
 80041f2:	430a      	orrs	r2, r1
 80041f4:	33c0      	adds	r3, #192	; 0xc0
 80041f6:	009b      	lsls	r3, r3, #2
 80041f8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80041fa:	e031      	b.n	8004260 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80041fc:	4a1b      	ldr	r2, [pc, #108]	; (800426c <__NVIC_SetPriority+0xd8>)
 80041fe:	1dfb      	adds	r3, r7, #7
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	0019      	movs	r1, r3
 8004204:	230f      	movs	r3, #15
 8004206:	400b      	ands	r3, r1
 8004208:	3b08      	subs	r3, #8
 800420a:	089b      	lsrs	r3, r3, #2
 800420c:	3306      	adds	r3, #6
 800420e:	009b      	lsls	r3, r3, #2
 8004210:	18d3      	adds	r3, r2, r3
 8004212:	3304      	adds	r3, #4
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	1dfa      	adds	r2, r7, #7
 8004218:	7812      	ldrb	r2, [r2, #0]
 800421a:	0011      	movs	r1, r2
 800421c:	2203      	movs	r2, #3
 800421e:	400a      	ands	r2, r1
 8004220:	00d2      	lsls	r2, r2, #3
 8004222:	21ff      	movs	r1, #255	; 0xff
 8004224:	4091      	lsls	r1, r2
 8004226:	000a      	movs	r2, r1
 8004228:	43d2      	mvns	r2, r2
 800422a:	401a      	ands	r2, r3
 800422c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800422e:	683b      	ldr	r3, [r7, #0]
 8004230:	019b      	lsls	r3, r3, #6
 8004232:	22ff      	movs	r2, #255	; 0xff
 8004234:	401a      	ands	r2, r3
 8004236:	1dfb      	adds	r3, r7, #7
 8004238:	781b      	ldrb	r3, [r3, #0]
 800423a:	0018      	movs	r0, r3
 800423c:	2303      	movs	r3, #3
 800423e:	4003      	ands	r3, r0
 8004240:	00db      	lsls	r3, r3, #3
 8004242:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004244:	4809      	ldr	r0, [pc, #36]	; (800426c <__NVIC_SetPriority+0xd8>)
 8004246:	1dfb      	adds	r3, r7, #7
 8004248:	781b      	ldrb	r3, [r3, #0]
 800424a:	001c      	movs	r4, r3
 800424c:	230f      	movs	r3, #15
 800424e:	4023      	ands	r3, r4
 8004250:	3b08      	subs	r3, #8
 8004252:	089b      	lsrs	r3, r3, #2
 8004254:	430a      	orrs	r2, r1
 8004256:	3306      	adds	r3, #6
 8004258:	009b      	lsls	r3, r3, #2
 800425a:	18c3      	adds	r3, r0, r3
 800425c:	3304      	adds	r3, #4
 800425e:	601a      	str	r2, [r3, #0]
}
 8004260:	46c0      	nop			; (mov r8, r8)
 8004262:	46bd      	mov	sp, r7
 8004264:	b003      	add	sp, #12
 8004266:	bd90      	pop	{r4, r7, pc}
 8004268:	e000e100 	.word	0xe000e100
 800426c:	e000ed00 	.word	0xe000ed00

08004270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	1e5a      	subs	r2, r3, #1
 800427c:	2380      	movs	r3, #128	; 0x80
 800427e:	045b      	lsls	r3, r3, #17
 8004280:	429a      	cmp	r2, r3
 8004282:	d301      	bcc.n	8004288 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004284:	2301      	movs	r3, #1
 8004286:	e010      	b.n	80042aa <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004288:	4b0a      	ldr	r3, [pc, #40]	; (80042b4 <SysTick_Config+0x44>)
 800428a:	687a      	ldr	r2, [r7, #4]
 800428c:	3a01      	subs	r2, #1
 800428e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004290:	2301      	movs	r3, #1
 8004292:	425b      	negs	r3, r3
 8004294:	2103      	movs	r1, #3
 8004296:	0018      	movs	r0, r3
 8004298:	f7ff ff7c 	bl	8004194 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800429c:	4b05      	ldr	r3, [pc, #20]	; (80042b4 <SysTick_Config+0x44>)
 800429e:	2200      	movs	r2, #0
 80042a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80042a2:	4b04      	ldr	r3, [pc, #16]	; (80042b4 <SysTick_Config+0x44>)
 80042a4:	2207      	movs	r2, #7
 80042a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	0018      	movs	r0, r3
 80042ac:	46bd      	mov	sp, r7
 80042ae:	b002      	add	sp, #8
 80042b0:	bd80      	pop	{r7, pc}
 80042b2:	46c0      	nop			; (mov r8, r8)
 80042b4:	e000e010 	.word	0xe000e010

080042b8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	60b9      	str	r1, [r7, #8]
 80042c0:	607a      	str	r2, [r7, #4]
 80042c2:	210f      	movs	r1, #15
 80042c4:	187b      	adds	r3, r7, r1
 80042c6:	1c02      	adds	r2, r0, #0
 80042c8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80042ca:	68ba      	ldr	r2, [r7, #8]
 80042cc:	187b      	adds	r3, r7, r1
 80042ce:	781b      	ldrb	r3, [r3, #0]
 80042d0:	b25b      	sxtb	r3, r3
 80042d2:	0011      	movs	r1, r2
 80042d4:	0018      	movs	r0, r3
 80042d6:	f7ff ff5d 	bl	8004194 <__NVIC_SetPriority>
}
 80042da:	46c0      	nop			; (mov r8, r8)
 80042dc:	46bd      	mov	sp, r7
 80042de:	b004      	add	sp, #16
 80042e0:	bd80      	pop	{r7, pc}

080042e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042e2:	b580      	push	{r7, lr}
 80042e4:	b082      	sub	sp, #8
 80042e6:	af00      	add	r7, sp, #0
 80042e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7ff ffbf 	bl	8004270 <SysTick_Config>
 80042f2:	0003      	movs	r3, r0
}
 80042f4:	0018      	movs	r0, r3
 80042f6:	46bd      	mov	sp, r7
 80042f8:	b002      	add	sp, #8
 80042fa:	bd80      	pop	{r7, pc}

080042fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80042fc:	b580      	push	{r7, lr}
 80042fe:	b086      	sub	sp, #24
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004306:	2300      	movs	r3, #0
 8004308:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800430a:	e14f      	b.n	80045ac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2101      	movs	r1, #1
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4091      	lsls	r1, r2
 8004316:	000a      	movs	r2, r1
 8004318:	4013      	ands	r3, r2
 800431a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d100      	bne.n	8004324 <HAL_GPIO_Init+0x28>
 8004322:	e140      	b.n	80045a6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2203      	movs	r2, #3
 800432a:	4013      	ands	r3, r2
 800432c:	2b01      	cmp	r3, #1
 800432e:	d005      	beq.n	800433c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004330:	683b      	ldr	r3, [r7, #0]
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	2203      	movs	r2, #3
 8004336:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004338:	2b02      	cmp	r3, #2
 800433a:	d130      	bne.n	800439e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	2203      	movs	r2, #3
 8004348:	409a      	lsls	r2, r3
 800434a:	0013      	movs	r3, r2
 800434c:	43da      	mvns	r2, r3
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	4013      	ands	r3, r2
 8004352:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	68da      	ldr	r2, [r3, #12]
 8004358:	697b      	ldr	r3, [r7, #20]
 800435a:	005b      	lsls	r3, r3, #1
 800435c:	409a      	lsls	r2, r3
 800435e:	0013      	movs	r3, r2
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004372:	2201      	movs	r2, #1
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	409a      	lsls	r2, r3
 8004378:	0013      	movs	r3, r2
 800437a:	43da      	mvns	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4013      	ands	r3, r2
 8004380:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	091b      	lsrs	r3, r3, #4
 8004388:	2201      	movs	r2, #1
 800438a:	401a      	ands	r2, r3
 800438c:	697b      	ldr	r3, [r7, #20]
 800438e:	409a      	lsls	r2, r3
 8004390:	0013      	movs	r3, r2
 8004392:	693a      	ldr	r2, [r7, #16]
 8004394:	4313      	orrs	r3, r2
 8004396:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	685b      	ldr	r3, [r3, #4]
 80043a2:	2203      	movs	r2, #3
 80043a4:	4013      	ands	r3, r2
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d017      	beq.n	80043da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80043b0:	697b      	ldr	r3, [r7, #20]
 80043b2:	005b      	lsls	r3, r3, #1
 80043b4:	2203      	movs	r2, #3
 80043b6:	409a      	lsls	r2, r3
 80043b8:	0013      	movs	r3, r2
 80043ba:	43da      	mvns	r2, r3
 80043bc:	693b      	ldr	r3, [r7, #16]
 80043be:	4013      	ands	r3, r2
 80043c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	689a      	ldr	r2, [r3, #8]
 80043c6:	697b      	ldr	r3, [r7, #20]
 80043c8:	005b      	lsls	r3, r3, #1
 80043ca:	409a      	lsls	r2, r3
 80043cc:	0013      	movs	r3, r2
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	693a      	ldr	r2, [r7, #16]
 80043d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043da:	683b      	ldr	r3, [r7, #0]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	2203      	movs	r2, #3
 80043e0:	4013      	ands	r3, r2
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d123      	bne.n	800442e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80043e6:	697b      	ldr	r3, [r7, #20]
 80043e8:	08da      	lsrs	r2, r3, #3
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	3208      	adds	r2, #8
 80043ee:	0092      	lsls	r2, r2, #2
 80043f0:	58d3      	ldr	r3, [r2, r3]
 80043f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80043f4:	697b      	ldr	r3, [r7, #20]
 80043f6:	2207      	movs	r2, #7
 80043f8:	4013      	ands	r3, r2
 80043fa:	009b      	lsls	r3, r3, #2
 80043fc:	220f      	movs	r2, #15
 80043fe:	409a      	lsls	r2, r3
 8004400:	0013      	movs	r3, r2
 8004402:	43da      	mvns	r2, r3
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	4013      	ands	r3, r2
 8004408:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	2107      	movs	r1, #7
 8004412:	400b      	ands	r3, r1
 8004414:	009b      	lsls	r3, r3, #2
 8004416:	409a      	lsls	r2, r3
 8004418:	0013      	movs	r3, r2
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	4313      	orrs	r3, r2
 800441e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8004420:	697b      	ldr	r3, [r7, #20]
 8004422:	08da      	lsrs	r2, r3, #3
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	3208      	adds	r2, #8
 8004428:	0092      	lsls	r2, r2, #2
 800442a:	6939      	ldr	r1, [r7, #16]
 800442c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	005b      	lsls	r3, r3, #1
 8004438:	2203      	movs	r2, #3
 800443a:	409a      	lsls	r2, r3
 800443c:	0013      	movs	r3, r2
 800443e:	43da      	mvns	r2, r3
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	4013      	ands	r3, r2
 8004444:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	685b      	ldr	r3, [r3, #4]
 800444a:	2203      	movs	r2, #3
 800444c:	401a      	ands	r2, r3
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	409a      	lsls	r2, r3
 8004454:	0013      	movs	r3, r2
 8004456:	693a      	ldr	r2, [r7, #16]
 8004458:	4313      	orrs	r3, r2
 800445a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	23c0      	movs	r3, #192	; 0xc0
 8004468:	029b      	lsls	r3, r3, #10
 800446a:	4013      	ands	r3, r2
 800446c:	d100      	bne.n	8004470 <HAL_GPIO_Init+0x174>
 800446e:	e09a      	b.n	80045a6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004470:	4b54      	ldr	r3, [pc, #336]	; (80045c4 <HAL_GPIO_Init+0x2c8>)
 8004472:	699a      	ldr	r2, [r3, #24]
 8004474:	4b53      	ldr	r3, [pc, #332]	; (80045c4 <HAL_GPIO_Init+0x2c8>)
 8004476:	2101      	movs	r1, #1
 8004478:	430a      	orrs	r2, r1
 800447a:	619a      	str	r2, [r3, #24]
 800447c:	4b51      	ldr	r3, [pc, #324]	; (80045c4 <HAL_GPIO_Init+0x2c8>)
 800447e:	699b      	ldr	r3, [r3, #24]
 8004480:	2201      	movs	r2, #1
 8004482:	4013      	ands	r3, r2
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8004488:	4a4f      	ldr	r2, [pc, #316]	; (80045c8 <HAL_GPIO_Init+0x2cc>)
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	089b      	lsrs	r3, r3, #2
 800448e:	3302      	adds	r3, #2
 8004490:	009b      	lsls	r3, r3, #2
 8004492:	589b      	ldr	r3, [r3, r2]
 8004494:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2203      	movs	r2, #3
 800449a:	4013      	ands	r3, r2
 800449c:	009b      	lsls	r3, r3, #2
 800449e:	220f      	movs	r2, #15
 80044a0:	409a      	lsls	r2, r3
 80044a2:	0013      	movs	r3, r2
 80044a4:	43da      	mvns	r2, r3
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	4013      	ands	r3, r2
 80044aa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80044ac:	687a      	ldr	r2, [r7, #4]
 80044ae:	2390      	movs	r3, #144	; 0x90
 80044b0:	05db      	lsls	r3, r3, #23
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d013      	beq.n	80044de <HAL_GPIO_Init+0x1e2>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	4a44      	ldr	r2, [pc, #272]	; (80045cc <HAL_GPIO_Init+0x2d0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d00d      	beq.n	80044da <HAL_GPIO_Init+0x1de>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	4a43      	ldr	r2, [pc, #268]	; (80045d0 <HAL_GPIO_Init+0x2d4>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d007      	beq.n	80044d6 <HAL_GPIO_Init+0x1da>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	4a42      	ldr	r2, [pc, #264]	; (80045d4 <HAL_GPIO_Init+0x2d8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d101      	bne.n	80044d2 <HAL_GPIO_Init+0x1d6>
 80044ce:	2303      	movs	r3, #3
 80044d0:	e006      	b.n	80044e0 <HAL_GPIO_Init+0x1e4>
 80044d2:	2305      	movs	r3, #5
 80044d4:	e004      	b.n	80044e0 <HAL_GPIO_Init+0x1e4>
 80044d6:	2302      	movs	r3, #2
 80044d8:	e002      	b.n	80044e0 <HAL_GPIO_Init+0x1e4>
 80044da:	2301      	movs	r3, #1
 80044dc:	e000      	b.n	80044e0 <HAL_GPIO_Init+0x1e4>
 80044de:	2300      	movs	r3, #0
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	2103      	movs	r1, #3
 80044e4:	400a      	ands	r2, r1
 80044e6:	0092      	lsls	r2, r2, #2
 80044e8:	4093      	lsls	r3, r2
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	4313      	orrs	r3, r2
 80044ee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80044f0:	4935      	ldr	r1, [pc, #212]	; (80045c8 <HAL_GPIO_Init+0x2cc>)
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	089b      	lsrs	r3, r3, #2
 80044f6:	3302      	adds	r3, #2
 80044f8:	009b      	lsls	r3, r3, #2
 80044fa:	693a      	ldr	r2, [r7, #16]
 80044fc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80044fe:	4b36      	ldr	r3, [pc, #216]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	43da      	mvns	r2, r3
 8004508:	693b      	ldr	r3, [r7, #16]
 800450a:	4013      	ands	r3, r2
 800450c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	2380      	movs	r3, #128	; 0x80
 8004514:	025b      	lsls	r3, r3, #9
 8004516:	4013      	ands	r3, r2
 8004518:	d003      	beq.n	8004522 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800451a:	693a      	ldr	r2, [r7, #16]
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	4313      	orrs	r3, r2
 8004520:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8004522:	4b2d      	ldr	r3, [pc, #180]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004524:	693a      	ldr	r2, [r7, #16]
 8004526:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	43da      	mvns	r2, r3
 8004532:	693b      	ldr	r3, [r7, #16]
 8004534:	4013      	ands	r3, r2
 8004536:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	685a      	ldr	r2, [r3, #4]
 800453c:	2380      	movs	r3, #128	; 0x80
 800453e:	029b      	lsls	r3, r3, #10
 8004540:	4013      	ands	r3, r2
 8004542:	d003      	beq.n	800454c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	4313      	orrs	r3, r2
 800454a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800454c:	4b22      	ldr	r3, [pc, #136]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004552:	4b21      	ldr	r3, [pc, #132]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	43da      	mvns	r2, r3
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	4013      	ands	r3, r2
 8004560:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8004562:	683b      	ldr	r3, [r7, #0]
 8004564:	685a      	ldr	r2, [r3, #4]
 8004566:	2380      	movs	r3, #128	; 0x80
 8004568:	035b      	lsls	r3, r3, #13
 800456a:	4013      	ands	r3, r2
 800456c:	d003      	beq.n	8004576 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4313      	orrs	r3, r2
 8004574:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8004576:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 8004578:	693a      	ldr	r2, [r7, #16]
 800457a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800457c:	4b16      	ldr	r3, [pc, #88]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	43da      	mvns	r2, r3
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	4013      	ands	r3, r2
 800458a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	2380      	movs	r3, #128	; 0x80
 8004592:	039b      	lsls	r3, r3, #14
 8004594:	4013      	ands	r3, r2
 8004596:	d003      	beq.n	80045a0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8004598:	693a      	ldr	r2, [r7, #16]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	4313      	orrs	r3, r2
 800459e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80045a0:	4b0d      	ldr	r3, [pc, #52]	; (80045d8 <HAL_GPIO_Init+0x2dc>)
 80045a2:	693a      	ldr	r2, [r7, #16]
 80045a4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	3301      	adds	r3, #1
 80045aa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	40da      	lsrs	r2, r3
 80045b4:	1e13      	subs	r3, r2, #0
 80045b6:	d000      	beq.n	80045ba <HAL_GPIO_Init+0x2be>
 80045b8:	e6a8      	b.n	800430c <HAL_GPIO_Init+0x10>
  } 
}
 80045ba:	46c0      	nop			; (mov r8, r8)
 80045bc:	46c0      	nop			; (mov r8, r8)
 80045be:	46bd      	mov	sp, r7
 80045c0:	b006      	add	sp, #24
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40021000 	.word	0x40021000
 80045c8:	40010000 	.word	0x40010000
 80045cc:	48000400 	.word	0x48000400
 80045d0:	48000800 	.word	0x48000800
 80045d4:	48000c00 	.word	0x48000c00
 80045d8:	40010400 	.word	0x40010400

080045dc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
 80045e4:	0008      	movs	r0, r1
 80045e6:	0011      	movs	r1, r2
 80045e8:	1cbb      	adds	r3, r7, #2
 80045ea:	1c02      	adds	r2, r0, #0
 80045ec:	801a      	strh	r2, [r3, #0]
 80045ee:	1c7b      	adds	r3, r7, #1
 80045f0:	1c0a      	adds	r2, r1, #0
 80045f2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045f4:	1c7b      	adds	r3, r7, #1
 80045f6:	781b      	ldrb	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d004      	beq.n	8004606 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80045fc:	1cbb      	adds	r3, r7, #2
 80045fe:	881a      	ldrh	r2, [r3, #0]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004604:	e003      	b.n	800460e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004606:	1cbb      	adds	r3, r7, #2
 8004608:	881a      	ldrh	r2, [r3, #0]
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	46bd      	mov	sp, r7
 8004612:	b002      	add	sp, #8
 8004614:	bd80      	pop	{r7, pc}
	...

08004618 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b088      	sub	sp, #32
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004626:	2301      	movs	r3, #1
 8004628:	e301      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2201      	movs	r2, #1
 8004630:	4013      	ands	r3, r2
 8004632:	d100      	bne.n	8004636 <HAL_RCC_OscConfig+0x1e>
 8004634:	e08d      	b.n	8004752 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8004636:	4bc3      	ldr	r3, [pc, #780]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004638:	685b      	ldr	r3, [r3, #4]
 800463a:	220c      	movs	r2, #12
 800463c:	4013      	ands	r3, r2
 800463e:	2b04      	cmp	r3, #4
 8004640:	d00e      	beq.n	8004660 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004642:	4bc0      	ldr	r3, [pc, #768]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	220c      	movs	r2, #12
 8004648:	4013      	ands	r3, r2
 800464a:	2b08      	cmp	r3, #8
 800464c:	d116      	bne.n	800467c <HAL_RCC_OscConfig+0x64>
 800464e:	4bbd      	ldr	r3, [pc, #756]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004650:	685a      	ldr	r2, [r3, #4]
 8004652:	2380      	movs	r3, #128	; 0x80
 8004654:	025b      	lsls	r3, r3, #9
 8004656:	401a      	ands	r2, r3
 8004658:	2380      	movs	r3, #128	; 0x80
 800465a:	025b      	lsls	r3, r3, #9
 800465c:	429a      	cmp	r2, r3
 800465e:	d10d      	bne.n	800467c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004660:	4bb8      	ldr	r3, [pc, #736]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004662:	681a      	ldr	r2, [r3, #0]
 8004664:	2380      	movs	r3, #128	; 0x80
 8004666:	029b      	lsls	r3, r3, #10
 8004668:	4013      	ands	r3, r2
 800466a:	d100      	bne.n	800466e <HAL_RCC_OscConfig+0x56>
 800466c:	e070      	b.n	8004750 <HAL_RCC_OscConfig+0x138>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	685b      	ldr	r3, [r3, #4]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d000      	beq.n	8004678 <HAL_RCC_OscConfig+0x60>
 8004676:	e06b      	b.n	8004750 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8004678:	2301      	movs	r3, #1
 800467a:	e2d8      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	2b01      	cmp	r3, #1
 8004682:	d107      	bne.n	8004694 <HAL_RCC_OscConfig+0x7c>
 8004684:	4baf      	ldr	r3, [pc, #700]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004686:	681a      	ldr	r2, [r3, #0]
 8004688:	4bae      	ldr	r3, [pc, #696]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800468a:	2180      	movs	r1, #128	; 0x80
 800468c:	0249      	lsls	r1, r1, #9
 800468e:	430a      	orrs	r2, r1
 8004690:	601a      	str	r2, [r3, #0]
 8004692:	e02f      	b.n	80046f4 <HAL_RCC_OscConfig+0xdc>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d10c      	bne.n	80046b6 <HAL_RCC_OscConfig+0x9e>
 800469c:	4ba9      	ldr	r3, [pc, #676]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800469e:	681a      	ldr	r2, [r3, #0]
 80046a0:	4ba8      	ldr	r3, [pc, #672]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046a2:	49a9      	ldr	r1, [pc, #676]	; (8004948 <HAL_RCC_OscConfig+0x330>)
 80046a4:	400a      	ands	r2, r1
 80046a6:	601a      	str	r2, [r3, #0]
 80046a8:	4ba6      	ldr	r3, [pc, #664]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046aa:	681a      	ldr	r2, [r3, #0]
 80046ac:	4ba5      	ldr	r3, [pc, #660]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046ae:	49a7      	ldr	r1, [pc, #668]	; (800494c <HAL_RCC_OscConfig+0x334>)
 80046b0:	400a      	ands	r2, r1
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	e01e      	b.n	80046f4 <HAL_RCC_OscConfig+0xdc>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	685b      	ldr	r3, [r3, #4]
 80046ba:	2b05      	cmp	r3, #5
 80046bc:	d10e      	bne.n	80046dc <HAL_RCC_OscConfig+0xc4>
 80046be:	4ba1      	ldr	r3, [pc, #644]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046c0:	681a      	ldr	r2, [r3, #0]
 80046c2:	4ba0      	ldr	r3, [pc, #640]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046c4:	2180      	movs	r1, #128	; 0x80
 80046c6:	02c9      	lsls	r1, r1, #11
 80046c8:	430a      	orrs	r2, r1
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	4b9d      	ldr	r3, [pc, #628]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046ce:	681a      	ldr	r2, [r3, #0]
 80046d0:	4b9c      	ldr	r3, [pc, #624]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046d2:	2180      	movs	r1, #128	; 0x80
 80046d4:	0249      	lsls	r1, r1, #9
 80046d6:	430a      	orrs	r2, r1
 80046d8:	601a      	str	r2, [r3, #0]
 80046da:	e00b      	b.n	80046f4 <HAL_RCC_OscConfig+0xdc>
 80046dc:	4b99      	ldr	r3, [pc, #612]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046de:	681a      	ldr	r2, [r3, #0]
 80046e0:	4b98      	ldr	r3, [pc, #608]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046e2:	4999      	ldr	r1, [pc, #612]	; (8004948 <HAL_RCC_OscConfig+0x330>)
 80046e4:	400a      	ands	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	4b96      	ldr	r3, [pc, #600]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	4b95      	ldr	r3, [pc, #596]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80046ee:	4997      	ldr	r1, [pc, #604]	; (800494c <HAL_RCC_OscConfig+0x334>)
 80046f0:	400a      	ands	r2, r1
 80046f2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d014      	beq.n	8004726 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046fc:	f7ff fd1c 	bl	8004138 <HAL_GetTick>
 8004700:	0003      	movs	r3, r0
 8004702:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004704:	e008      	b.n	8004718 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004706:	f7ff fd17 	bl	8004138 <HAL_GetTick>
 800470a:	0002      	movs	r2, r0
 800470c:	69bb      	ldr	r3, [r7, #24]
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	2b64      	cmp	r3, #100	; 0x64
 8004712:	d901      	bls.n	8004718 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8004714:	2303      	movs	r3, #3
 8004716:	e28a      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004718:	4b8a      	ldr	r3, [pc, #552]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	2380      	movs	r3, #128	; 0x80
 800471e:	029b      	lsls	r3, r3, #10
 8004720:	4013      	ands	r3, r2
 8004722:	d0f0      	beq.n	8004706 <HAL_RCC_OscConfig+0xee>
 8004724:	e015      	b.n	8004752 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004726:	f7ff fd07 	bl	8004138 <HAL_GetTick>
 800472a:	0003      	movs	r3, r0
 800472c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004730:	f7ff fd02 	bl	8004138 <HAL_GetTick>
 8004734:	0002      	movs	r2, r0
 8004736:	69bb      	ldr	r3, [r7, #24]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b64      	cmp	r3, #100	; 0x64
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e275      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004742:	4b80      	ldr	r3, [pc, #512]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004744:	681a      	ldr	r2, [r3, #0]
 8004746:	2380      	movs	r3, #128	; 0x80
 8004748:	029b      	lsls	r3, r3, #10
 800474a:	4013      	ands	r3, r2
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x118>
 800474e:	e000      	b.n	8004752 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004750:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	2202      	movs	r2, #2
 8004758:	4013      	ands	r3, r2
 800475a:	d100      	bne.n	800475e <HAL_RCC_OscConfig+0x146>
 800475c:	e069      	b.n	8004832 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800475e:	4b79      	ldr	r3, [pc, #484]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	220c      	movs	r2, #12
 8004764:	4013      	ands	r3, r2
 8004766:	d00b      	beq.n	8004780 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8004768:	4b76      	ldr	r3, [pc, #472]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	220c      	movs	r2, #12
 800476e:	4013      	ands	r3, r2
 8004770:	2b08      	cmp	r3, #8
 8004772:	d11c      	bne.n	80047ae <HAL_RCC_OscConfig+0x196>
 8004774:	4b73      	ldr	r3, [pc, #460]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004776:	685a      	ldr	r2, [r3, #4]
 8004778:	2380      	movs	r3, #128	; 0x80
 800477a:	025b      	lsls	r3, r3, #9
 800477c:	4013      	ands	r3, r2
 800477e:	d116      	bne.n	80047ae <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004780:	4b70      	ldr	r3, [pc, #448]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	2202      	movs	r2, #2
 8004786:	4013      	ands	r3, r2
 8004788:	d005      	beq.n	8004796 <HAL_RCC_OscConfig+0x17e>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d001      	beq.n	8004796 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8004792:	2301      	movs	r3, #1
 8004794:	e24b      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004796:	4b6b      	ldr	r3, [pc, #428]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	22f8      	movs	r2, #248	; 0xf8
 800479c:	4393      	bics	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	691b      	ldr	r3, [r3, #16]
 80047a4:	00da      	lsls	r2, r3, #3
 80047a6:	4b67      	ldr	r3, [pc, #412]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80047a8:	430a      	orrs	r2, r1
 80047aa:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ac:	e041      	b.n	8004832 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d024      	beq.n	8004800 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80047b6:	4b63      	ldr	r3, [pc, #396]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	4b62      	ldr	r3, [pc, #392]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80047bc:	2101      	movs	r1, #1
 80047be:	430a      	orrs	r2, r1
 80047c0:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047c2:	f7ff fcb9 	bl	8004138 <HAL_GetTick>
 80047c6:	0003      	movs	r3, r0
 80047c8:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ca:	e008      	b.n	80047de <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80047cc:	f7ff fcb4 	bl	8004138 <HAL_GetTick>
 80047d0:	0002      	movs	r2, r0
 80047d2:	69bb      	ldr	r3, [r7, #24]
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	2b02      	cmp	r3, #2
 80047d8:	d901      	bls.n	80047de <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80047da:	2303      	movs	r3, #3
 80047dc:	e227      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047de:	4b59      	ldr	r3, [pc, #356]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	2202      	movs	r2, #2
 80047e4:	4013      	ands	r3, r2
 80047e6:	d0f1      	beq.n	80047cc <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047e8:	4b56      	ldr	r3, [pc, #344]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	22f8      	movs	r2, #248	; 0xf8
 80047ee:	4393      	bics	r3, r2
 80047f0:	0019      	movs	r1, r3
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	00da      	lsls	r2, r3, #3
 80047f8:	4b52      	ldr	r3, [pc, #328]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80047fa:	430a      	orrs	r2, r1
 80047fc:	601a      	str	r2, [r3, #0]
 80047fe:	e018      	b.n	8004832 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004800:	4b50      	ldr	r3, [pc, #320]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b4f      	ldr	r3, [pc, #316]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004806:	2101      	movs	r1, #1
 8004808:	438a      	bics	r2, r1
 800480a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800480c:	f7ff fc94 	bl	8004138 <HAL_GetTick>
 8004810:	0003      	movs	r3, r0
 8004812:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004814:	e008      	b.n	8004828 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004816:	f7ff fc8f 	bl	8004138 <HAL_GetTick>
 800481a:	0002      	movs	r2, r0
 800481c:	69bb      	ldr	r3, [r7, #24]
 800481e:	1ad3      	subs	r3, r2, r3
 8004820:	2b02      	cmp	r3, #2
 8004822:	d901      	bls.n	8004828 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8004824:	2303      	movs	r3, #3
 8004826:	e202      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004828:	4b46      	ldr	r3, [pc, #280]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2202      	movs	r2, #2
 800482e:	4013      	ands	r3, r2
 8004830:	d1f1      	bne.n	8004816 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2208      	movs	r2, #8
 8004838:	4013      	ands	r3, r2
 800483a:	d036      	beq.n	80048aa <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	69db      	ldr	r3, [r3, #28]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d019      	beq.n	8004878 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004844:	4b3f      	ldr	r3, [pc, #252]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004846:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004848:	4b3e      	ldr	r3, [pc, #248]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800484a:	2101      	movs	r1, #1
 800484c:	430a      	orrs	r2, r1
 800484e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004850:	f7ff fc72 	bl	8004138 <HAL_GetTick>
 8004854:	0003      	movs	r3, r0
 8004856:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004858:	e008      	b.n	800486c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800485a:	f7ff fc6d 	bl	8004138 <HAL_GetTick>
 800485e:	0002      	movs	r2, r0
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e1e0      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800486c:	4b35      	ldr	r3, [pc, #212]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800486e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004870:	2202      	movs	r2, #2
 8004872:	4013      	ands	r3, r2
 8004874:	d0f1      	beq.n	800485a <HAL_RCC_OscConfig+0x242>
 8004876:	e018      	b.n	80048aa <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004878:	4b32      	ldr	r3, [pc, #200]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800487a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800487c:	4b31      	ldr	r3, [pc, #196]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800487e:	2101      	movs	r1, #1
 8004880:	438a      	bics	r2, r1
 8004882:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004884:	f7ff fc58 	bl	8004138 <HAL_GetTick>
 8004888:	0003      	movs	r3, r0
 800488a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800488c:	e008      	b.n	80048a0 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800488e:	f7ff fc53 	bl	8004138 <HAL_GetTick>
 8004892:	0002      	movs	r2, r0
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	1ad3      	subs	r3, r2, r3
 8004898:	2b02      	cmp	r3, #2
 800489a:	d901      	bls.n	80048a0 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800489c:	2303      	movs	r3, #3
 800489e:	e1c6      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048a0:	4b28      	ldr	r3, [pc, #160]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80048a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a4:	2202      	movs	r2, #2
 80048a6:	4013      	ands	r3, r2
 80048a8:	d1f1      	bne.n	800488e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	2204      	movs	r2, #4
 80048b0:	4013      	ands	r3, r2
 80048b2:	d100      	bne.n	80048b6 <HAL_RCC_OscConfig+0x29e>
 80048b4:	e0b4      	b.n	8004a20 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80048b6:	201f      	movs	r0, #31
 80048b8:	183b      	adds	r3, r7, r0
 80048ba:	2200      	movs	r2, #0
 80048bc:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048be:	4b21      	ldr	r3, [pc, #132]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80048c0:	69da      	ldr	r2, [r3, #28]
 80048c2:	2380      	movs	r3, #128	; 0x80
 80048c4:	055b      	lsls	r3, r3, #21
 80048c6:	4013      	ands	r3, r2
 80048c8:	d110      	bne.n	80048ec <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ca:	4b1e      	ldr	r3, [pc, #120]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80048cc:	69da      	ldr	r2, [r3, #28]
 80048ce:	4b1d      	ldr	r3, [pc, #116]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80048d0:	2180      	movs	r1, #128	; 0x80
 80048d2:	0549      	lsls	r1, r1, #21
 80048d4:	430a      	orrs	r2, r1
 80048d6:	61da      	str	r2, [r3, #28]
 80048d8:	4b1a      	ldr	r3, [pc, #104]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 80048da:	69da      	ldr	r2, [r3, #28]
 80048dc:	2380      	movs	r3, #128	; 0x80
 80048de:	055b      	lsls	r3, r3, #21
 80048e0:	4013      	ands	r3, r2
 80048e2:	60fb      	str	r3, [r7, #12]
 80048e4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80048e6:	183b      	adds	r3, r7, r0
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048ec:	4b18      	ldr	r3, [pc, #96]	; (8004950 <HAL_RCC_OscConfig+0x338>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	4013      	ands	r3, r2
 80048f6:	d11a      	bne.n	800492e <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048f8:	4b15      	ldr	r3, [pc, #84]	; (8004950 <HAL_RCC_OscConfig+0x338>)
 80048fa:	681a      	ldr	r2, [r3, #0]
 80048fc:	4b14      	ldr	r3, [pc, #80]	; (8004950 <HAL_RCC_OscConfig+0x338>)
 80048fe:	2180      	movs	r1, #128	; 0x80
 8004900:	0049      	lsls	r1, r1, #1
 8004902:	430a      	orrs	r2, r1
 8004904:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004906:	f7ff fc17 	bl	8004138 <HAL_GetTick>
 800490a:	0003      	movs	r3, r0
 800490c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800490e:	e008      	b.n	8004922 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004910:	f7ff fc12 	bl	8004138 <HAL_GetTick>
 8004914:	0002      	movs	r2, r0
 8004916:	69bb      	ldr	r3, [r7, #24]
 8004918:	1ad3      	subs	r3, r2, r3
 800491a:	2b64      	cmp	r3, #100	; 0x64
 800491c:	d901      	bls.n	8004922 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e185      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004922:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_OscConfig+0x338>)
 8004924:	681a      	ldr	r2, [r3, #0]
 8004926:	2380      	movs	r3, #128	; 0x80
 8004928:	005b      	lsls	r3, r3, #1
 800492a:	4013      	ands	r3, r2
 800492c:	d0f0      	beq.n	8004910 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	2b01      	cmp	r3, #1
 8004934:	d10e      	bne.n	8004954 <HAL_RCC_OscConfig+0x33c>
 8004936:	4b03      	ldr	r3, [pc, #12]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 8004938:	6a1a      	ldr	r2, [r3, #32]
 800493a:	4b02      	ldr	r3, [pc, #8]	; (8004944 <HAL_RCC_OscConfig+0x32c>)
 800493c:	2101      	movs	r1, #1
 800493e:	430a      	orrs	r2, r1
 8004940:	621a      	str	r2, [r3, #32]
 8004942:	e035      	b.n	80049b0 <HAL_RCC_OscConfig+0x398>
 8004944:	40021000 	.word	0x40021000
 8004948:	fffeffff 	.word	0xfffeffff
 800494c:	fffbffff 	.word	0xfffbffff
 8004950:	40007000 	.word	0x40007000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d10c      	bne.n	8004976 <HAL_RCC_OscConfig+0x35e>
 800495c:	4bb6      	ldr	r3, [pc, #728]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 800495e:	6a1a      	ldr	r2, [r3, #32]
 8004960:	4bb5      	ldr	r3, [pc, #724]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004962:	2101      	movs	r1, #1
 8004964:	438a      	bics	r2, r1
 8004966:	621a      	str	r2, [r3, #32]
 8004968:	4bb3      	ldr	r3, [pc, #716]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 800496a:	6a1a      	ldr	r2, [r3, #32]
 800496c:	4bb2      	ldr	r3, [pc, #712]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 800496e:	2104      	movs	r1, #4
 8004970:	438a      	bics	r2, r1
 8004972:	621a      	str	r2, [r3, #32]
 8004974:	e01c      	b.n	80049b0 <HAL_RCC_OscConfig+0x398>
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	689b      	ldr	r3, [r3, #8]
 800497a:	2b05      	cmp	r3, #5
 800497c:	d10c      	bne.n	8004998 <HAL_RCC_OscConfig+0x380>
 800497e:	4bae      	ldr	r3, [pc, #696]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004980:	6a1a      	ldr	r2, [r3, #32]
 8004982:	4bad      	ldr	r3, [pc, #692]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004984:	2104      	movs	r1, #4
 8004986:	430a      	orrs	r2, r1
 8004988:	621a      	str	r2, [r3, #32]
 800498a:	4bab      	ldr	r3, [pc, #684]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 800498c:	6a1a      	ldr	r2, [r3, #32]
 800498e:	4baa      	ldr	r3, [pc, #680]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004990:	2101      	movs	r1, #1
 8004992:	430a      	orrs	r2, r1
 8004994:	621a      	str	r2, [r3, #32]
 8004996:	e00b      	b.n	80049b0 <HAL_RCC_OscConfig+0x398>
 8004998:	4ba7      	ldr	r3, [pc, #668]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 800499a:	6a1a      	ldr	r2, [r3, #32]
 800499c:	4ba6      	ldr	r3, [pc, #664]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 800499e:	2101      	movs	r1, #1
 80049a0:	438a      	bics	r2, r1
 80049a2:	621a      	str	r2, [r3, #32]
 80049a4:	4ba4      	ldr	r3, [pc, #656]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 80049a6:	6a1a      	ldr	r2, [r3, #32]
 80049a8:	4ba3      	ldr	r3, [pc, #652]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 80049aa:	2104      	movs	r1, #4
 80049ac:	438a      	bics	r2, r1
 80049ae:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	689b      	ldr	r3, [r3, #8]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d014      	beq.n	80049e2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049b8:	f7ff fbbe 	bl	8004138 <HAL_GetTick>
 80049bc:	0003      	movs	r3, r0
 80049be:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049c0:	e009      	b.n	80049d6 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049c2:	f7ff fbb9 	bl	8004138 <HAL_GetTick>
 80049c6:	0002      	movs	r2, r0
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	1ad3      	subs	r3, r2, r3
 80049cc:	4a9b      	ldr	r2, [pc, #620]	; (8004c3c <HAL_RCC_OscConfig+0x624>)
 80049ce:	4293      	cmp	r3, r2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e12b      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049d6:	4b98      	ldr	r3, [pc, #608]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	2202      	movs	r2, #2
 80049dc:	4013      	ands	r3, r2
 80049de:	d0f0      	beq.n	80049c2 <HAL_RCC_OscConfig+0x3aa>
 80049e0:	e013      	b.n	8004a0a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049e2:	f7ff fba9 	bl	8004138 <HAL_GetTick>
 80049e6:	0003      	movs	r3, r0
 80049e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049ea:	e009      	b.n	8004a00 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049ec:	f7ff fba4 	bl	8004138 <HAL_GetTick>
 80049f0:	0002      	movs	r2, r0
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	4a91      	ldr	r2, [pc, #580]	; (8004c3c <HAL_RCC_OscConfig+0x624>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d901      	bls.n	8004a00 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80049fc:	2303      	movs	r3, #3
 80049fe:	e116      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a00:	4b8d      	ldr	r3, [pc, #564]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	2202      	movs	r2, #2
 8004a06:	4013      	ands	r3, r2
 8004a08:	d1f0      	bne.n	80049ec <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004a0a:	231f      	movs	r3, #31
 8004a0c:	18fb      	adds	r3, r7, r3
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	2b01      	cmp	r3, #1
 8004a12:	d105      	bne.n	8004a20 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a14:	4b88      	ldr	r3, [pc, #544]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a16:	69da      	ldr	r2, [r3, #28]
 8004a18:	4b87      	ldr	r3, [pc, #540]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a1a:	4989      	ldr	r1, [pc, #548]	; (8004c40 <HAL_RCC_OscConfig+0x628>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	2210      	movs	r2, #16
 8004a26:	4013      	ands	r3, r2
 8004a28:	d063      	beq.n	8004af2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	695b      	ldr	r3, [r3, #20]
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d12a      	bne.n	8004a88 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004a32:	4b81      	ldr	r3, [pc, #516]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a34:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a36:	4b80      	ldr	r3, [pc, #512]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a38:	2104      	movs	r1, #4
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8004a3e:	4b7e      	ldr	r3, [pc, #504]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a42:	4b7d      	ldr	r3, [pc, #500]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a44:	2101      	movs	r1, #1
 8004a46:	430a      	orrs	r2, r1
 8004a48:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a4a:	f7ff fb75 	bl	8004138 <HAL_GetTick>
 8004a4e:	0003      	movs	r3, r0
 8004a50:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a52:	e008      	b.n	8004a66 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004a54:	f7ff fb70 	bl	8004138 <HAL_GetTick>
 8004a58:	0002      	movs	r2, r0
 8004a5a:	69bb      	ldr	r3, [r7, #24]
 8004a5c:	1ad3      	subs	r3, r2, r3
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d901      	bls.n	8004a66 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8004a62:	2303      	movs	r3, #3
 8004a64:	e0e3      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8004a66:	4b74      	ldr	r3, [pc, #464]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a6a:	2202      	movs	r2, #2
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	d0f1      	beq.n	8004a54 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a70:	4b71      	ldr	r3, [pc, #452]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a74:	22f8      	movs	r2, #248	; 0xf8
 8004a76:	4393      	bics	r3, r2
 8004a78:	0019      	movs	r1, r3
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	00da      	lsls	r2, r3, #3
 8004a80:	4b6d      	ldr	r3, [pc, #436]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a82:	430a      	orrs	r2, r1
 8004a84:	635a      	str	r2, [r3, #52]	; 0x34
 8004a86:	e034      	b.n	8004af2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	695b      	ldr	r3, [r3, #20]
 8004a8c:	3305      	adds	r3, #5
 8004a8e:	d111      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004a90:	4b69      	ldr	r3, [pc, #420]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a94:	4b68      	ldr	r3, [pc, #416]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a96:	2104      	movs	r1, #4
 8004a98:	438a      	bics	r2, r1
 8004a9a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8004a9c:	4b66      	ldr	r3, [pc, #408]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aa0:	22f8      	movs	r2, #248	; 0xf8
 8004aa2:	4393      	bics	r3, r2
 8004aa4:	0019      	movs	r1, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	699b      	ldr	r3, [r3, #24]
 8004aaa:	00da      	lsls	r2, r3, #3
 8004aac:	4b62      	ldr	r3, [pc, #392]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004aae:	430a      	orrs	r2, r1
 8004ab0:	635a      	str	r2, [r3, #52]	; 0x34
 8004ab2:	e01e      	b.n	8004af2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004ab4:	4b60      	ldr	r3, [pc, #384]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004ab6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab8:	4b5f      	ldr	r3, [pc, #380]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004aba:	2104      	movs	r1, #4
 8004abc:	430a      	orrs	r2, r1
 8004abe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004ac0:	4b5d      	ldr	r3, [pc, #372]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004ac2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ac4:	4b5c      	ldr	r3, [pc, #368]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004ac6:	2101      	movs	r1, #1
 8004ac8:	438a      	bics	r2, r1
 8004aca:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004acc:	f7ff fb34 	bl	8004138 <HAL_GetTick>
 8004ad0:	0003      	movs	r3, r0
 8004ad2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ad4:	e008      	b.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004ad6:	f7ff fb2f 	bl	8004138 <HAL_GetTick>
 8004ada:	0002      	movs	r2, r0
 8004adc:	69bb      	ldr	r3, [r7, #24]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d901      	bls.n	8004ae8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e0a2      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004ae8:	4b53      	ldr	r3, [pc, #332]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004aec:	2202      	movs	r2, #2
 8004aee:	4013      	ands	r3, r2
 8004af0:	d1f1      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6a1b      	ldr	r3, [r3, #32]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d100      	bne.n	8004afc <HAL_RCC_OscConfig+0x4e4>
 8004afa:	e097      	b.n	8004c2c <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004afc:	4b4e      	ldr	r3, [pc, #312]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	220c      	movs	r2, #12
 8004b02:	4013      	ands	r3, r2
 8004b04:	2b08      	cmp	r3, #8
 8004b06:	d100      	bne.n	8004b0a <HAL_RCC_OscConfig+0x4f2>
 8004b08:	e06b      	b.n	8004be2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6a1b      	ldr	r3, [r3, #32]
 8004b0e:	2b02      	cmp	r3, #2
 8004b10:	d14c      	bne.n	8004bac <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004b12:	4b49      	ldr	r3, [pc, #292]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	4b48      	ldr	r3, [pc, #288]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b18:	494a      	ldr	r1, [pc, #296]	; (8004c44 <HAL_RCC_OscConfig+0x62c>)
 8004b1a:	400a      	ands	r2, r1
 8004b1c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b1e:	f7ff fb0b 	bl	8004138 <HAL_GetTick>
 8004b22:	0003      	movs	r3, r0
 8004b24:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b26:	e008      	b.n	8004b3a <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b28:	f7ff fb06 	bl	8004138 <HAL_GetTick>
 8004b2c:	0002      	movs	r2, r0
 8004b2e:	69bb      	ldr	r3, [r7, #24]
 8004b30:	1ad3      	subs	r3, r2, r3
 8004b32:	2b02      	cmp	r3, #2
 8004b34:	d901      	bls.n	8004b3a <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e079      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004b3a:	4b3f      	ldr	r3, [pc, #252]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b3c:	681a      	ldr	r2, [r3, #0]
 8004b3e:	2380      	movs	r3, #128	; 0x80
 8004b40:	049b      	lsls	r3, r3, #18
 8004b42:	4013      	ands	r3, r2
 8004b44:	d1f0      	bne.n	8004b28 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004b46:	4b3c      	ldr	r3, [pc, #240]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b4a:	220f      	movs	r2, #15
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	0019      	movs	r1, r3
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b54:	4b38      	ldr	r3, [pc, #224]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b56:	430a      	orrs	r2, r1
 8004b58:	62da      	str	r2, [r3, #44]	; 0x2c
 8004b5a:	4b37      	ldr	r3, [pc, #220]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	4a3a      	ldr	r2, [pc, #232]	; (8004c48 <HAL_RCC_OscConfig+0x630>)
 8004b60:	4013      	ands	r3, r2
 8004b62:	0019      	movs	r1, r3
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	431a      	orrs	r2, r3
 8004b6e:	4b32      	ldr	r3, [pc, #200]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b70:	430a      	orrs	r2, r1
 8004b72:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004b74:	4b30      	ldr	r3, [pc, #192]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b76:	681a      	ldr	r2, [r3, #0]
 8004b78:	4b2f      	ldr	r3, [pc, #188]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004b7a:	2180      	movs	r1, #128	; 0x80
 8004b7c:	0449      	lsls	r1, r1, #17
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004b82:	f7ff fad9 	bl	8004138 <HAL_GetTick>
 8004b86:	0003      	movs	r3, r0
 8004b88:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b8a:	e008      	b.n	8004b9e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b8c:	f7ff fad4 	bl	8004138 <HAL_GetTick>
 8004b90:	0002      	movs	r2, r0
 8004b92:	69bb      	ldr	r3, [r7, #24]
 8004b94:	1ad3      	subs	r3, r2, r3
 8004b96:	2b02      	cmp	r3, #2
 8004b98:	d901      	bls.n	8004b9e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	e047      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004b9e:	4b26      	ldr	r3, [pc, #152]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	2380      	movs	r3, #128	; 0x80
 8004ba4:	049b      	lsls	r3, r3, #18
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	d0f0      	beq.n	8004b8c <HAL_RCC_OscConfig+0x574>
 8004baa:	e03f      	b.n	8004c2c <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bac:	4b22      	ldr	r3, [pc, #136]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004bb2:	4924      	ldr	r1, [pc, #144]	; (8004c44 <HAL_RCC_OscConfig+0x62c>)
 8004bb4:	400a      	ands	r2, r1
 8004bb6:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bb8:	f7ff fabe 	bl	8004138 <HAL_GetTick>
 8004bbc:	0003      	movs	r3, r0
 8004bbe:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bc0:	e008      	b.n	8004bd4 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004bc2:	f7ff fab9 	bl	8004138 <HAL_GetTick>
 8004bc6:	0002      	movs	r2, r0
 8004bc8:	69bb      	ldr	r3, [r7, #24]
 8004bca:	1ad3      	subs	r3, r2, r3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d901      	bls.n	8004bd4 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004bd0:	2303      	movs	r3, #3
 8004bd2:	e02c      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bd4:	4b18      	ldr	r3, [pc, #96]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	2380      	movs	r3, #128	; 0x80
 8004bda:	049b      	lsls	r3, r3, #18
 8004bdc:	4013      	ands	r3, r2
 8004bde:	d1f0      	bne.n	8004bc2 <HAL_RCC_OscConfig+0x5aa>
 8004be0:	e024      	b.n	8004c2c <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	6a1b      	ldr	r3, [r3, #32]
 8004be6:	2b01      	cmp	r3, #1
 8004be8:	d101      	bne.n	8004bee <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e01f      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8004bee:	4b12      	ldr	r3, [pc, #72]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004bf4:	4b10      	ldr	r3, [pc, #64]	; (8004c38 <HAL_RCC_OscConfig+0x620>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004bfa:	697a      	ldr	r2, [r7, #20]
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	025b      	lsls	r3, r3, #9
 8004c00:	401a      	ands	r2, r3
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d10e      	bne.n	8004c28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c0a:	693b      	ldr	r3, [r7, #16]
 8004c0c:	220f      	movs	r2, #15
 8004c0e:	401a      	ands	r2, r3
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d107      	bne.n	8004c28 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	23f0      	movs	r3, #240	; 0xf0
 8004c1c:	039b      	lsls	r3, r3, #14
 8004c1e:	401a      	ands	r2, r3
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d001      	beq.n	8004c2c <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8004c2c:	2300      	movs	r3, #0
}
 8004c2e:	0018      	movs	r0, r3
 8004c30:	46bd      	mov	sp, r7
 8004c32:	b008      	add	sp, #32
 8004c34:	bd80      	pop	{r7, pc}
 8004c36:	46c0      	nop			; (mov r8, r8)
 8004c38:	40021000 	.word	0x40021000
 8004c3c:	00001388 	.word	0x00001388
 8004c40:	efffffff 	.word	0xefffffff
 8004c44:	feffffff 	.word	0xfeffffff
 8004c48:	ffc2ffff 	.word	0xffc2ffff

08004c4c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b084      	sub	sp, #16
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
 8004c54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d101      	bne.n	8004c60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	e0b3      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c60:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2201      	movs	r2, #1
 8004c66:	4013      	ands	r3, r2
 8004c68:	683a      	ldr	r2, [r7, #0]
 8004c6a:	429a      	cmp	r2, r3
 8004c6c:	d911      	bls.n	8004c92 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c6e:	4b58      	ldr	r3, [pc, #352]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	2201      	movs	r2, #1
 8004c74:	4393      	bics	r3, r2
 8004c76:	0019      	movs	r1, r3
 8004c78:	4b55      	ldr	r3, [pc, #340]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004c7a:	683a      	ldr	r2, [r7, #0]
 8004c7c:	430a      	orrs	r2, r1
 8004c7e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c80:	4b53      	ldr	r3, [pc, #332]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	2201      	movs	r2, #1
 8004c86:	4013      	ands	r3, r2
 8004c88:	683a      	ldr	r2, [r7, #0]
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d001      	beq.n	8004c92 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8004c8e:	2301      	movs	r3, #1
 8004c90:	e09a      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	2202      	movs	r2, #2
 8004c98:	4013      	ands	r3, r2
 8004c9a:	d015      	beq.n	8004cc8 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2204      	movs	r2, #4
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	d006      	beq.n	8004cb4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004ca6:	4b4b      	ldr	r3, [pc, #300]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004ca8:	685a      	ldr	r2, [r3, #4]
 8004caa:	4b4a      	ldr	r3, [pc, #296]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004cac:	21e0      	movs	r1, #224	; 0xe0
 8004cae:	00c9      	lsls	r1, r1, #3
 8004cb0:	430a      	orrs	r2, r1
 8004cb2:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004cb4:	4b47      	ldr	r3, [pc, #284]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004cb6:	685b      	ldr	r3, [r3, #4]
 8004cb8:	22f0      	movs	r2, #240	; 0xf0
 8004cba:	4393      	bics	r3, r2
 8004cbc:	0019      	movs	r1, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	689a      	ldr	r2, [r3, #8]
 8004cc2:	4b44      	ldr	r3, [pc, #272]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	2201      	movs	r2, #1
 8004cce:	4013      	ands	r3, r2
 8004cd0:	d040      	beq.n	8004d54 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d107      	bne.n	8004cea <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004cda:	4b3e      	ldr	r3, [pc, #248]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	2380      	movs	r3, #128	; 0x80
 8004ce0:	029b      	lsls	r3, r3, #10
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d114      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e06e      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	685b      	ldr	r3, [r3, #4]
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d107      	bne.n	8004d02 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf2:	4b38      	ldr	r3, [pc, #224]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	2380      	movs	r3, #128	; 0x80
 8004cf8:	049b      	lsls	r3, r3, #18
 8004cfa:	4013      	ands	r3, r2
 8004cfc:	d108      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	e062      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d02:	4b34      	ldr	r3, [pc, #208]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	2202      	movs	r2, #2
 8004d08:	4013      	ands	r3, r2
 8004d0a:	d101      	bne.n	8004d10 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e05b      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004d10:	4b30      	ldr	r3, [pc, #192]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	2203      	movs	r2, #3
 8004d16:	4393      	bics	r3, r2
 8004d18:	0019      	movs	r1, r3
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	685a      	ldr	r2, [r3, #4]
 8004d1e:	4b2d      	ldr	r3, [pc, #180]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004d20:	430a      	orrs	r2, r1
 8004d22:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004d24:	f7ff fa08 	bl	8004138 <HAL_GetTick>
 8004d28:	0003      	movs	r3, r0
 8004d2a:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d2c:	e009      	b.n	8004d42 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004d2e:	f7ff fa03 	bl	8004138 <HAL_GetTick>
 8004d32:	0002      	movs	r2, r0
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	4a27      	ldr	r2, [pc, #156]	; (8004dd8 <HAL_RCC_ClockConfig+0x18c>)
 8004d3a:	4293      	cmp	r3, r2
 8004d3c:	d901      	bls.n	8004d42 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8004d3e:	2303      	movs	r3, #3
 8004d40:	e042      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004d42:	4b24      	ldr	r3, [pc, #144]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	220c      	movs	r2, #12
 8004d48:	401a      	ands	r2, r3
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	009b      	lsls	r3, r3, #2
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d1ec      	bne.n	8004d2e <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004d54:	4b1e      	ldr	r3, [pc, #120]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	4013      	ands	r3, r2
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	d211      	bcs.n	8004d86 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d62:	4b1b      	ldr	r3, [pc, #108]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2201      	movs	r2, #1
 8004d68:	4393      	bics	r3, r2
 8004d6a:	0019      	movs	r1, r3
 8004d6c:	4b18      	ldr	r3, [pc, #96]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	430a      	orrs	r2, r1
 8004d72:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d74:	4b16      	ldr	r3, [pc, #88]	; (8004dd0 <HAL_RCC_ClockConfig+0x184>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	2201      	movs	r2, #1
 8004d7a:	4013      	ands	r3, r2
 8004d7c:	683a      	ldr	r2, [r7, #0]
 8004d7e:	429a      	cmp	r2, r3
 8004d80:	d001      	beq.n	8004d86 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e020      	b.n	8004dc8 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	2204      	movs	r2, #4
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	d009      	beq.n	8004da4 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004d90:	4b10      	ldr	r3, [pc, #64]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	4a11      	ldr	r2, [pc, #68]	; (8004ddc <HAL_RCC_ClockConfig+0x190>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	0019      	movs	r1, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	68da      	ldr	r2, [r3, #12]
 8004d9e:	4b0d      	ldr	r3, [pc, #52]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004da0:	430a      	orrs	r2, r1
 8004da2:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004da4:	f000 f820 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 8004da8:	0001      	movs	r1, r0
 8004daa:	4b0a      	ldr	r3, [pc, #40]	; (8004dd4 <HAL_RCC_ClockConfig+0x188>)
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	091b      	lsrs	r3, r3, #4
 8004db0:	220f      	movs	r2, #15
 8004db2:	4013      	ands	r3, r2
 8004db4:	4a0a      	ldr	r2, [pc, #40]	; (8004de0 <HAL_RCC_ClockConfig+0x194>)
 8004db6:	5cd3      	ldrb	r3, [r2, r3]
 8004db8:	000a      	movs	r2, r1
 8004dba:	40da      	lsrs	r2, r3
 8004dbc:	4b09      	ldr	r3, [pc, #36]	; (8004de4 <HAL_RCC_ClockConfig+0x198>)
 8004dbe:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004dc0:	2003      	movs	r0, #3
 8004dc2:	f7ff f973 	bl	80040ac <HAL_InitTick>
  
  return HAL_OK;
 8004dc6:	2300      	movs	r3, #0
}
 8004dc8:	0018      	movs	r0, r3
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	b004      	add	sp, #16
 8004dce:	bd80      	pop	{r7, pc}
 8004dd0:	40022000 	.word	0x40022000
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	00001388 	.word	0x00001388
 8004ddc:	fffff8ff 	.word	0xfffff8ff
 8004de0:	08009a50 	.word	0x08009a50
 8004de4:	2000000c 	.word	0x2000000c

08004de8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004de8:	b590      	push	{r4, r7, lr}
 8004dea:	b08f      	sub	sp, #60	; 0x3c
 8004dec:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8004dee:	2314      	movs	r3, #20
 8004df0:	18fb      	adds	r3, r7, r3
 8004df2:	4a2b      	ldr	r2, [pc, #172]	; (8004ea0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004df4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004df6:	c313      	stmia	r3!, {r0, r1, r4}
 8004df8:	6812      	ldr	r2, [r2, #0]
 8004dfa:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8004dfc:	1d3b      	adds	r3, r7, #4
 8004dfe:	4a29      	ldr	r2, [pc, #164]	; (8004ea4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004e00:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004e02:	c313      	stmia	r3!, {r0, r1, r4}
 8004e04:	6812      	ldr	r2, [r2, #0]
 8004e06:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e10:	2300      	movs	r3, #0
 8004e12:	637b      	str	r3, [r7, #52]	; 0x34
 8004e14:	2300      	movs	r3, #0
 8004e16:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8004e1c:	4b22      	ldr	r3, [pc, #136]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e24:	220c      	movs	r2, #12
 8004e26:	4013      	ands	r3, r2
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d002      	beq.n	8004e32 <HAL_RCC_GetSysClockFreq+0x4a>
 8004e2c:	2b08      	cmp	r3, #8
 8004e2e:	d003      	beq.n	8004e38 <HAL_RCC_GetSysClockFreq+0x50>
 8004e30:	e02d      	b.n	8004e8e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004e32:	4b1e      	ldr	r3, [pc, #120]	; (8004eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e34:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e36:	e02d      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8004e38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e3a:	0c9b      	lsrs	r3, r3, #18
 8004e3c:	220f      	movs	r2, #15
 8004e3e:	4013      	ands	r3, r2
 8004e40:	2214      	movs	r2, #20
 8004e42:	18ba      	adds	r2, r7, r2
 8004e44:	5cd3      	ldrb	r3, [r2, r3]
 8004e46:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8004e48:	4b17      	ldr	r3, [pc, #92]	; (8004ea8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8004e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e4c:	220f      	movs	r2, #15
 8004e4e:	4013      	ands	r3, r2
 8004e50:	1d3a      	adds	r2, r7, #4
 8004e52:	5cd3      	ldrb	r3, [r2, r3]
 8004e54:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004e56:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e58:	2380      	movs	r3, #128	; 0x80
 8004e5a:	025b      	lsls	r3, r3, #9
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	d009      	beq.n	8004e74 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004e60:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e62:	4812      	ldr	r0, [pc, #72]	; (8004eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e64:	f7fb f96c 	bl	8000140 <__udivsi3>
 8004e68:	0003      	movs	r3, r0
 8004e6a:	001a      	movs	r2, r3
 8004e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6e:	4353      	muls	r3, r2
 8004e70:	637b      	str	r3, [r7, #52]	; 0x34
 8004e72:	e009      	b.n	8004e88 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8004e74:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e76:	000a      	movs	r2, r1
 8004e78:	0152      	lsls	r2, r2, #5
 8004e7a:	1a52      	subs	r2, r2, r1
 8004e7c:	0193      	lsls	r3, r2, #6
 8004e7e:	1a9b      	subs	r3, r3, r2
 8004e80:	00db      	lsls	r3, r3, #3
 8004e82:	185b      	adds	r3, r3, r1
 8004e84:	021b      	lsls	r3, r3, #8
 8004e86:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8004e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e8a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e8c:	e002      	b.n	8004e94 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004e8e:	4b07      	ldr	r3, [pc, #28]	; (8004eac <HAL_RCC_GetSysClockFreq+0xc4>)
 8004e90:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8004e92:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8004e96:	0018      	movs	r0, r3
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	b00f      	add	sp, #60	; 0x3c
 8004e9c:	bd90      	pop	{r4, r7, pc}
 8004e9e:	46c0      	nop			; (mov r8, r8)
 8004ea0:	08009930 	.word	0x08009930
 8004ea4:	08009940 	.word	0x08009940
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	007a1200 	.word	0x007a1200

08004eb0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004eb0:	b580      	push	{r7, lr}
 8004eb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004eb4:	4b02      	ldr	r3, [pc, #8]	; (8004ec0 <HAL_RCC_GetHCLKFreq+0x10>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	46c0      	nop			; (mov r8, r8)
 8004ec0:	2000000c 	.word	0x2000000c

08004ec4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8004ec8:	f7ff fff2 	bl	8004eb0 <HAL_RCC_GetHCLKFreq>
 8004ecc:	0001      	movs	r1, r0
 8004ece:	4b06      	ldr	r3, [pc, #24]	; (8004ee8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	0a1b      	lsrs	r3, r3, #8
 8004ed4:	2207      	movs	r2, #7
 8004ed6:	4013      	ands	r3, r2
 8004ed8:	4a04      	ldr	r2, [pc, #16]	; (8004eec <HAL_RCC_GetPCLK1Freq+0x28>)
 8004eda:	5cd3      	ldrb	r3, [r2, r3]
 8004edc:	40d9      	lsrs	r1, r3
 8004ede:	000b      	movs	r3, r1
}    
 8004ee0:	0018      	movs	r0, r3
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}
 8004ee6:	46c0      	nop			; (mov r8, r8)
 8004ee8:	40021000 	.word	0x40021000
 8004eec:	08009a60 	.word	0x08009a60

08004ef0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d101      	bne.n	8004f02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004efe:	2301      	movs	r3, #1
 8004f00:	e0a8      	b.n	8005054 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d109      	bne.n	8004f1e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	2382      	movs	r3, #130	; 0x82
 8004f10:	005b      	lsls	r3, r3, #1
 8004f12:	429a      	cmp	r2, r3
 8004f14:	d009      	beq.n	8004f2a <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	61da      	str	r2, [r3, #28]
 8004f1c:	e005      	b.n	8004f2a <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	2200      	movs	r2, #0
 8004f22:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2200      	movs	r2, #0
 8004f28:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2200      	movs	r2, #0
 8004f2e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	225d      	movs	r2, #93	; 0x5d
 8004f34:	5c9b      	ldrb	r3, [r3, r2]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d107      	bne.n	8004f4c <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	225c      	movs	r2, #92	; 0x5c
 8004f40:	2100      	movs	r1, #0
 8004f42:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7fe fefe 	bl	8003d48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	225d      	movs	r2, #93	; 0x5d
 8004f50:	2102      	movs	r1, #2
 8004f52:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	681a      	ldr	r2, [r3, #0]
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2140      	movs	r1, #64	; 0x40
 8004f60:	438a      	bics	r2, r1
 8004f62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68da      	ldr	r2, [r3, #12]
 8004f68:	23e0      	movs	r3, #224	; 0xe0
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d902      	bls.n	8004f76 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f70:	2300      	movs	r3, #0
 8004f72:	60fb      	str	r3, [r7, #12]
 8004f74:	e002      	b.n	8004f7c <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f76:	2380      	movs	r3, #128	; 0x80
 8004f78:	015b      	lsls	r3, r3, #5
 8004f7a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	68da      	ldr	r2, [r3, #12]
 8004f80:	23f0      	movs	r3, #240	; 0xf0
 8004f82:	011b      	lsls	r3, r3, #4
 8004f84:	429a      	cmp	r2, r3
 8004f86:	d008      	beq.n	8004f9a <HAL_SPI_Init+0xaa>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68da      	ldr	r2, [r3, #12]
 8004f8c:	23e0      	movs	r3, #224	; 0xe0
 8004f8e:	00db      	lsls	r3, r3, #3
 8004f90:	429a      	cmp	r2, r3
 8004f92:	d002      	beq.n	8004f9a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685a      	ldr	r2, [r3, #4]
 8004f9e:	2382      	movs	r3, #130	; 0x82
 8004fa0:	005b      	lsls	r3, r3, #1
 8004fa2:	401a      	ands	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6899      	ldr	r1, [r3, #8]
 8004fa8:	2384      	movs	r3, #132	; 0x84
 8004faa:	021b      	lsls	r3, r3, #8
 8004fac:	400b      	ands	r3, r1
 8004fae:	431a      	orrs	r2, r3
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	691b      	ldr	r3, [r3, #16]
 8004fb4:	2102      	movs	r1, #2
 8004fb6:	400b      	ands	r3, r1
 8004fb8:	431a      	orrs	r2, r3
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	695b      	ldr	r3, [r3, #20]
 8004fbe:	2101      	movs	r1, #1
 8004fc0:	400b      	ands	r3, r1
 8004fc2:	431a      	orrs	r2, r3
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6999      	ldr	r1, [r3, #24]
 8004fc8:	2380      	movs	r3, #128	; 0x80
 8004fca:	009b      	lsls	r3, r3, #2
 8004fcc:	400b      	ands	r3, r1
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	69db      	ldr	r3, [r3, #28]
 8004fd4:	2138      	movs	r1, #56	; 0x38
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a1b      	ldr	r3, [r3, #32]
 8004fde:	2180      	movs	r1, #128	; 0x80
 8004fe0:	400b      	ands	r3, r1
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	0011      	movs	r1, r2
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fea:	2380      	movs	r3, #128	; 0x80
 8004fec:	019b      	lsls	r3, r3, #6
 8004fee:	401a      	ands	r2, r3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	430a      	orrs	r2, r1
 8004ff6:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	0c1b      	lsrs	r3, r3, #16
 8004ffe:	2204      	movs	r2, #4
 8005000:	401a      	ands	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005006:	2110      	movs	r1, #16
 8005008:	400b      	ands	r3, r1
 800500a:	431a      	orrs	r2, r3
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005010:	2108      	movs	r1, #8
 8005012:	400b      	ands	r3, r1
 8005014:	431a      	orrs	r2, r3
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	68d9      	ldr	r1, [r3, #12]
 800501a:	23f0      	movs	r3, #240	; 0xf0
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	400b      	ands	r3, r1
 8005020:	431a      	orrs	r2, r3
 8005022:	0011      	movs	r1, r2
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	2380      	movs	r3, #128	; 0x80
 8005028:	015b      	lsls	r3, r3, #5
 800502a:	401a      	ands	r2, r3
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	69da      	ldr	r2, [r3, #28]
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4907      	ldr	r1, [pc, #28]	; (800505c <HAL_SPI_Init+0x16c>)
 8005040:	400a      	ands	r2, r1
 8005042:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2200      	movs	r2, #0
 8005048:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	225d      	movs	r2, #93	; 0x5d
 800504e:	2101      	movs	r1, #1
 8005050:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005052:	2300      	movs	r3, #0
}
 8005054:	0018      	movs	r0, r3
 8005056:	46bd      	mov	sp, r7
 8005058:	b004      	add	sp, #16
 800505a:	bd80      	pop	{r7, pc}
 800505c:	fffff7ff 	.word	0xfffff7ff

08005060 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b088      	sub	sp, #32
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	603b      	str	r3, [r7, #0]
 800506c:	1dbb      	adds	r3, r7, #6
 800506e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005070:	231f      	movs	r3, #31
 8005072:	18fb      	adds	r3, r7, r3
 8005074:	2200      	movs	r2, #0
 8005076:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	225c      	movs	r2, #92	; 0x5c
 800507c:	5c9b      	ldrb	r3, [r3, r2]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_SPI_Transmit+0x26>
 8005082:	2302      	movs	r3, #2
 8005084:	e140      	b.n	8005308 <HAL_SPI_Transmit+0x2a8>
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	225c      	movs	r2, #92	; 0x5c
 800508a:	2101      	movs	r1, #1
 800508c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800508e:	f7ff f853 	bl	8004138 <HAL_GetTick>
 8005092:	0003      	movs	r3, r0
 8005094:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8005096:	2316      	movs	r3, #22
 8005098:	18fb      	adds	r3, r7, r3
 800509a:	1dba      	adds	r2, r7, #6
 800509c:	8812      	ldrh	r2, [r2, #0]
 800509e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	225d      	movs	r2, #93	; 0x5d
 80050a4:	5c9b      	ldrb	r3, [r3, r2]
 80050a6:	b2db      	uxtb	r3, r3
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	d004      	beq.n	80050b6 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80050ac:	231f      	movs	r3, #31
 80050ae:	18fb      	adds	r3, r7, r3
 80050b0:	2202      	movs	r2, #2
 80050b2:	701a      	strb	r2, [r3, #0]
    goto error;
 80050b4:	e11d      	b.n	80052f2 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80050b6:	68bb      	ldr	r3, [r7, #8]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_SPI_Transmit+0x64>
 80050bc:	1dbb      	adds	r3, r7, #6
 80050be:	881b      	ldrh	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d104      	bne.n	80050ce <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80050c4:	231f      	movs	r3, #31
 80050c6:	18fb      	adds	r3, r7, r3
 80050c8:	2201      	movs	r2, #1
 80050ca:	701a      	strb	r2, [r3, #0]
    goto error;
 80050cc:	e111      	b.n	80052f2 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	225d      	movs	r2, #93	; 0x5d
 80050d2:	2103      	movs	r1, #3
 80050d4:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68ba      	ldr	r2, [r7, #8]
 80050e0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	1dba      	adds	r2, r7, #6
 80050e6:	8812      	ldrh	r2, [r2, #0]
 80050e8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1dba      	adds	r2, r7, #6
 80050ee:	8812      	ldrh	r2, [r2, #0]
 80050f0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2200      	movs	r2, #0
 80050f6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2244      	movs	r2, #68	; 0x44
 80050fc:	2100      	movs	r1, #0
 80050fe:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2246      	movs	r2, #70	; 0x46
 8005104:	2100      	movs	r1, #0
 8005106:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	2200      	movs	r2, #0
 800510c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	689a      	ldr	r2, [r3, #8]
 8005118:	2380      	movs	r3, #128	; 0x80
 800511a:	021b      	lsls	r3, r3, #8
 800511c:	429a      	cmp	r2, r3
 800511e:	d110      	bne.n	8005142 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	681a      	ldr	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	2140      	movs	r1, #64	; 0x40
 800512c:	438a      	bics	r2, r1
 800512e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	681a      	ldr	r2, [r3, #0]
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	2180      	movs	r1, #128	; 0x80
 800513c:	01c9      	lsls	r1, r1, #7
 800513e:	430a      	orrs	r2, r1
 8005140:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	2240      	movs	r2, #64	; 0x40
 800514a:	4013      	ands	r3, r2
 800514c:	2b40      	cmp	r3, #64	; 0x40
 800514e:	d007      	beq.n	8005160 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	2140      	movs	r1, #64	; 0x40
 800515c:	430a      	orrs	r2, r1
 800515e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	68da      	ldr	r2, [r3, #12]
 8005164:	23e0      	movs	r3, #224	; 0xe0
 8005166:	00db      	lsls	r3, r3, #3
 8005168:	429a      	cmp	r2, r3
 800516a:	d94e      	bls.n	800520a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	685b      	ldr	r3, [r3, #4]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d004      	beq.n	800517e <HAL_SPI_Transmit+0x11e>
 8005174:	2316      	movs	r3, #22
 8005176:	18fb      	adds	r3, r7, r3
 8005178:	881b      	ldrh	r3, [r3, #0]
 800517a:	2b01      	cmp	r3, #1
 800517c:	d13f      	bne.n	80051fe <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005182:	881a      	ldrh	r2, [r3, #0]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800518e:	1c9a      	adds	r2, r3, #2
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005198:	b29b      	uxth	r3, r3
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80051a2:	e02c      	b.n	80051fe <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	2202      	movs	r2, #2
 80051ac:	4013      	ands	r3, r2
 80051ae:	2b02      	cmp	r3, #2
 80051b0:	d112      	bne.n	80051d8 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b6:	881a      	ldrh	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c2:	1c9a      	adds	r2, r3, #2
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051cc:	b29b      	uxth	r3, r3
 80051ce:	3b01      	subs	r3, #1
 80051d0:	b29a      	uxth	r2, r3
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051d6:	e012      	b.n	80051fe <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80051d8:	f7fe ffae 	bl	8004138 <HAL_GetTick>
 80051dc:	0002      	movs	r2, r0
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d802      	bhi.n	80051ee <HAL_SPI_Transmit+0x18e>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	3301      	adds	r3, #1
 80051ec:	d102      	bne.n	80051f4 <HAL_SPI_Transmit+0x194>
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80051f4:	231f      	movs	r3, #31
 80051f6:	18fb      	adds	r3, r7, r3
 80051f8:	2203      	movs	r2, #3
 80051fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80051fc:	e079      	b.n	80052f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005202:	b29b      	uxth	r3, r3
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1cd      	bne.n	80051a4 <HAL_SPI_Transmit+0x144>
 8005208:	e04f      	b.n	80052aa <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d004      	beq.n	800521c <HAL_SPI_Transmit+0x1bc>
 8005212:	2316      	movs	r3, #22
 8005214:	18fb      	adds	r3, r7, r3
 8005216:	881b      	ldrh	r3, [r3, #0]
 8005218:	2b01      	cmp	r3, #1
 800521a:	d141      	bne.n	80052a0 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	330c      	adds	r3, #12
 8005226:	7812      	ldrb	r2, [r2, #0]
 8005228:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522e:	1c5a      	adds	r2, r3, #1
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005238:	b29b      	uxth	r3, r3
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8005242:	e02d      	b.n	80052a0 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	2202      	movs	r2, #2
 800524c:	4013      	ands	r3, r2
 800524e:	2b02      	cmp	r3, #2
 8005250:	d113      	bne.n	800527a <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	330c      	adds	r3, #12
 800525c:	7812      	ldrb	r2, [r2, #0]
 800525e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005264:	1c5a      	adds	r2, r3, #1
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526e:	b29b      	uxth	r3, r3
 8005270:	3b01      	subs	r3, #1
 8005272:	b29a      	uxth	r2, r3
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005278:	e012      	b.n	80052a0 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800527a:	f7fe ff5d 	bl	8004138 <HAL_GetTick>
 800527e:	0002      	movs	r2, r0
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	1ad3      	subs	r3, r2, r3
 8005284:	683a      	ldr	r2, [r7, #0]
 8005286:	429a      	cmp	r2, r3
 8005288:	d802      	bhi.n	8005290 <HAL_SPI_Transmit+0x230>
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	d102      	bne.n	8005296 <HAL_SPI_Transmit+0x236>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	2b00      	cmp	r3, #0
 8005294:	d104      	bne.n	80052a0 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8005296:	231f      	movs	r3, #31
 8005298:	18fb      	adds	r3, r7, r3
 800529a:	2203      	movs	r2, #3
 800529c:	701a      	strb	r2, [r3, #0]
          goto error;
 800529e:	e028      	b.n	80052f2 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052a4:	b29b      	uxth	r3, r3
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1cc      	bne.n	8005244 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052aa:	69ba      	ldr	r2, [r7, #24]
 80052ac:	6839      	ldr	r1, [r7, #0]
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 fcd9 	bl	8005c68 <SPI_EndRxTxTransaction>
 80052b6:	1e03      	subs	r3, r0, #0
 80052b8:	d002      	beq.n	80052c0 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	2220      	movs	r2, #32
 80052be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d10a      	bne.n	80052de <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c8:	2300      	movs	r3, #0
 80052ca:	613b      	str	r3, [r7, #16]
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	613b      	str	r3, [r7, #16]
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d004      	beq.n	80052f0 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80052e6:	231f      	movs	r3, #31
 80052e8:	18fb      	adds	r3, r7, r3
 80052ea:	2201      	movs	r2, #1
 80052ec:	701a      	strb	r2, [r3, #0]
 80052ee:	e000      	b.n	80052f2 <HAL_SPI_Transmit+0x292>
  }

error:
 80052f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	225d      	movs	r2, #93	; 0x5d
 80052f6:	2101      	movs	r1, #1
 80052f8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	225c      	movs	r2, #92	; 0x5c
 80052fe:	2100      	movs	r1, #0
 8005300:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005302:	231f      	movs	r3, #31
 8005304:	18fb      	adds	r3, r7, r3
 8005306:	781b      	ldrb	r3, [r3, #0]
}
 8005308:	0018      	movs	r0, r3
 800530a:	46bd      	mov	sp, r7
 800530c:	b008      	add	sp, #32
 800530e:	bd80      	pop	{r7, pc}

08005310 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005310:	b590      	push	{r4, r7, lr}
 8005312:	b089      	sub	sp, #36	; 0x24
 8005314:	af02      	add	r7, sp, #8
 8005316:	60f8      	str	r0, [r7, #12]
 8005318:	60b9      	str	r1, [r7, #8]
 800531a:	603b      	str	r3, [r7, #0]
 800531c:	1dbb      	adds	r3, r7, #6
 800531e:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005320:	2317      	movs	r3, #23
 8005322:	18fb      	adds	r3, r7, r3
 8005324:	2200      	movs	r2, #0
 8005326:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	685a      	ldr	r2, [r3, #4]
 800532c:	2382      	movs	r3, #130	; 0x82
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	429a      	cmp	r2, r3
 8005332:	d113      	bne.n	800535c <HAL_SPI_Receive+0x4c>
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d10f      	bne.n	800535c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	225d      	movs	r2, #93	; 0x5d
 8005340:	2104      	movs	r1, #4
 8005342:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8005344:	1dbb      	adds	r3, r7, #6
 8005346:	881c      	ldrh	r4, [r3, #0]
 8005348:	68ba      	ldr	r2, [r7, #8]
 800534a:	68b9      	ldr	r1, [r7, #8]
 800534c:	68f8      	ldr	r0, [r7, #12]
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	9300      	str	r3, [sp, #0]
 8005352:	0023      	movs	r3, r4
 8005354:	f000 f928 	bl	80055a8 <HAL_SPI_TransmitReceive>
 8005358:	0003      	movs	r3, r0
 800535a:	e11c      	b.n	8005596 <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	225c      	movs	r2, #92	; 0x5c
 8005360:	5c9b      	ldrb	r3, [r3, r2]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d101      	bne.n	800536a <HAL_SPI_Receive+0x5a>
 8005366:	2302      	movs	r3, #2
 8005368:	e115      	b.n	8005596 <HAL_SPI_Receive+0x286>
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	225c      	movs	r2, #92	; 0x5c
 800536e:	2101      	movs	r1, #1
 8005370:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005372:	f7fe fee1 	bl	8004138 <HAL_GetTick>
 8005376:	0003      	movs	r3, r0
 8005378:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	225d      	movs	r2, #93	; 0x5d
 800537e:	5c9b      	ldrb	r3, [r3, r2]
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b01      	cmp	r3, #1
 8005384:	d004      	beq.n	8005390 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8005386:	2317      	movs	r3, #23
 8005388:	18fb      	adds	r3, r7, r3
 800538a:	2202      	movs	r2, #2
 800538c:	701a      	strb	r2, [r3, #0]
    goto error;
 800538e:	e0f7      	b.n	8005580 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d003      	beq.n	800539e <HAL_SPI_Receive+0x8e>
 8005396:	1dbb      	adds	r3, r7, #6
 8005398:	881b      	ldrh	r3, [r3, #0]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d104      	bne.n	80053a8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800539e:	2317      	movs	r3, #23
 80053a0:	18fb      	adds	r3, r7, r3
 80053a2:	2201      	movs	r2, #1
 80053a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80053a6:	e0eb      	b.n	8005580 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	225d      	movs	r2, #93	; 0x5d
 80053ac:	2104      	movs	r1, #4
 80053ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2200      	movs	r2, #0
 80053b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	1dba      	adds	r2, r7, #6
 80053c0:	2144      	movs	r1, #68	; 0x44
 80053c2:	8812      	ldrh	r2, [r2, #0]
 80053c4:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	1dba      	adds	r2, r7, #6
 80053ca:	2146      	movs	r1, #70	; 0x46
 80053cc:	8812      	ldrh	r2, [r2, #0]
 80053ce:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2200      	movs	r2, #0
 80053d4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	2200      	movs	r2, #0
 80053da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	23e0      	movs	r3, #224	; 0xe0
 80053f4:	00db      	lsls	r3, r3, #3
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d908      	bls.n	800540c <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	685a      	ldr	r2, [r3, #4]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	4966      	ldr	r1, [pc, #408]	; (80055a0 <HAL_SPI_Receive+0x290>)
 8005406:	400a      	ands	r2, r1
 8005408:	605a      	str	r2, [r3, #4]
 800540a:	e008      	b.n	800541e <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	2180      	movs	r1, #128	; 0x80
 8005418:	0149      	lsls	r1, r1, #5
 800541a:	430a      	orrs	r2, r1
 800541c:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	689a      	ldr	r2, [r3, #8]
 8005422:	2380      	movs	r3, #128	; 0x80
 8005424:	021b      	lsls	r3, r3, #8
 8005426:	429a      	cmp	r2, r3
 8005428:	d10f      	bne.n	800544a <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681a      	ldr	r2, [r3, #0]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	2140      	movs	r1, #64	; 0x40
 8005436:	438a      	bics	r2, r1
 8005438:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	681a      	ldr	r2, [r3, #0]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	4957      	ldr	r1, [pc, #348]	; (80055a4 <HAL_SPI_Receive+0x294>)
 8005446:	400a      	ands	r2, r1
 8005448:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	2240      	movs	r2, #64	; 0x40
 8005452:	4013      	ands	r3, r2
 8005454:	2b40      	cmp	r3, #64	; 0x40
 8005456:	d007      	beq.n	8005468 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	681a      	ldr	r2, [r3, #0]
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	2140      	movs	r1, #64	; 0x40
 8005464:	430a      	orrs	r2, r1
 8005466:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	68da      	ldr	r2, [r3, #12]
 800546c:	23e0      	movs	r3, #224	; 0xe0
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	429a      	cmp	r2, r3
 8005472:	d900      	bls.n	8005476 <HAL_SPI_Receive+0x166>
 8005474:	e069      	b.n	800554a <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8005476:	e031      	b.n	80054dc <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	689b      	ldr	r3, [r3, #8]
 800547e:	2201      	movs	r2, #1
 8005480:	4013      	ands	r3, r2
 8005482:	2b01      	cmp	r3, #1
 8005484:	d117      	bne.n	80054b6 <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	330c      	adds	r3, #12
 800548c:	001a      	movs	r2, r3
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005492:	7812      	ldrb	r2, [r2, #0]
 8005494:	b2d2      	uxtb	r2, r2
 8005496:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2246      	movs	r2, #70	; 0x46
 80054a6:	5a9b      	ldrh	r3, [r3, r2]
 80054a8:	b29b      	uxth	r3, r3
 80054aa:	3b01      	subs	r3, #1
 80054ac:	b299      	uxth	r1, r3
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2246      	movs	r2, #70	; 0x46
 80054b2:	5299      	strh	r1, [r3, r2]
 80054b4:	e012      	b.n	80054dc <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054b6:	f7fe fe3f 	bl	8004138 <HAL_GetTick>
 80054ba:	0002      	movs	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d802      	bhi.n	80054cc <HAL_SPI_Receive+0x1bc>
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	3301      	adds	r3, #1
 80054ca:	d102      	bne.n	80054d2 <HAL_SPI_Receive+0x1c2>
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d104      	bne.n	80054dc <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80054d2:	2317      	movs	r3, #23
 80054d4:	18fb      	adds	r3, r7, r3
 80054d6:	2203      	movs	r2, #3
 80054d8:	701a      	strb	r2, [r3, #0]
          goto error;
 80054da:	e051      	b.n	8005580 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	2246      	movs	r2, #70	; 0x46
 80054e0:	5a9b      	ldrh	r3, [r3, r2]
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1c7      	bne.n	8005478 <HAL_SPI_Receive+0x168>
 80054e8:	e035      	b.n	8005556 <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	2201      	movs	r2, #1
 80054f2:	4013      	ands	r3, r2
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d115      	bne.n	8005524 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	68da      	ldr	r2, [r3, #12]
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005502:	b292      	uxth	r2, r2
 8005504:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	1c9a      	adds	r2, r3, #2
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2246      	movs	r2, #70	; 0x46
 8005514:	5a9b      	ldrh	r3, [r3, r2]
 8005516:	b29b      	uxth	r3, r3
 8005518:	3b01      	subs	r3, #1
 800551a:	b299      	uxth	r1, r3
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2246      	movs	r2, #70	; 0x46
 8005520:	5299      	strh	r1, [r3, r2]
 8005522:	e012      	b.n	800554a <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005524:	f7fe fe08 	bl	8004138 <HAL_GetTick>
 8005528:	0002      	movs	r2, r0
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	1ad3      	subs	r3, r2, r3
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	429a      	cmp	r2, r3
 8005532:	d802      	bhi.n	800553a <HAL_SPI_Receive+0x22a>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	3301      	adds	r3, #1
 8005538:	d102      	bne.n	8005540 <HAL_SPI_Receive+0x230>
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d104      	bne.n	800554a <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8005540:	2317      	movs	r3, #23
 8005542:	18fb      	adds	r3, r7, r3
 8005544:	2203      	movs	r2, #3
 8005546:	701a      	strb	r2, [r3, #0]
          goto error;
 8005548:	e01a      	b.n	8005580 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2246      	movs	r2, #70	; 0x46
 800554e:	5a9b      	ldrh	r3, [r3, r2]
 8005550:	b29b      	uxth	r3, r3
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1c9      	bne.n	80054ea <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005556:	693a      	ldr	r2, [r7, #16]
 8005558:	6839      	ldr	r1, [r7, #0]
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	0018      	movs	r0, r3
 800555e:	f000 fb25 	bl	8005bac <SPI_EndRxTransaction>
 8005562:	1e03      	subs	r3, r0, #0
 8005564:	d002      	beq.n	800556c <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	2220      	movs	r2, #32
 800556a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005570:	2b00      	cmp	r3, #0
 8005572:	d004      	beq.n	800557e <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8005574:	2317      	movs	r3, #23
 8005576:	18fb      	adds	r3, r7, r3
 8005578:	2201      	movs	r2, #1
 800557a:	701a      	strb	r2, [r3, #0]
 800557c:	e000      	b.n	8005580 <HAL_SPI_Receive+0x270>
  }

error :
 800557e:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	225d      	movs	r2, #93	; 0x5d
 8005584:	2101      	movs	r1, #1
 8005586:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	225c      	movs	r2, #92	; 0x5c
 800558c:	2100      	movs	r1, #0
 800558e:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8005590:	2317      	movs	r3, #23
 8005592:	18fb      	adds	r3, r7, r3
 8005594:	781b      	ldrb	r3, [r3, #0]
}
 8005596:	0018      	movs	r0, r3
 8005598:	46bd      	mov	sp, r7
 800559a:	b007      	add	sp, #28
 800559c:	bd90      	pop	{r4, r7, pc}
 800559e:	46c0      	nop			; (mov r8, r8)
 80055a0:	ffffefff 	.word	0xffffefff
 80055a4:	ffffbfff 	.word	0xffffbfff

080055a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b08a      	sub	sp, #40	; 0x28
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	60f8      	str	r0, [r7, #12]
 80055b0:	60b9      	str	r1, [r7, #8]
 80055b2:	607a      	str	r2, [r7, #4]
 80055b4:	001a      	movs	r2, r3
 80055b6:	1cbb      	adds	r3, r7, #2
 80055b8:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80055ba:	2301      	movs	r3, #1
 80055bc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80055be:	2323      	movs	r3, #35	; 0x23
 80055c0:	18fb      	adds	r3, r7, r3
 80055c2:	2200      	movs	r2, #0
 80055c4:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	225c      	movs	r2, #92	; 0x5c
 80055ca:	5c9b      	ldrb	r3, [r3, r2]
 80055cc:	2b01      	cmp	r3, #1
 80055ce:	d101      	bne.n	80055d4 <HAL_SPI_TransmitReceive+0x2c>
 80055d0:	2302      	movs	r3, #2
 80055d2:	e1b5      	b.n	8005940 <HAL_SPI_TransmitReceive+0x398>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	225c      	movs	r2, #92	; 0x5c
 80055d8:	2101      	movs	r1, #1
 80055da:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055dc:	f7fe fdac 	bl	8004138 <HAL_GetTick>
 80055e0:	0003      	movs	r3, r0
 80055e2:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80055e4:	201b      	movs	r0, #27
 80055e6:	183b      	adds	r3, r7, r0
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	215d      	movs	r1, #93	; 0x5d
 80055ec:	5c52      	ldrb	r2, [r2, r1]
 80055ee:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80055f6:	2312      	movs	r3, #18
 80055f8:	18fb      	adds	r3, r7, r3
 80055fa:	1cba      	adds	r2, r7, #2
 80055fc:	8812      	ldrh	r2, [r2, #0]
 80055fe:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005600:	183b      	adds	r3, r7, r0
 8005602:	781b      	ldrb	r3, [r3, #0]
 8005604:	2b01      	cmp	r3, #1
 8005606:	d011      	beq.n	800562c <HAL_SPI_TransmitReceive+0x84>
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	2382      	movs	r3, #130	; 0x82
 800560c:	005b      	lsls	r3, r3, #1
 800560e:	429a      	cmp	r2, r3
 8005610:	d107      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d103      	bne.n	8005622 <HAL_SPI_TransmitReceive+0x7a>
 800561a:	183b      	adds	r3, r7, r0
 800561c:	781b      	ldrb	r3, [r3, #0]
 800561e:	2b04      	cmp	r3, #4
 8005620:	d004      	beq.n	800562c <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8005622:	2323      	movs	r3, #35	; 0x23
 8005624:	18fb      	adds	r3, r7, r3
 8005626:	2202      	movs	r2, #2
 8005628:	701a      	strb	r2, [r3, #0]
    goto error;
 800562a:	e17e      	b.n	800592a <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800562c:	68bb      	ldr	r3, [r7, #8]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d006      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x98>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	2b00      	cmp	r3, #0
 8005636:	d003      	beq.n	8005640 <HAL_SPI_TransmitReceive+0x98>
 8005638:	1cbb      	adds	r3, r7, #2
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d104      	bne.n	800564a <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8005640:	2323      	movs	r3, #35	; 0x23
 8005642:	18fb      	adds	r3, r7, r3
 8005644:	2201      	movs	r2, #1
 8005646:	701a      	strb	r2, [r3, #0]
    goto error;
 8005648:	e16f      	b.n	800592a <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	225d      	movs	r2, #93	; 0x5d
 800564e:	5c9b      	ldrb	r3, [r3, r2]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	2b04      	cmp	r3, #4
 8005654:	d003      	beq.n	800565e <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	225d      	movs	r2, #93	; 0x5d
 800565a:	2105      	movs	r1, #5
 800565c:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	687a      	ldr	r2, [r7, #4]
 8005668:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1cba      	adds	r2, r7, #2
 800566e:	2146      	movs	r1, #70	; 0x46
 8005670:	8812      	ldrh	r2, [r2, #0]
 8005672:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	1cba      	adds	r2, r7, #2
 8005678:	2144      	movs	r1, #68	; 0x44
 800567a:	8812      	ldrh	r2, [r2, #0]
 800567c:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	68ba      	ldr	r2, [r7, #8]
 8005682:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	1cba      	adds	r2, r7, #2
 8005688:	8812      	ldrh	r2, [r2, #0]
 800568a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	1cba      	adds	r2, r7, #2
 8005690:	8812      	ldrh	r2, [r2, #0]
 8005692:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	2200      	movs	r2, #0
 8005698:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	68da      	ldr	r2, [r3, #12]
 80056a4:	23e0      	movs	r3, #224	; 0xe0
 80056a6:	00db      	lsls	r3, r3, #3
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d908      	bls.n	80056be <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	49a4      	ldr	r1, [pc, #656]	; (8005948 <HAL_SPI_TransmitReceive+0x3a0>)
 80056b8:	400a      	ands	r2, r1
 80056ba:	605a      	str	r2, [r3, #4]
 80056bc:	e008      	b.n	80056d0 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685a      	ldr	r2, [r3, #4]
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2180      	movs	r1, #128	; 0x80
 80056ca:	0149      	lsls	r1, r1, #5
 80056cc:	430a      	orrs	r2, r1
 80056ce:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	2240      	movs	r2, #64	; 0x40
 80056d8:	4013      	ands	r3, r2
 80056da:	2b40      	cmp	r3, #64	; 0x40
 80056dc:	d007      	beq.n	80056ee <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	681a      	ldr	r2, [r3, #0]
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2140      	movs	r1, #64	; 0x40
 80056ea:	430a      	orrs	r2, r1
 80056ec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	68da      	ldr	r2, [r3, #12]
 80056f2:	23e0      	movs	r3, #224	; 0xe0
 80056f4:	00db      	lsls	r3, r3, #3
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d800      	bhi.n	80056fc <HAL_SPI_TransmitReceive+0x154>
 80056fa:	e07f      	b.n	80057fc <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	685b      	ldr	r3, [r3, #4]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d005      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x168>
 8005704:	2312      	movs	r3, #18
 8005706:	18fb      	adds	r3, r7, r3
 8005708:	881b      	ldrh	r3, [r3, #0]
 800570a:	2b01      	cmp	r3, #1
 800570c:	d000      	beq.n	8005710 <HAL_SPI_TransmitReceive+0x168>
 800570e:	e069      	b.n	80057e4 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005714:	881a      	ldrh	r2, [r3, #0]
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	1c9a      	adds	r2, r3, #2
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800572a:	b29b      	uxth	r3, r3
 800572c:	3b01      	subs	r3, #1
 800572e:	b29a      	uxth	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005734:	e056      	b.n	80057e4 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689b      	ldr	r3, [r3, #8]
 800573c:	2202      	movs	r2, #2
 800573e:	4013      	ands	r3, r2
 8005740:	2b02      	cmp	r3, #2
 8005742:	d11b      	bne.n	800577c <HAL_SPI_TransmitReceive+0x1d4>
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005748:	b29b      	uxth	r3, r3
 800574a:	2b00      	cmp	r3, #0
 800574c:	d016      	beq.n	800577c <HAL_SPI_TransmitReceive+0x1d4>
 800574e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005750:	2b01      	cmp	r3, #1
 8005752:	d113      	bne.n	800577c <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005758:	881a      	ldrh	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005764:	1c9a      	adds	r2, r3, #2
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800576e:	b29b      	uxth	r3, r3
 8005770:	3b01      	subs	r3, #1
 8005772:	b29a      	uxth	r2, r3
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	2201      	movs	r2, #1
 8005784:	4013      	ands	r3, r2
 8005786:	2b01      	cmp	r3, #1
 8005788:	d11c      	bne.n	80057c4 <HAL_SPI_TransmitReceive+0x21c>
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2246      	movs	r2, #70	; 0x46
 800578e:	5a9b      	ldrh	r3, [r3, r2]
 8005790:	b29b      	uxth	r3, r3
 8005792:	2b00      	cmp	r3, #0
 8005794:	d016      	beq.n	80057c4 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	68da      	ldr	r2, [r3, #12]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a0:	b292      	uxth	r2, r2
 80057a2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	1c9a      	adds	r2, r3, #2
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	2246      	movs	r2, #70	; 0x46
 80057b2:	5a9b      	ldrh	r3, [r3, r2]
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	3b01      	subs	r3, #1
 80057b8:	b299      	uxth	r1, r3
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	2246      	movs	r2, #70	; 0x46
 80057be:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80057c0:	2301      	movs	r3, #1
 80057c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80057c4:	f7fe fcb8 	bl	8004138 <HAL_GetTick>
 80057c8:	0002      	movs	r2, r0
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80057d0:	429a      	cmp	r2, r3
 80057d2:	d807      	bhi.n	80057e4 <HAL_SPI_TransmitReceive+0x23c>
 80057d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d6:	3301      	adds	r3, #1
 80057d8:	d004      	beq.n	80057e4 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80057da:	2323      	movs	r3, #35	; 0x23
 80057dc:	18fb      	adds	r3, r7, r3
 80057de:	2203      	movs	r2, #3
 80057e0:	701a      	strb	r2, [r3, #0]
        goto error;
 80057e2:	e0a2      	b.n	800592a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1a3      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x18e>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2246      	movs	r2, #70	; 0x46
 80057f2:	5a9b      	ldrh	r3, [r3, r2]
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d19d      	bne.n	8005736 <HAL_SPI_TransmitReceive+0x18e>
 80057fa:	e085      	b.n	8005908 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d005      	beq.n	8005810 <HAL_SPI_TransmitReceive+0x268>
 8005804:	2312      	movs	r3, #18
 8005806:	18fb      	adds	r3, r7, r3
 8005808:	881b      	ldrh	r3, [r3, #0]
 800580a:	2b01      	cmp	r3, #1
 800580c:	d000      	beq.n	8005810 <HAL_SPI_TransmitReceive+0x268>
 800580e:	e070      	b.n	80058f2 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	330c      	adds	r3, #12
 800581a:	7812      	ldrb	r2, [r2, #0]
 800581c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005822:	1c5a      	adds	r2, r3, #1
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800582c:	b29b      	uxth	r3, r3
 800582e:	3b01      	subs	r3, #1
 8005830:	b29a      	uxth	r2, r3
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005836:	e05c      	b.n	80058f2 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689b      	ldr	r3, [r3, #8]
 800583e:	2202      	movs	r2, #2
 8005840:	4013      	ands	r3, r2
 8005842:	2b02      	cmp	r3, #2
 8005844:	d11c      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x2d8>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800584a:	b29b      	uxth	r3, r3
 800584c:	2b00      	cmp	r3, #0
 800584e:	d017      	beq.n	8005880 <HAL_SPI_TransmitReceive+0x2d8>
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	2b01      	cmp	r3, #1
 8005854:	d114      	bne.n	8005880 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	330c      	adds	r3, #12
 8005860:	7812      	ldrb	r2, [r2, #0]
 8005862:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005868:	1c5a      	adds	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005872:	b29b      	uxth	r3, r3
 8005874:	3b01      	subs	r3, #1
 8005876:	b29a      	uxth	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	2201      	movs	r2, #1
 8005888:	4013      	ands	r3, r2
 800588a:	2b01      	cmp	r3, #1
 800588c:	d11e      	bne.n	80058cc <HAL_SPI_TransmitReceive+0x324>
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	2246      	movs	r2, #70	; 0x46
 8005892:	5a9b      	ldrh	r3, [r3, r2]
 8005894:	b29b      	uxth	r3, r3
 8005896:	2b00      	cmp	r3, #0
 8005898:	d018      	beq.n	80058cc <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	001a      	movs	r2, r3
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	7812      	ldrb	r2, [r2, #0]
 80058a8:	b2d2      	uxtb	r2, r2
 80058aa:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058b0:	1c5a      	adds	r2, r3, #1
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2246      	movs	r2, #70	; 0x46
 80058ba:	5a9b      	ldrh	r3, [r3, r2]
 80058bc:	b29b      	uxth	r3, r3
 80058be:	3b01      	subs	r3, #1
 80058c0:	b299      	uxth	r1, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2246      	movs	r2, #70	; 0x46
 80058c6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80058c8:	2301      	movs	r3, #1
 80058ca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80058cc:	f7fe fc34 	bl	8004138 <HAL_GetTick>
 80058d0:	0002      	movs	r2, r0
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80058d8:	429a      	cmp	r2, r3
 80058da:	d802      	bhi.n	80058e2 <HAL_SPI_TransmitReceive+0x33a>
 80058dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058de:	3301      	adds	r3, #1
 80058e0:	d102      	bne.n	80058e8 <HAL_SPI_TransmitReceive+0x340>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d104      	bne.n	80058f2 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 80058e8:	2323      	movs	r3, #35	; 0x23
 80058ea:	18fb      	adds	r3, r7, r3
 80058ec:	2203      	movs	r2, #3
 80058ee:	701a      	strb	r2, [r3, #0]
        goto error;
 80058f0:	e01b      	b.n	800592a <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80058f6:	b29b      	uxth	r3, r3
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d19d      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x290>
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	2246      	movs	r2, #70	; 0x46
 8005900:	5a9b      	ldrh	r3, [r3, r2]
 8005902:	b29b      	uxth	r3, r3
 8005904:	2b00      	cmp	r3, #0
 8005906:	d197      	bne.n	8005838 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005908:	69fa      	ldr	r2, [r7, #28]
 800590a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	0018      	movs	r0, r3
 8005910:	f000 f9aa 	bl	8005c68 <SPI_EndRxTxTransaction>
 8005914:	1e03      	subs	r3, r0, #0
 8005916:	d007      	beq.n	8005928 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8005918:	2323      	movs	r3, #35	; 0x23
 800591a:	18fb      	adds	r3, r7, r3
 800591c:	2201      	movs	r2, #1
 800591e:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	2220      	movs	r2, #32
 8005924:	661a      	str	r2, [r3, #96]	; 0x60
 8005926:	e000      	b.n	800592a <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8005928:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	225d      	movs	r2, #93	; 0x5d
 800592e:	2101      	movs	r1, #1
 8005930:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	225c      	movs	r2, #92	; 0x5c
 8005936:	2100      	movs	r1, #0
 8005938:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800593a:	2323      	movs	r3, #35	; 0x23
 800593c:	18fb      	adds	r3, r7, r3
 800593e:	781b      	ldrb	r3, [r3, #0]
}
 8005940:	0018      	movs	r0, r3
 8005942:	46bd      	mov	sp, r7
 8005944:	b00a      	add	sp, #40	; 0x28
 8005946:	bd80      	pop	{r7, pc}
 8005948:	ffffefff 	.word	0xffffefff

0800594c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	603b      	str	r3, [r7, #0]
 8005958:	1dfb      	adds	r3, r7, #7
 800595a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800595c:	f7fe fbec 	bl	8004138 <HAL_GetTick>
 8005960:	0002      	movs	r2, r0
 8005962:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005964:	1a9b      	subs	r3, r3, r2
 8005966:	683a      	ldr	r2, [r7, #0]
 8005968:	18d3      	adds	r3, r2, r3
 800596a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800596c:	f7fe fbe4 	bl	8004138 <HAL_GetTick>
 8005970:	0003      	movs	r3, r0
 8005972:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005974:	4b3a      	ldr	r3, [pc, #232]	; (8005a60 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	015b      	lsls	r3, r3, #5
 800597a:	0d1b      	lsrs	r3, r3, #20
 800597c:	69fa      	ldr	r2, [r7, #28]
 800597e:	4353      	muls	r3, r2
 8005980:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005982:	e058      	b.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	3301      	adds	r3, #1
 8005988:	d055      	beq.n	8005a36 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800598a:	f7fe fbd5 	bl	8004138 <HAL_GetTick>
 800598e:	0002      	movs	r2, r0
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	69fa      	ldr	r2, [r7, #28]
 8005996:	429a      	cmp	r2, r3
 8005998:	d902      	bls.n	80059a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d142      	bne.n	8005a26 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	685a      	ldr	r2, [r3, #4]
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	21e0      	movs	r1, #224	; 0xe0
 80059ac:	438a      	bics	r2, r1
 80059ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	685a      	ldr	r2, [r3, #4]
 80059b4:	2382      	movs	r3, #130	; 0x82
 80059b6:	005b      	lsls	r3, r3, #1
 80059b8:	429a      	cmp	r2, r3
 80059ba:	d113      	bne.n	80059e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	689a      	ldr	r2, [r3, #8]
 80059c0:	2380      	movs	r3, #128	; 0x80
 80059c2:	021b      	lsls	r3, r3, #8
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d005      	beq.n	80059d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	689a      	ldr	r2, [r3, #8]
 80059cc:	2380      	movs	r3, #128	; 0x80
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	429a      	cmp	r2, r3
 80059d2:	d107      	bne.n	80059e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	681a      	ldr	r2, [r3, #0]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	2140      	movs	r1, #64	; 0x40
 80059e0:	438a      	bics	r2, r1
 80059e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e8:	2380      	movs	r3, #128	; 0x80
 80059ea:	019b      	lsls	r3, r3, #6
 80059ec:	429a      	cmp	r2, r3
 80059ee:	d110      	bne.n	8005a12 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	681a      	ldr	r2, [r3, #0]
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	491a      	ldr	r1, [pc, #104]	; (8005a64 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80059fc:	400a      	ands	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	681a      	ldr	r2, [r3, #0]
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	681b      	ldr	r3, [r3, #0]
 8005a0a:	2180      	movs	r1, #128	; 0x80
 8005a0c:	0189      	lsls	r1, r1, #6
 8005a0e:	430a      	orrs	r2, r1
 8005a10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	225d      	movs	r2, #93	; 0x5d
 8005a16:	2101      	movs	r1, #1
 8005a18:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	225c      	movs	r2, #92	; 0x5c
 8005a1e:	2100      	movs	r1, #0
 8005a20:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005a22:	2303      	movs	r3, #3
 8005a24:	e017      	b.n	8005a56 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005a30:	697b      	ldr	r3, [r7, #20]
 8005a32:	3b01      	subs	r3, #1
 8005a34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	689b      	ldr	r3, [r3, #8]
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	4013      	ands	r3, r2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	1ad3      	subs	r3, r2, r3
 8005a44:	425a      	negs	r2, r3
 8005a46:	4153      	adcs	r3, r2
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	1dfb      	adds	r3, r7, #7
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d197      	bne.n	8005984 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	0018      	movs	r0, r3
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	b008      	add	sp, #32
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	46c0      	nop			; (mov r8, r8)
 8005a60:	2000000c 	.word	0x2000000c
 8005a64:	ffffdfff 	.word	0xffffdfff

08005a68 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b08a      	sub	sp, #40	; 0x28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
 8005a74:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8005a76:	2317      	movs	r3, #23
 8005a78:	18fb      	adds	r3, r7, r3
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005a7e:	f7fe fb5b 	bl	8004138 <HAL_GetTick>
 8005a82:	0002      	movs	r2, r0
 8005a84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a86:	1a9b      	subs	r3, r3, r2
 8005a88:	683a      	ldr	r2, [r7, #0]
 8005a8a:	18d3      	adds	r3, r2, r3
 8005a8c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8005a8e:	f7fe fb53 	bl	8004138 <HAL_GetTick>
 8005a92:	0003      	movs	r3, r0
 8005a94:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	330c      	adds	r3, #12
 8005a9c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005a9e:	4b41      	ldr	r3, [pc, #260]	; (8005ba4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	0013      	movs	r3, r2
 8005aa4:	009b      	lsls	r3, r3, #2
 8005aa6:	189b      	adds	r3, r3, r2
 8005aa8:	00da      	lsls	r2, r3, #3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	0d1b      	lsrs	r3, r3, #20
 8005aae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ab0:	4353      	muls	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8005ab4:	e068      	b.n	8005b88 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005ab6:	68ba      	ldr	r2, [r7, #8]
 8005ab8:	23c0      	movs	r3, #192	; 0xc0
 8005aba:	00db      	lsls	r3, r3, #3
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d10a      	bne.n	8005ad6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d107      	bne.n	8005ad6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	781b      	ldrb	r3, [r3, #0]
 8005aca:	b2da      	uxtb	r2, r3
 8005acc:	2117      	movs	r1, #23
 8005ace:	187b      	adds	r3, r7, r1
 8005ad0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8005ad2:	187b      	adds	r3, r7, r1
 8005ad4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	3301      	adds	r3, #1
 8005ada:	d055      	beq.n	8005b88 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005adc:	f7fe fb2c 	bl	8004138 <HAL_GetTick>
 8005ae0:	0002      	movs	r2, r0
 8005ae2:	6a3b      	ldr	r3, [r7, #32]
 8005ae4:	1ad3      	subs	r3, r2, r3
 8005ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d902      	bls.n	8005af2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8005aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d142      	bne.n	8005b78 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685a      	ldr	r2, [r3, #4]
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	21e0      	movs	r1, #224	; 0xe0
 8005afe:	438a      	bics	r2, r1
 8005b00:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	685a      	ldr	r2, [r3, #4]
 8005b06:	2382      	movs	r3, #130	; 0x82
 8005b08:	005b      	lsls	r3, r3, #1
 8005b0a:	429a      	cmp	r2, r3
 8005b0c:	d113      	bne.n	8005b36 <SPI_WaitFifoStateUntilTimeout+0xce>
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	689a      	ldr	r2, [r3, #8]
 8005b12:	2380      	movs	r3, #128	; 0x80
 8005b14:	021b      	lsls	r3, r3, #8
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d005      	beq.n	8005b26 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	689a      	ldr	r2, [r3, #8]
 8005b1e:	2380      	movs	r3, #128	; 0x80
 8005b20:	00db      	lsls	r3, r3, #3
 8005b22:	429a      	cmp	r2, r3
 8005b24:	d107      	bne.n	8005b36 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	2140      	movs	r1, #64	; 0x40
 8005b32:	438a      	bics	r2, r1
 8005b34:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005b3a:	2380      	movs	r3, #128	; 0x80
 8005b3c:	019b      	lsls	r3, r3, #6
 8005b3e:	429a      	cmp	r2, r3
 8005b40:	d110      	bne.n	8005b64 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	4916      	ldr	r1, [pc, #88]	; (8005ba8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8005b4e:	400a      	ands	r2, r1
 8005b50:	601a      	str	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	681a      	ldr	r2, [r3, #0]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	2180      	movs	r1, #128	; 0x80
 8005b5e:	0189      	lsls	r1, r1, #6
 8005b60:	430a      	orrs	r2, r1
 8005b62:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	225d      	movs	r2, #93	; 0x5d
 8005b68:	2101      	movs	r1, #1
 8005b6a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	225c      	movs	r2, #92	; 0x5c
 8005b70:	2100      	movs	r1, #0
 8005b72:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e010      	b.n	8005b9a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005b78:	69bb      	ldr	r3, [r7, #24]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d101      	bne.n	8005b82 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	3b01      	subs	r3, #1
 8005b86:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	68ba      	ldr	r2, [r7, #8]
 8005b90:	4013      	ands	r3, r2
 8005b92:	687a      	ldr	r2, [r7, #4]
 8005b94:	429a      	cmp	r2, r3
 8005b96:	d18e      	bne.n	8005ab6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	0018      	movs	r0, r3
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	b00a      	add	sp, #40	; 0x28
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	2000000c 	.word	0x2000000c
 8005ba8:	ffffdfff 	.word	0xffffdfff

08005bac <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b086      	sub	sp, #24
 8005bb0:	af02      	add	r7, sp, #8
 8005bb2:	60f8      	str	r0, [r7, #12]
 8005bb4:	60b9      	str	r1, [r7, #8]
 8005bb6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	2382      	movs	r3, #130	; 0x82
 8005bbe:	005b      	lsls	r3, r3, #1
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d113      	bne.n	8005bec <SPI_EndRxTransaction+0x40>
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	689a      	ldr	r2, [r3, #8]
 8005bc8:	2380      	movs	r3, #128	; 0x80
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	429a      	cmp	r2, r3
 8005bce:	d005      	beq.n	8005bdc <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	2380      	movs	r3, #128	; 0x80
 8005bd6:	00db      	lsls	r3, r3, #3
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	d107      	bne.n	8005bec <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2140      	movs	r1, #64	; 0x40
 8005be8:	438a      	bics	r2, r1
 8005bea:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005bec:	68ba      	ldr	r2, [r7, #8]
 8005bee:	68f8      	ldr	r0, [r7, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	9300      	str	r3, [sp, #0]
 8005bf4:	0013      	movs	r3, r2
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	2180      	movs	r1, #128	; 0x80
 8005bfa:	f7ff fea7 	bl	800594c <SPI_WaitFlagStateUntilTimeout>
 8005bfe:	1e03      	subs	r3, r0, #0
 8005c00:	d007      	beq.n	8005c12 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c06:	2220      	movs	r2, #32
 8005c08:	431a      	orrs	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c0e:	2303      	movs	r3, #3
 8005c10:	e026      	b.n	8005c60 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	685a      	ldr	r2, [r3, #4]
 8005c16:	2382      	movs	r3, #130	; 0x82
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	429a      	cmp	r2, r3
 8005c1c:	d11f      	bne.n	8005c5e <SPI_EndRxTransaction+0xb2>
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	689a      	ldr	r2, [r3, #8]
 8005c22:	2380      	movs	r3, #128	; 0x80
 8005c24:	021b      	lsls	r3, r3, #8
 8005c26:	429a      	cmp	r2, r3
 8005c28:	d005      	beq.n	8005c36 <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	689a      	ldr	r2, [r3, #8]
 8005c2e:	2380      	movs	r3, #128	; 0x80
 8005c30:	00db      	lsls	r3, r3, #3
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d113      	bne.n	8005c5e <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c36:	68ba      	ldr	r2, [r7, #8]
 8005c38:	23c0      	movs	r3, #192	; 0xc0
 8005c3a:	00d9      	lsls	r1, r3, #3
 8005c3c:	68f8      	ldr	r0, [r7, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	0013      	movs	r3, r2
 8005c44:	2200      	movs	r2, #0
 8005c46:	f7ff ff0f 	bl	8005a68 <SPI_WaitFifoStateUntilTimeout>
 8005c4a:	1e03      	subs	r3, r0, #0
 8005c4c:	d007      	beq.n	8005c5e <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c52:	2220      	movs	r2, #32
 8005c54:	431a      	orrs	r2, r3
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8005c5a:	2303      	movs	r3, #3
 8005c5c:	e000      	b.n	8005c60 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	0018      	movs	r0, r3
 8005c62:	46bd      	mov	sp, r7
 8005c64:	b004      	add	sp, #16
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af02      	add	r7, sp, #8
 8005c6e:	60f8      	str	r0, [r7, #12]
 8005c70:	60b9      	str	r1, [r7, #8]
 8005c72:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005c74:	68ba      	ldr	r2, [r7, #8]
 8005c76:	23c0      	movs	r3, #192	; 0xc0
 8005c78:	0159      	lsls	r1, r3, #5
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	9300      	str	r3, [sp, #0]
 8005c80:	0013      	movs	r3, r2
 8005c82:	2200      	movs	r2, #0
 8005c84:	f7ff fef0 	bl	8005a68 <SPI_WaitFifoStateUntilTimeout>
 8005c88:	1e03      	subs	r3, r0, #0
 8005c8a:	d007      	beq.n	8005c9c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c90:	2220      	movs	r2, #32
 8005c92:	431a      	orrs	r2, r3
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005c98:	2303      	movs	r3, #3
 8005c9a:	e027      	b.n	8005cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	9300      	str	r3, [sp, #0]
 8005ca4:	0013      	movs	r3, r2
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	2180      	movs	r1, #128	; 0x80
 8005caa:	f7ff fe4f 	bl	800594c <SPI_WaitFlagStateUntilTimeout>
 8005cae:	1e03      	subs	r3, r0, #0
 8005cb0:	d007      	beq.n	8005cc2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cb6:	2220      	movs	r2, #32
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005cbe:	2303      	movs	r3, #3
 8005cc0:	e014      	b.n	8005cec <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005cc2:	68ba      	ldr	r2, [r7, #8]
 8005cc4:	23c0      	movs	r3, #192	; 0xc0
 8005cc6:	00d9      	lsls	r1, r3, #3
 8005cc8:	68f8      	ldr	r0, [r7, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	9300      	str	r3, [sp, #0]
 8005cce:	0013      	movs	r3, r2
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f7ff fec9 	bl	8005a68 <SPI_WaitFifoStateUntilTimeout>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d007      	beq.n	8005cea <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cde:	2220      	movs	r2, #32
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005ce6:	2303      	movs	r3, #3
 8005ce8:	e000      	b.n	8005cec <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8005cea:	2300      	movs	r3, #0
}
 8005cec:	0018      	movs	r0, r3
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	b004      	add	sp, #16
 8005cf2:	bd80      	pop	{r7, pc}

08005cf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cf4:	b580      	push	{r7, lr}
 8005cf6:	b082      	sub	sp, #8
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d101      	bne.n	8005d06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005d02:	2301      	movs	r3, #1
 8005d04:	e044      	b.n	8005d90 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d107      	bne.n	8005d1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2274      	movs	r2, #116	; 0x74
 8005d12:	2100      	movs	r1, #0
 8005d14:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	0018      	movs	r0, r3
 8005d1a:	f7fe f863 	bl	8003de4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	2224      	movs	r2, #36	; 0x24
 8005d22:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2101      	movs	r1, #1
 8005d30:	438a      	bics	r2, r1
 8005d32:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	0018      	movs	r0, r3
 8005d38:	f000 f8da 	bl	8005ef0 <UART_SetConfig>
 8005d3c:	0003      	movs	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005d42:	2301      	movs	r3, #1
 8005d44:	e024      	b.n	8005d90 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d003      	beq.n	8005d56 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	0018      	movs	r0, r3
 8005d52:	f000 fa0d 	bl	8006170 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	685a      	ldr	r2, [r3, #4]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	490d      	ldr	r1, [pc, #52]	; (8005d98 <HAL_UART_Init+0xa4>)
 8005d62:	400a      	ands	r2, r1
 8005d64:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	212a      	movs	r1, #42	; 0x2a
 8005d72:	438a      	bics	r2, r1
 8005d74:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2101      	movs	r1, #1
 8005d82:	430a      	orrs	r2, r1
 8005d84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	0018      	movs	r0, r3
 8005d8a:	f000 faa5 	bl	80062d8 <UART_CheckIdleState>
 8005d8e:	0003      	movs	r3, r0
}
 8005d90:	0018      	movs	r0, r3
 8005d92:	46bd      	mov	sp, r7
 8005d94:	b002      	add	sp, #8
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	ffffb7ff 	.word	0xffffb7ff

08005d9c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b08a      	sub	sp, #40	; 0x28
 8005da0:	af02      	add	r7, sp, #8
 8005da2:	60f8      	str	r0, [r7, #12]
 8005da4:	60b9      	str	r1, [r7, #8]
 8005da6:	603b      	str	r3, [r7, #0]
 8005da8:	1dbb      	adds	r3, r7, #6
 8005daa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005db0:	2b20      	cmp	r3, #32
 8005db2:	d000      	beq.n	8005db6 <HAL_UART_Transmit+0x1a>
 8005db4:	e096      	b.n	8005ee4 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8005db6:	68bb      	ldr	r3, [r7, #8]
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <HAL_UART_Transmit+0x28>
 8005dbc:	1dbb      	adds	r3, r7, #6
 8005dbe:	881b      	ldrh	r3, [r3, #0]
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d101      	bne.n	8005dc8 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e08e      	b.n	8005ee6 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	689a      	ldr	r2, [r3, #8]
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	015b      	lsls	r3, r3, #5
 8005dd0:	429a      	cmp	r2, r3
 8005dd2:	d109      	bne.n	8005de8 <HAL_UART_Transmit+0x4c>
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	691b      	ldr	r3, [r3, #16]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d105      	bne.n	8005de8 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005ddc:	68bb      	ldr	r3, [r7, #8]
 8005dde:	2201      	movs	r2, #1
 8005de0:	4013      	ands	r3, r2
 8005de2:	d001      	beq.n	8005de8 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e07e      	b.n	8005ee6 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	2274      	movs	r2, #116	; 0x74
 8005dec:	5c9b      	ldrb	r3, [r3, r2]
 8005dee:	2b01      	cmp	r3, #1
 8005df0:	d101      	bne.n	8005df6 <HAL_UART_Transmit+0x5a>
 8005df2:	2302      	movs	r3, #2
 8005df4:	e077      	b.n	8005ee6 <HAL_UART_Transmit+0x14a>
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2274      	movs	r2, #116	; 0x74
 8005dfa:	2101      	movs	r1, #1
 8005dfc:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	2280      	movs	r2, #128	; 0x80
 8005e02:	2100      	movs	r1, #0
 8005e04:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2221      	movs	r2, #33	; 0x21
 8005e0a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005e0c:	f7fe f994 	bl	8004138 <HAL_GetTick>
 8005e10:	0003      	movs	r3, r0
 8005e12:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	1dba      	adds	r2, r7, #6
 8005e18:	2150      	movs	r1, #80	; 0x50
 8005e1a:	8812      	ldrh	r2, [r2, #0]
 8005e1c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	1dba      	adds	r2, r7, #6
 8005e22:	2152      	movs	r1, #82	; 0x52
 8005e24:	8812      	ldrh	r2, [r2, #0]
 8005e26:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	2380      	movs	r3, #128	; 0x80
 8005e2e:	015b      	lsls	r3, r3, #5
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d108      	bne.n	8005e46 <HAL_UART_Transmit+0xaa>
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	691b      	ldr	r3, [r3, #16]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	61bb      	str	r3, [r7, #24]
 8005e44:	e003      	b.n	8005e4e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8005e46:	68bb      	ldr	r3, [r7, #8]
 8005e48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2274      	movs	r2, #116	; 0x74
 8005e52:	2100      	movs	r1, #0
 8005e54:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 8005e56:	e02d      	b.n	8005eb4 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005e58:	697a      	ldr	r2, [r7, #20]
 8005e5a:	68f8      	ldr	r0, [r7, #12]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	9300      	str	r3, [sp, #0]
 8005e60:	0013      	movs	r3, r2
 8005e62:	2200      	movs	r2, #0
 8005e64:	2180      	movs	r1, #128	; 0x80
 8005e66:	f000 fa7f 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8005e6a:	1e03      	subs	r3, r0, #0
 8005e6c:	d001      	beq.n	8005e72 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 8005e6e:	2303      	movs	r3, #3
 8005e70:	e039      	b.n	8005ee6 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d10b      	bne.n	8005e90 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	881a      	ldrh	r2, [r3, #0]
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	05d2      	lsls	r2, r2, #23
 8005e82:	0dd2      	lsrs	r2, r2, #23
 8005e84:	b292      	uxth	r2, r2
 8005e86:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005e88:	69bb      	ldr	r3, [r7, #24]
 8005e8a:	3302      	adds	r3, #2
 8005e8c:	61bb      	str	r3, [r7, #24]
 8005e8e:	e008      	b.n	8005ea2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005e90:	69fb      	ldr	r3, [r7, #28]
 8005e92:	781a      	ldrb	r2, [r3, #0]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	b292      	uxth	r2, r2
 8005e9a:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005e9c:	69fb      	ldr	r3, [r7, #28]
 8005e9e:	3301      	adds	r3, #1
 8005ea0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	2252      	movs	r2, #82	; 0x52
 8005ea6:	5a9b      	ldrh	r3, [r3, r2]
 8005ea8:	b29b      	uxth	r3, r3
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	b299      	uxth	r1, r3
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2252      	movs	r2, #82	; 0x52
 8005eb2:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	2252      	movs	r2, #82	; 0x52
 8005eb8:	5a9b      	ldrh	r3, [r3, r2]
 8005eba:	b29b      	uxth	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d1cb      	bne.n	8005e58 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005ec0:	697a      	ldr	r2, [r7, #20]
 8005ec2:	68f8      	ldr	r0, [r7, #12]
 8005ec4:	683b      	ldr	r3, [r7, #0]
 8005ec6:	9300      	str	r3, [sp, #0]
 8005ec8:	0013      	movs	r3, r2
 8005eca:	2200      	movs	r2, #0
 8005ecc:	2140      	movs	r1, #64	; 0x40
 8005ece:	f000 fa4b 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8005ed2:	1e03      	subs	r3, r0, #0
 8005ed4:	d001      	beq.n	8005eda <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8005ed6:	2303      	movs	r3, #3
 8005ed8:	e005      	b.n	8005ee6 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	2220      	movs	r2, #32
 8005ede:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	e000      	b.n	8005ee6 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8005ee4:	2302      	movs	r3, #2
  }
}
 8005ee6:	0018      	movs	r0, r3
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	b008      	add	sp, #32
 8005eec:	bd80      	pop	{r7, pc}
	...

08005ef0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef0:	b580      	push	{r7, lr}
 8005ef2:	b088      	sub	sp, #32
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005ef8:	231e      	movs	r3, #30
 8005efa:	18fb      	adds	r3, r7, r3
 8005efc:	2200      	movs	r2, #0
 8005efe:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689a      	ldr	r2, [r3, #8]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	431a      	orrs	r2, r3
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	695b      	ldr	r3, [r3, #20]
 8005f0e:	431a      	orrs	r2, r3
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	69db      	ldr	r3, [r3, #28]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a8d      	ldr	r2, [pc, #564]	; (8006154 <UART_SetConfig+0x264>)
 8005f20:	4013      	ands	r3, r2
 8005f22:	0019      	movs	r1, r3
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	697a      	ldr	r2, [r7, #20]
 8005f2a:	430a      	orrs	r2, r1
 8005f2c:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	4a88      	ldr	r2, [pc, #544]	; (8006158 <UART_SetConfig+0x268>)
 8005f36:	4013      	ands	r3, r2
 8005f38:	0019      	movs	r1, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68da      	ldr	r2, [r3, #12]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	430a      	orrs	r2, r1
 8005f44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	699b      	ldr	r3, [r3, #24]
 8005f4a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6a1b      	ldr	r3, [r3, #32]
 8005f50:	697a      	ldr	r2, [r7, #20]
 8005f52:	4313      	orrs	r3, r2
 8005f54:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	689b      	ldr	r3, [r3, #8]
 8005f5c:	4a7f      	ldr	r2, [pc, #508]	; (800615c <UART_SetConfig+0x26c>)
 8005f5e:	4013      	ands	r3, r2
 8005f60:	0019      	movs	r1, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	430a      	orrs	r2, r1
 8005f6a:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a7b      	ldr	r2, [pc, #492]	; (8006160 <UART_SetConfig+0x270>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d127      	bne.n	8005fc6 <UART_SetConfig+0xd6>
 8005f76:	4b7b      	ldr	r3, [pc, #492]	; (8006164 <UART_SetConfig+0x274>)
 8005f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f7a:	2203      	movs	r2, #3
 8005f7c:	4013      	ands	r3, r2
 8005f7e:	2b03      	cmp	r3, #3
 8005f80:	d00d      	beq.n	8005f9e <UART_SetConfig+0xae>
 8005f82:	d81b      	bhi.n	8005fbc <UART_SetConfig+0xcc>
 8005f84:	2b02      	cmp	r3, #2
 8005f86:	d014      	beq.n	8005fb2 <UART_SetConfig+0xc2>
 8005f88:	d818      	bhi.n	8005fbc <UART_SetConfig+0xcc>
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d002      	beq.n	8005f94 <UART_SetConfig+0xa4>
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d00a      	beq.n	8005fa8 <UART_SetConfig+0xb8>
 8005f92:	e013      	b.n	8005fbc <UART_SetConfig+0xcc>
 8005f94:	231f      	movs	r3, #31
 8005f96:	18fb      	adds	r3, r7, r3
 8005f98:	2200      	movs	r2, #0
 8005f9a:	701a      	strb	r2, [r3, #0]
 8005f9c:	e021      	b.n	8005fe2 <UART_SetConfig+0xf2>
 8005f9e:	231f      	movs	r3, #31
 8005fa0:	18fb      	adds	r3, r7, r3
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	701a      	strb	r2, [r3, #0]
 8005fa6:	e01c      	b.n	8005fe2 <UART_SetConfig+0xf2>
 8005fa8:	231f      	movs	r3, #31
 8005faa:	18fb      	adds	r3, r7, r3
 8005fac:	2204      	movs	r2, #4
 8005fae:	701a      	strb	r2, [r3, #0]
 8005fb0:	e017      	b.n	8005fe2 <UART_SetConfig+0xf2>
 8005fb2:	231f      	movs	r3, #31
 8005fb4:	18fb      	adds	r3, r7, r3
 8005fb6:	2208      	movs	r2, #8
 8005fb8:	701a      	strb	r2, [r3, #0]
 8005fba:	e012      	b.n	8005fe2 <UART_SetConfig+0xf2>
 8005fbc:	231f      	movs	r3, #31
 8005fbe:	18fb      	adds	r3, r7, r3
 8005fc0:	2210      	movs	r2, #16
 8005fc2:	701a      	strb	r2, [r3, #0]
 8005fc4:	e00d      	b.n	8005fe2 <UART_SetConfig+0xf2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a67      	ldr	r2, [pc, #412]	; (8006168 <UART_SetConfig+0x278>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d104      	bne.n	8005fda <UART_SetConfig+0xea>
 8005fd0:	231f      	movs	r3, #31
 8005fd2:	18fb      	adds	r3, r7, r3
 8005fd4:	2200      	movs	r2, #0
 8005fd6:	701a      	strb	r2, [r3, #0]
 8005fd8:	e003      	b.n	8005fe2 <UART_SetConfig+0xf2>
 8005fda:	231f      	movs	r3, #31
 8005fdc:	18fb      	adds	r3, r7, r3
 8005fde:	2210      	movs	r2, #16
 8005fe0:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	69da      	ldr	r2, [r3, #28]
 8005fe6:	2380      	movs	r3, #128	; 0x80
 8005fe8:	021b      	lsls	r3, r3, #8
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d15d      	bne.n	80060aa <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8005fee:	231f      	movs	r3, #31
 8005ff0:	18fb      	adds	r3, r7, r3
 8005ff2:	781b      	ldrb	r3, [r3, #0]
 8005ff4:	2b08      	cmp	r3, #8
 8005ff6:	d015      	beq.n	8006024 <UART_SetConfig+0x134>
 8005ff8:	dc18      	bgt.n	800602c <UART_SetConfig+0x13c>
 8005ffa:	2b04      	cmp	r3, #4
 8005ffc:	d00d      	beq.n	800601a <UART_SetConfig+0x12a>
 8005ffe:	dc15      	bgt.n	800602c <UART_SetConfig+0x13c>
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <UART_SetConfig+0x11a>
 8006004:	2b02      	cmp	r3, #2
 8006006:	d005      	beq.n	8006014 <UART_SetConfig+0x124>
 8006008:	e010      	b.n	800602c <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800600a:	f7fe ff5b 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 800600e:	0003      	movs	r3, r0
 8006010:	61bb      	str	r3, [r7, #24]
        break;
 8006012:	e012      	b.n	800603a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006014:	4b55      	ldr	r3, [pc, #340]	; (800616c <UART_SetConfig+0x27c>)
 8006016:	61bb      	str	r3, [r7, #24]
        break;
 8006018:	e00f      	b.n	800603a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800601a:	f7fe fee5 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 800601e:	0003      	movs	r3, r0
 8006020:	61bb      	str	r3, [r7, #24]
        break;
 8006022:	e00a      	b.n	800603a <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006024:	2380      	movs	r3, #128	; 0x80
 8006026:	021b      	lsls	r3, r3, #8
 8006028:	61bb      	str	r3, [r7, #24]
        break;
 800602a:	e006      	b.n	800603a <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 800602c:	2300      	movs	r3, #0
 800602e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006030:	231e      	movs	r3, #30
 8006032:	18fb      	adds	r3, r7, r3
 8006034:	2201      	movs	r2, #1
 8006036:	701a      	strb	r2, [r3, #0]
        break;
 8006038:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800603a:	69bb      	ldr	r3, [r7, #24]
 800603c:	2b00      	cmp	r3, #0
 800603e:	d100      	bne.n	8006042 <UART_SetConfig+0x152>
 8006040:	e07b      	b.n	800613a <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006042:	69bb      	ldr	r3, [r7, #24]
 8006044:	005a      	lsls	r2, r3, #1
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	085b      	lsrs	r3, r3, #1
 800604c:	18d2      	adds	r2, r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	0019      	movs	r1, r3
 8006054:	0010      	movs	r0, r2
 8006056:	f7fa f873 	bl	8000140 <__udivsi3>
 800605a:	0003      	movs	r3, r0
 800605c:	b29b      	uxth	r3, r3
 800605e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006060:	693b      	ldr	r3, [r7, #16]
 8006062:	2b0f      	cmp	r3, #15
 8006064:	d91c      	bls.n	80060a0 <UART_SetConfig+0x1b0>
 8006066:	693a      	ldr	r2, [r7, #16]
 8006068:	2380      	movs	r3, #128	; 0x80
 800606a:	025b      	lsls	r3, r3, #9
 800606c:	429a      	cmp	r2, r3
 800606e:	d217      	bcs.n	80060a0 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	b29a      	uxth	r2, r3
 8006074:	200e      	movs	r0, #14
 8006076:	183b      	adds	r3, r7, r0
 8006078:	210f      	movs	r1, #15
 800607a:	438a      	bics	r2, r1
 800607c:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	085b      	lsrs	r3, r3, #1
 8006082:	b29b      	uxth	r3, r3
 8006084:	2207      	movs	r2, #7
 8006086:	4013      	ands	r3, r2
 8006088:	b299      	uxth	r1, r3
 800608a:	183b      	adds	r3, r7, r0
 800608c:	183a      	adds	r2, r7, r0
 800608e:	8812      	ldrh	r2, [r2, #0]
 8006090:	430a      	orrs	r2, r1
 8006092:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	183a      	adds	r2, r7, r0
 800609a:	8812      	ldrh	r2, [r2, #0]
 800609c:	60da      	str	r2, [r3, #12]
 800609e:	e04c      	b.n	800613a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80060a0:	231e      	movs	r3, #30
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2201      	movs	r2, #1
 80060a6:	701a      	strb	r2, [r3, #0]
 80060a8:	e047      	b.n	800613a <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80060aa:	231f      	movs	r3, #31
 80060ac:	18fb      	adds	r3, r7, r3
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d015      	beq.n	80060e0 <UART_SetConfig+0x1f0>
 80060b4:	dc18      	bgt.n	80060e8 <UART_SetConfig+0x1f8>
 80060b6:	2b04      	cmp	r3, #4
 80060b8:	d00d      	beq.n	80060d6 <UART_SetConfig+0x1e6>
 80060ba:	dc15      	bgt.n	80060e8 <UART_SetConfig+0x1f8>
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d002      	beq.n	80060c6 <UART_SetConfig+0x1d6>
 80060c0:	2b02      	cmp	r3, #2
 80060c2:	d005      	beq.n	80060d0 <UART_SetConfig+0x1e0>
 80060c4:	e010      	b.n	80060e8 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060c6:	f7fe fefd 	bl	8004ec4 <HAL_RCC_GetPCLK1Freq>
 80060ca:	0003      	movs	r3, r0
 80060cc:	61bb      	str	r3, [r7, #24]
        break;
 80060ce:	e012      	b.n	80060f6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060d0:	4b26      	ldr	r3, [pc, #152]	; (800616c <UART_SetConfig+0x27c>)
 80060d2:	61bb      	str	r3, [r7, #24]
        break;
 80060d4:	e00f      	b.n	80060f6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060d6:	f7fe fe87 	bl	8004de8 <HAL_RCC_GetSysClockFreq>
 80060da:	0003      	movs	r3, r0
 80060dc:	61bb      	str	r3, [r7, #24]
        break;
 80060de:	e00a      	b.n	80060f6 <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060e0:	2380      	movs	r3, #128	; 0x80
 80060e2:	021b      	lsls	r3, r3, #8
 80060e4:	61bb      	str	r3, [r7, #24]
        break;
 80060e6:	e006      	b.n	80060f6 <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 80060e8:	2300      	movs	r3, #0
 80060ea:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80060ec:	231e      	movs	r3, #30
 80060ee:	18fb      	adds	r3, r7, r3
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
        break;
 80060f4:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 80060f6:	69bb      	ldr	r3, [r7, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d01e      	beq.n	800613a <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	085a      	lsrs	r2, r3, #1
 8006102:	69bb      	ldr	r3, [r7, #24]
 8006104:	18d2      	adds	r2, r2, r3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	685b      	ldr	r3, [r3, #4]
 800610a:	0019      	movs	r1, r3
 800610c:	0010      	movs	r0, r2
 800610e:	f7fa f817 	bl	8000140 <__udivsi3>
 8006112:	0003      	movs	r3, r0
 8006114:	b29b      	uxth	r3, r3
 8006116:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006118:	693b      	ldr	r3, [r7, #16]
 800611a:	2b0f      	cmp	r3, #15
 800611c:	d909      	bls.n	8006132 <UART_SetConfig+0x242>
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	2380      	movs	r3, #128	; 0x80
 8006122:	025b      	lsls	r3, r3, #9
 8006124:	429a      	cmp	r2, r3
 8006126:	d204      	bcs.n	8006132 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	693a      	ldr	r2, [r7, #16]
 800612e:	60da      	str	r2, [r3, #12]
 8006130:	e003      	b.n	800613a <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8006132:	231e      	movs	r3, #30
 8006134:	18fb      	adds	r3, r7, r3
 8006136:	2201      	movs	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2200      	movs	r2, #0
 800613e:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2200      	movs	r2, #0
 8006144:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006146:	231e      	movs	r3, #30
 8006148:	18fb      	adds	r3, r7, r3
 800614a:	781b      	ldrb	r3, [r3, #0]
}
 800614c:	0018      	movs	r0, r3
 800614e:	46bd      	mov	sp, r7
 8006150:	b008      	add	sp, #32
 8006152:	bd80      	pop	{r7, pc}
 8006154:	ffff69f3 	.word	0xffff69f3
 8006158:	ffffcfff 	.word	0xffffcfff
 800615c:	fffff4ff 	.word	0xfffff4ff
 8006160:	40013800 	.word	0x40013800
 8006164:	40021000 	.word	0x40021000
 8006168:	40004400 	.word	0x40004400
 800616c:	007a1200 	.word	0x007a1200

08006170 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2201      	movs	r2, #1
 800617e:	4013      	ands	r3, r2
 8006180:	d00b      	beq.n	800619a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	685b      	ldr	r3, [r3, #4]
 8006188:	4a4a      	ldr	r2, [pc, #296]	; (80062b4 <UART_AdvFeatureConfig+0x144>)
 800618a:	4013      	ands	r3, r2
 800618c:	0019      	movs	r1, r3
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	430a      	orrs	r2, r1
 8006198:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2202      	movs	r2, #2
 80061a0:	4013      	ands	r3, r2
 80061a2:	d00b      	beq.n	80061bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	685b      	ldr	r3, [r3, #4]
 80061aa:	4a43      	ldr	r2, [pc, #268]	; (80062b8 <UART_AdvFeatureConfig+0x148>)
 80061ac:	4013      	ands	r3, r2
 80061ae:	0019      	movs	r1, r3
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061c0:	2204      	movs	r2, #4
 80061c2:	4013      	ands	r3, r2
 80061c4:	d00b      	beq.n	80061de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	685b      	ldr	r3, [r3, #4]
 80061cc:	4a3b      	ldr	r2, [pc, #236]	; (80062bc <UART_AdvFeatureConfig+0x14c>)
 80061ce:	4013      	ands	r3, r2
 80061d0:	0019      	movs	r1, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	430a      	orrs	r2, r1
 80061dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80061e2:	2208      	movs	r2, #8
 80061e4:	4013      	ands	r3, r2
 80061e6:	d00b      	beq.n	8006200 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	685b      	ldr	r3, [r3, #4]
 80061ee:	4a34      	ldr	r2, [pc, #208]	; (80062c0 <UART_AdvFeatureConfig+0x150>)
 80061f0:	4013      	ands	r3, r2
 80061f2:	0019      	movs	r1, r3
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	430a      	orrs	r2, r1
 80061fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006204:	2210      	movs	r2, #16
 8006206:	4013      	ands	r3, r2
 8006208:	d00b      	beq.n	8006222 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a2c      	ldr	r2, [pc, #176]	; (80062c4 <UART_AdvFeatureConfig+0x154>)
 8006212:	4013      	ands	r3, r2
 8006214:	0019      	movs	r1, r3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	430a      	orrs	r2, r1
 8006220:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006226:	2220      	movs	r2, #32
 8006228:	4013      	ands	r3, r2
 800622a:	d00b      	beq.n	8006244 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	689b      	ldr	r3, [r3, #8]
 8006232:	4a25      	ldr	r2, [pc, #148]	; (80062c8 <UART_AdvFeatureConfig+0x158>)
 8006234:	4013      	ands	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	430a      	orrs	r2, r1
 8006242:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006248:	2240      	movs	r2, #64	; 0x40
 800624a:	4013      	ands	r3, r2
 800624c:	d01d      	beq.n	800628a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	685b      	ldr	r3, [r3, #4]
 8006254:	4a1d      	ldr	r2, [pc, #116]	; (80062cc <UART_AdvFeatureConfig+0x15c>)
 8006256:	4013      	ands	r3, r2
 8006258:	0019      	movs	r1, r3
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	430a      	orrs	r2, r1
 8006264:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800626a:	2380      	movs	r3, #128	; 0x80
 800626c:	035b      	lsls	r3, r3, #13
 800626e:	429a      	cmp	r2, r3
 8006270:	d10b      	bne.n	800628a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	4a15      	ldr	r2, [pc, #84]	; (80062d0 <UART_AdvFeatureConfig+0x160>)
 800627a:	4013      	ands	r3, r2
 800627c:	0019      	movs	r1, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	430a      	orrs	r2, r1
 8006288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800628e:	2280      	movs	r2, #128	; 0x80
 8006290:	4013      	ands	r3, r2
 8006292:	d00b      	beq.n	80062ac <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	4a0e      	ldr	r2, [pc, #56]	; (80062d4 <UART_AdvFeatureConfig+0x164>)
 800629c:	4013      	ands	r3, r2
 800629e:	0019      	movs	r1, r3
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	430a      	orrs	r2, r1
 80062aa:	605a      	str	r2, [r3, #4]
  }
}
 80062ac:	46c0      	nop			; (mov r8, r8)
 80062ae:	46bd      	mov	sp, r7
 80062b0:	b002      	add	sp, #8
 80062b2:	bd80      	pop	{r7, pc}
 80062b4:	fffdffff 	.word	0xfffdffff
 80062b8:	fffeffff 	.word	0xfffeffff
 80062bc:	fffbffff 	.word	0xfffbffff
 80062c0:	ffff7fff 	.word	0xffff7fff
 80062c4:	ffffefff 	.word	0xffffefff
 80062c8:	ffffdfff 	.word	0xffffdfff
 80062cc:	ffefffff 	.word	0xffefffff
 80062d0:	ff9fffff 	.word	0xff9fffff
 80062d4:	fff7ffff 	.word	0xfff7ffff

080062d8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af02      	add	r7, sp, #8
 80062de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2280      	movs	r2, #128	; 0x80
 80062e4:	2100      	movs	r1, #0
 80062e6:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80062e8:	f7fd ff26 	bl	8004138 <HAL_GetTick>
 80062ec:	0003      	movs	r3, r0
 80062ee:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	2208      	movs	r2, #8
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b08      	cmp	r3, #8
 80062fc:	d10c      	bne.n	8006318 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2280      	movs	r2, #128	; 0x80
 8006302:	0391      	lsls	r1, r2, #14
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	4a17      	ldr	r2, [pc, #92]	; (8006364 <UART_CheckIdleState+0x8c>)
 8006308:	9200      	str	r2, [sp, #0]
 800630a:	2200      	movs	r2, #0
 800630c:	f000 f82c 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8006310:	1e03      	subs	r3, r0, #0
 8006312:	d001      	beq.n	8006318 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006314:	2303      	movs	r3, #3
 8006316:	e021      	b.n	800635c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2204      	movs	r2, #4
 8006320:	4013      	ands	r3, r2
 8006322:	2b04      	cmp	r3, #4
 8006324:	d10c      	bne.n	8006340 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2280      	movs	r2, #128	; 0x80
 800632a:	03d1      	lsls	r1, r2, #15
 800632c:	6878      	ldr	r0, [r7, #4]
 800632e:	4a0d      	ldr	r2, [pc, #52]	; (8006364 <UART_CheckIdleState+0x8c>)
 8006330:	9200      	str	r2, [sp, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	f000 f818 	bl	8006368 <UART_WaitOnFlagUntilTimeout>
 8006338:	1e03      	subs	r3, r0, #0
 800633a:	d001      	beq.n	8006340 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800633c:	2303      	movs	r3, #3
 800633e:	e00d      	b.n	800635c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2220      	movs	r2, #32
 8006344:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2220      	movs	r2, #32
 800634a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2200      	movs	r2, #0
 8006350:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2274      	movs	r2, #116	; 0x74
 8006356:	2100      	movs	r1, #0
 8006358:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800635a:	2300      	movs	r3, #0
}
 800635c:	0018      	movs	r0, r3
 800635e:	46bd      	mov	sp, r7
 8006360:	b004      	add	sp, #16
 8006362:	bd80      	pop	{r7, pc}
 8006364:	01ffffff 	.word	0x01ffffff

08006368 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b094      	sub	sp, #80	; 0x50
 800636c:	af00      	add	r7, sp, #0
 800636e:	60f8      	str	r0, [r7, #12]
 8006370:	60b9      	str	r1, [r7, #8]
 8006372:	603b      	str	r3, [r7, #0]
 8006374:	1dfb      	adds	r3, r7, #7
 8006376:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006378:	e0a3      	b.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800637c:	3301      	adds	r3, #1
 800637e:	d100      	bne.n	8006382 <UART_WaitOnFlagUntilTimeout+0x1a>
 8006380:	e09f      	b.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006382:	f7fd fed9 	bl	8004138 <HAL_GetTick>
 8006386:	0002      	movs	r2, r0
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	1ad3      	subs	r3, r2, r3
 800638c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800638e:	429a      	cmp	r2, r3
 8006390:	d302      	bcc.n	8006398 <UART_WaitOnFlagUntilTimeout+0x30>
 8006392:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006394:	2b00      	cmp	r3, #0
 8006396:	d13d      	bne.n	8006414 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006398:	f3ef 8310 	mrs	r3, PRIMASK
 800639c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 800639e:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063a0:	647b      	str	r3, [r7, #68]	; 0x44
 80063a2:	2301      	movs	r3, #1
 80063a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063a8:	f383 8810 	msr	PRIMASK, r3
}
 80063ac:	46c0      	nop			; (mov r8, r8)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	681a      	ldr	r2, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	494c      	ldr	r1, [pc, #304]	; (80064ec <UART_WaitOnFlagUntilTimeout+0x184>)
 80063ba:	400a      	ands	r2, r1
 80063bc:	601a      	str	r2, [r3, #0]
 80063be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80063c0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c4:	f383 8810 	msr	PRIMASK, r3
}
 80063c8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80063ca:	f3ef 8310 	mrs	r3, PRIMASK
 80063ce:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80063d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d2:	643b      	str	r3, [r7, #64]	; 0x40
 80063d4:	2301      	movs	r3, #1
 80063d6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063da:	f383 8810 	msr	PRIMASK, r3
}
 80063de:	46c0      	nop			; (mov r8, r8)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	689a      	ldr	r2, [r3, #8]
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	2101      	movs	r1, #1
 80063ec:	438a      	bics	r2, r1
 80063ee:	609a      	str	r2, [r3, #8]
 80063f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80063f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063f6:	f383 8810 	msr	PRIMASK, r3
}
 80063fa:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	2220      	movs	r2, #32
 8006400:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	2220      	movs	r2, #32
 8006406:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	2274      	movs	r2, #116	; 0x74
 800640c:	2100      	movs	r1, #0
 800640e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006410:	2303      	movs	r3, #3
 8006412:	e067      	b.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	2204      	movs	r2, #4
 800641c:	4013      	ands	r3, r2
 800641e:	d050      	beq.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	69da      	ldr	r2, [r3, #28]
 8006426:	2380      	movs	r3, #128	; 0x80
 8006428:	011b      	lsls	r3, r3, #4
 800642a:	401a      	ands	r2, r3
 800642c:	2380      	movs	r3, #128	; 0x80
 800642e:	011b      	lsls	r3, r3, #4
 8006430:	429a      	cmp	r2, r3
 8006432:	d146      	bne.n	80064c2 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2280      	movs	r2, #128	; 0x80
 800643a:	0112      	lsls	r2, r2, #4
 800643c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643e:	f3ef 8310 	mrs	r3, PRIMASK
 8006442:	613b      	str	r3, [r7, #16]
  return(result);
 8006444:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006448:	2301      	movs	r3, #1
 800644a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	f383 8810 	msr	PRIMASK, r3
}
 8006452:	46c0      	nop			; (mov r8, r8)
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	4923      	ldr	r1, [pc, #140]	; (80064ec <UART_WaitOnFlagUntilTimeout+0x184>)
 8006460:	400a      	ands	r2, r1
 8006462:	601a      	str	r2, [r3, #0]
 8006464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006466:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006468:	69bb      	ldr	r3, [r7, #24]
 800646a:	f383 8810 	msr	PRIMASK, r3
}
 800646e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006470:	f3ef 8310 	mrs	r3, PRIMASK
 8006474:	61fb      	str	r3, [r7, #28]
  return(result);
 8006476:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006478:	64bb      	str	r3, [r7, #72]	; 0x48
 800647a:	2301      	movs	r3, #1
 800647c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	f383 8810 	msr	PRIMASK, r3
}
 8006484:	46c0      	nop			; (mov r8, r8)
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	689a      	ldr	r2, [r3, #8]
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	2101      	movs	r1, #1
 8006492:	438a      	bics	r2, r1
 8006494:	609a      	str	r2, [r3, #8]
 8006496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006498:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800649a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649c:	f383 8810 	msr	PRIMASK, r3
}
 80064a0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2220      	movs	r2, #32
 80064a6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2220      	movs	r2, #32
 80064ac:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	2280      	movs	r2, #128	; 0x80
 80064b2:	2120      	movs	r1, #32
 80064b4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2274      	movs	r2, #116	; 0x74
 80064ba:	2100      	movs	r1, #0
 80064bc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80064be:	2303      	movs	r3, #3
 80064c0:	e010      	b.n	80064e4 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	69db      	ldr	r3, [r3, #28]
 80064c8:	68ba      	ldr	r2, [r7, #8]
 80064ca:	4013      	ands	r3, r2
 80064cc:	68ba      	ldr	r2, [r7, #8]
 80064ce:	1ad3      	subs	r3, r2, r3
 80064d0:	425a      	negs	r2, r3
 80064d2:	4153      	adcs	r3, r2
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	001a      	movs	r2, r3
 80064d8:	1dfb      	adds	r3, r7, #7
 80064da:	781b      	ldrb	r3, [r3, #0]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d100      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x17a>
 80064e0:	e74b      	b.n	800637a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e2:	2300      	movs	r3, #0
}
 80064e4:	0018      	movs	r0, r3
 80064e6:	46bd      	mov	sp, r7
 80064e8:	b014      	add	sp, #80	; 0x50
 80064ea:	bd80      	pop	{r7, pc}
 80064ec:	fffffe5f 	.word	0xfffffe5f

080064f0 <__errno>:
 80064f0:	4b01      	ldr	r3, [pc, #4]	; (80064f8 <__errno+0x8>)
 80064f2:	6818      	ldr	r0, [r3, #0]
 80064f4:	4770      	bx	lr
 80064f6:	46c0      	nop			; (mov r8, r8)
 80064f8:	20000018 	.word	0x20000018

080064fc <__libc_init_array>:
 80064fc:	b570      	push	{r4, r5, r6, lr}
 80064fe:	2600      	movs	r6, #0
 8006500:	4d0c      	ldr	r5, [pc, #48]	; (8006534 <__libc_init_array+0x38>)
 8006502:	4c0d      	ldr	r4, [pc, #52]	; (8006538 <__libc_init_array+0x3c>)
 8006504:	1b64      	subs	r4, r4, r5
 8006506:	10a4      	asrs	r4, r4, #2
 8006508:	42a6      	cmp	r6, r4
 800650a:	d109      	bne.n	8006520 <__libc_init_array+0x24>
 800650c:	2600      	movs	r6, #0
 800650e:	f003 f9bd 	bl	800988c <_init>
 8006512:	4d0a      	ldr	r5, [pc, #40]	; (800653c <__libc_init_array+0x40>)
 8006514:	4c0a      	ldr	r4, [pc, #40]	; (8006540 <__libc_init_array+0x44>)
 8006516:	1b64      	subs	r4, r4, r5
 8006518:	10a4      	asrs	r4, r4, #2
 800651a:	42a6      	cmp	r6, r4
 800651c:	d105      	bne.n	800652a <__libc_init_array+0x2e>
 800651e:	bd70      	pop	{r4, r5, r6, pc}
 8006520:	00b3      	lsls	r3, r6, #2
 8006522:	58eb      	ldr	r3, [r5, r3]
 8006524:	4798      	blx	r3
 8006526:	3601      	adds	r6, #1
 8006528:	e7ee      	b.n	8006508 <__libc_init_array+0xc>
 800652a:	00b3      	lsls	r3, r6, #2
 800652c:	58eb      	ldr	r3, [r5, r3]
 800652e:	4798      	blx	r3
 8006530:	3601      	adds	r6, #1
 8006532:	e7f2      	b.n	800651a <__libc_init_array+0x1e>
 8006534:	08009e44 	.word	0x08009e44
 8006538:	08009e44 	.word	0x08009e44
 800653c:	08009e44 	.word	0x08009e44
 8006540:	08009e48 	.word	0x08009e48

08006544 <memcpy>:
 8006544:	2300      	movs	r3, #0
 8006546:	b510      	push	{r4, lr}
 8006548:	429a      	cmp	r2, r3
 800654a:	d100      	bne.n	800654e <memcpy+0xa>
 800654c:	bd10      	pop	{r4, pc}
 800654e:	5ccc      	ldrb	r4, [r1, r3]
 8006550:	54c4      	strb	r4, [r0, r3]
 8006552:	3301      	adds	r3, #1
 8006554:	e7f8      	b.n	8006548 <memcpy+0x4>

08006556 <memset>:
 8006556:	0003      	movs	r3, r0
 8006558:	1882      	adds	r2, r0, r2
 800655a:	4293      	cmp	r3, r2
 800655c:	d100      	bne.n	8006560 <memset+0xa>
 800655e:	4770      	bx	lr
 8006560:	7019      	strb	r1, [r3, #0]
 8006562:	3301      	adds	r3, #1
 8006564:	e7f9      	b.n	800655a <memset+0x4>

08006566 <__cvt>:
 8006566:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006568:	001e      	movs	r6, r3
 800656a:	2300      	movs	r3, #0
 800656c:	0014      	movs	r4, r2
 800656e:	b08b      	sub	sp, #44	; 0x2c
 8006570:	429e      	cmp	r6, r3
 8006572:	da04      	bge.n	800657e <__cvt+0x18>
 8006574:	2180      	movs	r1, #128	; 0x80
 8006576:	0609      	lsls	r1, r1, #24
 8006578:	1873      	adds	r3, r6, r1
 800657a:	001e      	movs	r6, r3
 800657c:	232d      	movs	r3, #45	; 0x2d
 800657e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006580:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006582:	7013      	strb	r3, [r2, #0]
 8006584:	2320      	movs	r3, #32
 8006586:	2203      	movs	r2, #3
 8006588:	439f      	bics	r7, r3
 800658a:	2f46      	cmp	r7, #70	; 0x46
 800658c:	d007      	beq.n	800659e <__cvt+0x38>
 800658e:	003b      	movs	r3, r7
 8006590:	3b45      	subs	r3, #69	; 0x45
 8006592:	4259      	negs	r1, r3
 8006594:	414b      	adcs	r3, r1
 8006596:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006598:	3a01      	subs	r2, #1
 800659a:	18cb      	adds	r3, r1, r3
 800659c:	9310      	str	r3, [sp, #64]	; 0x40
 800659e:	ab09      	add	r3, sp, #36	; 0x24
 80065a0:	9304      	str	r3, [sp, #16]
 80065a2:	ab08      	add	r3, sp, #32
 80065a4:	9303      	str	r3, [sp, #12]
 80065a6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065a8:	9200      	str	r2, [sp, #0]
 80065aa:	9302      	str	r3, [sp, #8]
 80065ac:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065ae:	0022      	movs	r2, r4
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	0033      	movs	r3, r6
 80065b4:	f000 fd06 	bl	8006fc4 <_dtoa_r>
 80065b8:	0005      	movs	r5, r0
 80065ba:	2f47      	cmp	r7, #71	; 0x47
 80065bc:	d102      	bne.n	80065c4 <__cvt+0x5e>
 80065be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80065c0:	07db      	lsls	r3, r3, #31
 80065c2:	d528      	bpl.n	8006616 <__cvt+0xb0>
 80065c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80065c6:	18eb      	adds	r3, r5, r3
 80065c8:	9307      	str	r3, [sp, #28]
 80065ca:	2f46      	cmp	r7, #70	; 0x46
 80065cc:	d114      	bne.n	80065f8 <__cvt+0x92>
 80065ce:	782b      	ldrb	r3, [r5, #0]
 80065d0:	2b30      	cmp	r3, #48	; 0x30
 80065d2:	d10c      	bne.n	80065ee <__cvt+0x88>
 80065d4:	2200      	movs	r2, #0
 80065d6:	2300      	movs	r3, #0
 80065d8:	0020      	movs	r0, r4
 80065da:	0031      	movs	r1, r6
 80065dc:	f7f9 ff36 	bl	800044c <__aeabi_dcmpeq>
 80065e0:	2800      	cmp	r0, #0
 80065e2:	d104      	bne.n	80065ee <__cvt+0x88>
 80065e4:	2301      	movs	r3, #1
 80065e6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80065e8:	1a9b      	subs	r3, r3, r2
 80065ea:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80065ec:	6013      	str	r3, [r2, #0]
 80065ee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80065f0:	9a07      	ldr	r2, [sp, #28]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	18d3      	adds	r3, r2, r3
 80065f6:	9307      	str	r3, [sp, #28]
 80065f8:	2200      	movs	r2, #0
 80065fa:	2300      	movs	r3, #0
 80065fc:	0020      	movs	r0, r4
 80065fe:	0031      	movs	r1, r6
 8006600:	f7f9 ff24 	bl	800044c <__aeabi_dcmpeq>
 8006604:	2800      	cmp	r0, #0
 8006606:	d001      	beq.n	800660c <__cvt+0xa6>
 8006608:	9b07      	ldr	r3, [sp, #28]
 800660a:	9309      	str	r3, [sp, #36]	; 0x24
 800660c:	2230      	movs	r2, #48	; 0x30
 800660e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006610:	9907      	ldr	r1, [sp, #28]
 8006612:	428b      	cmp	r3, r1
 8006614:	d306      	bcc.n	8006624 <__cvt+0xbe>
 8006616:	0028      	movs	r0, r5
 8006618:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800661a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800661c:	1b5b      	subs	r3, r3, r5
 800661e:	6013      	str	r3, [r2, #0]
 8006620:	b00b      	add	sp, #44	; 0x2c
 8006622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006624:	1c59      	adds	r1, r3, #1
 8006626:	9109      	str	r1, [sp, #36]	; 0x24
 8006628:	701a      	strb	r2, [r3, #0]
 800662a:	e7f0      	b.n	800660e <__cvt+0xa8>

0800662c <__exponent>:
 800662c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800662e:	1c83      	adds	r3, r0, #2
 8006630:	b087      	sub	sp, #28
 8006632:	9303      	str	r3, [sp, #12]
 8006634:	0005      	movs	r5, r0
 8006636:	000c      	movs	r4, r1
 8006638:	232b      	movs	r3, #43	; 0x2b
 800663a:	7002      	strb	r2, [r0, #0]
 800663c:	2900      	cmp	r1, #0
 800663e:	da01      	bge.n	8006644 <__exponent+0x18>
 8006640:	424c      	negs	r4, r1
 8006642:	3302      	adds	r3, #2
 8006644:	706b      	strb	r3, [r5, #1]
 8006646:	2c09      	cmp	r4, #9
 8006648:	dd31      	ble.n	80066ae <__exponent+0x82>
 800664a:	270a      	movs	r7, #10
 800664c:	ab04      	add	r3, sp, #16
 800664e:	1dde      	adds	r6, r3, #7
 8006650:	0020      	movs	r0, r4
 8006652:	0039      	movs	r1, r7
 8006654:	9601      	str	r6, [sp, #4]
 8006656:	f7f9 fee3 	bl	8000420 <__aeabi_idivmod>
 800665a:	3e01      	subs	r6, #1
 800665c:	3130      	adds	r1, #48	; 0x30
 800665e:	0020      	movs	r0, r4
 8006660:	7031      	strb	r1, [r6, #0]
 8006662:	0039      	movs	r1, r7
 8006664:	9402      	str	r4, [sp, #8]
 8006666:	f7f9 fdf5 	bl	8000254 <__divsi3>
 800666a:	9b02      	ldr	r3, [sp, #8]
 800666c:	0004      	movs	r4, r0
 800666e:	2b63      	cmp	r3, #99	; 0x63
 8006670:	dcee      	bgt.n	8006650 <__exponent+0x24>
 8006672:	9b01      	ldr	r3, [sp, #4]
 8006674:	3430      	adds	r4, #48	; 0x30
 8006676:	1e9a      	subs	r2, r3, #2
 8006678:	0013      	movs	r3, r2
 800667a:	9903      	ldr	r1, [sp, #12]
 800667c:	7014      	strb	r4, [r2, #0]
 800667e:	a804      	add	r0, sp, #16
 8006680:	3007      	adds	r0, #7
 8006682:	4298      	cmp	r0, r3
 8006684:	d80e      	bhi.n	80066a4 <__exponent+0x78>
 8006686:	ab04      	add	r3, sp, #16
 8006688:	3307      	adds	r3, #7
 800668a:	2000      	movs	r0, #0
 800668c:	429a      	cmp	r2, r3
 800668e:	d804      	bhi.n	800669a <__exponent+0x6e>
 8006690:	ab04      	add	r3, sp, #16
 8006692:	3009      	adds	r0, #9
 8006694:	18c0      	adds	r0, r0, r3
 8006696:	9b01      	ldr	r3, [sp, #4]
 8006698:	1ac0      	subs	r0, r0, r3
 800669a:	9b03      	ldr	r3, [sp, #12]
 800669c:	1818      	adds	r0, r3, r0
 800669e:	1b40      	subs	r0, r0, r5
 80066a0:	b007      	add	sp, #28
 80066a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066a4:	7818      	ldrb	r0, [r3, #0]
 80066a6:	3301      	adds	r3, #1
 80066a8:	7008      	strb	r0, [r1, #0]
 80066aa:	3101      	adds	r1, #1
 80066ac:	e7e7      	b.n	800667e <__exponent+0x52>
 80066ae:	2330      	movs	r3, #48	; 0x30
 80066b0:	18e4      	adds	r4, r4, r3
 80066b2:	70ab      	strb	r3, [r5, #2]
 80066b4:	1d28      	adds	r0, r5, #4
 80066b6:	70ec      	strb	r4, [r5, #3]
 80066b8:	e7f1      	b.n	800669e <__exponent+0x72>
	...

080066bc <_printf_float>:
 80066bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066be:	b095      	sub	sp, #84	; 0x54
 80066c0:	000c      	movs	r4, r1
 80066c2:	9209      	str	r2, [sp, #36]	; 0x24
 80066c4:	001e      	movs	r6, r3
 80066c6:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 80066c8:	0007      	movs	r7, r0
 80066ca:	f001 fa95 	bl	8007bf8 <_localeconv_r>
 80066ce:	6803      	ldr	r3, [r0, #0]
 80066d0:	0018      	movs	r0, r3
 80066d2:	930c      	str	r3, [sp, #48]	; 0x30
 80066d4:	f7f9 fd18 	bl	8000108 <strlen>
 80066d8:	2300      	movs	r3, #0
 80066da:	9312      	str	r3, [sp, #72]	; 0x48
 80066dc:	7e23      	ldrb	r3, [r4, #24]
 80066de:	2207      	movs	r2, #7
 80066e0:	930a      	str	r3, [sp, #40]	; 0x28
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	900e      	str	r0, [sp, #56]	; 0x38
 80066e6:	930d      	str	r3, [sp, #52]	; 0x34
 80066e8:	990d      	ldr	r1, [sp, #52]	; 0x34
 80066ea:	682b      	ldr	r3, [r5, #0]
 80066ec:	05c9      	lsls	r1, r1, #23
 80066ee:	d547      	bpl.n	8006780 <_printf_float+0xc4>
 80066f0:	189b      	adds	r3, r3, r2
 80066f2:	4393      	bics	r3, r2
 80066f4:	001a      	movs	r2, r3
 80066f6:	3208      	adds	r2, #8
 80066f8:	602a      	str	r2, [r5, #0]
 80066fa:	681a      	ldr	r2, [r3, #0]
 80066fc:	685b      	ldr	r3, [r3, #4]
 80066fe:	64a2      	str	r2, [r4, #72]	; 0x48
 8006700:	64e3      	str	r3, [r4, #76]	; 0x4c
 8006702:	2201      	movs	r2, #1
 8006704:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8006706:	6ce5      	ldr	r5, [r4, #76]	; 0x4c
 8006708:	930b      	str	r3, [sp, #44]	; 0x2c
 800670a:	006b      	lsls	r3, r5, #1
 800670c:	085b      	lsrs	r3, r3, #1
 800670e:	930f      	str	r3, [sp, #60]	; 0x3c
 8006710:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006712:	4ba7      	ldr	r3, [pc, #668]	; (80069b0 <_printf_float+0x2f4>)
 8006714:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006716:	4252      	negs	r2, r2
 8006718:	f7fb ff26 	bl	8002568 <__aeabi_dcmpun>
 800671c:	2800      	cmp	r0, #0
 800671e:	d131      	bne.n	8006784 <_printf_float+0xc8>
 8006720:	2201      	movs	r2, #1
 8006722:	4ba3      	ldr	r3, [pc, #652]	; (80069b0 <_printf_float+0x2f4>)
 8006724:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8006726:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8006728:	4252      	negs	r2, r2
 800672a:	f7f9 fe9f 	bl	800046c <__aeabi_dcmple>
 800672e:	2800      	cmp	r0, #0
 8006730:	d128      	bne.n	8006784 <_printf_float+0xc8>
 8006732:	2200      	movs	r2, #0
 8006734:	2300      	movs	r3, #0
 8006736:	0029      	movs	r1, r5
 8006738:	980b      	ldr	r0, [sp, #44]	; 0x2c
 800673a:	f7f9 fe8d 	bl	8000458 <__aeabi_dcmplt>
 800673e:	2800      	cmp	r0, #0
 8006740:	d003      	beq.n	800674a <_printf_float+0x8e>
 8006742:	0023      	movs	r3, r4
 8006744:	222d      	movs	r2, #45	; 0x2d
 8006746:	3343      	adds	r3, #67	; 0x43
 8006748:	701a      	strb	r2, [r3, #0]
 800674a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800674c:	4d99      	ldr	r5, [pc, #612]	; (80069b4 <_printf_float+0x2f8>)
 800674e:	2b47      	cmp	r3, #71	; 0x47
 8006750:	d900      	bls.n	8006754 <_printf_float+0x98>
 8006752:	4d99      	ldr	r5, [pc, #612]	; (80069b8 <_printf_float+0x2fc>)
 8006754:	2303      	movs	r3, #3
 8006756:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006758:	6123      	str	r3, [r4, #16]
 800675a:	3301      	adds	r3, #1
 800675c:	439a      	bics	r2, r3
 800675e:	2300      	movs	r3, #0
 8006760:	6022      	str	r2, [r4, #0]
 8006762:	930b      	str	r3, [sp, #44]	; 0x2c
 8006764:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006766:	0021      	movs	r1, r4
 8006768:	0038      	movs	r0, r7
 800676a:	9600      	str	r6, [sp, #0]
 800676c:	aa13      	add	r2, sp, #76	; 0x4c
 800676e:	f000 f9e7 	bl	8006b40 <_printf_common>
 8006772:	1c43      	adds	r3, r0, #1
 8006774:	d000      	beq.n	8006778 <_printf_float+0xbc>
 8006776:	e0a2      	b.n	80068be <_printf_float+0x202>
 8006778:	2001      	movs	r0, #1
 800677a:	4240      	negs	r0, r0
 800677c:	b015      	add	sp, #84	; 0x54
 800677e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006780:	3307      	adds	r3, #7
 8006782:	e7b6      	b.n	80066f2 <_printf_float+0x36>
 8006784:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006786:	002b      	movs	r3, r5
 8006788:	0010      	movs	r0, r2
 800678a:	0029      	movs	r1, r5
 800678c:	f7fb feec 	bl	8002568 <__aeabi_dcmpun>
 8006790:	2800      	cmp	r0, #0
 8006792:	d00b      	beq.n	80067ac <_printf_float+0xf0>
 8006794:	2d00      	cmp	r5, #0
 8006796:	da03      	bge.n	80067a0 <_printf_float+0xe4>
 8006798:	0023      	movs	r3, r4
 800679a:	222d      	movs	r2, #45	; 0x2d
 800679c:	3343      	adds	r3, #67	; 0x43
 800679e:	701a      	strb	r2, [r3, #0]
 80067a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80067a2:	4d86      	ldr	r5, [pc, #536]	; (80069bc <_printf_float+0x300>)
 80067a4:	2b47      	cmp	r3, #71	; 0x47
 80067a6:	d9d5      	bls.n	8006754 <_printf_float+0x98>
 80067a8:	4d85      	ldr	r5, [pc, #532]	; (80069c0 <_printf_float+0x304>)
 80067aa:	e7d3      	b.n	8006754 <_printf_float+0x98>
 80067ac:	2220      	movs	r2, #32
 80067ae:	990a      	ldr	r1, [sp, #40]	; 0x28
 80067b0:	6863      	ldr	r3, [r4, #4]
 80067b2:	4391      	bics	r1, r2
 80067b4:	910f      	str	r1, [sp, #60]	; 0x3c
 80067b6:	1c5a      	adds	r2, r3, #1
 80067b8:	d149      	bne.n	800684e <_printf_float+0x192>
 80067ba:	3307      	adds	r3, #7
 80067bc:	6063      	str	r3, [r4, #4]
 80067be:	2380      	movs	r3, #128	; 0x80
 80067c0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80067c2:	00db      	lsls	r3, r3, #3
 80067c4:	4313      	orrs	r3, r2
 80067c6:	2200      	movs	r2, #0
 80067c8:	9206      	str	r2, [sp, #24]
 80067ca:	aa12      	add	r2, sp, #72	; 0x48
 80067cc:	9205      	str	r2, [sp, #20]
 80067ce:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80067d0:	a908      	add	r1, sp, #32
 80067d2:	9204      	str	r2, [sp, #16]
 80067d4:	aa11      	add	r2, sp, #68	; 0x44
 80067d6:	9203      	str	r2, [sp, #12]
 80067d8:	2223      	movs	r2, #35	; 0x23
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	9301      	str	r3, [sp, #4]
 80067de:	6863      	ldr	r3, [r4, #4]
 80067e0:	1852      	adds	r2, r2, r1
 80067e2:	9202      	str	r2, [sp, #8]
 80067e4:	9300      	str	r3, [sp, #0]
 80067e6:	0038      	movs	r0, r7
 80067e8:	002b      	movs	r3, r5
 80067ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80067ec:	f7ff febb 	bl	8006566 <__cvt>
 80067f0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80067f2:	0005      	movs	r5, r0
 80067f4:	9911      	ldr	r1, [sp, #68]	; 0x44
 80067f6:	2b47      	cmp	r3, #71	; 0x47
 80067f8:	d108      	bne.n	800680c <_printf_float+0x150>
 80067fa:	1ccb      	adds	r3, r1, #3
 80067fc:	db02      	blt.n	8006804 <_printf_float+0x148>
 80067fe:	6863      	ldr	r3, [r4, #4]
 8006800:	4299      	cmp	r1, r3
 8006802:	dd48      	ble.n	8006896 <_printf_float+0x1da>
 8006804:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006806:	3b02      	subs	r3, #2
 8006808:	b2db      	uxtb	r3, r3
 800680a:	930a      	str	r3, [sp, #40]	; 0x28
 800680c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800680e:	2b65      	cmp	r3, #101	; 0x65
 8006810:	d824      	bhi.n	800685c <_printf_float+0x1a0>
 8006812:	0020      	movs	r0, r4
 8006814:	001a      	movs	r2, r3
 8006816:	3901      	subs	r1, #1
 8006818:	3050      	adds	r0, #80	; 0x50
 800681a:	9111      	str	r1, [sp, #68]	; 0x44
 800681c:	f7ff ff06 	bl	800662c <__exponent>
 8006820:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006822:	900b      	str	r0, [sp, #44]	; 0x2c
 8006824:	1813      	adds	r3, r2, r0
 8006826:	6123      	str	r3, [r4, #16]
 8006828:	2a01      	cmp	r2, #1
 800682a:	dc02      	bgt.n	8006832 <_printf_float+0x176>
 800682c:	6822      	ldr	r2, [r4, #0]
 800682e:	07d2      	lsls	r2, r2, #31
 8006830:	d501      	bpl.n	8006836 <_printf_float+0x17a>
 8006832:	3301      	adds	r3, #1
 8006834:	6123      	str	r3, [r4, #16]
 8006836:	2323      	movs	r3, #35	; 0x23
 8006838:	aa08      	add	r2, sp, #32
 800683a:	189b      	adds	r3, r3, r2
 800683c:	781b      	ldrb	r3, [r3, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d100      	bne.n	8006844 <_printf_float+0x188>
 8006842:	e78f      	b.n	8006764 <_printf_float+0xa8>
 8006844:	0023      	movs	r3, r4
 8006846:	222d      	movs	r2, #45	; 0x2d
 8006848:	3343      	adds	r3, #67	; 0x43
 800684a:	701a      	strb	r2, [r3, #0]
 800684c:	e78a      	b.n	8006764 <_printf_float+0xa8>
 800684e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8006850:	2a47      	cmp	r2, #71	; 0x47
 8006852:	d1b4      	bne.n	80067be <_printf_float+0x102>
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1b2      	bne.n	80067be <_printf_float+0x102>
 8006858:	3301      	adds	r3, #1
 800685a:	e7af      	b.n	80067bc <_printf_float+0x100>
 800685c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800685e:	2b66      	cmp	r3, #102	; 0x66
 8006860:	d11b      	bne.n	800689a <_printf_float+0x1de>
 8006862:	6863      	ldr	r3, [r4, #4]
 8006864:	2900      	cmp	r1, #0
 8006866:	dd0d      	ble.n	8006884 <_printf_float+0x1c8>
 8006868:	6121      	str	r1, [r4, #16]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <_printf_float+0x1b8>
 800686e:	6822      	ldr	r2, [r4, #0]
 8006870:	07d2      	lsls	r2, r2, #31
 8006872:	d502      	bpl.n	800687a <_printf_float+0x1be>
 8006874:	3301      	adds	r3, #1
 8006876:	1859      	adds	r1, r3, r1
 8006878:	6121      	str	r1, [r4, #16]
 800687a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800687c:	65a3      	str	r3, [r4, #88]	; 0x58
 800687e:	2300      	movs	r3, #0
 8006880:	930b      	str	r3, [sp, #44]	; 0x2c
 8006882:	e7d8      	b.n	8006836 <_printf_float+0x17a>
 8006884:	2b00      	cmp	r3, #0
 8006886:	d103      	bne.n	8006890 <_printf_float+0x1d4>
 8006888:	2201      	movs	r2, #1
 800688a:	6821      	ldr	r1, [r4, #0]
 800688c:	4211      	tst	r1, r2
 800688e:	d000      	beq.n	8006892 <_printf_float+0x1d6>
 8006890:	1c9a      	adds	r2, r3, #2
 8006892:	6122      	str	r2, [r4, #16]
 8006894:	e7f1      	b.n	800687a <_printf_float+0x1be>
 8006896:	2367      	movs	r3, #103	; 0x67
 8006898:	930a      	str	r3, [sp, #40]	; 0x28
 800689a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800689c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800689e:	4293      	cmp	r3, r2
 80068a0:	db06      	blt.n	80068b0 <_printf_float+0x1f4>
 80068a2:	6822      	ldr	r2, [r4, #0]
 80068a4:	6123      	str	r3, [r4, #16]
 80068a6:	07d2      	lsls	r2, r2, #31
 80068a8:	d5e7      	bpl.n	800687a <_printf_float+0x1be>
 80068aa:	3301      	adds	r3, #1
 80068ac:	6123      	str	r3, [r4, #16]
 80068ae:	e7e4      	b.n	800687a <_printf_float+0x1be>
 80068b0:	2101      	movs	r1, #1
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	dc01      	bgt.n	80068ba <_printf_float+0x1fe>
 80068b6:	1849      	adds	r1, r1, r1
 80068b8:	1ac9      	subs	r1, r1, r3
 80068ba:	1852      	adds	r2, r2, r1
 80068bc:	e7e9      	b.n	8006892 <_printf_float+0x1d6>
 80068be:	6822      	ldr	r2, [r4, #0]
 80068c0:	0553      	lsls	r3, r2, #21
 80068c2:	d407      	bmi.n	80068d4 <_printf_float+0x218>
 80068c4:	6923      	ldr	r3, [r4, #16]
 80068c6:	002a      	movs	r2, r5
 80068c8:	0038      	movs	r0, r7
 80068ca:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068cc:	47b0      	blx	r6
 80068ce:	1c43      	adds	r3, r0, #1
 80068d0:	d128      	bne.n	8006924 <_printf_float+0x268>
 80068d2:	e751      	b.n	8006778 <_printf_float+0xbc>
 80068d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80068d6:	2b65      	cmp	r3, #101	; 0x65
 80068d8:	d800      	bhi.n	80068dc <_printf_float+0x220>
 80068da:	e0e1      	b.n	8006aa0 <_printf_float+0x3e4>
 80068dc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 80068de:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80068e0:	2200      	movs	r2, #0
 80068e2:	2300      	movs	r3, #0
 80068e4:	f7f9 fdb2 	bl	800044c <__aeabi_dcmpeq>
 80068e8:	2800      	cmp	r0, #0
 80068ea:	d031      	beq.n	8006950 <_printf_float+0x294>
 80068ec:	2301      	movs	r3, #1
 80068ee:	0038      	movs	r0, r7
 80068f0:	4a34      	ldr	r2, [pc, #208]	; (80069c4 <_printf_float+0x308>)
 80068f2:	9909      	ldr	r1, [sp, #36]	; 0x24
 80068f4:	47b0      	blx	r6
 80068f6:	1c43      	adds	r3, r0, #1
 80068f8:	d100      	bne.n	80068fc <_printf_float+0x240>
 80068fa:	e73d      	b.n	8006778 <_printf_float+0xbc>
 80068fc:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80068fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006900:	4293      	cmp	r3, r2
 8006902:	db02      	blt.n	800690a <_printf_float+0x24e>
 8006904:	6823      	ldr	r3, [r4, #0]
 8006906:	07db      	lsls	r3, r3, #31
 8006908:	d50c      	bpl.n	8006924 <_printf_float+0x268>
 800690a:	0038      	movs	r0, r7
 800690c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800690e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006910:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006912:	47b0      	blx	r6
 8006914:	2500      	movs	r5, #0
 8006916:	1c43      	adds	r3, r0, #1
 8006918:	d100      	bne.n	800691c <_printf_float+0x260>
 800691a:	e72d      	b.n	8006778 <_printf_float+0xbc>
 800691c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800691e:	3b01      	subs	r3, #1
 8006920:	42ab      	cmp	r3, r5
 8006922:	dc0a      	bgt.n	800693a <_printf_float+0x27e>
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	079b      	lsls	r3, r3, #30
 8006928:	d500      	bpl.n	800692c <_printf_float+0x270>
 800692a:	e106      	b.n	8006b3a <_printf_float+0x47e>
 800692c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800692e:	68e0      	ldr	r0, [r4, #12]
 8006930:	4298      	cmp	r0, r3
 8006932:	db00      	blt.n	8006936 <_printf_float+0x27a>
 8006934:	e722      	b.n	800677c <_printf_float+0xc0>
 8006936:	0018      	movs	r0, r3
 8006938:	e720      	b.n	800677c <_printf_float+0xc0>
 800693a:	0022      	movs	r2, r4
 800693c:	2301      	movs	r3, #1
 800693e:	0038      	movs	r0, r7
 8006940:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006942:	321a      	adds	r2, #26
 8006944:	47b0      	blx	r6
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	d100      	bne.n	800694c <_printf_float+0x290>
 800694a:	e715      	b.n	8006778 <_printf_float+0xbc>
 800694c:	3501      	adds	r5, #1
 800694e:	e7e5      	b.n	800691c <_printf_float+0x260>
 8006950:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006952:	2b00      	cmp	r3, #0
 8006954:	dc38      	bgt.n	80069c8 <_printf_float+0x30c>
 8006956:	2301      	movs	r3, #1
 8006958:	0038      	movs	r0, r7
 800695a:	4a1a      	ldr	r2, [pc, #104]	; (80069c4 <_printf_float+0x308>)
 800695c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800695e:	47b0      	blx	r6
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d100      	bne.n	8006966 <_printf_float+0x2aa>
 8006964:	e708      	b.n	8006778 <_printf_float+0xbc>
 8006966:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8006968:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800696a:	4313      	orrs	r3, r2
 800696c:	d102      	bne.n	8006974 <_printf_float+0x2b8>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	07db      	lsls	r3, r3, #31
 8006972:	d5d7      	bpl.n	8006924 <_printf_float+0x268>
 8006974:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006976:	0038      	movs	r0, r7
 8006978:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800697a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800697c:	47b0      	blx	r6
 800697e:	1c43      	adds	r3, r0, #1
 8006980:	d100      	bne.n	8006984 <_printf_float+0x2c8>
 8006982:	e6f9      	b.n	8006778 <_printf_float+0xbc>
 8006984:	2300      	movs	r3, #0
 8006986:	930a      	str	r3, [sp, #40]	; 0x28
 8006988:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800698a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800698c:	425b      	negs	r3, r3
 800698e:	4293      	cmp	r3, r2
 8006990:	dc01      	bgt.n	8006996 <_printf_float+0x2da>
 8006992:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006994:	e797      	b.n	80068c6 <_printf_float+0x20a>
 8006996:	0022      	movs	r2, r4
 8006998:	2301      	movs	r3, #1
 800699a:	0038      	movs	r0, r7
 800699c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800699e:	321a      	adds	r2, #26
 80069a0:	47b0      	blx	r6
 80069a2:	1c43      	adds	r3, r0, #1
 80069a4:	d100      	bne.n	80069a8 <_printf_float+0x2ec>
 80069a6:	e6e7      	b.n	8006778 <_printf_float+0xbc>
 80069a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069aa:	3301      	adds	r3, #1
 80069ac:	e7eb      	b.n	8006986 <_printf_float+0x2ca>
 80069ae:	46c0      	nop			; (mov r8, r8)
 80069b0:	7fefffff 	.word	0x7fefffff
 80069b4:	08009a6c 	.word	0x08009a6c
 80069b8:	08009a70 	.word	0x08009a70
 80069bc:	08009a74 	.word	0x08009a74
 80069c0:	08009a78 	.word	0x08009a78
 80069c4:	08009a7c 	.word	0x08009a7c
 80069c8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069cc:	920a      	str	r2, [sp, #40]	; 0x28
 80069ce:	429a      	cmp	r2, r3
 80069d0:	dd00      	ble.n	80069d4 <_printf_float+0x318>
 80069d2:	930a      	str	r3, [sp, #40]	; 0x28
 80069d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dc3c      	bgt.n	8006a54 <_printf_float+0x398>
 80069da:	2300      	movs	r3, #0
 80069dc:	930d      	str	r3, [sp, #52]	; 0x34
 80069de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069e0:	43db      	mvns	r3, r3
 80069e2:	17db      	asrs	r3, r3, #31
 80069e4:	930f      	str	r3, [sp, #60]	; 0x3c
 80069e6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80069e8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80069ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80069ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80069ee:	4013      	ands	r3, r2
 80069f0:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80069f2:	1ad3      	subs	r3, r2, r3
 80069f4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80069f6:	4293      	cmp	r3, r2
 80069f8:	dc34      	bgt.n	8006a64 <_printf_float+0x3a8>
 80069fa:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80069fc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80069fe:	4293      	cmp	r3, r2
 8006a00:	db3d      	blt.n	8006a7e <_printf_float+0x3c2>
 8006a02:	6823      	ldr	r3, [r4, #0]
 8006a04:	07db      	lsls	r3, r3, #31
 8006a06:	d43a      	bmi.n	8006a7e <_printf_float+0x3c2>
 8006a08:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006a0a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a0c:	9911      	ldr	r1, [sp, #68]	; 0x44
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	1a52      	subs	r2, r2, r1
 8006a12:	920a      	str	r2, [sp, #40]	; 0x28
 8006a14:	429a      	cmp	r2, r3
 8006a16:	dd00      	ble.n	8006a1a <_printf_float+0x35e>
 8006a18:	930a      	str	r3, [sp, #40]	; 0x28
 8006a1a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	dc36      	bgt.n	8006a8e <_printf_float+0x3d2>
 8006a20:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a22:	2500      	movs	r5, #0
 8006a24:	43db      	mvns	r3, r3
 8006a26:	17db      	asrs	r3, r3, #31
 8006a28:	930b      	str	r3, [sp, #44]	; 0x2c
 8006a2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8006a2c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006a2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8006a30:	1a9b      	subs	r3, r3, r2
 8006a32:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006a34:	400a      	ands	r2, r1
 8006a36:	1a9b      	subs	r3, r3, r2
 8006a38:	42ab      	cmp	r3, r5
 8006a3a:	dc00      	bgt.n	8006a3e <_printf_float+0x382>
 8006a3c:	e772      	b.n	8006924 <_printf_float+0x268>
 8006a3e:	0022      	movs	r2, r4
 8006a40:	2301      	movs	r3, #1
 8006a42:	0038      	movs	r0, r7
 8006a44:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a46:	321a      	adds	r2, #26
 8006a48:	47b0      	blx	r6
 8006a4a:	1c43      	adds	r3, r0, #1
 8006a4c:	d100      	bne.n	8006a50 <_printf_float+0x394>
 8006a4e:	e693      	b.n	8006778 <_printf_float+0xbc>
 8006a50:	3501      	adds	r5, #1
 8006a52:	e7ea      	b.n	8006a2a <_printf_float+0x36e>
 8006a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a56:	002a      	movs	r2, r5
 8006a58:	0038      	movs	r0, r7
 8006a5a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a5c:	47b0      	blx	r6
 8006a5e:	1c43      	adds	r3, r0, #1
 8006a60:	d1bb      	bne.n	80069da <_printf_float+0x31e>
 8006a62:	e689      	b.n	8006778 <_printf_float+0xbc>
 8006a64:	0022      	movs	r2, r4
 8006a66:	2301      	movs	r3, #1
 8006a68:	0038      	movs	r0, r7
 8006a6a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a6c:	321a      	adds	r2, #26
 8006a6e:	47b0      	blx	r6
 8006a70:	1c43      	adds	r3, r0, #1
 8006a72:	d100      	bne.n	8006a76 <_printf_float+0x3ba>
 8006a74:	e680      	b.n	8006778 <_printf_float+0xbc>
 8006a76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006a78:	3301      	adds	r3, #1
 8006a7a:	930d      	str	r3, [sp, #52]	; 0x34
 8006a7c:	e7b3      	b.n	80069e6 <_printf_float+0x32a>
 8006a7e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006a80:	0038      	movs	r0, r7
 8006a82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006a84:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a86:	47b0      	blx	r6
 8006a88:	1c43      	adds	r3, r0, #1
 8006a8a:	d1bd      	bne.n	8006a08 <_printf_float+0x34c>
 8006a8c:	e674      	b.n	8006778 <_printf_float+0xbc>
 8006a8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006a90:	0038      	movs	r0, r7
 8006a92:	18ea      	adds	r2, r5, r3
 8006a94:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006a96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8006a98:	47b0      	blx	r6
 8006a9a:	1c43      	adds	r3, r0, #1
 8006a9c:	d1c0      	bne.n	8006a20 <_printf_float+0x364>
 8006a9e:	e66b      	b.n	8006778 <_printf_float+0xbc>
 8006aa0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006aa2:	2b01      	cmp	r3, #1
 8006aa4:	dc02      	bgt.n	8006aac <_printf_float+0x3f0>
 8006aa6:	2301      	movs	r3, #1
 8006aa8:	421a      	tst	r2, r3
 8006aaa:	d034      	beq.n	8006b16 <_printf_float+0x45a>
 8006aac:	2301      	movs	r3, #1
 8006aae:	002a      	movs	r2, r5
 8006ab0:	0038      	movs	r0, r7
 8006ab2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ab4:	47b0      	blx	r6
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	d100      	bne.n	8006abc <_printf_float+0x400>
 8006aba:	e65d      	b.n	8006778 <_printf_float+0xbc>
 8006abc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006abe:	0038      	movs	r0, r7
 8006ac0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ac4:	47b0      	blx	r6
 8006ac6:	1c43      	adds	r3, r0, #1
 8006ac8:	d100      	bne.n	8006acc <_printf_float+0x410>
 8006aca:	e655      	b.n	8006778 <_printf_float+0xbc>
 8006acc:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006ace:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	2300      	movs	r3, #0
 8006ad4:	f7f9 fcba 	bl	800044c <__aeabi_dcmpeq>
 8006ad8:	2800      	cmp	r0, #0
 8006ada:	d11a      	bne.n	8006b12 <_printf_float+0x456>
 8006adc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006ade:	1c6a      	adds	r2, r5, #1
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	0038      	movs	r0, r7
 8006ae4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006ae6:	47b0      	blx	r6
 8006ae8:	1c43      	adds	r3, r0, #1
 8006aea:	d10e      	bne.n	8006b0a <_printf_float+0x44e>
 8006aec:	e644      	b.n	8006778 <_printf_float+0xbc>
 8006aee:	0022      	movs	r2, r4
 8006af0:	2301      	movs	r3, #1
 8006af2:	0038      	movs	r0, r7
 8006af4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006af6:	321a      	adds	r2, #26
 8006af8:	47b0      	blx	r6
 8006afa:	1c43      	adds	r3, r0, #1
 8006afc:	d100      	bne.n	8006b00 <_printf_float+0x444>
 8006afe:	e63b      	b.n	8006778 <_printf_float+0xbc>
 8006b00:	3501      	adds	r5, #1
 8006b02:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006b04:	3b01      	subs	r3, #1
 8006b06:	42ab      	cmp	r3, r5
 8006b08:	dcf1      	bgt.n	8006aee <_printf_float+0x432>
 8006b0a:	0022      	movs	r2, r4
 8006b0c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006b0e:	3250      	adds	r2, #80	; 0x50
 8006b10:	e6da      	b.n	80068c8 <_printf_float+0x20c>
 8006b12:	2500      	movs	r5, #0
 8006b14:	e7f5      	b.n	8006b02 <_printf_float+0x446>
 8006b16:	002a      	movs	r2, r5
 8006b18:	e7e3      	b.n	8006ae2 <_printf_float+0x426>
 8006b1a:	0022      	movs	r2, r4
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	0038      	movs	r0, r7
 8006b20:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006b22:	3219      	adds	r2, #25
 8006b24:	47b0      	blx	r6
 8006b26:	1c43      	adds	r3, r0, #1
 8006b28:	d100      	bne.n	8006b2c <_printf_float+0x470>
 8006b2a:	e625      	b.n	8006778 <_printf_float+0xbc>
 8006b2c:	3501      	adds	r5, #1
 8006b2e:	68e3      	ldr	r3, [r4, #12]
 8006b30:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006b32:	1a9b      	subs	r3, r3, r2
 8006b34:	42ab      	cmp	r3, r5
 8006b36:	dcf0      	bgt.n	8006b1a <_printf_float+0x45e>
 8006b38:	e6f8      	b.n	800692c <_printf_float+0x270>
 8006b3a:	2500      	movs	r5, #0
 8006b3c:	e7f7      	b.n	8006b2e <_printf_float+0x472>
 8006b3e:	46c0      	nop			; (mov r8, r8)

08006b40 <_printf_common>:
 8006b40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006b42:	0015      	movs	r5, r2
 8006b44:	9301      	str	r3, [sp, #4]
 8006b46:	688a      	ldr	r2, [r1, #8]
 8006b48:	690b      	ldr	r3, [r1, #16]
 8006b4a:	000c      	movs	r4, r1
 8006b4c:	9000      	str	r0, [sp, #0]
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	da00      	bge.n	8006b54 <_printf_common+0x14>
 8006b52:	0013      	movs	r3, r2
 8006b54:	0022      	movs	r2, r4
 8006b56:	602b      	str	r3, [r5, #0]
 8006b58:	3243      	adds	r2, #67	; 0x43
 8006b5a:	7812      	ldrb	r2, [r2, #0]
 8006b5c:	2a00      	cmp	r2, #0
 8006b5e:	d001      	beq.n	8006b64 <_printf_common+0x24>
 8006b60:	3301      	adds	r3, #1
 8006b62:	602b      	str	r3, [r5, #0]
 8006b64:	6823      	ldr	r3, [r4, #0]
 8006b66:	069b      	lsls	r3, r3, #26
 8006b68:	d502      	bpl.n	8006b70 <_printf_common+0x30>
 8006b6a:	682b      	ldr	r3, [r5, #0]
 8006b6c:	3302      	adds	r3, #2
 8006b6e:	602b      	str	r3, [r5, #0]
 8006b70:	6822      	ldr	r2, [r4, #0]
 8006b72:	2306      	movs	r3, #6
 8006b74:	0017      	movs	r7, r2
 8006b76:	401f      	ands	r7, r3
 8006b78:	421a      	tst	r2, r3
 8006b7a:	d027      	beq.n	8006bcc <_printf_common+0x8c>
 8006b7c:	0023      	movs	r3, r4
 8006b7e:	3343      	adds	r3, #67	; 0x43
 8006b80:	781b      	ldrb	r3, [r3, #0]
 8006b82:	1e5a      	subs	r2, r3, #1
 8006b84:	4193      	sbcs	r3, r2
 8006b86:	6822      	ldr	r2, [r4, #0]
 8006b88:	0692      	lsls	r2, r2, #26
 8006b8a:	d430      	bmi.n	8006bee <_printf_common+0xae>
 8006b8c:	0022      	movs	r2, r4
 8006b8e:	9901      	ldr	r1, [sp, #4]
 8006b90:	9800      	ldr	r0, [sp, #0]
 8006b92:	9e08      	ldr	r6, [sp, #32]
 8006b94:	3243      	adds	r2, #67	; 0x43
 8006b96:	47b0      	blx	r6
 8006b98:	1c43      	adds	r3, r0, #1
 8006b9a:	d025      	beq.n	8006be8 <_printf_common+0xa8>
 8006b9c:	2306      	movs	r3, #6
 8006b9e:	6820      	ldr	r0, [r4, #0]
 8006ba0:	682a      	ldr	r2, [r5, #0]
 8006ba2:	68e1      	ldr	r1, [r4, #12]
 8006ba4:	2500      	movs	r5, #0
 8006ba6:	4003      	ands	r3, r0
 8006ba8:	2b04      	cmp	r3, #4
 8006baa:	d103      	bne.n	8006bb4 <_printf_common+0x74>
 8006bac:	1a8d      	subs	r5, r1, r2
 8006bae:	43eb      	mvns	r3, r5
 8006bb0:	17db      	asrs	r3, r3, #31
 8006bb2:	401d      	ands	r5, r3
 8006bb4:	68a3      	ldr	r3, [r4, #8]
 8006bb6:	6922      	ldr	r2, [r4, #16]
 8006bb8:	4293      	cmp	r3, r2
 8006bba:	dd01      	ble.n	8006bc0 <_printf_common+0x80>
 8006bbc:	1a9b      	subs	r3, r3, r2
 8006bbe:	18ed      	adds	r5, r5, r3
 8006bc0:	2700      	movs	r7, #0
 8006bc2:	42bd      	cmp	r5, r7
 8006bc4:	d120      	bne.n	8006c08 <_printf_common+0xc8>
 8006bc6:	2000      	movs	r0, #0
 8006bc8:	e010      	b.n	8006bec <_printf_common+0xac>
 8006bca:	3701      	adds	r7, #1
 8006bcc:	68e3      	ldr	r3, [r4, #12]
 8006bce:	682a      	ldr	r2, [r5, #0]
 8006bd0:	1a9b      	subs	r3, r3, r2
 8006bd2:	42bb      	cmp	r3, r7
 8006bd4:	ddd2      	ble.n	8006b7c <_printf_common+0x3c>
 8006bd6:	0022      	movs	r2, r4
 8006bd8:	2301      	movs	r3, #1
 8006bda:	9901      	ldr	r1, [sp, #4]
 8006bdc:	9800      	ldr	r0, [sp, #0]
 8006bde:	9e08      	ldr	r6, [sp, #32]
 8006be0:	3219      	adds	r2, #25
 8006be2:	47b0      	blx	r6
 8006be4:	1c43      	adds	r3, r0, #1
 8006be6:	d1f0      	bne.n	8006bca <_printf_common+0x8a>
 8006be8:	2001      	movs	r0, #1
 8006bea:	4240      	negs	r0, r0
 8006bec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006bee:	2030      	movs	r0, #48	; 0x30
 8006bf0:	18e1      	adds	r1, r4, r3
 8006bf2:	3143      	adds	r1, #67	; 0x43
 8006bf4:	7008      	strb	r0, [r1, #0]
 8006bf6:	0021      	movs	r1, r4
 8006bf8:	1c5a      	adds	r2, r3, #1
 8006bfa:	3145      	adds	r1, #69	; 0x45
 8006bfc:	7809      	ldrb	r1, [r1, #0]
 8006bfe:	18a2      	adds	r2, r4, r2
 8006c00:	3243      	adds	r2, #67	; 0x43
 8006c02:	3302      	adds	r3, #2
 8006c04:	7011      	strb	r1, [r2, #0]
 8006c06:	e7c1      	b.n	8006b8c <_printf_common+0x4c>
 8006c08:	0022      	movs	r2, r4
 8006c0a:	2301      	movs	r3, #1
 8006c0c:	9901      	ldr	r1, [sp, #4]
 8006c0e:	9800      	ldr	r0, [sp, #0]
 8006c10:	9e08      	ldr	r6, [sp, #32]
 8006c12:	321a      	adds	r2, #26
 8006c14:	47b0      	blx	r6
 8006c16:	1c43      	adds	r3, r0, #1
 8006c18:	d0e6      	beq.n	8006be8 <_printf_common+0xa8>
 8006c1a:	3701      	adds	r7, #1
 8006c1c:	e7d1      	b.n	8006bc2 <_printf_common+0x82>
	...

08006c20 <_printf_i>:
 8006c20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006c22:	b08b      	sub	sp, #44	; 0x2c
 8006c24:	9206      	str	r2, [sp, #24]
 8006c26:	000a      	movs	r2, r1
 8006c28:	3243      	adds	r2, #67	; 0x43
 8006c2a:	9307      	str	r3, [sp, #28]
 8006c2c:	9005      	str	r0, [sp, #20]
 8006c2e:	9204      	str	r2, [sp, #16]
 8006c30:	7e0a      	ldrb	r2, [r1, #24]
 8006c32:	000c      	movs	r4, r1
 8006c34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006c36:	2a78      	cmp	r2, #120	; 0x78
 8006c38:	d807      	bhi.n	8006c4a <_printf_i+0x2a>
 8006c3a:	2a62      	cmp	r2, #98	; 0x62
 8006c3c:	d809      	bhi.n	8006c52 <_printf_i+0x32>
 8006c3e:	2a00      	cmp	r2, #0
 8006c40:	d100      	bne.n	8006c44 <_printf_i+0x24>
 8006c42:	e0c1      	b.n	8006dc8 <_printf_i+0x1a8>
 8006c44:	2a58      	cmp	r2, #88	; 0x58
 8006c46:	d100      	bne.n	8006c4a <_printf_i+0x2a>
 8006c48:	e08c      	b.n	8006d64 <_printf_i+0x144>
 8006c4a:	0026      	movs	r6, r4
 8006c4c:	3642      	adds	r6, #66	; 0x42
 8006c4e:	7032      	strb	r2, [r6, #0]
 8006c50:	e022      	b.n	8006c98 <_printf_i+0x78>
 8006c52:	0010      	movs	r0, r2
 8006c54:	3863      	subs	r0, #99	; 0x63
 8006c56:	2815      	cmp	r0, #21
 8006c58:	d8f7      	bhi.n	8006c4a <_printf_i+0x2a>
 8006c5a:	f7f9 fa67 	bl	800012c <__gnu_thumb1_case_shi>
 8006c5e:	0016      	.short	0x0016
 8006c60:	fff6001f 	.word	0xfff6001f
 8006c64:	fff6fff6 	.word	0xfff6fff6
 8006c68:	001ffff6 	.word	0x001ffff6
 8006c6c:	fff6fff6 	.word	0xfff6fff6
 8006c70:	fff6fff6 	.word	0xfff6fff6
 8006c74:	003600a8 	.word	0x003600a8
 8006c78:	fff6009a 	.word	0xfff6009a
 8006c7c:	00b9fff6 	.word	0x00b9fff6
 8006c80:	0036fff6 	.word	0x0036fff6
 8006c84:	fff6fff6 	.word	0xfff6fff6
 8006c88:	009e      	.short	0x009e
 8006c8a:	0026      	movs	r6, r4
 8006c8c:	681a      	ldr	r2, [r3, #0]
 8006c8e:	3642      	adds	r6, #66	; 0x42
 8006c90:	1d11      	adds	r1, r2, #4
 8006c92:	6019      	str	r1, [r3, #0]
 8006c94:	6813      	ldr	r3, [r2, #0]
 8006c96:	7033      	strb	r3, [r6, #0]
 8006c98:	2301      	movs	r3, #1
 8006c9a:	e0a7      	b.n	8006dec <_printf_i+0x1cc>
 8006c9c:	6808      	ldr	r0, [r1, #0]
 8006c9e:	6819      	ldr	r1, [r3, #0]
 8006ca0:	1d0a      	adds	r2, r1, #4
 8006ca2:	0605      	lsls	r5, r0, #24
 8006ca4:	d50b      	bpl.n	8006cbe <_printf_i+0x9e>
 8006ca6:	680d      	ldr	r5, [r1, #0]
 8006ca8:	601a      	str	r2, [r3, #0]
 8006caa:	2d00      	cmp	r5, #0
 8006cac:	da03      	bge.n	8006cb6 <_printf_i+0x96>
 8006cae:	232d      	movs	r3, #45	; 0x2d
 8006cb0:	9a04      	ldr	r2, [sp, #16]
 8006cb2:	426d      	negs	r5, r5
 8006cb4:	7013      	strb	r3, [r2, #0]
 8006cb6:	4b61      	ldr	r3, [pc, #388]	; (8006e3c <_printf_i+0x21c>)
 8006cb8:	270a      	movs	r7, #10
 8006cba:	9303      	str	r3, [sp, #12]
 8006cbc:	e01b      	b.n	8006cf6 <_printf_i+0xd6>
 8006cbe:	680d      	ldr	r5, [r1, #0]
 8006cc0:	601a      	str	r2, [r3, #0]
 8006cc2:	0641      	lsls	r1, r0, #25
 8006cc4:	d5f1      	bpl.n	8006caa <_printf_i+0x8a>
 8006cc6:	b22d      	sxth	r5, r5
 8006cc8:	e7ef      	b.n	8006caa <_printf_i+0x8a>
 8006cca:	680d      	ldr	r5, [r1, #0]
 8006ccc:	6819      	ldr	r1, [r3, #0]
 8006cce:	1d08      	adds	r0, r1, #4
 8006cd0:	6018      	str	r0, [r3, #0]
 8006cd2:	062e      	lsls	r6, r5, #24
 8006cd4:	d501      	bpl.n	8006cda <_printf_i+0xba>
 8006cd6:	680d      	ldr	r5, [r1, #0]
 8006cd8:	e003      	b.n	8006ce2 <_printf_i+0xc2>
 8006cda:	066d      	lsls	r5, r5, #25
 8006cdc:	d5fb      	bpl.n	8006cd6 <_printf_i+0xb6>
 8006cde:	680d      	ldr	r5, [r1, #0]
 8006ce0:	b2ad      	uxth	r5, r5
 8006ce2:	4b56      	ldr	r3, [pc, #344]	; (8006e3c <_printf_i+0x21c>)
 8006ce4:	2708      	movs	r7, #8
 8006ce6:	9303      	str	r3, [sp, #12]
 8006ce8:	2a6f      	cmp	r2, #111	; 0x6f
 8006cea:	d000      	beq.n	8006cee <_printf_i+0xce>
 8006cec:	3702      	adds	r7, #2
 8006cee:	0023      	movs	r3, r4
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	3343      	adds	r3, #67	; 0x43
 8006cf4:	701a      	strb	r2, [r3, #0]
 8006cf6:	6863      	ldr	r3, [r4, #4]
 8006cf8:	60a3      	str	r3, [r4, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	db03      	blt.n	8006d06 <_printf_i+0xe6>
 8006cfe:	2204      	movs	r2, #4
 8006d00:	6821      	ldr	r1, [r4, #0]
 8006d02:	4391      	bics	r1, r2
 8006d04:	6021      	str	r1, [r4, #0]
 8006d06:	2d00      	cmp	r5, #0
 8006d08:	d102      	bne.n	8006d10 <_printf_i+0xf0>
 8006d0a:	9e04      	ldr	r6, [sp, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d00c      	beq.n	8006d2a <_printf_i+0x10a>
 8006d10:	9e04      	ldr	r6, [sp, #16]
 8006d12:	0028      	movs	r0, r5
 8006d14:	0039      	movs	r1, r7
 8006d16:	f7f9 fa99 	bl	800024c <__aeabi_uidivmod>
 8006d1a:	9b03      	ldr	r3, [sp, #12]
 8006d1c:	3e01      	subs	r6, #1
 8006d1e:	5c5b      	ldrb	r3, [r3, r1]
 8006d20:	7033      	strb	r3, [r6, #0]
 8006d22:	002b      	movs	r3, r5
 8006d24:	0005      	movs	r5, r0
 8006d26:	429f      	cmp	r7, r3
 8006d28:	d9f3      	bls.n	8006d12 <_printf_i+0xf2>
 8006d2a:	2f08      	cmp	r7, #8
 8006d2c:	d109      	bne.n	8006d42 <_printf_i+0x122>
 8006d2e:	6823      	ldr	r3, [r4, #0]
 8006d30:	07db      	lsls	r3, r3, #31
 8006d32:	d506      	bpl.n	8006d42 <_printf_i+0x122>
 8006d34:	6863      	ldr	r3, [r4, #4]
 8006d36:	6922      	ldr	r2, [r4, #16]
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	dc02      	bgt.n	8006d42 <_printf_i+0x122>
 8006d3c:	2330      	movs	r3, #48	; 0x30
 8006d3e:	3e01      	subs	r6, #1
 8006d40:	7033      	strb	r3, [r6, #0]
 8006d42:	9b04      	ldr	r3, [sp, #16]
 8006d44:	1b9b      	subs	r3, r3, r6
 8006d46:	6123      	str	r3, [r4, #16]
 8006d48:	9b07      	ldr	r3, [sp, #28]
 8006d4a:	0021      	movs	r1, r4
 8006d4c:	9300      	str	r3, [sp, #0]
 8006d4e:	9805      	ldr	r0, [sp, #20]
 8006d50:	9b06      	ldr	r3, [sp, #24]
 8006d52:	aa09      	add	r2, sp, #36	; 0x24
 8006d54:	f7ff fef4 	bl	8006b40 <_printf_common>
 8006d58:	1c43      	adds	r3, r0, #1
 8006d5a:	d14c      	bne.n	8006df6 <_printf_i+0x1d6>
 8006d5c:	2001      	movs	r0, #1
 8006d5e:	4240      	negs	r0, r0
 8006d60:	b00b      	add	sp, #44	; 0x2c
 8006d62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006d64:	3145      	adds	r1, #69	; 0x45
 8006d66:	700a      	strb	r2, [r1, #0]
 8006d68:	4a34      	ldr	r2, [pc, #208]	; (8006e3c <_printf_i+0x21c>)
 8006d6a:	9203      	str	r2, [sp, #12]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	6821      	ldr	r1, [r4, #0]
 8006d70:	ca20      	ldmia	r2!, {r5}
 8006d72:	601a      	str	r2, [r3, #0]
 8006d74:	0608      	lsls	r0, r1, #24
 8006d76:	d516      	bpl.n	8006da6 <_printf_i+0x186>
 8006d78:	07cb      	lsls	r3, r1, #31
 8006d7a:	d502      	bpl.n	8006d82 <_printf_i+0x162>
 8006d7c:	2320      	movs	r3, #32
 8006d7e:	4319      	orrs	r1, r3
 8006d80:	6021      	str	r1, [r4, #0]
 8006d82:	2710      	movs	r7, #16
 8006d84:	2d00      	cmp	r5, #0
 8006d86:	d1b2      	bne.n	8006cee <_printf_i+0xce>
 8006d88:	2320      	movs	r3, #32
 8006d8a:	6822      	ldr	r2, [r4, #0]
 8006d8c:	439a      	bics	r2, r3
 8006d8e:	6022      	str	r2, [r4, #0]
 8006d90:	e7ad      	b.n	8006cee <_printf_i+0xce>
 8006d92:	2220      	movs	r2, #32
 8006d94:	6809      	ldr	r1, [r1, #0]
 8006d96:	430a      	orrs	r2, r1
 8006d98:	6022      	str	r2, [r4, #0]
 8006d9a:	0022      	movs	r2, r4
 8006d9c:	2178      	movs	r1, #120	; 0x78
 8006d9e:	3245      	adds	r2, #69	; 0x45
 8006da0:	7011      	strb	r1, [r2, #0]
 8006da2:	4a27      	ldr	r2, [pc, #156]	; (8006e40 <_printf_i+0x220>)
 8006da4:	e7e1      	b.n	8006d6a <_printf_i+0x14a>
 8006da6:	0648      	lsls	r0, r1, #25
 8006da8:	d5e6      	bpl.n	8006d78 <_printf_i+0x158>
 8006daa:	b2ad      	uxth	r5, r5
 8006dac:	e7e4      	b.n	8006d78 <_printf_i+0x158>
 8006dae:	681a      	ldr	r2, [r3, #0]
 8006db0:	680d      	ldr	r5, [r1, #0]
 8006db2:	1d10      	adds	r0, r2, #4
 8006db4:	6949      	ldr	r1, [r1, #20]
 8006db6:	6018      	str	r0, [r3, #0]
 8006db8:	6813      	ldr	r3, [r2, #0]
 8006dba:	062e      	lsls	r6, r5, #24
 8006dbc:	d501      	bpl.n	8006dc2 <_printf_i+0x1a2>
 8006dbe:	6019      	str	r1, [r3, #0]
 8006dc0:	e002      	b.n	8006dc8 <_printf_i+0x1a8>
 8006dc2:	066d      	lsls	r5, r5, #25
 8006dc4:	d5fb      	bpl.n	8006dbe <_printf_i+0x19e>
 8006dc6:	8019      	strh	r1, [r3, #0]
 8006dc8:	2300      	movs	r3, #0
 8006dca:	9e04      	ldr	r6, [sp, #16]
 8006dcc:	6123      	str	r3, [r4, #16]
 8006dce:	e7bb      	b.n	8006d48 <_printf_i+0x128>
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	1d11      	adds	r1, r2, #4
 8006dd4:	6019      	str	r1, [r3, #0]
 8006dd6:	6816      	ldr	r6, [r2, #0]
 8006dd8:	2100      	movs	r1, #0
 8006dda:	0030      	movs	r0, r6
 8006ddc:	6862      	ldr	r2, [r4, #4]
 8006dde:	f000 ff19 	bl	8007c14 <memchr>
 8006de2:	2800      	cmp	r0, #0
 8006de4:	d001      	beq.n	8006dea <_printf_i+0x1ca>
 8006de6:	1b80      	subs	r0, r0, r6
 8006de8:	6060      	str	r0, [r4, #4]
 8006dea:	6863      	ldr	r3, [r4, #4]
 8006dec:	6123      	str	r3, [r4, #16]
 8006dee:	2300      	movs	r3, #0
 8006df0:	9a04      	ldr	r2, [sp, #16]
 8006df2:	7013      	strb	r3, [r2, #0]
 8006df4:	e7a8      	b.n	8006d48 <_printf_i+0x128>
 8006df6:	6923      	ldr	r3, [r4, #16]
 8006df8:	0032      	movs	r2, r6
 8006dfa:	9906      	ldr	r1, [sp, #24]
 8006dfc:	9805      	ldr	r0, [sp, #20]
 8006dfe:	9d07      	ldr	r5, [sp, #28]
 8006e00:	47a8      	blx	r5
 8006e02:	1c43      	adds	r3, r0, #1
 8006e04:	d0aa      	beq.n	8006d5c <_printf_i+0x13c>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	079b      	lsls	r3, r3, #30
 8006e0a:	d415      	bmi.n	8006e38 <_printf_i+0x218>
 8006e0c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e0e:	68e0      	ldr	r0, [r4, #12]
 8006e10:	4298      	cmp	r0, r3
 8006e12:	daa5      	bge.n	8006d60 <_printf_i+0x140>
 8006e14:	0018      	movs	r0, r3
 8006e16:	e7a3      	b.n	8006d60 <_printf_i+0x140>
 8006e18:	0022      	movs	r2, r4
 8006e1a:	2301      	movs	r3, #1
 8006e1c:	9906      	ldr	r1, [sp, #24]
 8006e1e:	9805      	ldr	r0, [sp, #20]
 8006e20:	9e07      	ldr	r6, [sp, #28]
 8006e22:	3219      	adds	r2, #25
 8006e24:	47b0      	blx	r6
 8006e26:	1c43      	adds	r3, r0, #1
 8006e28:	d098      	beq.n	8006d5c <_printf_i+0x13c>
 8006e2a:	3501      	adds	r5, #1
 8006e2c:	68e3      	ldr	r3, [r4, #12]
 8006e2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006e30:	1a9b      	subs	r3, r3, r2
 8006e32:	42ab      	cmp	r3, r5
 8006e34:	dcf0      	bgt.n	8006e18 <_printf_i+0x1f8>
 8006e36:	e7e9      	b.n	8006e0c <_printf_i+0x1ec>
 8006e38:	2500      	movs	r5, #0
 8006e3a:	e7f7      	b.n	8006e2c <_printf_i+0x20c>
 8006e3c:	08009a7e 	.word	0x08009a7e
 8006e40:	08009a8f 	.word	0x08009a8f

08006e44 <siprintf>:
 8006e44:	b40e      	push	{r1, r2, r3}
 8006e46:	b500      	push	{lr}
 8006e48:	490b      	ldr	r1, [pc, #44]	; (8006e78 <siprintf+0x34>)
 8006e4a:	b09c      	sub	sp, #112	; 0x70
 8006e4c:	ab1d      	add	r3, sp, #116	; 0x74
 8006e4e:	9002      	str	r0, [sp, #8]
 8006e50:	9006      	str	r0, [sp, #24]
 8006e52:	9107      	str	r1, [sp, #28]
 8006e54:	9104      	str	r1, [sp, #16]
 8006e56:	4809      	ldr	r0, [pc, #36]	; (8006e7c <siprintf+0x38>)
 8006e58:	4909      	ldr	r1, [pc, #36]	; (8006e80 <siprintf+0x3c>)
 8006e5a:	cb04      	ldmia	r3!, {r2}
 8006e5c:	9105      	str	r1, [sp, #20]
 8006e5e:	6800      	ldr	r0, [r0, #0]
 8006e60:	a902      	add	r1, sp, #8
 8006e62:	9301      	str	r3, [sp, #4]
 8006e64:	f001 fbee 	bl	8008644 <_svfiprintf_r>
 8006e68:	2300      	movs	r3, #0
 8006e6a:	9a02      	ldr	r2, [sp, #8]
 8006e6c:	7013      	strb	r3, [r2, #0]
 8006e6e:	b01c      	add	sp, #112	; 0x70
 8006e70:	bc08      	pop	{r3}
 8006e72:	b003      	add	sp, #12
 8006e74:	4718      	bx	r3
 8006e76:	46c0      	nop			; (mov r8, r8)
 8006e78:	7fffffff 	.word	0x7fffffff
 8006e7c:	20000018 	.word	0x20000018
 8006e80:	ffff0208 	.word	0xffff0208

08006e84 <strncat>:
 8006e84:	0003      	movs	r3, r0
 8006e86:	b510      	push	{r4, lr}
 8006e88:	781c      	ldrb	r4, [r3, #0]
 8006e8a:	2c00      	cmp	r4, #0
 8006e8c:	d107      	bne.n	8006e9e <strncat+0x1a>
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	1c54      	adds	r4, r2, #1
 8006e92:	d003      	beq.n	8006e9c <strncat+0x18>
 8006e94:	780c      	ldrb	r4, [r1, #0]
 8006e96:	701c      	strb	r4, [r3, #0]
 8006e98:	2c00      	cmp	r4, #0
 8006e9a:	d102      	bne.n	8006ea2 <strncat+0x1e>
 8006e9c:	bd10      	pop	{r4, pc}
 8006e9e:	3301      	adds	r3, #1
 8006ea0:	e7f2      	b.n	8006e88 <strncat+0x4>
 8006ea2:	2a00      	cmp	r2, #0
 8006ea4:	d100      	bne.n	8006ea8 <strncat+0x24>
 8006ea6:	705a      	strb	r2, [r3, #1]
 8006ea8:	3301      	adds	r3, #1
 8006eaa:	3101      	adds	r1, #1
 8006eac:	e7ef      	b.n	8006e8e <strncat+0xa>

08006eae <quorem>:
 8006eae:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006eb0:	0006      	movs	r6, r0
 8006eb2:	690b      	ldr	r3, [r1, #16]
 8006eb4:	6932      	ldr	r2, [r6, #16]
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	2000      	movs	r0, #0
 8006eba:	9103      	str	r1, [sp, #12]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	db65      	blt.n	8006f8c <quorem+0xde>
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	009c      	lsls	r4, r3, #2
 8006ec4:	9300      	str	r3, [sp, #0]
 8006ec6:	000b      	movs	r3, r1
 8006ec8:	3314      	adds	r3, #20
 8006eca:	9305      	str	r3, [sp, #20]
 8006ecc:	191b      	adds	r3, r3, r4
 8006ece:	9304      	str	r3, [sp, #16]
 8006ed0:	0033      	movs	r3, r6
 8006ed2:	3314      	adds	r3, #20
 8006ed4:	9302      	str	r3, [sp, #8]
 8006ed6:	191c      	adds	r4, r3, r4
 8006ed8:	9b04      	ldr	r3, [sp, #16]
 8006eda:	6827      	ldr	r7, [r4, #0]
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	0038      	movs	r0, r7
 8006ee0:	1c5d      	adds	r5, r3, #1
 8006ee2:	0029      	movs	r1, r5
 8006ee4:	9301      	str	r3, [sp, #4]
 8006ee6:	f7f9 f92b 	bl	8000140 <__udivsi3>
 8006eea:	9001      	str	r0, [sp, #4]
 8006eec:	42af      	cmp	r7, r5
 8006eee:	d324      	bcc.n	8006f3a <quorem+0x8c>
 8006ef0:	2500      	movs	r5, #0
 8006ef2:	46ac      	mov	ip, r5
 8006ef4:	9802      	ldr	r0, [sp, #8]
 8006ef6:	9f05      	ldr	r7, [sp, #20]
 8006ef8:	cf08      	ldmia	r7!, {r3}
 8006efa:	9a01      	ldr	r2, [sp, #4]
 8006efc:	b299      	uxth	r1, r3
 8006efe:	4351      	muls	r1, r2
 8006f00:	0c1b      	lsrs	r3, r3, #16
 8006f02:	4353      	muls	r3, r2
 8006f04:	1949      	adds	r1, r1, r5
 8006f06:	0c0a      	lsrs	r2, r1, #16
 8006f08:	189b      	adds	r3, r3, r2
 8006f0a:	6802      	ldr	r2, [r0, #0]
 8006f0c:	b289      	uxth	r1, r1
 8006f0e:	b292      	uxth	r2, r2
 8006f10:	4462      	add	r2, ip
 8006f12:	1a52      	subs	r2, r2, r1
 8006f14:	6801      	ldr	r1, [r0, #0]
 8006f16:	0c1d      	lsrs	r5, r3, #16
 8006f18:	0c09      	lsrs	r1, r1, #16
 8006f1a:	b29b      	uxth	r3, r3
 8006f1c:	1acb      	subs	r3, r1, r3
 8006f1e:	1411      	asrs	r1, r2, #16
 8006f20:	185b      	adds	r3, r3, r1
 8006f22:	1419      	asrs	r1, r3, #16
 8006f24:	b292      	uxth	r2, r2
 8006f26:	041b      	lsls	r3, r3, #16
 8006f28:	431a      	orrs	r2, r3
 8006f2a:	9b04      	ldr	r3, [sp, #16]
 8006f2c:	468c      	mov	ip, r1
 8006f2e:	c004      	stmia	r0!, {r2}
 8006f30:	42bb      	cmp	r3, r7
 8006f32:	d2e1      	bcs.n	8006ef8 <quorem+0x4a>
 8006f34:	6823      	ldr	r3, [r4, #0]
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d030      	beq.n	8006f9c <quorem+0xee>
 8006f3a:	0030      	movs	r0, r6
 8006f3c:	9903      	ldr	r1, [sp, #12]
 8006f3e:	f001 f8f9 	bl	8008134 <__mcmp>
 8006f42:	2800      	cmp	r0, #0
 8006f44:	db21      	blt.n	8006f8a <quorem+0xdc>
 8006f46:	0030      	movs	r0, r6
 8006f48:	2400      	movs	r4, #0
 8006f4a:	9b01      	ldr	r3, [sp, #4]
 8006f4c:	9903      	ldr	r1, [sp, #12]
 8006f4e:	3301      	adds	r3, #1
 8006f50:	9301      	str	r3, [sp, #4]
 8006f52:	3014      	adds	r0, #20
 8006f54:	3114      	adds	r1, #20
 8006f56:	6803      	ldr	r3, [r0, #0]
 8006f58:	c920      	ldmia	r1!, {r5}
 8006f5a:	b29a      	uxth	r2, r3
 8006f5c:	1914      	adds	r4, r2, r4
 8006f5e:	b2aa      	uxth	r2, r5
 8006f60:	1aa2      	subs	r2, r4, r2
 8006f62:	0c1b      	lsrs	r3, r3, #16
 8006f64:	0c2d      	lsrs	r5, r5, #16
 8006f66:	1414      	asrs	r4, r2, #16
 8006f68:	1b5b      	subs	r3, r3, r5
 8006f6a:	191b      	adds	r3, r3, r4
 8006f6c:	141c      	asrs	r4, r3, #16
 8006f6e:	b292      	uxth	r2, r2
 8006f70:	041b      	lsls	r3, r3, #16
 8006f72:	4313      	orrs	r3, r2
 8006f74:	c008      	stmia	r0!, {r3}
 8006f76:	9b04      	ldr	r3, [sp, #16]
 8006f78:	428b      	cmp	r3, r1
 8006f7a:	d2ec      	bcs.n	8006f56 <quorem+0xa8>
 8006f7c:	9b00      	ldr	r3, [sp, #0]
 8006f7e:	9a02      	ldr	r2, [sp, #8]
 8006f80:	009b      	lsls	r3, r3, #2
 8006f82:	18d3      	adds	r3, r2, r3
 8006f84:	681a      	ldr	r2, [r3, #0]
 8006f86:	2a00      	cmp	r2, #0
 8006f88:	d015      	beq.n	8006fb6 <quorem+0x108>
 8006f8a:	9801      	ldr	r0, [sp, #4]
 8006f8c:	b007      	add	sp, #28
 8006f8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006f90:	6823      	ldr	r3, [r4, #0]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d106      	bne.n	8006fa4 <quorem+0xf6>
 8006f96:	9b00      	ldr	r3, [sp, #0]
 8006f98:	3b01      	subs	r3, #1
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	9b02      	ldr	r3, [sp, #8]
 8006f9e:	3c04      	subs	r4, #4
 8006fa0:	42a3      	cmp	r3, r4
 8006fa2:	d3f5      	bcc.n	8006f90 <quorem+0xe2>
 8006fa4:	9b00      	ldr	r3, [sp, #0]
 8006fa6:	6133      	str	r3, [r6, #16]
 8006fa8:	e7c7      	b.n	8006f3a <quorem+0x8c>
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	d106      	bne.n	8006fbe <quorem+0x110>
 8006fb0:	9a00      	ldr	r2, [sp, #0]
 8006fb2:	3a01      	subs	r2, #1
 8006fb4:	9200      	str	r2, [sp, #0]
 8006fb6:	9a02      	ldr	r2, [sp, #8]
 8006fb8:	3b04      	subs	r3, #4
 8006fba:	429a      	cmp	r2, r3
 8006fbc:	d3f5      	bcc.n	8006faa <quorem+0xfc>
 8006fbe:	9b00      	ldr	r3, [sp, #0]
 8006fc0:	6133      	str	r3, [r6, #16]
 8006fc2:	e7e2      	b.n	8006f8a <quorem+0xdc>

08006fc4 <_dtoa_r>:
 8006fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006fc6:	b09d      	sub	sp, #116	; 0x74
 8006fc8:	9202      	str	r2, [sp, #8]
 8006fca:	9303      	str	r3, [sp, #12]
 8006fcc:	9b02      	ldr	r3, [sp, #8]
 8006fce:	9c03      	ldr	r4, [sp, #12]
 8006fd0:	9308      	str	r3, [sp, #32]
 8006fd2:	9409      	str	r4, [sp, #36]	; 0x24
 8006fd4:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8006fd6:	0007      	movs	r7, r0
 8006fd8:	9d25      	ldr	r5, [sp, #148]	; 0x94
 8006fda:	2c00      	cmp	r4, #0
 8006fdc:	d10e      	bne.n	8006ffc <_dtoa_r+0x38>
 8006fde:	2010      	movs	r0, #16
 8006fe0:	f000 fe0e 	bl	8007c00 <malloc>
 8006fe4:	1e02      	subs	r2, r0, #0
 8006fe6:	6278      	str	r0, [r7, #36]	; 0x24
 8006fe8:	d104      	bne.n	8006ff4 <_dtoa_r+0x30>
 8006fea:	21ea      	movs	r1, #234	; 0xea
 8006fec:	4bc7      	ldr	r3, [pc, #796]	; (800730c <_dtoa_r+0x348>)
 8006fee:	48c8      	ldr	r0, [pc, #800]	; (8007310 <_dtoa_r+0x34c>)
 8006ff0:	f001 fc3a 	bl	8008868 <__assert_func>
 8006ff4:	6044      	str	r4, [r0, #4]
 8006ff6:	6084      	str	r4, [r0, #8]
 8006ff8:	6004      	str	r4, [r0, #0]
 8006ffa:	60c4      	str	r4, [r0, #12]
 8006ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffe:	6819      	ldr	r1, [r3, #0]
 8007000:	2900      	cmp	r1, #0
 8007002:	d00a      	beq.n	800701a <_dtoa_r+0x56>
 8007004:	685a      	ldr	r2, [r3, #4]
 8007006:	2301      	movs	r3, #1
 8007008:	4093      	lsls	r3, r2
 800700a:	604a      	str	r2, [r1, #4]
 800700c:	608b      	str	r3, [r1, #8]
 800700e:	0038      	movs	r0, r7
 8007010:	f000 fe50 	bl	8007cb4 <_Bfree>
 8007014:	2200      	movs	r2, #0
 8007016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007018:	601a      	str	r2, [r3, #0]
 800701a:	9b03      	ldr	r3, [sp, #12]
 800701c:	2b00      	cmp	r3, #0
 800701e:	da20      	bge.n	8007062 <_dtoa_r+0x9e>
 8007020:	2301      	movs	r3, #1
 8007022:	602b      	str	r3, [r5, #0]
 8007024:	9b03      	ldr	r3, [sp, #12]
 8007026:	005b      	lsls	r3, r3, #1
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	9309      	str	r3, [sp, #36]	; 0x24
 800702c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800702e:	4bb9      	ldr	r3, [pc, #740]	; (8007314 <_dtoa_r+0x350>)
 8007030:	4ab8      	ldr	r2, [pc, #736]	; (8007314 <_dtoa_r+0x350>)
 8007032:	402b      	ands	r3, r5
 8007034:	4293      	cmp	r3, r2
 8007036:	d117      	bne.n	8007068 <_dtoa_r+0xa4>
 8007038:	4bb7      	ldr	r3, [pc, #732]	; (8007318 <_dtoa_r+0x354>)
 800703a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800703c:	0328      	lsls	r0, r5, #12
 800703e:	6013      	str	r3, [r2, #0]
 8007040:	9b02      	ldr	r3, [sp, #8]
 8007042:	0b00      	lsrs	r0, r0, #12
 8007044:	4318      	orrs	r0, r3
 8007046:	d101      	bne.n	800704c <_dtoa_r+0x88>
 8007048:	f000 fdbf 	bl	8007bca <_dtoa_r+0xc06>
 800704c:	48b3      	ldr	r0, [pc, #716]	; (800731c <_dtoa_r+0x358>)
 800704e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007050:	9006      	str	r0, [sp, #24]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d002      	beq.n	800705c <_dtoa_r+0x98>
 8007056:	4bb2      	ldr	r3, [pc, #712]	; (8007320 <_dtoa_r+0x35c>)
 8007058:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800705a:	6013      	str	r3, [r2, #0]
 800705c:	9806      	ldr	r0, [sp, #24]
 800705e:	b01d      	add	sp, #116	; 0x74
 8007060:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007062:	2300      	movs	r3, #0
 8007064:	602b      	str	r3, [r5, #0]
 8007066:	e7e1      	b.n	800702c <_dtoa_r+0x68>
 8007068:	9b08      	ldr	r3, [sp, #32]
 800706a:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800706c:	9312      	str	r3, [sp, #72]	; 0x48
 800706e:	9413      	str	r4, [sp, #76]	; 0x4c
 8007070:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007072:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007074:	2200      	movs	r2, #0
 8007076:	2300      	movs	r3, #0
 8007078:	f7f9 f9e8 	bl	800044c <__aeabi_dcmpeq>
 800707c:	1e04      	subs	r4, r0, #0
 800707e:	d009      	beq.n	8007094 <_dtoa_r+0xd0>
 8007080:	2301      	movs	r3, #1
 8007082:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8007084:	6013      	str	r3, [r2, #0]
 8007086:	4ba7      	ldr	r3, [pc, #668]	; (8007324 <_dtoa_r+0x360>)
 8007088:	9306      	str	r3, [sp, #24]
 800708a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800708c:	2b00      	cmp	r3, #0
 800708e:	d0e5      	beq.n	800705c <_dtoa_r+0x98>
 8007090:	4ba5      	ldr	r3, [pc, #660]	; (8007328 <_dtoa_r+0x364>)
 8007092:	e7e1      	b.n	8007058 <_dtoa_r+0x94>
 8007094:	ab1a      	add	r3, sp, #104	; 0x68
 8007096:	9301      	str	r3, [sp, #4]
 8007098:	ab1b      	add	r3, sp, #108	; 0x6c
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	0038      	movs	r0, r7
 800709e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80070a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070a2:	f001 f8fb 	bl	800829c <__d2b>
 80070a6:	006e      	lsls	r6, r5, #1
 80070a8:	9005      	str	r0, [sp, #20]
 80070aa:	0d76      	lsrs	r6, r6, #21
 80070ac:	d100      	bne.n	80070b0 <_dtoa_r+0xec>
 80070ae:	e07c      	b.n	80071aa <_dtoa_r+0x1e6>
 80070b0:	9812      	ldr	r0, [sp, #72]	; 0x48
 80070b2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80070b4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80070b6:	4a9d      	ldr	r2, [pc, #628]	; (800732c <_dtoa_r+0x368>)
 80070b8:	031b      	lsls	r3, r3, #12
 80070ba:	0b1b      	lsrs	r3, r3, #12
 80070bc:	431a      	orrs	r2, r3
 80070be:	0011      	movs	r1, r2
 80070c0:	4b9b      	ldr	r3, [pc, #620]	; (8007330 <_dtoa_r+0x36c>)
 80070c2:	9418      	str	r4, [sp, #96]	; 0x60
 80070c4:	18f6      	adds	r6, r6, r3
 80070c6:	2200      	movs	r2, #0
 80070c8:	4b9a      	ldr	r3, [pc, #616]	; (8007334 <_dtoa_r+0x370>)
 80070ca:	f7fa febb 	bl	8001e44 <__aeabi_dsub>
 80070ce:	4a9a      	ldr	r2, [pc, #616]	; (8007338 <_dtoa_r+0x374>)
 80070d0:	4b9a      	ldr	r3, [pc, #616]	; (800733c <_dtoa_r+0x378>)
 80070d2:	f7fa fc4b 	bl	800196c <__aeabi_dmul>
 80070d6:	4a9a      	ldr	r2, [pc, #616]	; (8007340 <_dtoa_r+0x37c>)
 80070d8:	4b9a      	ldr	r3, [pc, #616]	; (8007344 <_dtoa_r+0x380>)
 80070da:	f7f9 fd09 	bl	8000af0 <__aeabi_dadd>
 80070de:	0004      	movs	r4, r0
 80070e0:	0030      	movs	r0, r6
 80070e2:	000d      	movs	r5, r1
 80070e4:	f7fb fa94 	bl	8002610 <__aeabi_i2d>
 80070e8:	4a97      	ldr	r2, [pc, #604]	; (8007348 <_dtoa_r+0x384>)
 80070ea:	4b98      	ldr	r3, [pc, #608]	; (800734c <_dtoa_r+0x388>)
 80070ec:	f7fa fc3e 	bl	800196c <__aeabi_dmul>
 80070f0:	0002      	movs	r2, r0
 80070f2:	000b      	movs	r3, r1
 80070f4:	0020      	movs	r0, r4
 80070f6:	0029      	movs	r1, r5
 80070f8:	f7f9 fcfa 	bl	8000af0 <__aeabi_dadd>
 80070fc:	0004      	movs	r4, r0
 80070fe:	000d      	movs	r5, r1
 8007100:	f7fb fa50 	bl	80025a4 <__aeabi_d2iz>
 8007104:	2200      	movs	r2, #0
 8007106:	9002      	str	r0, [sp, #8]
 8007108:	2300      	movs	r3, #0
 800710a:	0020      	movs	r0, r4
 800710c:	0029      	movs	r1, r5
 800710e:	f7f9 f9a3 	bl	8000458 <__aeabi_dcmplt>
 8007112:	2800      	cmp	r0, #0
 8007114:	d00b      	beq.n	800712e <_dtoa_r+0x16a>
 8007116:	9802      	ldr	r0, [sp, #8]
 8007118:	f7fb fa7a 	bl	8002610 <__aeabi_i2d>
 800711c:	002b      	movs	r3, r5
 800711e:	0022      	movs	r2, r4
 8007120:	f7f9 f994 	bl	800044c <__aeabi_dcmpeq>
 8007124:	4243      	negs	r3, r0
 8007126:	4158      	adcs	r0, r3
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	1a1b      	subs	r3, r3, r0
 800712c:	9302      	str	r3, [sp, #8]
 800712e:	2301      	movs	r3, #1
 8007130:	9316      	str	r3, [sp, #88]	; 0x58
 8007132:	9b02      	ldr	r3, [sp, #8]
 8007134:	2b16      	cmp	r3, #22
 8007136:	d80f      	bhi.n	8007158 <_dtoa_r+0x194>
 8007138:	9812      	ldr	r0, [sp, #72]	; 0x48
 800713a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800713c:	00da      	lsls	r2, r3, #3
 800713e:	4b84      	ldr	r3, [pc, #528]	; (8007350 <_dtoa_r+0x38c>)
 8007140:	189b      	adds	r3, r3, r2
 8007142:	681a      	ldr	r2, [r3, #0]
 8007144:	685b      	ldr	r3, [r3, #4]
 8007146:	f7f9 f987 	bl	8000458 <__aeabi_dcmplt>
 800714a:	2800      	cmp	r0, #0
 800714c:	d049      	beq.n	80071e2 <_dtoa_r+0x21e>
 800714e:	9b02      	ldr	r3, [sp, #8]
 8007150:	3b01      	subs	r3, #1
 8007152:	9302      	str	r3, [sp, #8]
 8007154:	2300      	movs	r3, #0
 8007156:	9316      	str	r3, [sp, #88]	; 0x58
 8007158:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800715a:	1b9e      	subs	r6, r3, r6
 800715c:	2300      	movs	r3, #0
 800715e:	930a      	str	r3, [sp, #40]	; 0x28
 8007160:	0033      	movs	r3, r6
 8007162:	3b01      	subs	r3, #1
 8007164:	930d      	str	r3, [sp, #52]	; 0x34
 8007166:	d504      	bpl.n	8007172 <_dtoa_r+0x1ae>
 8007168:	2301      	movs	r3, #1
 800716a:	1b9b      	subs	r3, r3, r6
 800716c:	930a      	str	r3, [sp, #40]	; 0x28
 800716e:	2300      	movs	r3, #0
 8007170:	930d      	str	r3, [sp, #52]	; 0x34
 8007172:	9b02      	ldr	r3, [sp, #8]
 8007174:	2b00      	cmp	r3, #0
 8007176:	db36      	blt.n	80071e6 <_dtoa_r+0x222>
 8007178:	9a02      	ldr	r2, [sp, #8]
 800717a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800717c:	4694      	mov	ip, r2
 800717e:	4463      	add	r3, ip
 8007180:	930d      	str	r3, [sp, #52]	; 0x34
 8007182:	2300      	movs	r3, #0
 8007184:	9215      	str	r2, [sp, #84]	; 0x54
 8007186:	930e      	str	r3, [sp, #56]	; 0x38
 8007188:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800718a:	2401      	movs	r4, #1
 800718c:	2b09      	cmp	r3, #9
 800718e:	d864      	bhi.n	800725a <_dtoa_r+0x296>
 8007190:	2b05      	cmp	r3, #5
 8007192:	dd02      	ble.n	800719a <_dtoa_r+0x1d6>
 8007194:	2400      	movs	r4, #0
 8007196:	3b04      	subs	r3, #4
 8007198:	9322      	str	r3, [sp, #136]	; 0x88
 800719a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800719c:	1e98      	subs	r0, r3, #2
 800719e:	2803      	cmp	r0, #3
 80071a0:	d864      	bhi.n	800726c <_dtoa_r+0x2a8>
 80071a2:	f7f8 ffb9 	bl	8000118 <__gnu_thumb1_case_uqi>
 80071a6:	3829      	.short	0x3829
 80071a8:	5836      	.short	0x5836
 80071aa:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80071ac:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 80071ae:	189e      	adds	r6, r3, r2
 80071b0:	4b68      	ldr	r3, [pc, #416]	; (8007354 <_dtoa_r+0x390>)
 80071b2:	18f2      	adds	r2, r6, r3
 80071b4:	2a20      	cmp	r2, #32
 80071b6:	dd0f      	ble.n	80071d8 <_dtoa_r+0x214>
 80071b8:	2340      	movs	r3, #64	; 0x40
 80071ba:	1a9b      	subs	r3, r3, r2
 80071bc:	409d      	lsls	r5, r3
 80071be:	4b66      	ldr	r3, [pc, #408]	; (8007358 <_dtoa_r+0x394>)
 80071c0:	9802      	ldr	r0, [sp, #8]
 80071c2:	18f3      	adds	r3, r6, r3
 80071c4:	40d8      	lsrs	r0, r3
 80071c6:	4328      	orrs	r0, r5
 80071c8:	f7fb fa52 	bl	8002670 <__aeabi_ui2d>
 80071cc:	2301      	movs	r3, #1
 80071ce:	4c63      	ldr	r4, [pc, #396]	; (800735c <_dtoa_r+0x398>)
 80071d0:	3e01      	subs	r6, #1
 80071d2:	1909      	adds	r1, r1, r4
 80071d4:	9318      	str	r3, [sp, #96]	; 0x60
 80071d6:	e776      	b.n	80070c6 <_dtoa_r+0x102>
 80071d8:	2320      	movs	r3, #32
 80071da:	9802      	ldr	r0, [sp, #8]
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	4098      	lsls	r0, r3
 80071e0:	e7f2      	b.n	80071c8 <_dtoa_r+0x204>
 80071e2:	9016      	str	r0, [sp, #88]	; 0x58
 80071e4:	e7b8      	b.n	8007158 <_dtoa_r+0x194>
 80071e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80071e8:	9a02      	ldr	r2, [sp, #8]
 80071ea:	1a9b      	subs	r3, r3, r2
 80071ec:	930a      	str	r3, [sp, #40]	; 0x28
 80071ee:	4253      	negs	r3, r2
 80071f0:	930e      	str	r3, [sp, #56]	; 0x38
 80071f2:	2300      	movs	r3, #0
 80071f4:	9315      	str	r3, [sp, #84]	; 0x54
 80071f6:	e7c7      	b.n	8007188 <_dtoa_r+0x1c4>
 80071f8:	2300      	movs	r3, #0
 80071fa:	930f      	str	r3, [sp, #60]	; 0x3c
 80071fc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80071fe:	930c      	str	r3, [sp, #48]	; 0x30
 8007200:	9307      	str	r3, [sp, #28]
 8007202:	2b00      	cmp	r3, #0
 8007204:	dc13      	bgt.n	800722e <_dtoa_r+0x26a>
 8007206:	2301      	movs	r3, #1
 8007208:	001a      	movs	r2, r3
 800720a:	930c      	str	r3, [sp, #48]	; 0x30
 800720c:	9307      	str	r3, [sp, #28]
 800720e:	9223      	str	r2, [sp, #140]	; 0x8c
 8007210:	e00d      	b.n	800722e <_dtoa_r+0x26a>
 8007212:	2301      	movs	r3, #1
 8007214:	e7f1      	b.n	80071fa <_dtoa_r+0x236>
 8007216:	2300      	movs	r3, #0
 8007218:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800721a:	930f      	str	r3, [sp, #60]	; 0x3c
 800721c:	4694      	mov	ip, r2
 800721e:	9b02      	ldr	r3, [sp, #8]
 8007220:	4463      	add	r3, ip
 8007222:	930c      	str	r3, [sp, #48]	; 0x30
 8007224:	3301      	adds	r3, #1
 8007226:	9307      	str	r3, [sp, #28]
 8007228:	2b00      	cmp	r3, #0
 800722a:	dc00      	bgt.n	800722e <_dtoa_r+0x26a>
 800722c:	2301      	movs	r3, #1
 800722e:	2200      	movs	r2, #0
 8007230:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007232:	6042      	str	r2, [r0, #4]
 8007234:	3204      	adds	r2, #4
 8007236:	0015      	movs	r5, r2
 8007238:	3514      	adds	r5, #20
 800723a:	6841      	ldr	r1, [r0, #4]
 800723c:	429d      	cmp	r5, r3
 800723e:	d919      	bls.n	8007274 <_dtoa_r+0x2b0>
 8007240:	0038      	movs	r0, r7
 8007242:	f000 fcf3 	bl	8007c2c <_Balloc>
 8007246:	9006      	str	r0, [sp, #24]
 8007248:	2800      	cmp	r0, #0
 800724a:	d117      	bne.n	800727c <_dtoa_r+0x2b8>
 800724c:	21d5      	movs	r1, #213	; 0xd5
 800724e:	0002      	movs	r2, r0
 8007250:	4b43      	ldr	r3, [pc, #268]	; (8007360 <_dtoa_r+0x39c>)
 8007252:	0049      	lsls	r1, r1, #1
 8007254:	e6cb      	b.n	8006fee <_dtoa_r+0x2a>
 8007256:	2301      	movs	r3, #1
 8007258:	e7de      	b.n	8007218 <_dtoa_r+0x254>
 800725a:	2300      	movs	r3, #0
 800725c:	940f      	str	r4, [sp, #60]	; 0x3c
 800725e:	9322      	str	r3, [sp, #136]	; 0x88
 8007260:	3b01      	subs	r3, #1
 8007262:	930c      	str	r3, [sp, #48]	; 0x30
 8007264:	9307      	str	r3, [sp, #28]
 8007266:	2200      	movs	r2, #0
 8007268:	3313      	adds	r3, #19
 800726a:	e7d0      	b.n	800720e <_dtoa_r+0x24a>
 800726c:	2301      	movs	r3, #1
 800726e:	930f      	str	r3, [sp, #60]	; 0x3c
 8007270:	3b02      	subs	r3, #2
 8007272:	e7f6      	b.n	8007262 <_dtoa_r+0x29e>
 8007274:	3101      	adds	r1, #1
 8007276:	6041      	str	r1, [r0, #4]
 8007278:	0052      	lsls	r2, r2, #1
 800727a:	e7dc      	b.n	8007236 <_dtoa_r+0x272>
 800727c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800727e:	9a06      	ldr	r2, [sp, #24]
 8007280:	601a      	str	r2, [r3, #0]
 8007282:	9b07      	ldr	r3, [sp, #28]
 8007284:	2b0e      	cmp	r3, #14
 8007286:	d900      	bls.n	800728a <_dtoa_r+0x2c6>
 8007288:	e0eb      	b.n	8007462 <_dtoa_r+0x49e>
 800728a:	2c00      	cmp	r4, #0
 800728c:	d100      	bne.n	8007290 <_dtoa_r+0x2cc>
 800728e:	e0e8      	b.n	8007462 <_dtoa_r+0x49e>
 8007290:	9b02      	ldr	r3, [sp, #8]
 8007292:	2b00      	cmp	r3, #0
 8007294:	dd68      	ble.n	8007368 <_dtoa_r+0x3a4>
 8007296:	001a      	movs	r2, r3
 8007298:	210f      	movs	r1, #15
 800729a:	4b2d      	ldr	r3, [pc, #180]	; (8007350 <_dtoa_r+0x38c>)
 800729c:	400a      	ands	r2, r1
 800729e:	00d2      	lsls	r2, r2, #3
 80072a0:	189b      	adds	r3, r3, r2
 80072a2:	681d      	ldr	r5, [r3, #0]
 80072a4:	685e      	ldr	r6, [r3, #4]
 80072a6:	9b02      	ldr	r3, [sp, #8]
 80072a8:	111c      	asrs	r4, r3, #4
 80072aa:	2302      	movs	r3, #2
 80072ac:	9310      	str	r3, [sp, #64]	; 0x40
 80072ae:	9b02      	ldr	r3, [sp, #8]
 80072b0:	05db      	lsls	r3, r3, #23
 80072b2:	d50b      	bpl.n	80072cc <_dtoa_r+0x308>
 80072b4:	4b2b      	ldr	r3, [pc, #172]	; (8007364 <_dtoa_r+0x3a0>)
 80072b6:	400c      	ands	r4, r1
 80072b8:	6a1a      	ldr	r2, [r3, #32]
 80072ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072bc:	9812      	ldr	r0, [sp, #72]	; 0x48
 80072be:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80072c0:	f7f9 ff52 	bl	8001168 <__aeabi_ddiv>
 80072c4:	2303      	movs	r3, #3
 80072c6:	9008      	str	r0, [sp, #32]
 80072c8:	9109      	str	r1, [sp, #36]	; 0x24
 80072ca:	9310      	str	r3, [sp, #64]	; 0x40
 80072cc:	4b25      	ldr	r3, [pc, #148]	; (8007364 <_dtoa_r+0x3a0>)
 80072ce:	9314      	str	r3, [sp, #80]	; 0x50
 80072d0:	2c00      	cmp	r4, #0
 80072d2:	d108      	bne.n	80072e6 <_dtoa_r+0x322>
 80072d4:	9808      	ldr	r0, [sp, #32]
 80072d6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072d8:	002a      	movs	r2, r5
 80072da:	0033      	movs	r3, r6
 80072dc:	f7f9 ff44 	bl	8001168 <__aeabi_ddiv>
 80072e0:	9008      	str	r0, [sp, #32]
 80072e2:	9109      	str	r1, [sp, #36]	; 0x24
 80072e4:	e05c      	b.n	80073a0 <_dtoa_r+0x3dc>
 80072e6:	2301      	movs	r3, #1
 80072e8:	421c      	tst	r4, r3
 80072ea:	d00b      	beq.n	8007304 <_dtoa_r+0x340>
 80072ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80072ee:	0028      	movs	r0, r5
 80072f0:	3301      	adds	r3, #1
 80072f2:	9310      	str	r3, [sp, #64]	; 0x40
 80072f4:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80072f6:	0031      	movs	r1, r6
 80072f8:	681a      	ldr	r2, [r3, #0]
 80072fa:	685b      	ldr	r3, [r3, #4]
 80072fc:	f7fa fb36 	bl	800196c <__aeabi_dmul>
 8007300:	0005      	movs	r5, r0
 8007302:	000e      	movs	r6, r1
 8007304:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007306:	1064      	asrs	r4, r4, #1
 8007308:	3308      	adds	r3, #8
 800730a:	e7e0      	b.n	80072ce <_dtoa_r+0x30a>
 800730c:	08009aad 	.word	0x08009aad
 8007310:	08009ac4 	.word	0x08009ac4
 8007314:	7ff00000 	.word	0x7ff00000
 8007318:	0000270f 	.word	0x0000270f
 800731c:	08009aa9 	.word	0x08009aa9
 8007320:	08009aac 	.word	0x08009aac
 8007324:	08009a7c 	.word	0x08009a7c
 8007328:	08009a7d 	.word	0x08009a7d
 800732c:	3ff00000 	.word	0x3ff00000
 8007330:	fffffc01 	.word	0xfffffc01
 8007334:	3ff80000 	.word	0x3ff80000
 8007338:	636f4361 	.word	0x636f4361
 800733c:	3fd287a7 	.word	0x3fd287a7
 8007340:	8b60c8b3 	.word	0x8b60c8b3
 8007344:	3fc68a28 	.word	0x3fc68a28
 8007348:	509f79fb 	.word	0x509f79fb
 800734c:	3fd34413 	.word	0x3fd34413
 8007350:	08009bb8 	.word	0x08009bb8
 8007354:	00000432 	.word	0x00000432
 8007358:	00000412 	.word	0x00000412
 800735c:	fe100000 	.word	0xfe100000
 8007360:	08009b1f 	.word	0x08009b1f
 8007364:	08009b90 	.word	0x08009b90
 8007368:	2302      	movs	r3, #2
 800736a:	9310      	str	r3, [sp, #64]	; 0x40
 800736c:	9b02      	ldr	r3, [sp, #8]
 800736e:	2b00      	cmp	r3, #0
 8007370:	d016      	beq.n	80073a0 <_dtoa_r+0x3dc>
 8007372:	9812      	ldr	r0, [sp, #72]	; 0x48
 8007374:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007376:	425c      	negs	r4, r3
 8007378:	230f      	movs	r3, #15
 800737a:	4ab6      	ldr	r2, [pc, #728]	; (8007654 <_dtoa_r+0x690>)
 800737c:	4023      	ands	r3, r4
 800737e:	00db      	lsls	r3, r3, #3
 8007380:	18d3      	adds	r3, r2, r3
 8007382:	681a      	ldr	r2, [r3, #0]
 8007384:	685b      	ldr	r3, [r3, #4]
 8007386:	f7fa faf1 	bl	800196c <__aeabi_dmul>
 800738a:	2601      	movs	r6, #1
 800738c:	2300      	movs	r3, #0
 800738e:	9008      	str	r0, [sp, #32]
 8007390:	9109      	str	r1, [sp, #36]	; 0x24
 8007392:	4db1      	ldr	r5, [pc, #708]	; (8007658 <_dtoa_r+0x694>)
 8007394:	1124      	asrs	r4, r4, #4
 8007396:	2c00      	cmp	r4, #0
 8007398:	d000      	beq.n	800739c <_dtoa_r+0x3d8>
 800739a:	e094      	b.n	80074c6 <_dtoa_r+0x502>
 800739c:	2b00      	cmp	r3, #0
 800739e:	d19f      	bne.n	80072e0 <_dtoa_r+0x31c>
 80073a0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d100      	bne.n	80073a8 <_dtoa_r+0x3e4>
 80073a6:	e09b      	b.n	80074e0 <_dtoa_r+0x51c>
 80073a8:	9c08      	ldr	r4, [sp, #32]
 80073aa:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073ac:	2200      	movs	r2, #0
 80073ae:	0020      	movs	r0, r4
 80073b0:	0029      	movs	r1, r5
 80073b2:	4baa      	ldr	r3, [pc, #680]	; (800765c <_dtoa_r+0x698>)
 80073b4:	f7f9 f850 	bl	8000458 <__aeabi_dcmplt>
 80073b8:	2800      	cmp	r0, #0
 80073ba:	d100      	bne.n	80073be <_dtoa_r+0x3fa>
 80073bc:	e090      	b.n	80074e0 <_dtoa_r+0x51c>
 80073be:	9b07      	ldr	r3, [sp, #28]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d100      	bne.n	80073c6 <_dtoa_r+0x402>
 80073c4:	e08c      	b.n	80074e0 <_dtoa_r+0x51c>
 80073c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	dd46      	ble.n	800745a <_dtoa_r+0x496>
 80073cc:	9b02      	ldr	r3, [sp, #8]
 80073ce:	2200      	movs	r2, #0
 80073d0:	0020      	movs	r0, r4
 80073d2:	0029      	movs	r1, r5
 80073d4:	1e5e      	subs	r6, r3, #1
 80073d6:	4ba2      	ldr	r3, [pc, #648]	; (8007660 <_dtoa_r+0x69c>)
 80073d8:	f7fa fac8 	bl	800196c <__aeabi_dmul>
 80073dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80073de:	9008      	str	r0, [sp, #32]
 80073e0:	9109      	str	r1, [sp, #36]	; 0x24
 80073e2:	3301      	adds	r3, #1
 80073e4:	9310      	str	r3, [sp, #64]	; 0x40
 80073e6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80073e8:	9810      	ldr	r0, [sp, #64]	; 0x40
 80073ea:	9c08      	ldr	r4, [sp, #32]
 80073ec:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80073ee:	9314      	str	r3, [sp, #80]	; 0x50
 80073f0:	f7fb f90e 	bl	8002610 <__aeabi_i2d>
 80073f4:	0022      	movs	r2, r4
 80073f6:	002b      	movs	r3, r5
 80073f8:	f7fa fab8 	bl	800196c <__aeabi_dmul>
 80073fc:	2200      	movs	r2, #0
 80073fe:	4b99      	ldr	r3, [pc, #612]	; (8007664 <_dtoa_r+0x6a0>)
 8007400:	f7f9 fb76 	bl	8000af0 <__aeabi_dadd>
 8007404:	9010      	str	r0, [sp, #64]	; 0x40
 8007406:	9111      	str	r1, [sp, #68]	; 0x44
 8007408:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800740a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800740c:	9208      	str	r2, [sp, #32]
 800740e:	9309      	str	r3, [sp, #36]	; 0x24
 8007410:	4a95      	ldr	r2, [pc, #596]	; (8007668 <_dtoa_r+0x6a4>)
 8007412:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007414:	4694      	mov	ip, r2
 8007416:	4463      	add	r3, ip
 8007418:	9317      	str	r3, [sp, #92]	; 0x5c
 800741a:	9309      	str	r3, [sp, #36]	; 0x24
 800741c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800741e:	2b00      	cmp	r3, #0
 8007420:	d161      	bne.n	80074e6 <_dtoa_r+0x522>
 8007422:	2200      	movs	r2, #0
 8007424:	0020      	movs	r0, r4
 8007426:	0029      	movs	r1, r5
 8007428:	4b90      	ldr	r3, [pc, #576]	; (800766c <_dtoa_r+0x6a8>)
 800742a:	f7fa fd0b 	bl	8001e44 <__aeabi_dsub>
 800742e:	9a08      	ldr	r2, [sp, #32]
 8007430:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007432:	0004      	movs	r4, r0
 8007434:	000d      	movs	r5, r1
 8007436:	f7f9 f823 	bl	8000480 <__aeabi_dcmpgt>
 800743a:	2800      	cmp	r0, #0
 800743c:	d000      	beq.n	8007440 <_dtoa_r+0x47c>
 800743e:	e2af      	b.n	80079a0 <_dtoa_r+0x9dc>
 8007440:	488b      	ldr	r0, [pc, #556]	; (8007670 <_dtoa_r+0x6ac>)
 8007442:	9911      	ldr	r1, [sp, #68]	; 0x44
 8007444:	4684      	mov	ip, r0
 8007446:	4461      	add	r1, ip
 8007448:	000b      	movs	r3, r1
 800744a:	0020      	movs	r0, r4
 800744c:	0029      	movs	r1, r5
 800744e:	9a08      	ldr	r2, [sp, #32]
 8007450:	f7f9 f802 	bl	8000458 <__aeabi_dcmplt>
 8007454:	2800      	cmp	r0, #0
 8007456:	d000      	beq.n	800745a <_dtoa_r+0x496>
 8007458:	e29f      	b.n	800799a <_dtoa_r+0x9d6>
 800745a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800745c:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800745e:	9308      	str	r3, [sp, #32]
 8007460:	9409      	str	r4, [sp, #36]	; 0x24
 8007462:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8007464:	2b00      	cmp	r3, #0
 8007466:	da00      	bge.n	800746a <_dtoa_r+0x4a6>
 8007468:	e172      	b.n	8007750 <_dtoa_r+0x78c>
 800746a:	9a02      	ldr	r2, [sp, #8]
 800746c:	2a0e      	cmp	r2, #14
 800746e:	dd00      	ble.n	8007472 <_dtoa_r+0x4ae>
 8007470:	e16e      	b.n	8007750 <_dtoa_r+0x78c>
 8007472:	4b78      	ldr	r3, [pc, #480]	; (8007654 <_dtoa_r+0x690>)
 8007474:	00d2      	lsls	r2, r2, #3
 8007476:	189b      	adds	r3, r3, r2
 8007478:	685c      	ldr	r4, [r3, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	930a      	str	r3, [sp, #40]	; 0x28
 800747e:	940b      	str	r4, [sp, #44]	; 0x2c
 8007480:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007482:	2b00      	cmp	r3, #0
 8007484:	db00      	blt.n	8007488 <_dtoa_r+0x4c4>
 8007486:	e0f7      	b.n	8007678 <_dtoa_r+0x6b4>
 8007488:	9b07      	ldr	r3, [sp, #28]
 800748a:	2b00      	cmp	r3, #0
 800748c:	dd00      	ble.n	8007490 <_dtoa_r+0x4cc>
 800748e:	e0f3      	b.n	8007678 <_dtoa_r+0x6b4>
 8007490:	d000      	beq.n	8007494 <_dtoa_r+0x4d0>
 8007492:	e282      	b.n	800799a <_dtoa_r+0x9d6>
 8007494:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007496:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007498:	2200      	movs	r2, #0
 800749a:	4b74      	ldr	r3, [pc, #464]	; (800766c <_dtoa_r+0x6a8>)
 800749c:	f7fa fa66 	bl	800196c <__aeabi_dmul>
 80074a0:	9a08      	ldr	r2, [sp, #32]
 80074a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074a4:	f7f8 fff6 	bl	8000494 <__aeabi_dcmpge>
 80074a8:	9e07      	ldr	r6, [sp, #28]
 80074aa:	0035      	movs	r5, r6
 80074ac:	2800      	cmp	r0, #0
 80074ae:	d000      	beq.n	80074b2 <_dtoa_r+0x4ee>
 80074b0:	e259      	b.n	8007966 <_dtoa_r+0x9a2>
 80074b2:	9b06      	ldr	r3, [sp, #24]
 80074b4:	9a06      	ldr	r2, [sp, #24]
 80074b6:	3301      	adds	r3, #1
 80074b8:	9308      	str	r3, [sp, #32]
 80074ba:	2331      	movs	r3, #49	; 0x31
 80074bc:	7013      	strb	r3, [r2, #0]
 80074be:	9b02      	ldr	r3, [sp, #8]
 80074c0:	3301      	adds	r3, #1
 80074c2:	9302      	str	r3, [sp, #8]
 80074c4:	e254      	b.n	8007970 <_dtoa_r+0x9ac>
 80074c6:	4234      	tst	r4, r6
 80074c8:	d007      	beq.n	80074da <_dtoa_r+0x516>
 80074ca:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80074cc:	3301      	adds	r3, #1
 80074ce:	9310      	str	r3, [sp, #64]	; 0x40
 80074d0:	682a      	ldr	r2, [r5, #0]
 80074d2:	686b      	ldr	r3, [r5, #4]
 80074d4:	f7fa fa4a 	bl	800196c <__aeabi_dmul>
 80074d8:	0033      	movs	r3, r6
 80074da:	1064      	asrs	r4, r4, #1
 80074dc:	3508      	adds	r5, #8
 80074de:	e75a      	b.n	8007396 <_dtoa_r+0x3d2>
 80074e0:	9e02      	ldr	r6, [sp, #8]
 80074e2:	9b07      	ldr	r3, [sp, #28]
 80074e4:	e780      	b.n	80073e8 <_dtoa_r+0x424>
 80074e6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80074e8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80074ea:	1e5a      	subs	r2, r3, #1
 80074ec:	4b59      	ldr	r3, [pc, #356]	; (8007654 <_dtoa_r+0x690>)
 80074ee:	00d2      	lsls	r2, r2, #3
 80074f0:	189b      	adds	r3, r3, r2
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	685b      	ldr	r3, [r3, #4]
 80074f6:	2900      	cmp	r1, #0
 80074f8:	d051      	beq.n	800759e <_dtoa_r+0x5da>
 80074fa:	2000      	movs	r0, #0
 80074fc:	495d      	ldr	r1, [pc, #372]	; (8007674 <_dtoa_r+0x6b0>)
 80074fe:	f7f9 fe33 	bl	8001168 <__aeabi_ddiv>
 8007502:	9a08      	ldr	r2, [sp, #32]
 8007504:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007506:	f7fa fc9d 	bl	8001e44 <__aeabi_dsub>
 800750a:	9a06      	ldr	r2, [sp, #24]
 800750c:	9b06      	ldr	r3, [sp, #24]
 800750e:	4694      	mov	ip, r2
 8007510:	9317      	str	r3, [sp, #92]	; 0x5c
 8007512:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007514:	9010      	str	r0, [sp, #64]	; 0x40
 8007516:	9111      	str	r1, [sp, #68]	; 0x44
 8007518:	4463      	add	r3, ip
 800751a:	9319      	str	r3, [sp, #100]	; 0x64
 800751c:	0029      	movs	r1, r5
 800751e:	0020      	movs	r0, r4
 8007520:	f7fb f840 	bl	80025a4 <__aeabi_d2iz>
 8007524:	9014      	str	r0, [sp, #80]	; 0x50
 8007526:	f7fb f873 	bl	8002610 <__aeabi_i2d>
 800752a:	0002      	movs	r2, r0
 800752c:	000b      	movs	r3, r1
 800752e:	0020      	movs	r0, r4
 8007530:	0029      	movs	r1, r5
 8007532:	f7fa fc87 	bl	8001e44 <__aeabi_dsub>
 8007536:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007538:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800753a:	3301      	adds	r3, #1
 800753c:	9308      	str	r3, [sp, #32]
 800753e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007540:	0004      	movs	r4, r0
 8007542:	3330      	adds	r3, #48	; 0x30
 8007544:	7013      	strb	r3, [r2, #0]
 8007546:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007548:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800754a:	000d      	movs	r5, r1
 800754c:	f7f8 ff84 	bl	8000458 <__aeabi_dcmplt>
 8007550:	2800      	cmp	r0, #0
 8007552:	d175      	bne.n	8007640 <_dtoa_r+0x67c>
 8007554:	0022      	movs	r2, r4
 8007556:	002b      	movs	r3, r5
 8007558:	2000      	movs	r0, #0
 800755a:	4940      	ldr	r1, [pc, #256]	; (800765c <_dtoa_r+0x698>)
 800755c:	f7fa fc72 	bl	8001e44 <__aeabi_dsub>
 8007560:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007562:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007564:	f7f8 ff78 	bl	8000458 <__aeabi_dcmplt>
 8007568:	2800      	cmp	r0, #0
 800756a:	d000      	beq.n	800756e <_dtoa_r+0x5aa>
 800756c:	e0d2      	b.n	8007714 <_dtoa_r+0x750>
 800756e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007570:	9a08      	ldr	r2, [sp, #32]
 8007572:	4293      	cmp	r3, r2
 8007574:	d100      	bne.n	8007578 <_dtoa_r+0x5b4>
 8007576:	e770      	b.n	800745a <_dtoa_r+0x496>
 8007578:	9810      	ldr	r0, [sp, #64]	; 0x40
 800757a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800757c:	2200      	movs	r2, #0
 800757e:	4b38      	ldr	r3, [pc, #224]	; (8007660 <_dtoa_r+0x69c>)
 8007580:	f7fa f9f4 	bl	800196c <__aeabi_dmul>
 8007584:	4b36      	ldr	r3, [pc, #216]	; (8007660 <_dtoa_r+0x69c>)
 8007586:	9010      	str	r0, [sp, #64]	; 0x40
 8007588:	9111      	str	r1, [sp, #68]	; 0x44
 800758a:	2200      	movs	r2, #0
 800758c:	0020      	movs	r0, r4
 800758e:	0029      	movs	r1, r5
 8007590:	f7fa f9ec 	bl	800196c <__aeabi_dmul>
 8007594:	9b08      	ldr	r3, [sp, #32]
 8007596:	0004      	movs	r4, r0
 8007598:	000d      	movs	r5, r1
 800759a:	9317      	str	r3, [sp, #92]	; 0x5c
 800759c:	e7be      	b.n	800751c <_dtoa_r+0x558>
 800759e:	9808      	ldr	r0, [sp, #32]
 80075a0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80075a2:	f7fa f9e3 	bl	800196c <__aeabi_dmul>
 80075a6:	9a06      	ldr	r2, [sp, #24]
 80075a8:	9b06      	ldr	r3, [sp, #24]
 80075aa:	4694      	mov	ip, r2
 80075ac:	9308      	str	r3, [sp, #32]
 80075ae:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075b0:	9010      	str	r0, [sp, #64]	; 0x40
 80075b2:	9111      	str	r1, [sp, #68]	; 0x44
 80075b4:	4463      	add	r3, ip
 80075b6:	9319      	str	r3, [sp, #100]	; 0x64
 80075b8:	0029      	movs	r1, r5
 80075ba:	0020      	movs	r0, r4
 80075bc:	f7fa fff2 	bl	80025a4 <__aeabi_d2iz>
 80075c0:	9017      	str	r0, [sp, #92]	; 0x5c
 80075c2:	f7fb f825 	bl	8002610 <__aeabi_i2d>
 80075c6:	0002      	movs	r2, r0
 80075c8:	000b      	movs	r3, r1
 80075ca:	0020      	movs	r0, r4
 80075cc:	0029      	movs	r1, r5
 80075ce:	f7fa fc39 	bl	8001e44 <__aeabi_dsub>
 80075d2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80075d4:	9a08      	ldr	r2, [sp, #32]
 80075d6:	3330      	adds	r3, #48	; 0x30
 80075d8:	7013      	strb	r3, [r2, #0]
 80075da:	0013      	movs	r3, r2
 80075dc:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80075de:	3301      	adds	r3, #1
 80075e0:	0004      	movs	r4, r0
 80075e2:	000d      	movs	r5, r1
 80075e4:	9308      	str	r3, [sp, #32]
 80075e6:	4293      	cmp	r3, r2
 80075e8:	d12c      	bne.n	8007644 <_dtoa_r+0x680>
 80075ea:	9810      	ldr	r0, [sp, #64]	; 0x40
 80075ec:	9911      	ldr	r1, [sp, #68]	; 0x44
 80075ee:	9a06      	ldr	r2, [sp, #24]
 80075f0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80075f2:	4694      	mov	ip, r2
 80075f4:	4463      	add	r3, ip
 80075f6:	2200      	movs	r2, #0
 80075f8:	9308      	str	r3, [sp, #32]
 80075fa:	4b1e      	ldr	r3, [pc, #120]	; (8007674 <_dtoa_r+0x6b0>)
 80075fc:	f7f9 fa78 	bl	8000af0 <__aeabi_dadd>
 8007600:	0002      	movs	r2, r0
 8007602:	000b      	movs	r3, r1
 8007604:	0020      	movs	r0, r4
 8007606:	0029      	movs	r1, r5
 8007608:	f7f8 ff3a 	bl	8000480 <__aeabi_dcmpgt>
 800760c:	2800      	cmp	r0, #0
 800760e:	d000      	beq.n	8007612 <_dtoa_r+0x64e>
 8007610:	e080      	b.n	8007714 <_dtoa_r+0x750>
 8007612:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8007614:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007616:	2000      	movs	r0, #0
 8007618:	4916      	ldr	r1, [pc, #88]	; (8007674 <_dtoa_r+0x6b0>)
 800761a:	f7fa fc13 	bl	8001e44 <__aeabi_dsub>
 800761e:	0002      	movs	r2, r0
 8007620:	000b      	movs	r3, r1
 8007622:	0020      	movs	r0, r4
 8007624:	0029      	movs	r1, r5
 8007626:	f7f8 ff17 	bl	8000458 <__aeabi_dcmplt>
 800762a:	2800      	cmp	r0, #0
 800762c:	d100      	bne.n	8007630 <_dtoa_r+0x66c>
 800762e:	e714      	b.n	800745a <_dtoa_r+0x496>
 8007630:	9b08      	ldr	r3, [sp, #32]
 8007632:	001a      	movs	r2, r3
 8007634:	3a01      	subs	r2, #1
 8007636:	9208      	str	r2, [sp, #32]
 8007638:	7812      	ldrb	r2, [r2, #0]
 800763a:	2a30      	cmp	r2, #48	; 0x30
 800763c:	d0f8      	beq.n	8007630 <_dtoa_r+0x66c>
 800763e:	9308      	str	r3, [sp, #32]
 8007640:	9602      	str	r6, [sp, #8]
 8007642:	e055      	b.n	80076f0 <_dtoa_r+0x72c>
 8007644:	2200      	movs	r2, #0
 8007646:	4b06      	ldr	r3, [pc, #24]	; (8007660 <_dtoa_r+0x69c>)
 8007648:	f7fa f990 	bl	800196c <__aeabi_dmul>
 800764c:	0004      	movs	r4, r0
 800764e:	000d      	movs	r5, r1
 8007650:	e7b2      	b.n	80075b8 <_dtoa_r+0x5f4>
 8007652:	46c0      	nop			; (mov r8, r8)
 8007654:	08009bb8 	.word	0x08009bb8
 8007658:	08009b90 	.word	0x08009b90
 800765c:	3ff00000 	.word	0x3ff00000
 8007660:	40240000 	.word	0x40240000
 8007664:	401c0000 	.word	0x401c0000
 8007668:	fcc00000 	.word	0xfcc00000
 800766c:	40140000 	.word	0x40140000
 8007670:	7cc00000 	.word	0x7cc00000
 8007674:	3fe00000 	.word	0x3fe00000
 8007678:	9b07      	ldr	r3, [sp, #28]
 800767a:	9e06      	ldr	r6, [sp, #24]
 800767c:	3b01      	subs	r3, #1
 800767e:	199b      	adds	r3, r3, r6
 8007680:	930c      	str	r3, [sp, #48]	; 0x30
 8007682:	9c08      	ldr	r4, [sp, #32]
 8007684:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8007686:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007688:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800768a:	0020      	movs	r0, r4
 800768c:	0029      	movs	r1, r5
 800768e:	f7f9 fd6b 	bl	8001168 <__aeabi_ddiv>
 8007692:	f7fa ff87 	bl	80025a4 <__aeabi_d2iz>
 8007696:	9007      	str	r0, [sp, #28]
 8007698:	f7fa ffba 	bl	8002610 <__aeabi_i2d>
 800769c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800769e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076a0:	f7fa f964 	bl	800196c <__aeabi_dmul>
 80076a4:	0002      	movs	r2, r0
 80076a6:	000b      	movs	r3, r1
 80076a8:	0020      	movs	r0, r4
 80076aa:	0029      	movs	r1, r5
 80076ac:	f7fa fbca 	bl	8001e44 <__aeabi_dsub>
 80076b0:	0033      	movs	r3, r6
 80076b2:	9a07      	ldr	r2, [sp, #28]
 80076b4:	3601      	adds	r6, #1
 80076b6:	3230      	adds	r2, #48	; 0x30
 80076b8:	701a      	strb	r2, [r3, #0]
 80076ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80076bc:	9608      	str	r6, [sp, #32]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d139      	bne.n	8007736 <_dtoa_r+0x772>
 80076c2:	0002      	movs	r2, r0
 80076c4:	000b      	movs	r3, r1
 80076c6:	f7f9 fa13 	bl	8000af0 <__aeabi_dadd>
 80076ca:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076cc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076ce:	0004      	movs	r4, r0
 80076d0:	000d      	movs	r5, r1
 80076d2:	f7f8 fed5 	bl	8000480 <__aeabi_dcmpgt>
 80076d6:	2800      	cmp	r0, #0
 80076d8:	d11b      	bne.n	8007712 <_dtoa_r+0x74e>
 80076da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80076dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80076de:	0020      	movs	r0, r4
 80076e0:	0029      	movs	r1, r5
 80076e2:	f7f8 feb3 	bl	800044c <__aeabi_dcmpeq>
 80076e6:	2800      	cmp	r0, #0
 80076e8:	d002      	beq.n	80076f0 <_dtoa_r+0x72c>
 80076ea:	9b07      	ldr	r3, [sp, #28]
 80076ec:	07db      	lsls	r3, r3, #31
 80076ee:	d410      	bmi.n	8007712 <_dtoa_r+0x74e>
 80076f0:	0038      	movs	r0, r7
 80076f2:	9905      	ldr	r1, [sp, #20]
 80076f4:	f000 fade 	bl	8007cb4 <_Bfree>
 80076f8:	2300      	movs	r3, #0
 80076fa:	9a08      	ldr	r2, [sp, #32]
 80076fc:	9802      	ldr	r0, [sp, #8]
 80076fe:	7013      	strb	r3, [r2, #0]
 8007700:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8007702:	3001      	adds	r0, #1
 8007704:	6018      	str	r0, [r3, #0]
 8007706:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8007708:	2b00      	cmp	r3, #0
 800770a:	d100      	bne.n	800770e <_dtoa_r+0x74a>
 800770c:	e4a6      	b.n	800705c <_dtoa_r+0x98>
 800770e:	601a      	str	r2, [r3, #0]
 8007710:	e4a4      	b.n	800705c <_dtoa_r+0x98>
 8007712:	9e02      	ldr	r6, [sp, #8]
 8007714:	9b08      	ldr	r3, [sp, #32]
 8007716:	9308      	str	r3, [sp, #32]
 8007718:	3b01      	subs	r3, #1
 800771a:	781a      	ldrb	r2, [r3, #0]
 800771c:	2a39      	cmp	r2, #57	; 0x39
 800771e:	d106      	bne.n	800772e <_dtoa_r+0x76a>
 8007720:	9a06      	ldr	r2, [sp, #24]
 8007722:	429a      	cmp	r2, r3
 8007724:	d1f7      	bne.n	8007716 <_dtoa_r+0x752>
 8007726:	2230      	movs	r2, #48	; 0x30
 8007728:	9906      	ldr	r1, [sp, #24]
 800772a:	3601      	adds	r6, #1
 800772c:	700a      	strb	r2, [r1, #0]
 800772e:	781a      	ldrb	r2, [r3, #0]
 8007730:	3201      	adds	r2, #1
 8007732:	701a      	strb	r2, [r3, #0]
 8007734:	e784      	b.n	8007640 <_dtoa_r+0x67c>
 8007736:	2200      	movs	r2, #0
 8007738:	4baa      	ldr	r3, [pc, #680]	; (80079e4 <_dtoa_r+0xa20>)
 800773a:	f7fa f917 	bl	800196c <__aeabi_dmul>
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	0004      	movs	r4, r0
 8007744:	000d      	movs	r5, r1
 8007746:	f7f8 fe81 	bl	800044c <__aeabi_dcmpeq>
 800774a:	2800      	cmp	r0, #0
 800774c:	d09b      	beq.n	8007686 <_dtoa_r+0x6c2>
 800774e:	e7cf      	b.n	80076f0 <_dtoa_r+0x72c>
 8007750:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8007752:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007754:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8007756:	2d00      	cmp	r5, #0
 8007758:	d012      	beq.n	8007780 <_dtoa_r+0x7bc>
 800775a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800775c:	2a01      	cmp	r2, #1
 800775e:	dc66      	bgt.n	800782e <_dtoa_r+0x86a>
 8007760:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8007762:	2a00      	cmp	r2, #0
 8007764:	d05d      	beq.n	8007822 <_dtoa_r+0x85e>
 8007766:	4aa0      	ldr	r2, [pc, #640]	; (80079e8 <_dtoa_r+0xa24>)
 8007768:	189b      	adds	r3, r3, r2
 800776a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800776c:	2101      	movs	r1, #1
 800776e:	18d2      	adds	r2, r2, r3
 8007770:	920a      	str	r2, [sp, #40]	; 0x28
 8007772:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8007774:	0038      	movs	r0, r7
 8007776:	18d3      	adds	r3, r2, r3
 8007778:	930d      	str	r3, [sp, #52]	; 0x34
 800777a:	f000 fb4b 	bl	8007e14 <__i2b>
 800777e:	0005      	movs	r5, r0
 8007780:	2c00      	cmp	r4, #0
 8007782:	dd0e      	ble.n	80077a2 <_dtoa_r+0x7de>
 8007784:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007786:	2b00      	cmp	r3, #0
 8007788:	dd0b      	ble.n	80077a2 <_dtoa_r+0x7de>
 800778a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800778c:	0023      	movs	r3, r4
 800778e:	4294      	cmp	r4, r2
 8007790:	dd00      	ble.n	8007794 <_dtoa_r+0x7d0>
 8007792:	0013      	movs	r3, r2
 8007794:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007796:	1ae4      	subs	r4, r4, r3
 8007798:	1ad2      	subs	r2, r2, r3
 800779a:	920a      	str	r2, [sp, #40]	; 0x28
 800779c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800779e:	1ad3      	subs	r3, r2, r3
 80077a0:	930d      	str	r3, [sp, #52]	; 0x34
 80077a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d01f      	beq.n	80077e8 <_dtoa_r+0x824>
 80077a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d054      	beq.n	8007858 <_dtoa_r+0x894>
 80077ae:	2e00      	cmp	r6, #0
 80077b0:	dd11      	ble.n	80077d6 <_dtoa_r+0x812>
 80077b2:	0029      	movs	r1, r5
 80077b4:	0032      	movs	r2, r6
 80077b6:	0038      	movs	r0, r7
 80077b8:	f000 fbf2 	bl	8007fa0 <__pow5mult>
 80077bc:	9a05      	ldr	r2, [sp, #20]
 80077be:	0001      	movs	r1, r0
 80077c0:	0005      	movs	r5, r0
 80077c2:	0038      	movs	r0, r7
 80077c4:	f000 fb3c 	bl	8007e40 <__multiply>
 80077c8:	9905      	ldr	r1, [sp, #20]
 80077ca:	9014      	str	r0, [sp, #80]	; 0x50
 80077cc:	0038      	movs	r0, r7
 80077ce:	f000 fa71 	bl	8007cb4 <_Bfree>
 80077d2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80077d4:	9305      	str	r3, [sp, #20]
 80077d6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80077d8:	1b9a      	subs	r2, r3, r6
 80077da:	42b3      	cmp	r3, r6
 80077dc:	d004      	beq.n	80077e8 <_dtoa_r+0x824>
 80077de:	0038      	movs	r0, r7
 80077e0:	9905      	ldr	r1, [sp, #20]
 80077e2:	f000 fbdd 	bl	8007fa0 <__pow5mult>
 80077e6:	9005      	str	r0, [sp, #20]
 80077e8:	2101      	movs	r1, #1
 80077ea:	0038      	movs	r0, r7
 80077ec:	f000 fb12 	bl	8007e14 <__i2b>
 80077f0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80077f2:	0006      	movs	r6, r0
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	dd31      	ble.n	800785c <_dtoa_r+0x898>
 80077f8:	001a      	movs	r2, r3
 80077fa:	0001      	movs	r1, r0
 80077fc:	0038      	movs	r0, r7
 80077fe:	f000 fbcf 	bl	8007fa0 <__pow5mult>
 8007802:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007804:	0006      	movs	r6, r0
 8007806:	2b01      	cmp	r3, #1
 8007808:	dd2d      	ble.n	8007866 <_dtoa_r+0x8a2>
 800780a:	2300      	movs	r3, #0
 800780c:	930e      	str	r3, [sp, #56]	; 0x38
 800780e:	6933      	ldr	r3, [r6, #16]
 8007810:	3303      	adds	r3, #3
 8007812:	009b      	lsls	r3, r3, #2
 8007814:	18f3      	adds	r3, r6, r3
 8007816:	6858      	ldr	r0, [r3, #4]
 8007818:	f000 fab4 	bl	8007d84 <__hi0bits>
 800781c:	2320      	movs	r3, #32
 800781e:	1a18      	subs	r0, r3, r0
 8007820:	e039      	b.n	8007896 <_dtoa_r+0x8d2>
 8007822:	2336      	movs	r3, #54	; 0x36
 8007824:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8007826:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8007828:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800782a:	1a9b      	subs	r3, r3, r2
 800782c:	e79d      	b.n	800776a <_dtoa_r+0x7a6>
 800782e:	9b07      	ldr	r3, [sp, #28]
 8007830:	1e5e      	subs	r6, r3, #1
 8007832:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007834:	42b3      	cmp	r3, r6
 8007836:	db07      	blt.n	8007848 <_dtoa_r+0x884>
 8007838:	1b9e      	subs	r6, r3, r6
 800783a:	9b07      	ldr	r3, [sp, #28]
 800783c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800783e:	2b00      	cmp	r3, #0
 8007840:	da93      	bge.n	800776a <_dtoa_r+0x7a6>
 8007842:	1ae4      	subs	r4, r4, r3
 8007844:	2300      	movs	r3, #0
 8007846:	e790      	b.n	800776a <_dtoa_r+0x7a6>
 8007848:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800784a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800784c:	1af3      	subs	r3, r6, r3
 800784e:	18d3      	adds	r3, r2, r3
 8007850:	960e      	str	r6, [sp, #56]	; 0x38
 8007852:	9315      	str	r3, [sp, #84]	; 0x54
 8007854:	2600      	movs	r6, #0
 8007856:	e7f0      	b.n	800783a <_dtoa_r+0x876>
 8007858:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800785a:	e7c0      	b.n	80077de <_dtoa_r+0x81a>
 800785c:	2300      	movs	r3, #0
 800785e:	930e      	str	r3, [sp, #56]	; 0x38
 8007860:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007862:	2b01      	cmp	r3, #1
 8007864:	dc13      	bgt.n	800788e <_dtoa_r+0x8ca>
 8007866:	2300      	movs	r3, #0
 8007868:	930e      	str	r3, [sp, #56]	; 0x38
 800786a:	9b08      	ldr	r3, [sp, #32]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10e      	bne.n	800788e <_dtoa_r+0x8ca>
 8007870:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007872:	031b      	lsls	r3, r3, #12
 8007874:	d10b      	bne.n	800788e <_dtoa_r+0x8ca>
 8007876:	4b5d      	ldr	r3, [pc, #372]	; (80079ec <_dtoa_r+0xa28>)
 8007878:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800787a:	4213      	tst	r3, r2
 800787c:	d007      	beq.n	800788e <_dtoa_r+0x8ca>
 800787e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007880:	3301      	adds	r3, #1
 8007882:	930a      	str	r3, [sp, #40]	; 0x28
 8007884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007886:	3301      	adds	r3, #1
 8007888:	930d      	str	r3, [sp, #52]	; 0x34
 800788a:	2301      	movs	r3, #1
 800788c:	930e      	str	r3, [sp, #56]	; 0x38
 800788e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007890:	2001      	movs	r0, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1bb      	bne.n	800780e <_dtoa_r+0x84a>
 8007896:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007898:	221f      	movs	r2, #31
 800789a:	1818      	adds	r0, r3, r0
 800789c:	0003      	movs	r3, r0
 800789e:	4013      	ands	r3, r2
 80078a0:	4210      	tst	r0, r2
 80078a2:	d046      	beq.n	8007932 <_dtoa_r+0x96e>
 80078a4:	3201      	adds	r2, #1
 80078a6:	1ad2      	subs	r2, r2, r3
 80078a8:	2a04      	cmp	r2, #4
 80078aa:	dd3f      	ble.n	800792c <_dtoa_r+0x968>
 80078ac:	221c      	movs	r2, #28
 80078ae:	1ad3      	subs	r3, r2, r3
 80078b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078b2:	18e4      	adds	r4, r4, r3
 80078b4:	18d2      	adds	r2, r2, r3
 80078b6:	920a      	str	r2, [sp, #40]	; 0x28
 80078b8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80078ba:	18d3      	adds	r3, r2, r3
 80078bc:	930d      	str	r3, [sp, #52]	; 0x34
 80078be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	dd05      	ble.n	80078d0 <_dtoa_r+0x90c>
 80078c4:	001a      	movs	r2, r3
 80078c6:	0038      	movs	r0, r7
 80078c8:	9905      	ldr	r1, [sp, #20]
 80078ca:	f000 fbc5 	bl	8008058 <__lshift>
 80078ce:	9005      	str	r0, [sp, #20]
 80078d0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	dd05      	ble.n	80078e2 <_dtoa_r+0x91e>
 80078d6:	0031      	movs	r1, r6
 80078d8:	001a      	movs	r2, r3
 80078da:	0038      	movs	r0, r7
 80078dc:	f000 fbbc 	bl	8008058 <__lshift>
 80078e0:	0006      	movs	r6, r0
 80078e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d026      	beq.n	8007936 <_dtoa_r+0x972>
 80078e8:	0031      	movs	r1, r6
 80078ea:	9805      	ldr	r0, [sp, #20]
 80078ec:	f000 fc22 	bl	8008134 <__mcmp>
 80078f0:	2800      	cmp	r0, #0
 80078f2:	da20      	bge.n	8007936 <_dtoa_r+0x972>
 80078f4:	9b02      	ldr	r3, [sp, #8]
 80078f6:	220a      	movs	r2, #10
 80078f8:	3b01      	subs	r3, #1
 80078fa:	9302      	str	r3, [sp, #8]
 80078fc:	0038      	movs	r0, r7
 80078fe:	2300      	movs	r3, #0
 8007900:	9905      	ldr	r1, [sp, #20]
 8007902:	f000 f9fb 	bl	8007cfc <__multadd>
 8007906:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007908:	9005      	str	r0, [sp, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d100      	bne.n	8007910 <_dtoa_r+0x94c>
 800790e:	e166      	b.n	8007bde <_dtoa_r+0xc1a>
 8007910:	2300      	movs	r3, #0
 8007912:	0029      	movs	r1, r5
 8007914:	220a      	movs	r2, #10
 8007916:	0038      	movs	r0, r7
 8007918:	f000 f9f0 	bl	8007cfc <__multadd>
 800791c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800791e:	0005      	movs	r5, r0
 8007920:	2b00      	cmp	r3, #0
 8007922:	dc47      	bgt.n	80079b4 <_dtoa_r+0x9f0>
 8007924:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007926:	2b02      	cmp	r3, #2
 8007928:	dc0d      	bgt.n	8007946 <_dtoa_r+0x982>
 800792a:	e043      	b.n	80079b4 <_dtoa_r+0x9f0>
 800792c:	2a04      	cmp	r2, #4
 800792e:	d0c6      	beq.n	80078be <_dtoa_r+0x8fa>
 8007930:	0013      	movs	r3, r2
 8007932:	331c      	adds	r3, #28
 8007934:	e7bc      	b.n	80078b0 <_dtoa_r+0x8ec>
 8007936:	9b07      	ldr	r3, [sp, #28]
 8007938:	2b00      	cmp	r3, #0
 800793a:	dc35      	bgt.n	80079a8 <_dtoa_r+0x9e4>
 800793c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800793e:	2b02      	cmp	r3, #2
 8007940:	dd32      	ble.n	80079a8 <_dtoa_r+0x9e4>
 8007942:	9b07      	ldr	r3, [sp, #28]
 8007944:	930c      	str	r3, [sp, #48]	; 0x30
 8007946:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007948:	2b00      	cmp	r3, #0
 800794a:	d10c      	bne.n	8007966 <_dtoa_r+0x9a2>
 800794c:	0031      	movs	r1, r6
 800794e:	2205      	movs	r2, #5
 8007950:	0038      	movs	r0, r7
 8007952:	f000 f9d3 	bl	8007cfc <__multadd>
 8007956:	0006      	movs	r6, r0
 8007958:	0001      	movs	r1, r0
 800795a:	9805      	ldr	r0, [sp, #20]
 800795c:	f000 fbea 	bl	8008134 <__mcmp>
 8007960:	2800      	cmp	r0, #0
 8007962:	dd00      	ble.n	8007966 <_dtoa_r+0x9a2>
 8007964:	e5a5      	b.n	80074b2 <_dtoa_r+0x4ee>
 8007966:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8007968:	43db      	mvns	r3, r3
 800796a:	9302      	str	r3, [sp, #8]
 800796c:	9b06      	ldr	r3, [sp, #24]
 800796e:	9308      	str	r3, [sp, #32]
 8007970:	2400      	movs	r4, #0
 8007972:	0031      	movs	r1, r6
 8007974:	0038      	movs	r0, r7
 8007976:	f000 f99d 	bl	8007cb4 <_Bfree>
 800797a:	2d00      	cmp	r5, #0
 800797c:	d100      	bne.n	8007980 <_dtoa_r+0x9bc>
 800797e:	e6b7      	b.n	80076f0 <_dtoa_r+0x72c>
 8007980:	2c00      	cmp	r4, #0
 8007982:	d005      	beq.n	8007990 <_dtoa_r+0x9cc>
 8007984:	42ac      	cmp	r4, r5
 8007986:	d003      	beq.n	8007990 <_dtoa_r+0x9cc>
 8007988:	0021      	movs	r1, r4
 800798a:	0038      	movs	r0, r7
 800798c:	f000 f992 	bl	8007cb4 <_Bfree>
 8007990:	0029      	movs	r1, r5
 8007992:	0038      	movs	r0, r7
 8007994:	f000 f98e 	bl	8007cb4 <_Bfree>
 8007998:	e6aa      	b.n	80076f0 <_dtoa_r+0x72c>
 800799a:	2600      	movs	r6, #0
 800799c:	0035      	movs	r5, r6
 800799e:	e7e2      	b.n	8007966 <_dtoa_r+0x9a2>
 80079a0:	9602      	str	r6, [sp, #8]
 80079a2:	9e14      	ldr	r6, [sp, #80]	; 0x50
 80079a4:	0035      	movs	r5, r6
 80079a6:	e584      	b.n	80074b2 <_dtoa_r+0x4ee>
 80079a8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d100      	bne.n	80079b0 <_dtoa_r+0x9ec>
 80079ae:	e0ce      	b.n	8007b4e <_dtoa_r+0xb8a>
 80079b0:	9b07      	ldr	r3, [sp, #28]
 80079b2:	930c      	str	r3, [sp, #48]	; 0x30
 80079b4:	2c00      	cmp	r4, #0
 80079b6:	dd05      	ble.n	80079c4 <_dtoa_r+0xa00>
 80079b8:	0029      	movs	r1, r5
 80079ba:	0022      	movs	r2, r4
 80079bc:	0038      	movs	r0, r7
 80079be:	f000 fb4b 	bl	8008058 <__lshift>
 80079c2:	0005      	movs	r5, r0
 80079c4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80079c6:	0028      	movs	r0, r5
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d022      	beq.n	8007a12 <_dtoa_r+0xa4e>
 80079cc:	0038      	movs	r0, r7
 80079ce:	6869      	ldr	r1, [r5, #4]
 80079d0:	f000 f92c 	bl	8007c2c <_Balloc>
 80079d4:	1e04      	subs	r4, r0, #0
 80079d6:	d10f      	bne.n	80079f8 <_dtoa_r+0xa34>
 80079d8:	0002      	movs	r2, r0
 80079da:	4b05      	ldr	r3, [pc, #20]	; (80079f0 <_dtoa_r+0xa2c>)
 80079dc:	4905      	ldr	r1, [pc, #20]	; (80079f4 <_dtoa_r+0xa30>)
 80079de:	f7ff fb06 	bl	8006fee <_dtoa_r+0x2a>
 80079e2:	46c0      	nop			; (mov r8, r8)
 80079e4:	40240000 	.word	0x40240000
 80079e8:	00000433 	.word	0x00000433
 80079ec:	7ff00000 	.word	0x7ff00000
 80079f0:	08009b1f 	.word	0x08009b1f
 80079f4:	000002ea 	.word	0x000002ea
 80079f8:	0029      	movs	r1, r5
 80079fa:	692b      	ldr	r3, [r5, #16]
 80079fc:	310c      	adds	r1, #12
 80079fe:	1c9a      	adds	r2, r3, #2
 8007a00:	0092      	lsls	r2, r2, #2
 8007a02:	300c      	adds	r0, #12
 8007a04:	f7fe fd9e 	bl	8006544 <memcpy>
 8007a08:	2201      	movs	r2, #1
 8007a0a:	0021      	movs	r1, r4
 8007a0c:	0038      	movs	r0, r7
 8007a0e:	f000 fb23 	bl	8008058 <__lshift>
 8007a12:	9b06      	ldr	r3, [sp, #24]
 8007a14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a16:	930a      	str	r3, [sp, #40]	; 0x28
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	189b      	adds	r3, r3, r2
 8007a1c:	2201      	movs	r2, #1
 8007a1e:	002c      	movs	r4, r5
 8007a20:	0005      	movs	r5, r0
 8007a22:	9314      	str	r3, [sp, #80]	; 0x50
 8007a24:	9b08      	ldr	r3, [sp, #32]
 8007a26:	4013      	ands	r3, r2
 8007a28:	930f      	str	r3, [sp, #60]	; 0x3c
 8007a2a:	0031      	movs	r1, r6
 8007a2c:	9805      	ldr	r0, [sp, #20]
 8007a2e:	f7ff fa3e 	bl	8006eae <quorem>
 8007a32:	0003      	movs	r3, r0
 8007a34:	0021      	movs	r1, r4
 8007a36:	3330      	adds	r3, #48	; 0x30
 8007a38:	900d      	str	r0, [sp, #52]	; 0x34
 8007a3a:	9805      	ldr	r0, [sp, #20]
 8007a3c:	9307      	str	r3, [sp, #28]
 8007a3e:	f000 fb79 	bl	8008134 <__mcmp>
 8007a42:	002a      	movs	r2, r5
 8007a44:	900e      	str	r0, [sp, #56]	; 0x38
 8007a46:	0031      	movs	r1, r6
 8007a48:	0038      	movs	r0, r7
 8007a4a:	f000 fb8f 	bl	800816c <__mdiff>
 8007a4e:	68c3      	ldr	r3, [r0, #12]
 8007a50:	9008      	str	r0, [sp, #32]
 8007a52:	9310      	str	r3, [sp, #64]	; 0x40
 8007a54:	2301      	movs	r3, #1
 8007a56:	930c      	str	r3, [sp, #48]	; 0x30
 8007a58:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d104      	bne.n	8007a68 <_dtoa_r+0xaa4>
 8007a5e:	0001      	movs	r1, r0
 8007a60:	9805      	ldr	r0, [sp, #20]
 8007a62:	f000 fb67 	bl	8008134 <__mcmp>
 8007a66:	900c      	str	r0, [sp, #48]	; 0x30
 8007a68:	0038      	movs	r0, r7
 8007a6a:	9908      	ldr	r1, [sp, #32]
 8007a6c:	f000 f922 	bl	8007cb4 <_Bfree>
 8007a70:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007a74:	3301      	adds	r3, #1
 8007a76:	9308      	str	r3, [sp, #32]
 8007a78:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007a7a:	4313      	orrs	r3, r2
 8007a7c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007a7e:	4313      	orrs	r3, r2
 8007a80:	d10c      	bne.n	8007a9c <_dtoa_r+0xad8>
 8007a82:	9b07      	ldr	r3, [sp, #28]
 8007a84:	2b39      	cmp	r3, #57	; 0x39
 8007a86:	d026      	beq.n	8007ad6 <_dtoa_r+0xb12>
 8007a88:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	dd02      	ble.n	8007a94 <_dtoa_r+0xad0>
 8007a8e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a90:	3331      	adds	r3, #49	; 0x31
 8007a92:	9307      	str	r3, [sp, #28]
 8007a94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a96:	9a07      	ldr	r2, [sp, #28]
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e76a      	b.n	8007972 <_dtoa_r+0x9ae>
 8007a9c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	db04      	blt.n	8007aac <_dtoa_r+0xae8>
 8007aa2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8007aa4:	4313      	orrs	r3, r2
 8007aa6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	d11f      	bne.n	8007aec <_dtoa_r+0xb28>
 8007aac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	ddf0      	ble.n	8007a94 <_dtoa_r+0xad0>
 8007ab2:	9905      	ldr	r1, [sp, #20]
 8007ab4:	2201      	movs	r2, #1
 8007ab6:	0038      	movs	r0, r7
 8007ab8:	f000 face 	bl	8008058 <__lshift>
 8007abc:	0031      	movs	r1, r6
 8007abe:	9005      	str	r0, [sp, #20]
 8007ac0:	f000 fb38 	bl	8008134 <__mcmp>
 8007ac4:	2800      	cmp	r0, #0
 8007ac6:	dc03      	bgt.n	8007ad0 <_dtoa_r+0xb0c>
 8007ac8:	d1e4      	bne.n	8007a94 <_dtoa_r+0xad0>
 8007aca:	9b07      	ldr	r3, [sp, #28]
 8007acc:	07db      	lsls	r3, r3, #31
 8007ace:	d5e1      	bpl.n	8007a94 <_dtoa_r+0xad0>
 8007ad0:	9b07      	ldr	r3, [sp, #28]
 8007ad2:	2b39      	cmp	r3, #57	; 0x39
 8007ad4:	d1db      	bne.n	8007a8e <_dtoa_r+0xaca>
 8007ad6:	2339      	movs	r3, #57	; 0x39
 8007ad8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007ada:	7013      	strb	r3, [r2, #0]
 8007adc:	9b08      	ldr	r3, [sp, #32]
 8007ade:	9308      	str	r3, [sp, #32]
 8007ae0:	3b01      	subs	r3, #1
 8007ae2:	781a      	ldrb	r2, [r3, #0]
 8007ae4:	2a39      	cmp	r2, #57	; 0x39
 8007ae6:	d068      	beq.n	8007bba <_dtoa_r+0xbf6>
 8007ae8:	3201      	adds	r2, #1
 8007aea:	e7d5      	b.n	8007a98 <_dtoa_r+0xad4>
 8007aec:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	dd07      	ble.n	8007b02 <_dtoa_r+0xb3e>
 8007af2:	9b07      	ldr	r3, [sp, #28]
 8007af4:	2b39      	cmp	r3, #57	; 0x39
 8007af6:	d0ee      	beq.n	8007ad6 <_dtoa_r+0xb12>
 8007af8:	9b07      	ldr	r3, [sp, #28]
 8007afa:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007afc:	3301      	adds	r3, #1
 8007afe:	7013      	strb	r3, [r2, #0]
 8007b00:	e737      	b.n	8007972 <_dtoa_r+0x9ae>
 8007b02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b04:	9a07      	ldr	r2, [sp, #28]
 8007b06:	701a      	strb	r2, [r3, #0]
 8007b08:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007b0a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d03e      	beq.n	8007b8e <_dtoa_r+0xbca>
 8007b10:	2300      	movs	r3, #0
 8007b12:	220a      	movs	r2, #10
 8007b14:	9905      	ldr	r1, [sp, #20]
 8007b16:	0038      	movs	r0, r7
 8007b18:	f000 f8f0 	bl	8007cfc <__multadd>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	9005      	str	r0, [sp, #20]
 8007b20:	220a      	movs	r2, #10
 8007b22:	0021      	movs	r1, r4
 8007b24:	0038      	movs	r0, r7
 8007b26:	42ac      	cmp	r4, r5
 8007b28:	d106      	bne.n	8007b38 <_dtoa_r+0xb74>
 8007b2a:	f000 f8e7 	bl	8007cfc <__multadd>
 8007b2e:	0004      	movs	r4, r0
 8007b30:	0005      	movs	r5, r0
 8007b32:	9b08      	ldr	r3, [sp, #32]
 8007b34:	930a      	str	r3, [sp, #40]	; 0x28
 8007b36:	e778      	b.n	8007a2a <_dtoa_r+0xa66>
 8007b38:	f000 f8e0 	bl	8007cfc <__multadd>
 8007b3c:	0029      	movs	r1, r5
 8007b3e:	0004      	movs	r4, r0
 8007b40:	2300      	movs	r3, #0
 8007b42:	220a      	movs	r2, #10
 8007b44:	0038      	movs	r0, r7
 8007b46:	f000 f8d9 	bl	8007cfc <__multadd>
 8007b4a:	0005      	movs	r5, r0
 8007b4c:	e7f1      	b.n	8007b32 <_dtoa_r+0xb6e>
 8007b4e:	9b07      	ldr	r3, [sp, #28]
 8007b50:	930c      	str	r3, [sp, #48]	; 0x30
 8007b52:	2400      	movs	r4, #0
 8007b54:	0031      	movs	r1, r6
 8007b56:	9805      	ldr	r0, [sp, #20]
 8007b58:	f7ff f9a9 	bl	8006eae <quorem>
 8007b5c:	9b06      	ldr	r3, [sp, #24]
 8007b5e:	3030      	adds	r0, #48	; 0x30
 8007b60:	5518      	strb	r0, [r3, r4]
 8007b62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b64:	3401      	adds	r4, #1
 8007b66:	9007      	str	r0, [sp, #28]
 8007b68:	42a3      	cmp	r3, r4
 8007b6a:	dd07      	ble.n	8007b7c <_dtoa_r+0xbb8>
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	220a      	movs	r2, #10
 8007b70:	0038      	movs	r0, r7
 8007b72:	9905      	ldr	r1, [sp, #20]
 8007b74:	f000 f8c2 	bl	8007cfc <__multadd>
 8007b78:	9005      	str	r0, [sp, #20]
 8007b7a:	e7eb      	b.n	8007b54 <_dtoa_r+0xb90>
 8007b7c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007b7e:	2001      	movs	r0, #1
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	dd00      	ble.n	8007b86 <_dtoa_r+0xbc2>
 8007b84:	0018      	movs	r0, r3
 8007b86:	2400      	movs	r4, #0
 8007b88:	9b06      	ldr	r3, [sp, #24]
 8007b8a:	181b      	adds	r3, r3, r0
 8007b8c:	9308      	str	r3, [sp, #32]
 8007b8e:	9905      	ldr	r1, [sp, #20]
 8007b90:	2201      	movs	r2, #1
 8007b92:	0038      	movs	r0, r7
 8007b94:	f000 fa60 	bl	8008058 <__lshift>
 8007b98:	0031      	movs	r1, r6
 8007b9a:	9005      	str	r0, [sp, #20]
 8007b9c:	f000 faca 	bl	8008134 <__mcmp>
 8007ba0:	2800      	cmp	r0, #0
 8007ba2:	dc9b      	bgt.n	8007adc <_dtoa_r+0xb18>
 8007ba4:	d102      	bne.n	8007bac <_dtoa_r+0xbe8>
 8007ba6:	9b07      	ldr	r3, [sp, #28]
 8007ba8:	07db      	lsls	r3, r3, #31
 8007baa:	d497      	bmi.n	8007adc <_dtoa_r+0xb18>
 8007bac:	9b08      	ldr	r3, [sp, #32]
 8007bae:	9308      	str	r3, [sp, #32]
 8007bb0:	3b01      	subs	r3, #1
 8007bb2:	781a      	ldrb	r2, [r3, #0]
 8007bb4:	2a30      	cmp	r2, #48	; 0x30
 8007bb6:	d0fa      	beq.n	8007bae <_dtoa_r+0xbea>
 8007bb8:	e6db      	b.n	8007972 <_dtoa_r+0x9ae>
 8007bba:	9a06      	ldr	r2, [sp, #24]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	d18e      	bne.n	8007ade <_dtoa_r+0xb1a>
 8007bc0:	9b02      	ldr	r3, [sp, #8]
 8007bc2:	3301      	adds	r3, #1
 8007bc4:	9302      	str	r3, [sp, #8]
 8007bc6:	2331      	movs	r3, #49	; 0x31
 8007bc8:	e799      	b.n	8007afe <_dtoa_r+0xb3a>
 8007bca:	4b09      	ldr	r3, [pc, #36]	; (8007bf0 <_dtoa_r+0xc2c>)
 8007bcc:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8007bce:	9306      	str	r3, [sp, #24]
 8007bd0:	4b08      	ldr	r3, [pc, #32]	; (8007bf4 <_dtoa_r+0xc30>)
 8007bd2:	2a00      	cmp	r2, #0
 8007bd4:	d001      	beq.n	8007bda <_dtoa_r+0xc16>
 8007bd6:	f7ff fa3f 	bl	8007058 <_dtoa_r+0x94>
 8007bda:	f7ff fa3f 	bl	800705c <_dtoa_r+0x98>
 8007bde:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	dcb6      	bgt.n	8007b52 <_dtoa_r+0xb8e>
 8007be4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	dd00      	ble.n	8007bec <_dtoa_r+0xc28>
 8007bea:	e6ac      	b.n	8007946 <_dtoa_r+0x982>
 8007bec:	e7b1      	b.n	8007b52 <_dtoa_r+0xb8e>
 8007bee:	46c0      	nop			; (mov r8, r8)
 8007bf0:	08009aa0 	.word	0x08009aa0
 8007bf4:	08009aa8 	.word	0x08009aa8

08007bf8 <_localeconv_r>:
 8007bf8:	4800      	ldr	r0, [pc, #0]	; (8007bfc <_localeconv_r+0x4>)
 8007bfa:	4770      	bx	lr
 8007bfc:	2000016c 	.word	0x2000016c

08007c00 <malloc>:
 8007c00:	b510      	push	{r4, lr}
 8007c02:	4b03      	ldr	r3, [pc, #12]	; (8007c10 <malloc+0x10>)
 8007c04:	0001      	movs	r1, r0
 8007c06:	6818      	ldr	r0, [r3, #0]
 8007c08:	f000 fc44 	bl	8008494 <_malloc_r>
 8007c0c:	bd10      	pop	{r4, pc}
 8007c0e:	46c0      	nop			; (mov r8, r8)
 8007c10:	20000018 	.word	0x20000018

08007c14 <memchr>:
 8007c14:	b2c9      	uxtb	r1, r1
 8007c16:	1882      	adds	r2, r0, r2
 8007c18:	4290      	cmp	r0, r2
 8007c1a:	d101      	bne.n	8007c20 <memchr+0xc>
 8007c1c:	2000      	movs	r0, #0
 8007c1e:	4770      	bx	lr
 8007c20:	7803      	ldrb	r3, [r0, #0]
 8007c22:	428b      	cmp	r3, r1
 8007c24:	d0fb      	beq.n	8007c1e <memchr+0xa>
 8007c26:	3001      	adds	r0, #1
 8007c28:	e7f6      	b.n	8007c18 <memchr+0x4>
	...

08007c2c <_Balloc>:
 8007c2c:	b570      	push	{r4, r5, r6, lr}
 8007c2e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8007c30:	0006      	movs	r6, r0
 8007c32:	000c      	movs	r4, r1
 8007c34:	2d00      	cmp	r5, #0
 8007c36:	d10e      	bne.n	8007c56 <_Balloc+0x2a>
 8007c38:	2010      	movs	r0, #16
 8007c3a:	f7ff ffe1 	bl	8007c00 <malloc>
 8007c3e:	1e02      	subs	r2, r0, #0
 8007c40:	6270      	str	r0, [r6, #36]	; 0x24
 8007c42:	d104      	bne.n	8007c4e <_Balloc+0x22>
 8007c44:	2166      	movs	r1, #102	; 0x66
 8007c46:	4b19      	ldr	r3, [pc, #100]	; (8007cac <_Balloc+0x80>)
 8007c48:	4819      	ldr	r0, [pc, #100]	; (8007cb0 <_Balloc+0x84>)
 8007c4a:	f000 fe0d 	bl	8008868 <__assert_func>
 8007c4e:	6045      	str	r5, [r0, #4]
 8007c50:	6085      	str	r5, [r0, #8]
 8007c52:	6005      	str	r5, [r0, #0]
 8007c54:	60c5      	str	r5, [r0, #12]
 8007c56:	6a75      	ldr	r5, [r6, #36]	; 0x24
 8007c58:	68eb      	ldr	r3, [r5, #12]
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d013      	beq.n	8007c86 <_Balloc+0x5a>
 8007c5e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c60:	00a2      	lsls	r2, r4, #2
 8007c62:	68db      	ldr	r3, [r3, #12]
 8007c64:	189b      	adds	r3, r3, r2
 8007c66:	6818      	ldr	r0, [r3, #0]
 8007c68:	2800      	cmp	r0, #0
 8007c6a:	d118      	bne.n	8007c9e <_Balloc+0x72>
 8007c6c:	2101      	movs	r1, #1
 8007c6e:	000d      	movs	r5, r1
 8007c70:	40a5      	lsls	r5, r4
 8007c72:	1d6a      	adds	r2, r5, #5
 8007c74:	0030      	movs	r0, r6
 8007c76:	0092      	lsls	r2, r2, #2
 8007c78:	f000 fb74 	bl	8008364 <_calloc_r>
 8007c7c:	2800      	cmp	r0, #0
 8007c7e:	d00c      	beq.n	8007c9a <_Balloc+0x6e>
 8007c80:	6044      	str	r4, [r0, #4]
 8007c82:	6085      	str	r5, [r0, #8]
 8007c84:	e00d      	b.n	8007ca2 <_Balloc+0x76>
 8007c86:	2221      	movs	r2, #33	; 0x21
 8007c88:	2104      	movs	r1, #4
 8007c8a:	0030      	movs	r0, r6
 8007c8c:	f000 fb6a 	bl	8008364 <_calloc_r>
 8007c90:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8007c92:	60e8      	str	r0, [r5, #12]
 8007c94:	68db      	ldr	r3, [r3, #12]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d1e1      	bne.n	8007c5e <_Balloc+0x32>
 8007c9a:	2000      	movs	r0, #0
 8007c9c:	bd70      	pop	{r4, r5, r6, pc}
 8007c9e:	6802      	ldr	r2, [r0, #0]
 8007ca0:	601a      	str	r2, [r3, #0]
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	6103      	str	r3, [r0, #16]
 8007ca6:	60c3      	str	r3, [r0, #12]
 8007ca8:	e7f8      	b.n	8007c9c <_Balloc+0x70>
 8007caa:	46c0      	nop			; (mov r8, r8)
 8007cac:	08009aad 	.word	0x08009aad
 8007cb0:	08009b30 	.word	0x08009b30

08007cb4 <_Bfree>:
 8007cb4:	b570      	push	{r4, r5, r6, lr}
 8007cb6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007cb8:	0005      	movs	r5, r0
 8007cba:	000c      	movs	r4, r1
 8007cbc:	2e00      	cmp	r6, #0
 8007cbe:	d10e      	bne.n	8007cde <_Bfree+0x2a>
 8007cc0:	2010      	movs	r0, #16
 8007cc2:	f7ff ff9d 	bl	8007c00 <malloc>
 8007cc6:	1e02      	subs	r2, r0, #0
 8007cc8:	6268      	str	r0, [r5, #36]	; 0x24
 8007cca:	d104      	bne.n	8007cd6 <_Bfree+0x22>
 8007ccc:	218a      	movs	r1, #138	; 0x8a
 8007cce:	4b09      	ldr	r3, [pc, #36]	; (8007cf4 <_Bfree+0x40>)
 8007cd0:	4809      	ldr	r0, [pc, #36]	; (8007cf8 <_Bfree+0x44>)
 8007cd2:	f000 fdc9 	bl	8008868 <__assert_func>
 8007cd6:	6046      	str	r6, [r0, #4]
 8007cd8:	6086      	str	r6, [r0, #8]
 8007cda:	6006      	str	r6, [r0, #0]
 8007cdc:	60c6      	str	r6, [r0, #12]
 8007cde:	2c00      	cmp	r4, #0
 8007ce0:	d007      	beq.n	8007cf2 <_Bfree+0x3e>
 8007ce2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007ce4:	6862      	ldr	r2, [r4, #4]
 8007ce6:	68db      	ldr	r3, [r3, #12]
 8007ce8:	0092      	lsls	r2, r2, #2
 8007cea:	189b      	adds	r3, r3, r2
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	6022      	str	r2, [r4, #0]
 8007cf0:	601c      	str	r4, [r3, #0]
 8007cf2:	bd70      	pop	{r4, r5, r6, pc}
 8007cf4:	08009aad 	.word	0x08009aad
 8007cf8:	08009b30 	.word	0x08009b30

08007cfc <__multadd>:
 8007cfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007cfe:	000e      	movs	r6, r1
 8007d00:	9001      	str	r0, [sp, #4]
 8007d02:	000c      	movs	r4, r1
 8007d04:	001d      	movs	r5, r3
 8007d06:	2000      	movs	r0, #0
 8007d08:	690f      	ldr	r7, [r1, #16]
 8007d0a:	3614      	adds	r6, #20
 8007d0c:	6833      	ldr	r3, [r6, #0]
 8007d0e:	3001      	adds	r0, #1
 8007d10:	b299      	uxth	r1, r3
 8007d12:	4351      	muls	r1, r2
 8007d14:	0c1b      	lsrs	r3, r3, #16
 8007d16:	4353      	muls	r3, r2
 8007d18:	1949      	adds	r1, r1, r5
 8007d1a:	0c0d      	lsrs	r5, r1, #16
 8007d1c:	195b      	adds	r3, r3, r5
 8007d1e:	0c1d      	lsrs	r5, r3, #16
 8007d20:	b289      	uxth	r1, r1
 8007d22:	041b      	lsls	r3, r3, #16
 8007d24:	185b      	adds	r3, r3, r1
 8007d26:	c608      	stmia	r6!, {r3}
 8007d28:	4287      	cmp	r7, r0
 8007d2a:	dcef      	bgt.n	8007d0c <__multadd+0x10>
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	d022      	beq.n	8007d76 <__multadd+0x7a>
 8007d30:	68a3      	ldr	r3, [r4, #8]
 8007d32:	42bb      	cmp	r3, r7
 8007d34:	dc19      	bgt.n	8007d6a <__multadd+0x6e>
 8007d36:	6863      	ldr	r3, [r4, #4]
 8007d38:	9801      	ldr	r0, [sp, #4]
 8007d3a:	1c59      	adds	r1, r3, #1
 8007d3c:	f7ff ff76 	bl	8007c2c <_Balloc>
 8007d40:	1e06      	subs	r6, r0, #0
 8007d42:	d105      	bne.n	8007d50 <__multadd+0x54>
 8007d44:	0002      	movs	r2, r0
 8007d46:	21b5      	movs	r1, #181	; 0xb5
 8007d48:	4b0c      	ldr	r3, [pc, #48]	; (8007d7c <__multadd+0x80>)
 8007d4a:	480d      	ldr	r0, [pc, #52]	; (8007d80 <__multadd+0x84>)
 8007d4c:	f000 fd8c 	bl	8008868 <__assert_func>
 8007d50:	0021      	movs	r1, r4
 8007d52:	6923      	ldr	r3, [r4, #16]
 8007d54:	310c      	adds	r1, #12
 8007d56:	1c9a      	adds	r2, r3, #2
 8007d58:	0092      	lsls	r2, r2, #2
 8007d5a:	300c      	adds	r0, #12
 8007d5c:	f7fe fbf2 	bl	8006544 <memcpy>
 8007d60:	0021      	movs	r1, r4
 8007d62:	9801      	ldr	r0, [sp, #4]
 8007d64:	f7ff ffa6 	bl	8007cb4 <_Bfree>
 8007d68:	0034      	movs	r4, r6
 8007d6a:	1d3b      	adds	r3, r7, #4
 8007d6c:	009b      	lsls	r3, r3, #2
 8007d6e:	18e3      	adds	r3, r4, r3
 8007d70:	605d      	str	r5, [r3, #4]
 8007d72:	1c7b      	adds	r3, r7, #1
 8007d74:	6123      	str	r3, [r4, #16]
 8007d76:	0020      	movs	r0, r4
 8007d78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8007d7a:	46c0      	nop			; (mov r8, r8)
 8007d7c:	08009b1f 	.word	0x08009b1f
 8007d80:	08009b30 	.word	0x08009b30

08007d84 <__hi0bits>:
 8007d84:	0003      	movs	r3, r0
 8007d86:	0c02      	lsrs	r2, r0, #16
 8007d88:	2000      	movs	r0, #0
 8007d8a:	4282      	cmp	r2, r0
 8007d8c:	d101      	bne.n	8007d92 <__hi0bits+0xe>
 8007d8e:	041b      	lsls	r3, r3, #16
 8007d90:	3010      	adds	r0, #16
 8007d92:	0e1a      	lsrs	r2, r3, #24
 8007d94:	d101      	bne.n	8007d9a <__hi0bits+0x16>
 8007d96:	3008      	adds	r0, #8
 8007d98:	021b      	lsls	r3, r3, #8
 8007d9a:	0f1a      	lsrs	r2, r3, #28
 8007d9c:	d101      	bne.n	8007da2 <__hi0bits+0x1e>
 8007d9e:	3004      	adds	r0, #4
 8007da0:	011b      	lsls	r3, r3, #4
 8007da2:	0f9a      	lsrs	r2, r3, #30
 8007da4:	d101      	bne.n	8007daa <__hi0bits+0x26>
 8007da6:	3002      	adds	r0, #2
 8007da8:	009b      	lsls	r3, r3, #2
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	db03      	blt.n	8007db6 <__hi0bits+0x32>
 8007dae:	3001      	adds	r0, #1
 8007db0:	005b      	lsls	r3, r3, #1
 8007db2:	d400      	bmi.n	8007db6 <__hi0bits+0x32>
 8007db4:	2020      	movs	r0, #32
 8007db6:	4770      	bx	lr

08007db8 <__lo0bits>:
 8007db8:	6803      	ldr	r3, [r0, #0]
 8007dba:	0002      	movs	r2, r0
 8007dbc:	2107      	movs	r1, #7
 8007dbe:	0018      	movs	r0, r3
 8007dc0:	4008      	ands	r0, r1
 8007dc2:	420b      	tst	r3, r1
 8007dc4:	d00d      	beq.n	8007de2 <__lo0bits+0x2a>
 8007dc6:	3906      	subs	r1, #6
 8007dc8:	2000      	movs	r0, #0
 8007dca:	420b      	tst	r3, r1
 8007dcc:	d105      	bne.n	8007dda <__lo0bits+0x22>
 8007dce:	3002      	adds	r0, #2
 8007dd0:	4203      	tst	r3, r0
 8007dd2:	d003      	beq.n	8007ddc <__lo0bits+0x24>
 8007dd4:	40cb      	lsrs	r3, r1
 8007dd6:	0008      	movs	r0, r1
 8007dd8:	6013      	str	r3, [r2, #0]
 8007dda:	4770      	bx	lr
 8007ddc:	089b      	lsrs	r3, r3, #2
 8007dde:	6013      	str	r3, [r2, #0]
 8007de0:	e7fb      	b.n	8007dda <__lo0bits+0x22>
 8007de2:	b299      	uxth	r1, r3
 8007de4:	2900      	cmp	r1, #0
 8007de6:	d101      	bne.n	8007dec <__lo0bits+0x34>
 8007de8:	2010      	movs	r0, #16
 8007dea:	0c1b      	lsrs	r3, r3, #16
 8007dec:	b2d9      	uxtb	r1, r3
 8007dee:	2900      	cmp	r1, #0
 8007df0:	d101      	bne.n	8007df6 <__lo0bits+0x3e>
 8007df2:	3008      	adds	r0, #8
 8007df4:	0a1b      	lsrs	r3, r3, #8
 8007df6:	0719      	lsls	r1, r3, #28
 8007df8:	d101      	bne.n	8007dfe <__lo0bits+0x46>
 8007dfa:	3004      	adds	r0, #4
 8007dfc:	091b      	lsrs	r3, r3, #4
 8007dfe:	0799      	lsls	r1, r3, #30
 8007e00:	d101      	bne.n	8007e06 <__lo0bits+0x4e>
 8007e02:	3002      	adds	r0, #2
 8007e04:	089b      	lsrs	r3, r3, #2
 8007e06:	07d9      	lsls	r1, r3, #31
 8007e08:	d4e9      	bmi.n	8007dde <__lo0bits+0x26>
 8007e0a:	3001      	adds	r0, #1
 8007e0c:	085b      	lsrs	r3, r3, #1
 8007e0e:	d1e6      	bne.n	8007dde <__lo0bits+0x26>
 8007e10:	2020      	movs	r0, #32
 8007e12:	e7e2      	b.n	8007dda <__lo0bits+0x22>

08007e14 <__i2b>:
 8007e14:	b510      	push	{r4, lr}
 8007e16:	000c      	movs	r4, r1
 8007e18:	2101      	movs	r1, #1
 8007e1a:	f7ff ff07 	bl	8007c2c <_Balloc>
 8007e1e:	2800      	cmp	r0, #0
 8007e20:	d106      	bne.n	8007e30 <__i2b+0x1c>
 8007e22:	21a0      	movs	r1, #160	; 0xa0
 8007e24:	0002      	movs	r2, r0
 8007e26:	4b04      	ldr	r3, [pc, #16]	; (8007e38 <__i2b+0x24>)
 8007e28:	4804      	ldr	r0, [pc, #16]	; (8007e3c <__i2b+0x28>)
 8007e2a:	0049      	lsls	r1, r1, #1
 8007e2c:	f000 fd1c 	bl	8008868 <__assert_func>
 8007e30:	2301      	movs	r3, #1
 8007e32:	6144      	str	r4, [r0, #20]
 8007e34:	6103      	str	r3, [r0, #16]
 8007e36:	bd10      	pop	{r4, pc}
 8007e38:	08009b1f 	.word	0x08009b1f
 8007e3c:	08009b30 	.word	0x08009b30

08007e40 <__multiply>:
 8007e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e42:	690b      	ldr	r3, [r1, #16]
 8007e44:	0014      	movs	r4, r2
 8007e46:	6912      	ldr	r2, [r2, #16]
 8007e48:	000d      	movs	r5, r1
 8007e4a:	b089      	sub	sp, #36	; 0x24
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	da01      	bge.n	8007e54 <__multiply+0x14>
 8007e50:	0025      	movs	r5, r4
 8007e52:	000c      	movs	r4, r1
 8007e54:	692f      	ldr	r7, [r5, #16]
 8007e56:	6926      	ldr	r6, [r4, #16]
 8007e58:	6869      	ldr	r1, [r5, #4]
 8007e5a:	19bb      	adds	r3, r7, r6
 8007e5c:	9302      	str	r3, [sp, #8]
 8007e5e:	68ab      	ldr	r3, [r5, #8]
 8007e60:	19ba      	adds	r2, r7, r6
 8007e62:	4293      	cmp	r3, r2
 8007e64:	da00      	bge.n	8007e68 <__multiply+0x28>
 8007e66:	3101      	adds	r1, #1
 8007e68:	f7ff fee0 	bl	8007c2c <_Balloc>
 8007e6c:	9001      	str	r0, [sp, #4]
 8007e6e:	2800      	cmp	r0, #0
 8007e70:	d106      	bne.n	8007e80 <__multiply+0x40>
 8007e72:	215e      	movs	r1, #94	; 0x5e
 8007e74:	0002      	movs	r2, r0
 8007e76:	4b48      	ldr	r3, [pc, #288]	; (8007f98 <__multiply+0x158>)
 8007e78:	4848      	ldr	r0, [pc, #288]	; (8007f9c <__multiply+0x15c>)
 8007e7a:	31ff      	adds	r1, #255	; 0xff
 8007e7c:	f000 fcf4 	bl	8008868 <__assert_func>
 8007e80:	9b01      	ldr	r3, [sp, #4]
 8007e82:	2200      	movs	r2, #0
 8007e84:	3314      	adds	r3, #20
 8007e86:	469c      	mov	ip, r3
 8007e88:	19bb      	adds	r3, r7, r6
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4463      	add	r3, ip
 8007e8e:	9303      	str	r3, [sp, #12]
 8007e90:	4663      	mov	r3, ip
 8007e92:	9903      	ldr	r1, [sp, #12]
 8007e94:	428b      	cmp	r3, r1
 8007e96:	d32c      	bcc.n	8007ef2 <__multiply+0xb2>
 8007e98:	002b      	movs	r3, r5
 8007e9a:	0022      	movs	r2, r4
 8007e9c:	3314      	adds	r3, #20
 8007e9e:	00bf      	lsls	r7, r7, #2
 8007ea0:	3214      	adds	r2, #20
 8007ea2:	9306      	str	r3, [sp, #24]
 8007ea4:	00b6      	lsls	r6, r6, #2
 8007ea6:	19db      	adds	r3, r3, r7
 8007ea8:	9304      	str	r3, [sp, #16]
 8007eaa:	1993      	adds	r3, r2, r6
 8007eac:	9307      	str	r3, [sp, #28]
 8007eae:	2304      	movs	r3, #4
 8007eb0:	9305      	str	r3, [sp, #20]
 8007eb2:	002b      	movs	r3, r5
 8007eb4:	9904      	ldr	r1, [sp, #16]
 8007eb6:	3315      	adds	r3, #21
 8007eb8:	9200      	str	r2, [sp, #0]
 8007eba:	4299      	cmp	r1, r3
 8007ebc:	d305      	bcc.n	8007eca <__multiply+0x8a>
 8007ebe:	1b4b      	subs	r3, r1, r5
 8007ec0:	3b15      	subs	r3, #21
 8007ec2:	089b      	lsrs	r3, r3, #2
 8007ec4:	3301      	adds	r3, #1
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	9305      	str	r3, [sp, #20]
 8007eca:	9b07      	ldr	r3, [sp, #28]
 8007ecc:	9a00      	ldr	r2, [sp, #0]
 8007ece:	429a      	cmp	r2, r3
 8007ed0:	d311      	bcc.n	8007ef6 <__multiply+0xb6>
 8007ed2:	9b02      	ldr	r3, [sp, #8]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	dd06      	ble.n	8007ee6 <__multiply+0xa6>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	3b04      	subs	r3, #4
 8007edc:	9303      	str	r3, [sp, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	9300      	str	r3, [sp, #0]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d053      	beq.n	8007f8e <__multiply+0x14e>
 8007ee6:	9b01      	ldr	r3, [sp, #4]
 8007ee8:	9a02      	ldr	r2, [sp, #8]
 8007eea:	0018      	movs	r0, r3
 8007eec:	611a      	str	r2, [r3, #16]
 8007eee:	b009      	add	sp, #36	; 0x24
 8007ef0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ef2:	c304      	stmia	r3!, {r2}
 8007ef4:	e7cd      	b.n	8007e92 <__multiply+0x52>
 8007ef6:	9b00      	ldr	r3, [sp, #0]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	b298      	uxth	r0, r3
 8007efc:	2800      	cmp	r0, #0
 8007efe:	d01b      	beq.n	8007f38 <__multiply+0xf8>
 8007f00:	4667      	mov	r7, ip
 8007f02:	2400      	movs	r4, #0
 8007f04:	9e06      	ldr	r6, [sp, #24]
 8007f06:	ce02      	ldmia	r6!, {r1}
 8007f08:	683a      	ldr	r2, [r7, #0]
 8007f0a:	b28b      	uxth	r3, r1
 8007f0c:	4343      	muls	r3, r0
 8007f0e:	b292      	uxth	r2, r2
 8007f10:	189b      	adds	r3, r3, r2
 8007f12:	191b      	adds	r3, r3, r4
 8007f14:	0c0c      	lsrs	r4, r1, #16
 8007f16:	4344      	muls	r4, r0
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	0c11      	lsrs	r1, r2, #16
 8007f1c:	1861      	adds	r1, r4, r1
 8007f1e:	0c1c      	lsrs	r4, r3, #16
 8007f20:	1909      	adds	r1, r1, r4
 8007f22:	0c0c      	lsrs	r4, r1, #16
 8007f24:	b29b      	uxth	r3, r3
 8007f26:	0409      	lsls	r1, r1, #16
 8007f28:	430b      	orrs	r3, r1
 8007f2a:	c708      	stmia	r7!, {r3}
 8007f2c:	9b04      	ldr	r3, [sp, #16]
 8007f2e:	42b3      	cmp	r3, r6
 8007f30:	d8e9      	bhi.n	8007f06 <__multiply+0xc6>
 8007f32:	4663      	mov	r3, ip
 8007f34:	9a05      	ldr	r2, [sp, #20]
 8007f36:	509c      	str	r4, [r3, r2]
 8007f38:	9b00      	ldr	r3, [sp, #0]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	0c1e      	lsrs	r6, r3, #16
 8007f3e:	d020      	beq.n	8007f82 <__multiply+0x142>
 8007f40:	4663      	mov	r3, ip
 8007f42:	002c      	movs	r4, r5
 8007f44:	4660      	mov	r0, ip
 8007f46:	2700      	movs	r7, #0
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	3414      	adds	r4, #20
 8007f4c:	6822      	ldr	r2, [r4, #0]
 8007f4e:	b29b      	uxth	r3, r3
 8007f50:	b291      	uxth	r1, r2
 8007f52:	4371      	muls	r1, r6
 8007f54:	6802      	ldr	r2, [r0, #0]
 8007f56:	0c12      	lsrs	r2, r2, #16
 8007f58:	1889      	adds	r1, r1, r2
 8007f5a:	19cf      	adds	r7, r1, r7
 8007f5c:	0439      	lsls	r1, r7, #16
 8007f5e:	430b      	orrs	r3, r1
 8007f60:	6003      	str	r3, [r0, #0]
 8007f62:	cc02      	ldmia	r4!, {r1}
 8007f64:	6843      	ldr	r3, [r0, #4]
 8007f66:	0c09      	lsrs	r1, r1, #16
 8007f68:	4371      	muls	r1, r6
 8007f6a:	b29b      	uxth	r3, r3
 8007f6c:	0c3f      	lsrs	r7, r7, #16
 8007f6e:	18cb      	adds	r3, r1, r3
 8007f70:	9a04      	ldr	r2, [sp, #16]
 8007f72:	19db      	adds	r3, r3, r7
 8007f74:	0c1f      	lsrs	r7, r3, #16
 8007f76:	3004      	adds	r0, #4
 8007f78:	42a2      	cmp	r2, r4
 8007f7a:	d8e7      	bhi.n	8007f4c <__multiply+0x10c>
 8007f7c:	4662      	mov	r2, ip
 8007f7e:	9905      	ldr	r1, [sp, #20]
 8007f80:	5053      	str	r3, [r2, r1]
 8007f82:	9b00      	ldr	r3, [sp, #0]
 8007f84:	3304      	adds	r3, #4
 8007f86:	9300      	str	r3, [sp, #0]
 8007f88:	2304      	movs	r3, #4
 8007f8a:	449c      	add	ip, r3
 8007f8c:	e79d      	b.n	8007eca <__multiply+0x8a>
 8007f8e:	9b02      	ldr	r3, [sp, #8]
 8007f90:	3b01      	subs	r3, #1
 8007f92:	9302      	str	r3, [sp, #8]
 8007f94:	e79d      	b.n	8007ed2 <__multiply+0x92>
 8007f96:	46c0      	nop			; (mov r8, r8)
 8007f98:	08009b1f 	.word	0x08009b1f
 8007f9c:	08009b30 	.word	0x08009b30

08007fa0 <__pow5mult>:
 8007fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fa2:	2303      	movs	r3, #3
 8007fa4:	0015      	movs	r5, r2
 8007fa6:	0007      	movs	r7, r0
 8007fa8:	000e      	movs	r6, r1
 8007faa:	401a      	ands	r2, r3
 8007fac:	421d      	tst	r5, r3
 8007fae:	d008      	beq.n	8007fc2 <__pow5mult+0x22>
 8007fb0:	4925      	ldr	r1, [pc, #148]	; (8008048 <__pow5mult+0xa8>)
 8007fb2:	3a01      	subs	r2, #1
 8007fb4:	0092      	lsls	r2, r2, #2
 8007fb6:	5852      	ldr	r2, [r2, r1]
 8007fb8:	2300      	movs	r3, #0
 8007fba:	0031      	movs	r1, r6
 8007fbc:	f7ff fe9e 	bl	8007cfc <__multadd>
 8007fc0:	0006      	movs	r6, r0
 8007fc2:	10ad      	asrs	r5, r5, #2
 8007fc4:	d03d      	beq.n	8008042 <__pow5mult+0xa2>
 8007fc6:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8007fc8:	2c00      	cmp	r4, #0
 8007fca:	d10f      	bne.n	8007fec <__pow5mult+0x4c>
 8007fcc:	2010      	movs	r0, #16
 8007fce:	f7ff fe17 	bl	8007c00 <malloc>
 8007fd2:	1e02      	subs	r2, r0, #0
 8007fd4:	6278      	str	r0, [r7, #36]	; 0x24
 8007fd6:	d105      	bne.n	8007fe4 <__pow5mult+0x44>
 8007fd8:	21d7      	movs	r1, #215	; 0xd7
 8007fda:	4b1c      	ldr	r3, [pc, #112]	; (800804c <__pow5mult+0xac>)
 8007fdc:	481c      	ldr	r0, [pc, #112]	; (8008050 <__pow5mult+0xb0>)
 8007fde:	0049      	lsls	r1, r1, #1
 8007fe0:	f000 fc42 	bl	8008868 <__assert_func>
 8007fe4:	6044      	str	r4, [r0, #4]
 8007fe6:	6084      	str	r4, [r0, #8]
 8007fe8:	6004      	str	r4, [r0, #0]
 8007fea:	60c4      	str	r4, [r0, #12]
 8007fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fee:	689c      	ldr	r4, [r3, #8]
 8007ff0:	9301      	str	r3, [sp, #4]
 8007ff2:	2c00      	cmp	r4, #0
 8007ff4:	d108      	bne.n	8008008 <__pow5mult+0x68>
 8007ff6:	0038      	movs	r0, r7
 8007ff8:	4916      	ldr	r1, [pc, #88]	; (8008054 <__pow5mult+0xb4>)
 8007ffa:	f7ff ff0b 	bl	8007e14 <__i2b>
 8007ffe:	9b01      	ldr	r3, [sp, #4]
 8008000:	0004      	movs	r4, r0
 8008002:	6098      	str	r0, [r3, #8]
 8008004:	2300      	movs	r3, #0
 8008006:	6003      	str	r3, [r0, #0]
 8008008:	2301      	movs	r3, #1
 800800a:	421d      	tst	r5, r3
 800800c:	d00a      	beq.n	8008024 <__pow5mult+0x84>
 800800e:	0031      	movs	r1, r6
 8008010:	0022      	movs	r2, r4
 8008012:	0038      	movs	r0, r7
 8008014:	f7ff ff14 	bl	8007e40 <__multiply>
 8008018:	0031      	movs	r1, r6
 800801a:	9001      	str	r0, [sp, #4]
 800801c:	0038      	movs	r0, r7
 800801e:	f7ff fe49 	bl	8007cb4 <_Bfree>
 8008022:	9e01      	ldr	r6, [sp, #4]
 8008024:	106d      	asrs	r5, r5, #1
 8008026:	d00c      	beq.n	8008042 <__pow5mult+0xa2>
 8008028:	6820      	ldr	r0, [r4, #0]
 800802a:	2800      	cmp	r0, #0
 800802c:	d107      	bne.n	800803e <__pow5mult+0x9e>
 800802e:	0022      	movs	r2, r4
 8008030:	0021      	movs	r1, r4
 8008032:	0038      	movs	r0, r7
 8008034:	f7ff ff04 	bl	8007e40 <__multiply>
 8008038:	2300      	movs	r3, #0
 800803a:	6020      	str	r0, [r4, #0]
 800803c:	6003      	str	r3, [r0, #0]
 800803e:	0004      	movs	r4, r0
 8008040:	e7e2      	b.n	8008008 <__pow5mult+0x68>
 8008042:	0030      	movs	r0, r6
 8008044:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008046:	46c0      	nop			; (mov r8, r8)
 8008048:	08009c80 	.word	0x08009c80
 800804c:	08009aad 	.word	0x08009aad
 8008050:	08009b30 	.word	0x08009b30
 8008054:	00000271 	.word	0x00000271

08008058 <__lshift>:
 8008058:	b5f0      	push	{r4, r5, r6, r7, lr}
 800805a:	000c      	movs	r4, r1
 800805c:	0017      	movs	r7, r2
 800805e:	6923      	ldr	r3, [r4, #16]
 8008060:	1155      	asrs	r5, r2, #5
 8008062:	b087      	sub	sp, #28
 8008064:	18eb      	adds	r3, r5, r3
 8008066:	9302      	str	r3, [sp, #8]
 8008068:	3301      	adds	r3, #1
 800806a:	9301      	str	r3, [sp, #4]
 800806c:	6849      	ldr	r1, [r1, #4]
 800806e:	68a3      	ldr	r3, [r4, #8]
 8008070:	9004      	str	r0, [sp, #16]
 8008072:	9a01      	ldr	r2, [sp, #4]
 8008074:	4293      	cmp	r3, r2
 8008076:	db10      	blt.n	800809a <__lshift+0x42>
 8008078:	9804      	ldr	r0, [sp, #16]
 800807a:	f7ff fdd7 	bl	8007c2c <_Balloc>
 800807e:	2300      	movs	r3, #0
 8008080:	0002      	movs	r2, r0
 8008082:	0006      	movs	r6, r0
 8008084:	0019      	movs	r1, r3
 8008086:	3214      	adds	r2, #20
 8008088:	4298      	cmp	r0, r3
 800808a:	d10c      	bne.n	80080a6 <__lshift+0x4e>
 800808c:	21da      	movs	r1, #218	; 0xda
 800808e:	0002      	movs	r2, r0
 8008090:	4b26      	ldr	r3, [pc, #152]	; (800812c <__lshift+0xd4>)
 8008092:	4827      	ldr	r0, [pc, #156]	; (8008130 <__lshift+0xd8>)
 8008094:	31ff      	adds	r1, #255	; 0xff
 8008096:	f000 fbe7 	bl	8008868 <__assert_func>
 800809a:	3101      	adds	r1, #1
 800809c:	005b      	lsls	r3, r3, #1
 800809e:	e7e8      	b.n	8008072 <__lshift+0x1a>
 80080a0:	0098      	lsls	r0, r3, #2
 80080a2:	5011      	str	r1, [r2, r0]
 80080a4:	3301      	adds	r3, #1
 80080a6:	42ab      	cmp	r3, r5
 80080a8:	dbfa      	blt.n	80080a0 <__lshift+0x48>
 80080aa:	43eb      	mvns	r3, r5
 80080ac:	17db      	asrs	r3, r3, #31
 80080ae:	401d      	ands	r5, r3
 80080b0:	211f      	movs	r1, #31
 80080b2:	0023      	movs	r3, r4
 80080b4:	0038      	movs	r0, r7
 80080b6:	00ad      	lsls	r5, r5, #2
 80080b8:	1955      	adds	r5, r2, r5
 80080ba:	6922      	ldr	r2, [r4, #16]
 80080bc:	3314      	adds	r3, #20
 80080be:	0092      	lsls	r2, r2, #2
 80080c0:	4008      	ands	r0, r1
 80080c2:	4684      	mov	ip, r0
 80080c4:	189a      	adds	r2, r3, r2
 80080c6:	420f      	tst	r7, r1
 80080c8:	d02a      	beq.n	8008120 <__lshift+0xc8>
 80080ca:	3101      	adds	r1, #1
 80080cc:	1a09      	subs	r1, r1, r0
 80080ce:	9105      	str	r1, [sp, #20]
 80080d0:	2100      	movs	r1, #0
 80080d2:	9503      	str	r5, [sp, #12]
 80080d4:	4667      	mov	r7, ip
 80080d6:	6818      	ldr	r0, [r3, #0]
 80080d8:	40b8      	lsls	r0, r7
 80080da:	4301      	orrs	r1, r0
 80080dc:	9803      	ldr	r0, [sp, #12]
 80080de:	c002      	stmia	r0!, {r1}
 80080e0:	cb02      	ldmia	r3!, {r1}
 80080e2:	9003      	str	r0, [sp, #12]
 80080e4:	9805      	ldr	r0, [sp, #20]
 80080e6:	40c1      	lsrs	r1, r0
 80080e8:	429a      	cmp	r2, r3
 80080ea:	d8f3      	bhi.n	80080d4 <__lshift+0x7c>
 80080ec:	0020      	movs	r0, r4
 80080ee:	3015      	adds	r0, #21
 80080f0:	2304      	movs	r3, #4
 80080f2:	4282      	cmp	r2, r0
 80080f4:	d304      	bcc.n	8008100 <__lshift+0xa8>
 80080f6:	1b13      	subs	r3, r2, r4
 80080f8:	3b15      	subs	r3, #21
 80080fa:	089b      	lsrs	r3, r3, #2
 80080fc:	3301      	adds	r3, #1
 80080fe:	009b      	lsls	r3, r3, #2
 8008100:	50e9      	str	r1, [r5, r3]
 8008102:	2900      	cmp	r1, #0
 8008104:	d002      	beq.n	800810c <__lshift+0xb4>
 8008106:	9b02      	ldr	r3, [sp, #8]
 8008108:	3302      	adds	r3, #2
 800810a:	9301      	str	r3, [sp, #4]
 800810c:	9b01      	ldr	r3, [sp, #4]
 800810e:	9804      	ldr	r0, [sp, #16]
 8008110:	3b01      	subs	r3, #1
 8008112:	0021      	movs	r1, r4
 8008114:	6133      	str	r3, [r6, #16]
 8008116:	f7ff fdcd 	bl	8007cb4 <_Bfree>
 800811a:	0030      	movs	r0, r6
 800811c:	b007      	add	sp, #28
 800811e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008120:	cb02      	ldmia	r3!, {r1}
 8008122:	c502      	stmia	r5!, {r1}
 8008124:	429a      	cmp	r2, r3
 8008126:	d8fb      	bhi.n	8008120 <__lshift+0xc8>
 8008128:	e7f0      	b.n	800810c <__lshift+0xb4>
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	08009b1f 	.word	0x08009b1f
 8008130:	08009b30 	.word	0x08009b30

08008134 <__mcmp>:
 8008134:	6902      	ldr	r2, [r0, #16]
 8008136:	690b      	ldr	r3, [r1, #16]
 8008138:	b530      	push	{r4, r5, lr}
 800813a:	0004      	movs	r4, r0
 800813c:	1ad0      	subs	r0, r2, r3
 800813e:	429a      	cmp	r2, r3
 8008140:	d10d      	bne.n	800815e <__mcmp+0x2a>
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	3414      	adds	r4, #20
 8008146:	3114      	adds	r1, #20
 8008148:	18e2      	adds	r2, r4, r3
 800814a:	18c9      	adds	r1, r1, r3
 800814c:	3a04      	subs	r2, #4
 800814e:	3904      	subs	r1, #4
 8008150:	6815      	ldr	r5, [r2, #0]
 8008152:	680b      	ldr	r3, [r1, #0]
 8008154:	429d      	cmp	r5, r3
 8008156:	d003      	beq.n	8008160 <__mcmp+0x2c>
 8008158:	2001      	movs	r0, #1
 800815a:	429d      	cmp	r5, r3
 800815c:	d303      	bcc.n	8008166 <__mcmp+0x32>
 800815e:	bd30      	pop	{r4, r5, pc}
 8008160:	4294      	cmp	r4, r2
 8008162:	d3f3      	bcc.n	800814c <__mcmp+0x18>
 8008164:	e7fb      	b.n	800815e <__mcmp+0x2a>
 8008166:	4240      	negs	r0, r0
 8008168:	e7f9      	b.n	800815e <__mcmp+0x2a>
	...

0800816c <__mdiff>:
 800816c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800816e:	000e      	movs	r6, r1
 8008170:	0007      	movs	r7, r0
 8008172:	0011      	movs	r1, r2
 8008174:	0030      	movs	r0, r6
 8008176:	b087      	sub	sp, #28
 8008178:	0014      	movs	r4, r2
 800817a:	f7ff ffdb 	bl	8008134 <__mcmp>
 800817e:	1e05      	subs	r5, r0, #0
 8008180:	d110      	bne.n	80081a4 <__mdiff+0x38>
 8008182:	0001      	movs	r1, r0
 8008184:	0038      	movs	r0, r7
 8008186:	f7ff fd51 	bl	8007c2c <_Balloc>
 800818a:	1e02      	subs	r2, r0, #0
 800818c:	d104      	bne.n	8008198 <__mdiff+0x2c>
 800818e:	4b40      	ldr	r3, [pc, #256]	; (8008290 <__mdiff+0x124>)
 8008190:	4940      	ldr	r1, [pc, #256]	; (8008294 <__mdiff+0x128>)
 8008192:	4841      	ldr	r0, [pc, #260]	; (8008298 <__mdiff+0x12c>)
 8008194:	f000 fb68 	bl	8008868 <__assert_func>
 8008198:	2301      	movs	r3, #1
 800819a:	6145      	str	r5, [r0, #20]
 800819c:	6103      	str	r3, [r0, #16]
 800819e:	0010      	movs	r0, r2
 80081a0:	b007      	add	sp, #28
 80081a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081a4:	2301      	movs	r3, #1
 80081a6:	9301      	str	r3, [sp, #4]
 80081a8:	2800      	cmp	r0, #0
 80081aa:	db04      	blt.n	80081b6 <__mdiff+0x4a>
 80081ac:	0023      	movs	r3, r4
 80081ae:	0034      	movs	r4, r6
 80081b0:	001e      	movs	r6, r3
 80081b2:	2300      	movs	r3, #0
 80081b4:	9301      	str	r3, [sp, #4]
 80081b6:	0038      	movs	r0, r7
 80081b8:	6861      	ldr	r1, [r4, #4]
 80081ba:	f7ff fd37 	bl	8007c2c <_Balloc>
 80081be:	1e02      	subs	r2, r0, #0
 80081c0:	d103      	bne.n	80081ca <__mdiff+0x5e>
 80081c2:	2190      	movs	r1, #144	; 0x90
 80081c4:	4b32      	ldr	r3, [pc, #200]	; (8008290 <__mdiff+0x124>)
 80081c6:	0089      	lsls	r1, r1, #2
 80081c8:	e7e3      	b.n	8008192 <__mdiff+0x26>
 80081ca:	9b01      	ldr	r3, [sp, #4]
 80081cc:	2700      	movs	r7, #0
 80081ce:	60c3      	str	r3, [r0, #12]
 80081d0:	6920      	ldr	r0, [r4, #16]
 80081d2:	3414      	adds	r4, #20
 80081d4:	9401      	str	r4, [sp, #4]
 80081d6:	9b01      	ldr	r3, [sp, #4]
 80081d8:	0084      	lsls	r4, r0, #2
 80081da:	191b      	adds	r3, r3, r4
 80081dc:	0034      	movs	r4, r6
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	6933      	ldr	r3, [r6, #16]
 80081e2:	3414      	adds	r4, #20
 80081e4:	0099      	lsls	r1, r3, #2
 80081e6:	1863      	adds	r3, r4, r1
 80081e8:	9303      	str	r3, [sp, #12]
 80081ea:	0013      	movs	r3, r2
 80081ec:	3314      	adds	r3, #20
 80081ee:	469c      	mov	ip, r3
 80081f0:	9305      	str	r3, [sp, #20]
 80081f2:	9b01      	ldr	r3, [sp, #4]
 80081f4:	9304      	str	r3, [sp, #16]
 80081f6:	9b04      	ldr	r3, [sp, #16]
 80081f8:	cc02      	ldmia	r4!, {r1}
 80081fa:	cb20      	ldmia	r3!, {r5}
 80081fc:	9304      	str	r3, [sp, #16]
 80081fe:	b2ab      	uxth	r3, r5
 8008200:	19df      	adds	r7, r3, r7
 8008202:	b28b      	uxth	r3, r1
 8008204:	1afb      	subs	r3, r7, r3
 8008206:	0c09      	lsrs	r1, r1, #16
 8008208:	0c2d      	lsrs	r5, r5, #16
 800820a:	1a6d      	subs	r5, r5, r1
 800820c:	1419      	asrs	r1, r3, #16
 800820e:	186d      	adds	r5, r5, r1
 8008210:	4661      	mov	r1, ip
 8008212:	142f      	asrs	r7, r5, #16
 8008214:	b29b      	uxth	r3, r3
 8008216:	042d      	lsls	r5, r5, #16
 8008218:	432b      	orrs	r3, r5
 800821a:	c108      	stmia	r1!, {r3}
 800821c:	9b03      	ldr	r3, [sp, #12]
 800821e:	468c      	mov	ip, r1
 8008220:	42a3      	cmp	r3, r4
 8008222:	d8e8      	bhi.n	80081f6 <__mdiff+0x8a>
 8008224:	0031      	movs	r1, r6
 8008226:	9c03      	ldr	r4, [sp, #12]
 8008228:	3115      	adds	r1, #21
 800822a:	2304      	movs	r3, #4
 800822c:	428c      	cmp	r4, r1
 800822e:	d304      	bcc.n	800823a <__mdiff+0xce>
 8008230:	1ba3      	subs	r3, r4, r6
 8008232:	3b15      	subs	r3, #21
 8008234:	089b      	lsrs	r3, r3, #2
 8008236:	3301      	adds	r3, #1
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	9901      	ldr	r1, [sp, #4]
 800823c:	18cc      	adds	r4, r1, r3
 800823e:	9905      	ldr	r1, [sp, #20]
 8008240:	0026      	movs	r6, r4
 8008242:	18cb      	adds	r3, r1, r3
 8008244:	469c      	mov	ip, r3
 8008246:	9902      	ldr	r1, [sp, #8]
 8008248:	428e      	cmp	r6, r1
 800824a:	d310      	bcc.n	800826e <__mdiff+0x102>
 800824c:	9e02      	ldr	r6, [sp, #8]
 800824e:	1ee1      	subs	r1, r4, #3
 8008250:	2500      	movs	r5, #0
 8008252:	428e      	cmp	r6, r1
 8008254:	d304      	bcc.n	8008260 <__mdiff+0xf4>
 8008256:	0031      	movs	r1, r6
 8008258:	3103      	adds	r1, #3
 800825a:	1b0c      	subs	r4, r1, r4
 800825c:	08a4      	lsrs	r4, r4, #2
 800825e:	00a5      	lsls	r5, r4, #2
 8008260:	195b      	adds	r3, r3, r5
 8008262:	3b04      	subs	r3, #4
 8008264:	6819      	ldr	r1, [r3, #0]
 8008266:	2900      	cmp	r1, #0
 8008268:	d00f      	beq.n	800828a <__mdiff+0x11e>
 800826a:	6110      	str	r0, [r2, #16]
 800826c:	e797      	b.n	800819e <__mdiff+0x32>
 800826e:	ce02      	ldmia	r6!, {r1}
 8008270:	b28d      	uxth	r5, r1
 8008272:	19ed      	adds	r5, r5, r7
 8008274:	0c0f      	lsrs	r7, r1, #16
 8008276:	1429      	asrs	r1, r5, #16
 8008278:	1879      	adds	r1, r7, r1
 800827a:	140f      	asrs	r7, r1, #16
 800827c:	b2ad      	uxth	r5, r5
 800827e:	0409      	lsls	r1, r1, #16
 8008280:	430d      	orrs	r5, r1
 8008282:	4661      	mov	r1, ip
 8008284:	c120      	stmia	r1!, {r5}
 8008286:	468c      	mov	ip, r1
 8008288:	e7dd      	b.n	8008246 <__mdiff+0xda>
 800828a:	3801      	subs	r0, #1
 800828c:	e7e9      	b.n	8008262 <__mdiff+0xf6>
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	08009b1f 	.word	0x08009b1f
 8008294:	00000232 	.word	0x00000232
 8008298:	08009b30 	.word	0x08009b30

0800829c <__d2b>:
 800829c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800829e:	2101      	movs	r1, #1
 80082a0:	0014      	movs	r4, r2
 80082a2:	001e      	movs	r6, r3
 80082a4:	9f08      	ldr	r7, [sp, #32]
 80082a6:	f7ff fcc1 	bl	8007c2c <_Balloc>
 80082aa:	1e05      	subs	r5, r0, #0
 80082ac:	d105      	bne.n	80082ba <__d2b+0x1e>
 80082ae:	0002      	movs	r2, r0
 80082b0:	4b26      	ldr	r3, [pc, #152]	; (800834c <__d2b+0xb0>)
 80082b2:	4927      	ldr	r1, [pc, #156]	; (8008350 <__d2b+0xb4>)
 80082b4:	4827      	ldr	r0, [pc, #156]	; (8008354 <__d2b+0xb8>)
 80082b6:	f000 fad7 	bl	8008868 <__assert_func>
 80082ba:	0333      	lsls	r3, r6, #12
 80082bc:	0076      	lsls	r6, r6, #1
 80082be:	0b1b      	lsrs	r3, r3, #12
 80082c0:	0d76      	lsrs	r6, r6, #21
 80082c2:	d124      	bne.n	800830e <__d2b+0x72>
 80082c4:	9301      	str	r3, [sp, #4]
 80082c6:	2c00      	cmp	r4, #0
 80082c8:	d027      	beq.n	800831a <__d2b+0x7e>
 80082ca:	4668      	mov	r0, sp
 80082cc:	9400      	str	r4, [sp, #0]
 80082ce:	f7ff fd73 	bl	8007db8 <__lo0bits>
 80082d2:	9c00      	ldr	r4, [sp, #0]
 80082d4:	2800      	cmp	r0, #0
 80082d6:	d01e      	beq.n	8008316 <__d2b+0x7a>
 80082d8:	9b01      	ldr	r3, [sp, #4]
 80082da:	2120      	movs	r1, #32
 80082dc:	001a      	movs	r2, r3
 80082de:	1a09      	subs	r1, r1, r0
 80082e0:	408a      	lsls	r2, r1
 80082e2:	40c3      	lsrs	r3, r0
 80082e4:	4322      	orrs	r2, r4
 80082e6:	616a      	str	r2, [r5, #20]
 80082e8:	9301      	str	r3, [sp, #4]
 80082ea:	9c01      	ldr	r4, [sp, #4]
 80082ec:	61ac      	str	r4, [r5, #24]
 80082ee:	1e63      	subs	r3, r4, #1
 80082f0:	419c      	sbcs	r4, r3
 80082f2:	3401      	adds	r4, #1
 80082f4:	612c      	str	r4, [r5, #16]
 80082f6:	2e00      	cmp	r6, #0
 80082f8:	d018      	beq.n	800832c <__d2b+0x90>
 80082fa:	4b17      	ldr	r3, [pc, #92]	; (8008358 <__d2b+0xbc>)
 80082fc:	18f6      	adds	r6, r6, r3
 80082fe:	2335      	movs	r3, #53	; 0x35
 8008300:	1836      	adds	r6, r6, r0
 8008302:	1a18      	subs	r0, r3, r0
 8008304:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008306:	603e      	str	r6, [r7, #0]
 8008308:	6018      	str	r0, [r3, #0]
 800830a:	0028      	movs	r0, r5
 800830c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800830e:	2280      	movs	r2, #128	; 0x80
 8008310:	0352      	lsls	r2, r2, #13
 8008312:	4313      	orrs	r3, r2
 8008314:	e7d6      	b.n	80082c4 <__d2b+0x28>
 8008316:	616c      	str	r4, [r5, #20]
 8008318:	e7e7      	b.n	80082ea <__d2b+0x4e>
 800831a:	a801      	add	r0, sp, #4
 800831c:	f7ff fd4c 	bl	8007db8 <__lo0bits>
 8008320:	2401      	movs	r4, #1
 8008322:	9b01      	ldr	r3, [sp, #4]
 8008324:	612c      	str	r4, [r5, #16]
 8008326:	616b      	str	r3, [r5, #20]
 8008328:	3020      	adds	r0, #32
 800832a:	e7e4      	b.n	80082f6 <__d2b+0x5a>
 800832c:	4b0b      	ldr	r3, [pc, #44]	; (800835c <__d2b+0xc0>)
 800832e:	18c0      	adds	r0, r0, r3
 8008330:	4b0b      	ldr	r3, [pc, #44]	; (8008360 <__d2b+0xc4>)
 8008332:	6038      	str	r0, [r7, #0]
 8008334:	18e3      	adds	r3, r4, r3
 8008336:	009b      	lsls	r3, r3, #2
 8008338:	18eb      	adds	r3, r5, r3
 800833a:	6958      	ldr	r0, [r3, #20]
 800833c:	f7ff fd22 	bl	8007d84 <__hi0bits>
 8008340:	0164      	lsls	r4, r4, #5
 8008342:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008344:	1a24      	subs	r4, r4, r0
 8008346:	601c      	str	r4, [r3, #0]
 8008348:	e7df      	b.n	800830a <__d2b+0x6e>
 800834a:	46c0      	nop			; (mov r8, r8)
 800834c:	08009b1f 	.word	0x08009b1f
 8008350:	0000030a 	.word	0x0000030a
 8008354:	08009b30 	.word	0x08009b30
 8008358:	fffffbcd 	.word	0xfffffbcd
 800835c:	fffffbce 	.word	0xfffffbce
 8008360:	3fffffff 	.word	0x3fffffff

08008364 <_calloc_r>:
 8008364:	b570      	push	{r4, r5, r6, lr}
 8008366:	0c13      	lsrs	r3, r2, #16
 8008368:	0c0d      	lsrs	r5, r1, #16
 800836a:	d11e      	bne.n	80083aa <_calloc_r+0x46>
 800836c:	2b00      	cmp	r3, #0
 800836e:	d10c      	bne.n	800838a <_calloc_r+0x26>
 8008370:	b289      	uxth	r1, r1
 8008372:	b294      	uxth	r4, r2
 8008374:	434c      	muls	r4, r1
 8008376:	0021      	movs	r1, r4
 8008378:	f000 f88c 	bl	8008494 <_malloc_r>
 800837c:	1e05      	subs	r5, r0, #0
 800837e:	d01b      	beq.n	80083b8 <_calloc_r+0x54>
 8008380:	0022      	movs	r2, r4
 8008382:	2100      	movs	r1, #0
 8008384:	f7fe f8e7 	bl	8006556 <memset>
 8008388:	e016      	b.n	80083b8 <_calloc_r+0x54>
 800838a:	1c1d      	adds	r5, r3, #0
 800838c:	1c0b      	adds	r3, r1, #0
 800838e:	b292      	uxth	r2, r2
 8008390:	b289      	uxth	r1, r1
 8008392:	b29c      	uxth	r4, r3
 8008394:	4351      	muls	r1, r2
 8008396:	b2ab      	uxth	r3, r5
 8008398:	4363      	muls	r3, r4
 800839a:	0c0c      	lsrs	r4, r1, #16
 800839c:	191c      	adds	r4, r3, r4
 800839e:	0c22      	lsrs	r2, r4, #16
 80083a0:	d107      	bne.n	80083b2 <_calloc_r+0x4e>
 80083a2:	0424      	lsls	r4, r4, #16
 80083a4:	b289      	uxth	r1, r1
 80083a6:	430c      	orrs	r4, r1
 80083a8:	e7e5      	b.n	8008376 <_calloc_r+0x12>
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <_calloc_r+0x4e>
 80083ae:	1c13      	adds	r3, r2, #0
 80083b0:	e7ed      	b.n	800838e <_calloc_r+0x2a>
 80083b2:	230c      	movs	r3, #12
 80083b4:	2500      	movs	r5, #0
 80083b6:	6003      	str	r3, [r0, #0]
 80083b8:	0028      	movs	r0, r5
 80083ba:	bd70      	pop	{r4, r5, r6, pc}

080083bc <_free_r>:
 80083bc:	b570      	push	{r4, r5, r6, lr}
 80083be:	0005      	movs	r5, r0
 80083c0:	2900      	cmp	r1, #0
 80083c2:	d010      	beq.n	80083e6 <_free_r+0x2a>
 80083c4:	1f0c      	subs	r4, r1, #4
 80083c6:	6823      	ldr	r3, [r4, #0]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	da00      	bge.n	80083ce <_free_r+0x12>
 80083cc:	18e4      	adds	r4, r4, r3
 80083ce:	0028      	movs	r0, r5
 80083d0:	f000 fa9e 	bl	8008910 <__malloc_lock>
 80083d4:	4a1d      	ldr	r2, [pc, #116]	; (800844c <_free_r+0x90>)
 80083d6:	6813      	ldr	r3, [r2, #0]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d105      	bne.n	80083e8 <_free_r+0x2c>
 80083dc:	6063      	str	r3, [r4, #4]
 80083de:	6014      	str	r4, [r2, #0]
 80083e0:	0028      	movs	r0, r5
 80083e2:	f000 fa9d 	bl	8008920 <__malloc_unlock>
 80083e6:	bd70      	pop	{r4, r5, r6, pc}
 80083e8:	42a3      	cmp	r3, r4
 80083ea:	d908      	bls.n	80083fe <_free_r+0x42>
 80083ec:	6821      	ldr	r1, [r4, #0]
 80083ee:	1860      	adds	r0, r4, r1
 80083f0:	4283      	cmp	r3, r0
 80083f2:	d1f3      	bne.n	80083dc <_free_r+0x20>
 80083f4:	6818      	ldr	r0, [r3, #0]
 80083f6:	685b      	ldr	r3, [r3, #4]
 80083f8:	1841      	adds	r1, r0, r1
 80083fa:	6021      	str	r1, [r4, #0]
 80083fc:	e7ee      	b.n	80083dc <_free_r+0x20>
 80083fe:	001a      	movs	r2, r3
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b00      	cmp	r3, #0
 8008404:	d001      	beq.n	800840a <_free_r+0x4e>
 8008406:	42a3      	cmp	r3, r4
 8008408:	d9f9      	bls.n	80083fe <_free_r+0x42>
 800840a:	6811      	ldr	r1, [r2, #0]
 800840c:	1850      	adds	r0, r2, r1
 800840e:	42a0      	cmp	r0, r4
 8008410:	d10b      	bne.n	800842a <_free_r+0x6e>
 8008412:	6820      	ldr	r0, [r4, #0]
 8008414:	1809      	adds	r1, r1, r0
 8008416:	1850      	adds	r0, r2, r1
 8008418:	6011      	str	r1, [r2, #0]
 800841a:	4283      	cmp	r3, r0
 800841c:	d1e0      	bne.n	80083e0 <_free_r+0x24>
 800841e:	6818      	ldr	r0, [r3, #0]
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	1841      	adds	r1, r0, r1
 8008424:	6011      	str	r1, [r2, #0]
 8008426:	6053      	str	r3, [r2, #4]
 8008428:	e7da      	b.n	80083e0 <_free_r+0x24>
 800842a:	42a0      	cmp	r0, r4
 800842c:	d902      	bls.n	8008434 <_free_r+0x78>
 800842e:	230c      	movs	r3, #12
 8008430:	602b      	str	r3, [r5, #0]
 8008432:	e7d5      	b.n	80083e0 <_free_r+0x24>
 8008434:	6821      	ldr	r1, [r4, #0]
 8008436:	1860      	adds	r0, r4, r1
 8008438:	4283      	cmp	r3, r0
 800843a:	d103      	bne.n	8008444 <_free_r+0x88>
 800843c:	6818      	ldr	r0, [r3, #0]
 800843e:	685b      	ldr	r3, [r3, #4]
 8008440:	1841      	adds	r1, r0, r1
 8008442:	6021      	str	r1, [r4, #0]
 8008444:	6063      	str	r3, [r4, #4]
 8008446:	6054      	str	r4, [r2, #4]
 8008448:	e7ca      	b.n	80083e0 <_free_r+0x24>
 800844a:	46c0      	nop			; (mov r8, r8)
 800844c:	200014c8 	.word	0x200014c8

08008450 <sbrk_aligned>:
 8008450:	b570      	push	{r4, r5, r6, lr}
 8008452:	4e0f      	ldr	r6, [pc, #60]	; (8008490 <sbrk_aligned+0x40>)
 8008454:	000d      	movs	r5, r1
 8008456:	6831      	ldr	r1, [r6, #0]
 8008458:	0004      	movs	r4, r0
 800845a:	2900      	cmp	r1, #0
 800845c:	d102      	bne.n	8008464 <sbrk_aligned+0x14>
 800845e:	f000 f9f1 	bl	8008844 <_sbrk_r>
 8008462:	6030      	str	r0, [r6, #0]
 8008464:	0029      	movs	r1, r5
 8008466:	0020      	movs	r0, r4
 8008468:	f000 f9ec 	bl	8008844 <_sbrk_r>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d00a      	beq.n	8008486 <sbrk_aligned+0x36>
 8008470:	2303      	movs	r3, #3
 8008472:	1cc5      	adds	r5, r0, #3
 8008474:	439d      	bics	r5, r3
 8008476:	42a8      	cmp	r0, r5
 8008478:	d007      	beq.n	800848a <sbrk_aligned+0x3a>
 800847a:	1a29      	subs	r1, r5, r0
 800847c:	0020      	movs	r0, r4
 800847e:	f000 f9e1 	bl	8008844 <_sbrk_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	d101      	bne.n	800848a <sbrk_aligned+0x3a>
 8008486:	2501      	movs	r5, #1
 8008488:	426d      	negs	r5, r5
 800848a:	0028      	movs	r0, r5
 800848c:	bd70      	pop	{r4, r5, r6, pc}
 800848e:	46c0      	nop			; (mov r8, r8)
 8008490:	200014cc 	.word	0x200014cc

08008494 <_malloc_r>:
 8008494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008496:	2203      	movs	r2, #3
 8008498:	1ccb      	adds	r3, r1, #3
 800849a:	4393      	bics	r3, r2
 800849c:	3308      	adds	r3, #8
 800849e:	0006      	movs	r6, r0
 80084a0:	001f      	movs	r7, r3
 80084a2:	2b0c      	cmp	r3, #12
 80084a4:	d232      	bcs.n	800850c <_malloc_r+0x78>
 80084a6:	270c      	movs	r7, #12
 80084a8:	42b9      	cmp	r1, r7
 80084aa:	d831      	bhi.n	8008510 <_malloc_r+0x7c>
 80084ac:	0030      	movs	r0, r6
 80084ae:	f000 fa2f 	bl	8008910 <__malloc_lock>
 80084b2:	4d32      	ldr	r5, [pc, #200]	; (800857c <_malloc_r+0xe8>)
 80084b4:	682b      	ldr	r3, [r5, #0]
 80084b6:	001c      	movs	r4, r3
 80084b8:	2c00      	cmp	r4, #0
 80084ba:	d12e      	bne.n	800851a <_malloc_r+0x86>
 80084bc:	0039      	movs	r1, r7
 80084be:	0030      	movs	r0, r6
 80084c0:	f7ff ffc6 	bl	8008450 <sbrk_aligned>
 80084c4:	0004      	movs	r4, r0
 80084c6:	1c43      	adds	r3, r0, #1
 80084c8:	d11e      	bne.n	8008508 <_malloc_r+0x74>
 80084ca:	682c      	ldr	r4, [r5, #0]
 80084cc:	0025      	movs	r5, r4
 80084ce:	2d00      	cmp	r5, #0
 80084d0:	d14a      	bne.n	8008568 <_malloc_r+0xd4>
 80084d2:	6823      	ldr	r3, [r4, #0]
 80084d4:	0029      	movs	r1, r5
 80084d6:	18e3      	adds	r3, r4, r3
 80084d8:	0030      	movs	r0, r6
 80084da:	9301      	str	r3, [sp, #4]
 80084dc:	f000 f9b2 	bl	8008844 <_sbrk_r>
 80084e0:	9b01      	ldr	r3, [sp, #4]
 80084e2:	4283      	cmp	r3, r0
 80084e4:	d143      	bne.n	800856e <_malloc_r+0xda>
 80084e6:	6823      	ldr	r3, [r4, #0]
 80084e8:	3703      	adds	r7, #3
 80084ea:	1aff      	subs	r7, r7, r3
 80084ec:	2303      	movs	r3, #3
 80084ee:	439f      	bics	r7, r3
 80084f0:	3708      	adds	r7, #8
 80084f2:	2f0c      	cmp	r7, #12
 80084f4:	d200      	bcs.n	80084f8 <_malloc_r+0x64>
 80084f6:	270c      	movs	r7, #12
 80084f8:	0039      	movs	r1, r7
 80084fa:	0030      	movs	r0, r6
 80084fc:	f7ff ffa8 	bl	8008450 <sbrk_aligned>
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	d034      	beq.n	800856e <_malloc_r+0xda>
 8008504:	6823      	ldr	r3, [r4, #0]
 8008506:	19df      	adds	r7, r3, r7
 8008508:	6027      	str	r7, [r4, #0]
 800850a:	e013      	b.n	8008534 <_malloc_r+0xa0>
 800850c:	2b00      	cmp	r3, #0
 800850e:	dacb      	bge.n	80084a8 <_malloc_r+0x14>
 8008510:	230c      	movs	r3, #12
 8008512:	2500      	movs	r5, #0
 8008514:	6033      	str	r3, [r6, #0]
 8008516:	0028      	movs	r0, r5
 8008518:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800851a:	6822      	ldr	r2, [r4, #0]
 800851c:	1bd1      	subs	r1, r2, r7
 800851e:	d420      	bmi.n	8008562 <_malloc_r+0xce>
 8008520:	290b      	cmp	r1, #11
 8008522:	d917      	bls.n	8008554 <_malloc_r+0xc0>
 8008524:	19e2      	adds	r2, r4, r7
 8008526:	6027      	str	r7, [r4, #0]
 8008528:	42a3      	cmp	r3, r4
 800852a:	d111      	bne.n	8008550 <_malloc_r+0xbc>
 800852c:	602a      	str	r2, [r5, #0]
 800852e:	6863      	ldr	r3, [r4, #4]
 8008530:	6011      	str	r1, [r2, #0]
 8008532:	6053      	str	r3, [r2, #4]
 8008534:	0030      	movs	r0, r6
 8008536:	0025      	movs	r5, r4
 8008538:	f000 f9f2 	bl	8008920 <__malloc_unlock>
 800853c:	2207      	movs	r2, #7
 800853e:	350b      	adds	r5, #11
 8008540:	1d23      	adds	r3, r4, #4
 8008542:	4395      	bics	r5, r2
 8008544:	1aea      	subs	r2, r5, r3
 8008546:	429d      	cmp	r5, r3
 8008548:	d0e5      	beq.n	8008516 <_malloc_r+0x82>
 800854a:	1b5b      	subs	r3, r3, r5
 800854c:	50a3      	str	r3, [r4, r2]
 800854e:	e7e2      	b.n	8008516 <_malloc_r+0x82>
 8008550:	605a      	str	r2, [r3, #4]
 8008552:	e7ec      	b.n	800852e <_malloc_r+0x9a>
 8008554:	6862      	ldr	r2, [r4, #4]
 8008556:	42a3      	cmp	r3, r4
 8008558:	d101      	bne.n	800855e <_malloc_r+0xca>
 800855a:	602a      	str	r2, [r5, #0]
 800855c:	e7ea      	b.n	8008534 <_malloc_r+0xa0>
 800855e:	605a      	str	r2, [r3, #4]
 8008560:	e7e8      	b.n	8008534 <_malloc_r+0xa0>
 8008562:	0023      	movs	r3, r4
 8008564:	6864      	ldr	r4, [r4, #4]
 8008566:	e7a7      	b.n	80084b8 <_malloc_r+0x24>
 8008568:	002c      	movs	r4, r5
 800856a:	686d      	ldr	r5, [r5, #4]
 800856c:	e7af      	b.n	80084ce <_malloc_r+0x3a>
 800856e:	230c      	movs	r3, #12
 8008570:	0030      	movs	r0, r6
 8008572:	6033      	str	r3, [r6, #0]
 8008574:	f000 f9d4 	bl	8008920 <__malloc_unlock>
 8008578:	e7cd      	b.n	8008516 <_malloc_r+0x82>
 800857a:	46c0      	nop			; (mov r8, r8)
 800857c:	200014c8 	.word	0x200014c8

08008580 <__ssputs_r>:
 8008580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008582:	688e      	ldr	r6, [r1, #8]
 8008584:	b085      	sub	sp, #20
 8008586:	0007      	movs	r7, r0
 8008588:	000c      	movs	r4, r1
 800858a:	9203      	str	r2, [sp, #12]
 800858c:	9301      	str	r3, [sp, #4]
 800858e:	429e      	cmp	r6, r3
 8008590:	d83c      	bhi.n	800860c <__ssputs_r+0x8c>
 8008592:	2390      	movs	r3, #144	; 0x90
 8008594:	898a      	ldrh	r2, [r1, #12]
 8008596:	00db      	lsls	r3, r3, #3
 8008598:	421a      	tst	r2, r3
 800859a:	d034      	beq.n	8008606 <__ssputs_r+0x86>
 800859c:	6909      	ldr	r1, [r1, #16]
 800859e:	6823      	ldr	r3, [r4, #0]
 80085a0:	6960      	ldr	r0, [r4, #20]
 80085a2:	1a5b      	subs	r3, r3, r1
 80085a4:	9302      	str	r3, [sp, #8]
 80085a6:	2303      	movs	r3, #3
 80085a8:	4343      	muls	r3, r0
 80085aa:	0fdd      	lsrs	r5, r3, #31
 80085ac:	18ed      	adds	r5, r5, r3
 80085ae:	9b01      	ldr	r3, [sp, #4]
 80085b0:	9802      	ldr	r0, [sp, #8]
 80085b2:	3301      	adds	r3, #1
 80085b4:	181b      	adds	r3, r3, r0
 80085b6:	106d      	asrs	r5, r5, #1
 80085b8:	42ab      	cmp	r3, r5
 80085ba:	d900      	bls.n	80085be <__ssputs_r+0x3e>
 80085bc:	001d      	movs	r5, r3
 80085be:	0553      	lsls	r3, r2, #21
 80085c0:	d532      	bpl.n	8008628 <__ssputs_r+0xa8>
 80085c2:	0029      	movs	r1, r5
 80085c4:	0038      	movs	r0, r7
 80085c6:	f7ff ff65 	bl	8008494 <_malloc_r>
 80085ca:	1e06      	subs	r6, r0, #0
 80085cc:	d109      	bne.n	80085e2 <__ssputs_r+0x62>
 80085ce:	230c      	movs	r3, #12
 80085d0:	603b      	str	r3, [r7, #0]
 80085d2:	2340      	movs	r3, #64	; 0x40
 80085d4:	2001      	movs	r0, #1
 80085d6:	89a2      	ldrh	r2, [r4, #12]
 80085d8:	4240      	negs	r0, r0
 80085da:	4313      	orrs	r3, r2
 80085dc:	81a3      	strh	r3, [r4, #12]
 80085de:	b005      	add	sp, #20
 80085e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80085e2:	9a02      	ldr	r2, [sp, #8]
 80085e4:	6921      	ldr	r1, [r4, #16]
 80085e6:	f7fd ffad 	bl	8006544 <memcpy>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	4a14      	ldr	r2, [pc, #80]	; (8008640 <__ssputs_r+0xc0>)
 80085ee:	401a      	ands	r2, r3
 80085f0:	2380      	movs	r3, #128	; 0x80
 80085f2:	4313      	orrs	r3, r2
 80085f4:	81a3      	strh	r3, [r4, #12]
 80085f6:	9b02      	ldr	r3, [sp, #8]
 80085f8:	6126      	str	r6, [r4, #16]
 80085fa:	18f6      	adds	r6, r6, r3
 80085fc:	6026      	str	r6, [r4, #0]
 80085fe:	6165      	str	r5, [r4, #20]
 8008600:	9e01      	ldr	r6, [sp, #4]
 8008602:	1aed      	subs	r5, r5, r3
 8008604:	60a5      	str	r5, [r4, #8]
 8008606:	9b01      	ldr	r3, [sp, #4]
 8008608:	429e      	cmp	r6, r3
 800860a:	d900      	bls.n	800860e <__ssputs_r+0x8e>
 800860c:	9e01      	ldr	r6, [sp, #4]
 800860e:	0032      	movs	r2, r6
 8008610:	9903      	ldr	r1, [sp, #12]
 8008612:	6820      	ldr	r0, [r4, #0]
 8008614:	f000 f968 	bl	80088e8 <memmove>
 8008618:	68a3      	ldr	r3, [r4, #8]
 800861a:	2000      	movs	r0, #0
 800861c:	1b9b      	subs	r3, r3, r6
 800861e:	60a3      	str	r3, [r4, #8]
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	199e      	adds	r6, r3, r6
 8008624:	6026      	str	r6, [r4, #0]
 8008626:	e7da      	b.n	80085de <__ssputs_r+0x5e>
 8008628:	002a      	movs	r2, r5
 800862a:	0038      	movs	r0, r7
 800862c:	f000 f980 	bl	8008930 <_realloc_r>
 8008630:	1e06      	subs	r6, r0, #0
 8008632:	d1e0      	bne.n	80085f6 <__ssputs_r+0x76>
 8008634:	0038      	movs	r0, r7
 8008636:	6921      	ldr	r1, [r4, #16]
 8008638:	f7ff fec0 	bl	80083bc <_free_r>
 800863c:	e7c7      	b.n	80085ce <__ssputs_r+0x4e>
 800863e:	46c0      	nop			; (mov r8, r8)
 8008640:	fffffb7f 	.word	0xfffffb7f

08008644 <_svfiprintf_r>:
 8008644:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008646:	b0a1      	sub	sp, #132	; 0x84
 8008648:	9003      	str	r0, [sp, #12]
 800864a:	001d      	movs	r5, r3
 800864c:	898b      	ldrh	r3, [r1, #12]
 800864e:	000f      	movs	r7, r1
 8008650:	0016      	movs	r6, r2
 8008652:	061b      	lsls	r3, r3, #24
 8008654:	d511      	bpl.n	800867a <_svfiprintf_r+0x36>
 8008656:	690b      	ldr	r3, [r1, #16]
 8008658:	2b00      	cmp	r3, #0
 800865a:	d10e      	bne.n	800867a <_svfiprintf_r+0x36>
 800865c:	2140      	movs	r1, #64	; 0x40
 800865e:	f7ff ff19 	bl	8008494 <_malloc_r>
 8008662:	6038      	str	r0, [r7, #0]
 8008664:	6138      	str	r0, [r7, #16]
 8008666:	2800      	cmp	r0, #0
 8008668:	d105      	bne.n	8008676 <_svfiprintf_r+0x32>
 800866a:	230c      	movs	r3, #12
 800866c:	9a03      	ldr	r2, [sp, #12]
 800866e:	3801      	subs	r0, #1
 8008670:	6013      	str	r3, [r2, #0]
 8008672:	b021      	add	sp, #132	; 0x84
 8008674:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008676:	2340      	movs	r3, #64	; 0x40
 8008678:	617b      	str	r3, [r7, #20]
 800867a:	2300      	movs	r3, #0
 800867c:	ac08      	add	r4, sp, #32
 800867e:	6163      	str	r3, [r4, #20]
 8008680:	3320      	adds	r3, #32
 8008682:	7663      	strb	r3, [r4, #25]
 8008684:	3310      	adds	r3, #16
 8008686:	76a3      	strb	r3, [r4, #26]
 8008688:	9507      	str	r5, [sp, #28]
 800868a:	0035      	movs	r5, r6
 800868c:	782b      	ldrb	r3, [r5, #0]
 800868e:	2b00      	cmp	r3, #0
 8008690:	d001      	beq.n	8008696 <_svfiprintf_r+0x52>
 8008692:	2b25      	cmp	r3, #37	; 0x25
 8008694:	d147      	bne.n	8008726 <_svfiprintf_r+0xe2>
 8008696:	1bab      	subs	r3, r5, r6
 8008698:	9305      	str	r3, [sp, #20]
 800869a:	42b5      	cmp	r5, r6
 800869c:	d00c      	beq.n	80086b8 <_svfiprintf_r+0x74>
 800869e:	0032      	movs	r2, r6
 80086a0:	0039      	movs	r1, r7
 80086a2:	9803      	ldr	r0, [sp, #12]
 80086a4:	f7ff ff6c 	bl	8008580 <__ssputs_r>
 80086a8:	1c43      	adds	r3, r0, #1
 80086aa:	d100      	bne.n	80086ae <_svfiprintf_r+0x6a>
 80086ac:	e0ae      	b.n	800880c <_svfiprintf_r+0x1c8>
 80086ae:	6962      	ldr	r2, [r4, #20]
 80086b0:	9b05      	ldr	r3, [sp, #20]
 80086b2:	4694      	mov	ip, r2
 80086b4:	4463      	add	r3, ip
 80086b6:	6163      	str	r3, [r4, #20]
 80086b8:	782b      	ldrb	r3, [r5, #0]
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d100      	bne.n	80086c0 <_svfiprintf_r+0x7c>
 80086be:	e0a5      	b.n	800880c <_svfiprintf_r+0x1c8>
 80086c0:	2201      	movs	r2, #1
 80086c2:	2300      	movs	r3, #0
 80086c4:	4252      	negs	r2, r2
 80086c6:	6062      	str	r2, [r4, #4]
 80086c8:	a904      	add	r1, sp, #16
 80086ca:	3254      	adds	r2, #84	; 0x54
 80086cc:	1852      	adds	r2, r2, r1
 80086ce:	1c6e      	adds	r6, r5, #1
 80086d0:	6023      	str	r3, [r4, #0]
 80086d2:	60e3      	str	r3, [r4, #12]
 80086d4:	60a3      	str	r3, [r4, #8]
 80086d6:	7013      	strb	r3, [r2, #0]
 80086d8:	65a3      	str	r3, [r4, #88]	; 0x58
 80086da:	2205      	movs	r2, #5
 80086dc:	7831      	ldrb	r1, [r6, #0]
 80086de:	4854      	ldr	r0, [pc, #336]	; (8008830 <_svfiprintf_r+0x1ec>)
 80086e0:	f7ff fa98 	bl	8007c14 <memchr>
 80086e4:	1c75      	adds	r5, r6, #1
 80086e6:	2800      	cmp	r0, #0
 80086e8:	d11f      	bne.n	800872a <_svfiprintf_r+0xe6>
 80086ea:	6822      	ldr	r2, [r4, #0]
 80086ec:	06d3      	lsls	r3, r2, #27
 80086ee:	d504      	bpl.n	80086fa <_svfiprintf_r+0xb6>
 80086f0:	2353      	movs	r3, #83	; 0x53
 80086f2:	a904      	add	r1, sp, #16
 80086f4:	185b      	adds	r3, r3, r1
 80086f6:	2120      	movs	r1, #32
 80086f8:	7019      	strb	r1, [r3, #0]
 80086fa:	0713      	lsls	r3, r2, #28
 80086fc:	d504      	bpl.n	8008708 <_svfiprintf_r+0xc4>
 80086fe:	2353      	movs	r3, #83	; 0x53
 8008700:	a904      	add	r1, sp, #16
 8008702:	185b      	adds	r3, r3, r1
 8008704:	212b      	movs	r1, #43	; 0x2b
 8008706:	7019      	strb	r1, [r3, #0]
 8008708:	7833      	ldrb	r3, [r6, #0]
 800870a:	2b2a      	cmp	r3, #42	; 0x2a
 800870c:	d016      	beq.n	800873c <_svfiprintf_r+0xf8>
 800870e:	0035      	movs	r5, r6
 8008710:	2100      	movs	r1, #0
 8008712:	200a      	movs	r0, #10
 8008714:	68e3      	ldr	r3, [r4, #12]
 8008716:	782a      	ldrb	r2, [r5, #0]
 8008718:	1c6e      	adds	r6, r5, #1
 800871a:	3a30      	subs	r2, #48	; 0x30
 800871c:	2a09      	cmp	r2, #9
 800871e:	d94e      	bls.n	80087be <_svfiprintf_r+0x17a>
 8008720:	2900      	cmp	r1, #0
 8008722:	d111      	bne.n	8008748 <_svfiprintf_r+0x104>
 8008724:	e017      	b.n	8008756 <_svfiprintf_r+0x112>
 8008726:	3501      	adds	r5, #1
 8008728:	e7b0      	b.n	800868c <_svfiprintf_r+0x48>
 800872a:	4b41      	ldr	r3, [pc, #260]	; (8008830 <_svfiprintf_r+0x1ec>)
 800872c:	6822      	ldr	r2, [r4, #0]
 800872e:	1ac0      	subs	r0, r0, r3
 8008730:	2301      	movs	r3, #1
 8008732:	4083      	lsls	r3, r0
 8008734:	4313      	orrs	r3, r2
 8008736:	002e      	movs	r6, r5
 8008738:	6023      	str	r3, [r4, #0]
 800873a:	e7ce      	b.n	80086da <_svfiprintf_r+0x96>
 800873c:	9b07      	ldr	r3, [sp, #28]
 800873e:	1d19      	adds	r1, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	9107      	str	r1, [sp, #28]
 8008744:	2b00      	cmp	r3, #0
 8008746:	db01      	blt.n	800874c <_svfiprintf_r+0x108>
 8008748:	930b      	str	r3, [sp, #44]	; 0x2c
 800874a:	e004      	b.n	8008756 <_svfiprintf_r+0x112>
 800874c:	425b      	negs	r3, r3
 800874e:	60e3      	str	r3, [r4, #12]
 8008750:	2302      	movs	r3, #2
 8008752:	4313      	orrs	r3, r2
 8008754:	6023      	str	r3, [r4, #0]
 8008756:	782b      	ldrb	r3, [r5, #0]
 8008758:	2b2e      	cmp	r3, #46	; 0x2e
 800875a:	d10a      	bne.n	8008772 <_svfiprintf_r+0x12e>
 800875c:	786b      	ldrb	r3, [r5, #1]
 800875e:	2b2a      	cmp	r3, #42	; 0x2a
 8008760:	d135      	bne.n	80087ce <_svfiprintf_r+0x18a>
 8008762:	9b07      	ldr	r3, [sp, #28]
 8008764:	3502      	adds	r5, #2
 8008766:	1d1a      	adds	r2, r3, #4
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	9207      	str	r2, [sp, #28]
 800876c:	2b00      	cmp	r3, #0
 800876e:	db2b      	blt.n	80087c8 <_svfiprintf_r+0x184>
 8008770:	9309      	str	r3, [sp, #36]	; 0x24
 8008772:	4e30      	ldr	r6, [pc, #192]	; (8008834 <_svfiprintf_r+0x1f0>)
 8008774:	2203      	movs	r2, #3
 8008776:	0030      	movs	r0, r6
 8008778:	7829      	ldrb	r1, [r5, #0]
 800877a:	f7ff fa4b 	bl	8007c14 <memchr>
 800877e:	2800      	cmp	r0, #0
 8008780:	d006      	beq.n	8008790 <_svfiprintf_r+0x14c>
 8008782:	2340      	movs	r3, #64	; 0x40
 8008784:	1b80      	subs	r0, r0, r6
 8008786:	4083      	lsls	r3, r0
 8008788:	6822      	ldr	r2, [r4, #0]
 800878a:	3501      	adds	r5, #1
 800878c:	4313      	orrs	r3, r2
 800878e:	6023      	str	r3, [r4, #0]
 8008790:	7829      	ldrb	r1, [r5, #0]
 8008792:	2206      	movs	r2, #6
 8008794:	4828      	ldr	r0, [pc, #160]	; (8008838 <_svfiprintf_r+0x1f4>)
 8008796:	1c6e      	adds	r6, r5, #1
 8008798:	7621      	strb	r1, [r4, #24]
 800879a:	f7ff fa3b 	bl	8007c14 <memchr>
 800879e:	2800      	cmp	r0, #0
 80087a0:	d03c      	beq.n	800881c <_svfiprintf_r+0x1d8>
 80087a2:	4b26      	ldr	r3, [pc, #152]	; (800883c <_svfiprintf_r+0x1f8>)
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d125      	bne.n	80087f4 <_svfiprintf_r+0x1b0>
 80087a8:	2207      	movs	r2, #7
 80087aa:	9b07      	ldr	r3, [sp, #28]
 80087ac:	3307      	adds	r3, #7
 80087ae:	4393      	bics	r3, r2
 80087b0:	3308      	adds	r3, #8
 80087b2:	9307      	str	r3, [sp, #28]
 80087b4:	6963      	ldr	r3, [r4, #20]
 80087b6:	9a04      	ldr	r2, [sp, #16]
 80087b8:	189b      	adds	r3, r3, r2
 80087ba:	6163      	str	r3, [r4, #20]
 80087bc:	e765      	b.n	800868a <_svfiprintf_r+0x46>
 80087be:	4343      	muls	r3, r0
 80087c0:	0035      	movs	r5, r6
 80087c2:	2101      	movs	r1, #1
 80087c4:	189b      	adds	r3, r3, r2
 80087c6:	e7a6      	b.n	8008716 <_svfiprintf_r+0xd2>
 80087c8:	2301      	movs	r3, #1
 80087ca:	425b      	negs	r3, r3
 80087cc:	e7d0      	b.n	8008770 <_svfiprintf_r+0x12c>
 80087ce:	2300      	movs	r3, #0
 80087d0:	200a      	movs	r0, #10
 80087d2:	001a      	movs	r2, r3
 80087d4:	3501      	adds	r5, #1
 80087d6:	6063      	str	r3, [r4, #4]
 80087d8:	7829      	ldrb	r1, [r5, #0]
 80087da:	1c6e      	adds	r6, r5, #1
 80087dc:	3930      	subs	r1, #48	; 0x30
 80087de:	2909      	cmp	r1, #9
 80087e0:	d903      	bls.n	80087ea <_svfiprintf_r+0x1a6>
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	d0c5      	beq.n	8008772 <_svfiprintf_r+0x12e>
 80087e6:	9209      	str	r2, [sp, #36]	; 0x24
 80087e8:	e7c3      	b.n	8008772 <_svfiprintf_r+0x12e>
 80087ea:	4342      	muls	r2, r0
 80087ec:	0035      	movs	r5, r6
 80087ee:	2301      	movs	r3, #1
 80087f0:	1852      	adds	r2, r2, r1
 80087f2:	e7f1      	b.n	80087d8 <_svfiprintf_r+0x194>
 80087f4:	ab07      	add	r3, sp, #28
 80087f6:	9300      	str	r3, [sp, #0]
 80087f8:	003a      	movs	r2, r7
 80087fa:	0021      	movs	r1, r4
 80087fc:	4b10      	ldr	r3, [pc, #64]	; (8008840 <_svfiprintf_r+0x1fc>)
 80087fe:	9803      	ldr	r0, [sp, #12]
 8008800:	f7fd ff5c 	bl	80066bc <_printf_float>
 8008804:	9004      	str	r0, [sp, #16]
 8008806:	9b04      	ldr	r3, [sp, #16]
 8008808:	3301      	adds	r3, #1
 800880a:	d1d3      	bne.n	80087b4 <_svfiprintf_r+0x170>
 800880c:	89bb      	ldrh	r3, [r7, #12]
 800880e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008810:	065b      	lsls	r3, r3, #25
 8008812:	d400      	bmi.n	8008816 <_svfiprintf_r+0x1d2>
 8008814:	e72d      	b.n	8008672 <_svfiprintf_r+0x2e>
 8008816:	2001      	movs	r0, #1
 8008818:	4240      	negs	r0, r0
 800881a:	e72a      	b.n	8008672 <_svfiprintf_r+0x2e>
 800881c:	ab07      	add	r3, sp, #28
 800881e:	9300      	str	r3, [sp, #0]
 8008820:	003a      	movs	r2, r7
 8008822:	0021      	movs	r1, r4
 8008824:	4b06      	ldr	r3, [pc, #24]	; (8008840 <_svfiprintf_r+0x1fc>)
 8008826:	9803      	ldr	r0, [sp, #12]
 8008828:	f7fe f9fa 	bl	8006c20 <_printf_i>
 800882c:	e7ea      	b.n	8008804 <_svfiprintf_r+0x1c0>
 800882e:	46c0      	nop			; (mov r8, r8)
 8008830:	08009c8c 	.word	0x08009c8c
 8008834:	08009c92 	.word	0x08009c92
 8008838:	08009c96 	.word	0x08009c96
 800883c:	080066bd 	.word	0x080066bd
 8008840:	08008581 	.word	0x08008581

08008844 <_sbrk_r>:
 8008844:	2300      	movs	r3, #0
 8008846:	b570      	push	{r4, r5, r6, lr}
 8008848:	4d06      	ldr	r5, [pc, #24]	; (8008864 <_sbrk_r+0x20>)
 800884a:	0004      	movs	r4, r0
 800884c:	0008      	movs	r0, r1
 800884e:	602b      	str	r3, [r5, #0]
 8008850:	f7fb fbb2 	bl	8003fb8 <_sbrk>
 8008854:	1c43      	adds	r3, r0, #1
 8008856:	d103      	bne.n	8008860 <_sbrk_r+0x1c>
 8008858:	682b      	ldr	r3, [r5, #0]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d000      	beq.n	8008860 <_sbrk_r+0x1c>
 800885e:	6023      	str	r3, [r4, #0]
 8008860:	bd70      	pop	{r4, r5, r6, pc}
 8008862:	46c0      	nop			; (mov r8, r8)
 8008864:	200014d0 	.word	0x200014d0

08008868 <__assert_func>:
 8008868:	b530      	push	{r4, r5, lr}
 800886a:	0014      	movs	r4, r2
 800886c:	001a      	movs	r2, r3
 800886e:	4b09      	ldr	r3, [pc, #36]	; (8008894 <__assert_func+0x2c>)
 8008870:	0005      	movs	r5, r0
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	b085      	sub	sp, #20
 8008876:	68d8      	ldr	r0, [r3, #12]
 8008878:	4b07      	ldr	r3, [pc, #28]	; (8008898 <__assert_func+0x30>)
 800887a:	2c00      	cmp	r4, #0
 800887c:	d101      	bne.n	8008882 <__assert_func+0x1a>
 800887e:	4b07      	ldr	r3, [pc, #28]	; (800889c <__assert_func+0x34>)
 8008880:	001c      	movs	r4, r3
 8008882:	9301      	str	r3, [sp, #4]
 8008884:	9100      	str	r1, [sp, #0]
 8008886:	002b      	movs	r3, r5
 8008888:	4905      	ldr	r1, [pc, #20]	; (80088a0 <__assert_func+0x38>)
 800888a:	9402      	str	r4, [sp, #8]
 800888c:	f000 f80a 	bl	80088a4 <fiprintf>
 8008890:	f000 faba 	bl	8008e08 <abort>
 8008894:	20000018 	.word	0x20000018
 8008898:	08009c9d 	.word	0x08009c9d
 800889c:	08009cd8 	.word	0x08009cd8
 80088a0:	08009caa 	.word	0x08009caa

080088a4 <fiprintf>:
 80088a4:	b40e      	push	{r1, r2, r3}
 80088a6:	b503      	push	{r0, r1, lr}
 80088a8:	0001      	movs	r1, r0
 80088aa:	ab03      	add	r3, sp, #12
 80088ac:	4804      	ldr	r0, [pc, #16]	; (80088c0 <fiprintf+0x1c>)
 80088ae:	cb04      	ldmia	r3!, {r2}
 80088b0:	6800      	ldr	r0, [r0, #0]
 80088b2:	9301      	str	r3, [sp, #4]
 80088b4:	f000 f892 	bl	80089dc <_vfiprintf_r>
 80088b8:	b002      	add	sp, #8
 80088ba:	bc08      	pop	{r3}
 80088bc:	b003      	add	sp, #12
 80088be:	4718      	bx	r3
 80088c0:	20000018 	.word	0x20000018

080088c4 <__ascii_mbtowc>:
 80088c4:	b082      	sub	sp, #8
 80088c6:	2900      	cmp	r1, #0
 80088c8:	d100      	bne.n	80088cc <__ascii_mbtowc+0x8>
 80088ca:	a901      	add	r1, sp, #4
 80088cc:	1e10      	subs	r0, r2, #0
 80088ce:	d006      	beq.n	80088de <__ascii_mbtowc+0x1a>
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d006      	beq.n	80088e2 <__ascii_mbtowc+0x1e>
 80088d4:	7813      	ldrb	r3, [r2, #0]
 80088d6:	600b      	str	r3, [r1, #0]
 80088d8:	7810      	ldrb	r0, [r2, #0]
 80088da:	1e43      	subs	r3, r0, #1
 80088dc:	4198      	sbcs	r0, r3
 80088de:	b002      	add	sp, #8
 80088e0:	4770      	bx	lr
 80088e2:	2002      	movs	r0, #2
 80088e4:	4240      	negs	r0, r0
 80088e6:	e7fa      	b.n	80088de <__ascii_mbtowc+0x1a>

080088e8 <memmove>:
 80088e8:	b510      	push	{r4, lr}
 80088ea:	4288      	cmp	r0, r1
 80088ec:	d902      	bls.n	80088f4 <memmove+0xc>
 80088ee:	188b      	adds	r3, r1, r2
 80088f0:	4298      	cmp	r0, r3
 80088f2:	d303      	bcc.n	80088fc <memmove+0x14>
 80088f4:	2300      	movs	r3, #0
 80088f6:	e007      	b.n	8008908 <memmove+0x20>
 80088f8:	5c8b      	ldrb	r3, [r1, r2]
 80088fa:	5483      	strb	r3, [r0, r2]
 80088fc:	3a01      	subs	r2, #1
 80088fe:	d2fb      	bcs.n	80088f8 <memmove+0x10>
 8008900:	bd10      	pop	{r4, pc}
 8008902:	5ccc      	ldrb	r4, [r1, r3]
 8008904:	54c4      	strb	r4, [r0, r3]
 8008906:	3301      	adds	r3, #1
 8008908:	429a      	cmp	r2, r3
 800890a:	d1fa      	bne.n	8008902 <memmove+0x1a>
 800890c:	e7f8      	b.n	8008900 <memmove+0x18>
	...

08008910 <__malloc_lock>:
 8008910:	b510      	push	{r4, lr}
 8008912:	4802      	ldr	r0, [pc, #8]	; (800891c <__malloc_lock+0xc>)
 8008914:	f000 fc4f 	bl	80091b6 <__retarget_lock_acquire_recursive>
 8008918:	bd10      	pop	{r4, pc}
 800891a:	46c0      	nop			; (mov r8, r8)
 800891c:	200014d4 	.word	0x200014d4

08008920 <__malloc_unlock>:
 8008920:	b510      	push	{r4, lr}
 8008922:	4802      	ldr	r0, [pc, #8]	; (800892c <__malloc_unlock+0xc>)
 8008924:	f000 fc48 	bl	80091b8 <__retarget_lock_release_recursive>
 8008928:	bd10      	pop	{r4, pc}
 800892a:	46c0      	nop			; (mov r8, r8)
 800892c:	200014d4 	.word	0x200014d4

08008930 <_realloc_r>:
 8008930:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008932:	0007      	movs	r7, r0
 8008934:	000e      	movs	r6, r1
 8008936:	0014      	movs	r4, r2
 8008938:	2900      	cmp	r1, #0
 800893a:	d105      	bne.n	8008948 <_realloc_r+0x18>
 800893c:	0011      	movs	r1, r2
 800893e:	f7ff fda9 	bl	8008494 <_malloc_r>
 8008942:	0005      	movs	r5, r0
 8008944:	0028      	movs	r0, r5
 8008946:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008948:	2a00      	cmp	r2, #0
 800894a:	d103      	bne.n	8008954 <_realloc_r+0x24>
 800894c:	f7ff fd36 	bl	80083bc <_free_r>
 8008950:	0025      	movs	r5, r4
 8008952:	e7f7      	b.n	8008944 <_realloc_r+0x14>
 8008954:	f000 fc9e 	bl	8009294 <_malloc_usable_size_r>
 8008958:	9001      	str	r0, [sp, #4]
 800895a:	4284      	cmp	r4, r0
 800895c:	d803      	bhi.n	8008966 <_realloc_r+0x36>
 800895e:	0035      	movs	r5, r6
 8008960:	0843      	lsrs	r3, r0, #1
 8008962:	42a3      	cmp	r3, r4
 8008964:	d3ee      	bcc.n	8008944 <_realloc_r+0x14>
 8008966:	0021      	movs	r1, r4
 8008968:	0038      	movs	r0, r7
 800896a:	f7ff fd93 	bl	8008494 <_malloc_r>
 800896e:	1e05      	subs	r5, r0, #0
 8008970:	d0e8      	beq.n	8008944 <_realloc_r+0x14>
 8008972:	9b01      	ldr	r3, [sp, #4]
 8008974:	0022      	movs	r2, r4
 8008976:	429c      	cmp	r4, r3
 8008978:	d900      	bls.n	800897c <_realloc_r+0x4c>
 800897a:	001a      	movs	r2, r3
 800897c:	0031      	movs	r1, r6
 800897e:	0028      	movs	r0, r5
 8008980:	f7fd fde0 	bl	8006544 <memcpy>
 8008984:	0031      	movs	r1, r6
 8008986:	0038      	movs	r0, r7
 8008988:	f7ff fd18 	bl	80083bc <_free_r>
 800898c:	e7da      	b.n	8008944 <_realloc_r+0x14>

0800898e <__sfputc_r>:
 800898e:	6893      	ldr	r3, [r2, #8]
 8008990:	b510      	push	{r4, lr}
 8008992:	3b01      	subs	r3, #1
 8008994:	6093      	str	r3, [r2, #8]
 8008996:	2b00      	cmp	r3, #0
 8008998:	da04      	bge.n	80089a4 <__sfputc_r+0x16>
 800899a:	6994      	ldr	r4, [r2, #24]
 800899c:	42a3      	cmp	r3, r4
 800899e:	db07      	blt.n	80089b0 <__sfputc_r+0x22>
 80089a0:	290a      	cmp	r1, #10
 80089a2:	d005      	beq.n	80089b0 <__sfputc_r+0x22>
 80089a4:	6813      	ldr	r3, [r2, #0]
 80089a6:	1c58      	adds	r0, r3, #1
 80089a8:	6010      	str	r0, [r2, #0]
 80089aa:	7019      	strb	r1, [r3, #0]
 80089ac:	0008      	movs	r0, r1
 80089ae:	bd10      	pop	{r4, pc}
 80089b0:	f000 f94e 	bl	8008c50 <__swbuf_r>
 80089b4:	0001      	movs	r1, r0
 80089b6:	e7f9      	b.n	80089ac <__sfputc_r+0x1e>

080089b8 <__sfputs_r>:
 80089b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089ba:	0006      	movs	r6, r0
 80089bc:	000f      	movs	r7, r1
 80089be:	0014      	movs	r4, r2
 80089c0:	18d5      	adds	r5, r2, r3
 80089c2:	42ac      	cmp	r4, r5
 80089c4:	d101      	bne.n	80089ca <__sfputs_r+0x12>
 80089c6:	2000      	movs	r0, #0
 80089c8:	e007      	b.n	80089da <__sfputs_r+0x22>
 80089ca:	7821      	ldrb	r1, [r4, #0]
 80089cc:	003a      	movs	r2, r7
 80089ce:	0030      	movs	r0, r6
 80089d0:	f7ff ffdd 	bl	800898e <__sfputc_r>
 80089d4:	3401      	adds	r4, #1
 80089d6:	1c43      	adds	r3, r0, #1
 80089d8:	d1f3      	bne.n	80089c2 <__sfputs_r+0xa>
 80089da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080089dc <_vfiprintf_r>:
 80089dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80089de:	b0a1      	sub	sp, #132	; 0x84
 80089e0:	0006      	movs	r6, r0
 80089e2:	000c      	movs	r4, r1
 80089e4:	001f      	movs	r7, r3
 80089e6:	9203      	str	r2, [sp, #12]
 80089e8:	2800      	cmp	r0, #0
 80089ea:	d004      	beq.n	80089f6 <_vfiprintf_r+0x1a>
 80089ec:	6983      	ldr	r3, [r0, #24]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <_vfiprintf_r+0x1a>
 80089f2:	f000 fb3f 	bl	8009074 <__sinit>
 80089f6:	4b8e      	ldr	r3, [pc, #568]	; (8008c30 <_vfiprintf_r+0x254>)
 80089f8:	429c      	cmp	r4, r3
 80089fa:	d11c      	bne.n	8008a36 <_vfiprintf_r+0x5a>
 80089fc:	6874      	ldr	r4, [r6, #4]
 80089fe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a00:	07db      	lsls	r3, r3, #31
 8008a02:	d405      	bmi.n	8008a10 <_vfiprintf_r+0x34>
 8008a04:	89a3      	ldrh	r3, [r4, #12]
 8008a06:	059b      	lsls	r3, r3, #22
 8008a08:	d402      	bmi.n	8008a10 <_vfiprintf_r+0x34>
 8008a0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a0c:	f000 fbd3 	bl	80091b6 <__retarget_lock_acquire_recursive>
 8008a10:	89a3      	ldrh	r3, [r4, #12]
 8008a12:	071b      	lsls	r3, r3, #28
 8008a14:	d502      	bpl.n	8008a1c <_vfiprintf_r+0x40>
 8008a16:	6923      	ldr	r3, [r4, #16]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	d11d      	bne.n	8008a58 <_vfiprintf_r+0x7c>
 8008a1c:	0021      	movs	r1, r4
 8008a1e:	0030      	movs	r0, r6
 8008a20:	f000 f97a 	bl	8008d18 <__swsetup_r>
 8008a24:	2800      	cmp	r0, #0
 8008a26:	d017      	beq.n	8008a58 <_vfiprintf_r+0x7c>
 8008a28:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a2a:	07db      	lsls	r3, r3, #31
 8008a2c:	d50d      	bpl.n	8008a4a <_vfiprintf_r+0x6e>
 8008a2e:	2001      	movs	r0, #1
 8008a30:	4240      	negs	r0, r0
 8008a32:	b021      	add	sp, #132	; 0x84
 8008a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008a36:	4b7f      	ldr	r3, [pc, #508]	; (8008c34 <_vfiprintf_r+0x258>)
 8008a38:	429c      	cmp	r4, r3
 8008a3a:	d101      	bne.n	8008a40 <_vfiprintf_r+0x64>
 8008a3c:	68b4      	ldr	r4, [r6, #8]
 8008a3e:	e7de      	b.n	80089fe <_vfiprintf_r+0x22>
 8008a40:	4b7d      	ldr	r3, [pc, #500]	; (8008c38 <_vfiprintf_r+0x25c>)
 8008a42:	429c      	cmp	r4, r3
 8008a44:	d1db      	bne.n	80089fe <_vfiprintf_r+0x22>
 8008a46:	68f4      	ldr	r4, [r6, #12]
 8008a48:	e7d9      	b.n	80089fe <_vfiprintf_r+0x22>
 8008a4a:	89a3      	ldrh	r3, [r4, #12]
 8008a4c:	059b      	lsls	r3, r3, #22
 8008a4e:	d4ee      	bmi.n	8008a2e <_vfiprintf_r+0x52>
 8008a50:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a52:	f000 fbb1 	bl	80091b8 <__retarget_lock_release_recursive>
 8008a56:	e7ea      	b.n	8008a2e <_vfiprintf_r+0x52>
 8008a58:	2300      	movs	r3, #0
 8008a5a:	ad08      	add	r5, sp, #32
 8008a5c:	616b      	str	r3, [r5, #20]
 8008a5e:	3320      	adds	r3, #32
 8008a60:	766b      	strb	r3, [r5, #25]
 8008a62:	3310      	adds	r3, #16
 8008a64:	76ab      	strb	r3, [r5, #26]
 8008a66:	9707      	str	r7, [sp, #28]
 8008a68:	9f03      	ldr	r7, [sp, #12]
 8008a6a:	783b      	ldrb	r3, [r7, #0]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d001      	beq.n	8008a74 <_vfiprintf_r+0x98>
 8008a70:	2b25      	cmp	r3, #37	; 0x25
 8008a72:	d14e      	bne.n	8008b12 <_vfiprintf_r+0x136>
 8008a74:	9b03      	ldr	r3, [sp, #12]
 8008a76:	1afb      	subs	r3, r7, r3
 8008a78:	9305      	str	r3, [sp, #20]
 8008a7a:	9b03      	ldr	r3, [sp, #12]
 8008a7c:	429f      	cmp	r7, r3
 8008a7e:	d00d      	beq.n	8008a9c <_vfiprintf_r+0xc0>
 8008a80:	9b05      	ldr	r3, [sp, #20]
 8008a82:	0021      	movs	r1, r4
 8008a84:	0030      	movs	r0, r6
 8008a86:	9a03      	ldr	r2, [sp, #12]
 8008a88:	f7ff ff96 	bl	80089b8 <__sfputs_r>
 8008a8c:	1c43      	adds	r3, r0, #1
 8008a8e:	d100      	bne.n	8008a92 <_vfiprintf_r+0xb6>
 8008a90:	e0b5      	b.n	8008bfe <_vfiprintf_r+0x222>
 8008a92:	696a      	ldr	r2, [r5, #20]
 8008a94:	9b05      	ldr	r3, [sp, #20]
 8008a96:	4694      	mov	ip, r2
 8008a98:	4463      	add	r3, ip
 8008a9a:	616b      	str	r3, [r5, #20]
 8008a9c:	783b      	ldrb	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d100      	bne.n	8008aa4 <_vfiprintf_r+0xc8>
 8008aa2:	e0ac      	b.n	8008bfe <_vfiprintf_r+0x222>
 8008aa4:	2201      	movs	r2, #1
 8008aa6:	1c7b      	adds	r3, r7, #1
 8008aa8:	9303      	str	r3, [sp, #12]
 8008aaa:	2300      	movs	r3, #0
 8008aac:	4252      	negs	r2, r2
 8008aae:	606a      	str	r2, [r5, #4]
 8008ab0:	a904      	add	r1, sp, #16
 8008ab2:	3254      	adds	r2, #84	; 0x54
 8008ab4:	1852      	adds	r2, r2, r1
 8008ab6:	602b      	str	r3, [r5, #0]
 8008ab8:	60eb      	str	r3, [r5, #12]
 8008aba:	60ab      	str	r3, [r5, #8]
 8008abc:	7013      	strb	r3, [r2, #0]
 8008abe:	65ab      	str	r3, [r5, #88]	; 0x58
 8008ac0:	9b03      	ldr	r3, [sp, #12]
 8008ac2:	2205      	movs	r2, #5
 8008ac4:	7819      	ldrb	r1, [r3, #0]
 8008ac6:	485d      	ldr	r0, [pc, #372]	; (8008c3c <_vfiprintf_r+0x260>)
 8008ac8:	f7ff f8a4 	bl	8007c14 <memchr>
 8008acc:	9b03      	ldr	r3, [sp, #12]
 8008ace:	1c5f      	adds	r7, r3, #1
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d120      	bne.n	8008b16 <_vfiprintf_r+0x13a>
 8008ad4:	682a      	ldr	r2, [r5, #0]
 8008ad6:	06d3      	lsls	r3, r2, #27
 8008ad8:	d504      	bpl.n	8008ae4 <_vfiprintf_r+0x108>
 8008ada:	2353      	movs	r3, #83	; 0x53
 8008adc:	a904      	add	r1, sp, #16
 8008ade:	185b      	adds	r3, r3, r1
 8008ae0:	2120      	movs	r1, #32
 8008ae2:	7019      	strb	r1, [r3, #0]
 8008ae4:	0713      	lsls	r3, r2, #28
 8008ae6:	d504      	bpl.n	8008af2 <_vfiprintf_r+0x116>
 8008ae8:	2353      	movs	r3, #83	; 0x53
 8008aea:	a904      	add	r1, sp, #16
 8008aec:	185b      	adds	r3, r3, r1
 8008aee:	212b      	movs	r1, #43	; 0x2b
 8008af0:	7019      	strb	r1, [r3, #0]
 8008af2:	9b03      	ldr	r3, [sp, #12]
 8008af4:	781b      	ldrb	r3, [r3, #0]
 8008af6:	2b2a      	cmp	r3, #42	; 0x2a
 8008af8:	d016      	beq.n	8008b28 <_vfiprintf_r+0x14c>
 8008afa:	2100      	movs	r1, #0
 8008afc:	68eb      	ldr	r3, [r5, #12]
 8008afe:	9f03      	ldr	r7, [sp, #12]
 8008b00:	783a      	ldrb	r2, [r7, #0]
 8008b02:	1c78      	adds	r0, r7, #1
 8008b04:	3a30      	subs	r2, #48	; 0x30
 8008b06:	4684      	mov	ip, r0
 8008b08:	2a09      	cmp	r2, #9
 8008b0a:	d94f      	bls.n	8008bac <_vfiprintf_r+0x1d0>
 8008b0c:	2900      	cmp	r1, #0
 8008b0e:	d111      	bne.n	8008b34 <_vfiprintf_r+0x158>
 8008b10:	e017      	b.n	8008b42 <_vfiprintf_r+0x166>
 8008b12:	3701      	adds	r7, #1
 8008b14:	e7a9      	b.n	8008a6a <_vfiprintf_r+0x8e>
 8008b16:	4b49      	ldr	r3, [pc, #292]	; (8008c3c <_vfiprintf_r+0x260>)
 8008b18:	682a      	ldr	r2, [r5, #0]
 8008b1a:	1ac0      	subs	r0, r0, r3
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	4083      	lsls	r3, r0
 8008b20:	4313      	orrs	r3, r2
 8008b22:	602b      	str	r3, [r5, #0]
 8008b24:	9703      	str	r7, [sp, #12]
 8008b26:	e7cb      	b.n	8008ac0 <_vfiprintf_r+0xe4>
 8008b28:	9b07      	ldr	r3, [sp, #28]
 8008b2a:	1d19      	adds	r1, r3, #4
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	9107      	str	r1, [sp, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	db01      	blt.n	8008b38 <_vfiprintf_r+0x15c>
 8008b34:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b36:	e004      	b.n	8008b42 <_vfiprintf_r+0x166>
 8008b38:	425b      	negs	r3, r3
 8008b3a:	60eb      	str	r3, [r5, #12]
 8008b3c:	2302      	movs	r3, #2
 8008b3e:	4313      	orrs	r3, r2
 8008b40:	602b      	str	r3, [r5, #0]
 8008b42:	783b      	ldrb	r3, [r7, #0]
 8008b44:	2b2e      	cmp	r3, #46	; 0x2e
 8008b46:	d10a      	bne.n	8008b5e <_vfiprintf_r+0x182>
 8008b48:	787b      	ldrb	r3, [r7, #1]
 8008b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8008b4c:	d137      	bne.n	8008bbe <_vfiprintf_r+0x1e2>
 8008b4e:	9b07      	ldr	r3, [sp, #28]
 8008b50:	3702      	adds	r7, #2
 8008b52:	1d1a      	adds	r2, r3, #4
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	9207      	str	r2, [sp, #28]
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	db2d      	blt.n	8008bb8 <_vfiprintf_r+0x1dc>
 8008b5c:	9309      	str	r3, [sp, #36]	; 0x24
 8008b5e:	2203      	movs	r2, #3
 8008b60:	7839      	ldrb	r1, [r7, #0]
 8008b62:	4837      	ldr	r0, [pc, #220]	; (8008c40 <_vfiprintf_r+0x264>)
 8008b64:	f7ff f856 	bl	8007c14 <memchr>
 8008b68:	2800      	cmp	r0, #0
 8008b6a:	d007      	beq.n	8008b7c <_vfiprintf_r+0x1a0>
 8008b6c:	4b34      	ldr	r3, [pc, #208]	; (8008c40 <_vfiprintf_r+0x264>)
 8008b6e:	682a      	ldr	r2, [r5, #0]
 8008b70:	1ac0      	subs	r0, r0, r3
 8008b72:	2340      	movs	r3, #64	; 0x40
 8008b74:	4083      	lsls	r3, r0
 8008b76:	4313      	orrs	r3, r2
 8008b78:	3701      	adds	r7, #1
 8008b7a:	602b      	str	r3, [r5, #0]
 8008b7c:	7839      	ldrb	r1, [r7, #0]
 8008b7e:	1c7b      	adds	r3, r7, #1
 8008b80:	2206      	movs	r2, #6
 8008b82:	4830      	ldr	r0, [pc, #192]	; (8008c44 <_vfiprintf_r+0x268>)
 8008b84:	9303      	str	r3, [sp, #12]
 8008b86:	7629      	strb	r1, [r5, #24]
 8008b88:	f7ff f844 	bl	8007c14 <memchr>
 8008b8c:	2800      	cmp	r0, #0
 8008b8e:	d045      	beq.n	8008c1c <_vfiprintf_r+0x240>
 8008b90:	4b2d      	ldr	r3, [pc, #180]	; (8008c48 <_vfiprintf_r+0x26c>)
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d127      	bne.n	8008be6 <_vfiprintf_r+0x20a>
 8008b96:	2207      	movs	r2, #7
 8008b98:	9b07      	ldr	r3, [sp, #28]
 8008b9a:	3307      	adds	r3, #7
 8008b9c:	4393      	bics	r3, r2
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	9307      	str	r3, [sp, #28]
 8008ba2:	696b      	ldr	r3, [r5, #20]
 8008ba4:	9a04      	ldr	r2, [sp, #16]
 8008ba6:	189b      	adds	r3, r3, r2
 8008ba8:	616b      	str	r3, [r5, #20]
 8008baa:	e75d      	b.n	8008a68 <_vfiprintf_r+0x8c>
 8008bac:	210a      	movs	r1, #10
 8008bae:	434b      	muls	r3, r1
 8008bb0:	4667      	mov	r7, ip
 8008bb2:	189b      	adds	r3, r3, r2
 8008bb4:	3909      	subs	r1, #9
 8008bb6:	e7a3      	b.n	8008b00 <_vfiprintf_r+0x124>
 8008bb8:	2301      	movs	r3, #1
 8008bba:	425b      	negs	r3, r3
 8008bbc:	e7ce      	b.n	8008b5c <_vfiprintf_r+0x180>
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	001a      	movs	r2, r3
 8008bc2:	3701      	adds	r7, #1
 8008bc4:	606b      	str	r3, [r5, #4]
 8008bc6:	7839      	ldrb	r1, [r7, #0]
 8008bc8:	1c78      	adds	r0, r7, #1
 8008bca:	3930      	subs	r1, #48	; 0x30
 8008bcc:	4684      	mov	ip, r0
 8008bce:	2909      	cmp	r1, #9
 8008bd0:	d903      	bls.n	8008bda <_vfiprintf_r+0x1fe>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d0c3      	beq.n	8008b5e <_vfiprintf_r+0x182>
 8008bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8008bd8:	e7c1      	b.n	8008b5e <_vfiprintf_r+0x182>
 8008bda:	230a      	movs	r3, #10
 8008bdc:	435a      	muls	r2, r3
 8008bde:	4667      	mov	r7, ip
 8008be0:	1852      	adds	r2, r2, r1
 8008be2:	3b09      	subs	r3, #9
 8008be4:	e7ef      	b.n	8008bc6 <_vfiprintf_r+0x1ea>
 8008be6:	ab07      	add	r3, sp, #28
 8008be8:	9300      	str	r3, [sp, #0]
 8008bea:	0022      	movs	r2, r4
 8008bec:	0029      	movs	r1, r5
 8008bee:	0030      	movs	r0, r6
 8008bf0:	4b16      	ldr	r3, [pc, #88]	; (8008c4c <_vfiprintf_r+0x270>)
 8008bf2:	f7fd fd63 	bl	80066bc <_printf_float>
 8008bf6:	9004      	str	r0, [sp, #16]
 8008bf8:	9b04      	ldr	r3, [sp, #16]
 8008bfa:	3301      	adds	r3, #1
 8008bfc:	d1d1      	bne.n	8008ba2 <_vfiprintf_r+0x1c6>
 8008bfe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c00:	07db      	lsls	r3, r3, #31
 8008c02:	d405      	bmi.n	8008c10 <_vfiprintf_r+0x234>
 8008c04:	89a3      	ldrh	r3, [r4, #12]
 8008c06:	059b      	lsls	r3, r3, #22
 8008c08:	d402      	bmi.n	8008c10 <_vfiprintf_r+0x234>
 8008c0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c0c:	f000 fad4 	bl	80091b8 <__retarget_lock_release_recursive>
 8008c10:	89a3      	ldrh	r3, [r4, #12]
 8008c12:	065b      	lsls	r3, r3, #25
 8008c14:	d500      	bpl.n	8008c18 <_vfiprintf_r+0x23c>
 8008c16:	e70a      	b.n	8008a2e <_vfiprintf_r+0x52>
 8008c18:	980d      	ldr	r0, [sp, #52]	; 0x34
 8008c1a:	e70a      	b.n	8008a32 <_vfiprintf_r+0x56>
 8008c1c:	ab07      	add	r3, sp, #28
 8008c1e:	9300      	str	r3, [sp, #0]
 8008c20:	0022      	movs	r2, r4
 8008c22:	0029      	movs	r1, r5
 8008c24:	0030      	movs	r0, r6
 8008c26:	4b09      	ldr	r3, [pc, #36]	; (8008c4c <_vfiprintf_r+0x270>)
 8008c28:	f7fd fffa 	bl	8006c20 <_printf_i>
 8008c2c:	e7e3      	b.n	8008bf6 <_vfiprintf_r+0x21a>
 8008c2e:	46c0      	nop			; (mov r8, r8)
 8008c30:	08009e04 	.word	0x08009e04
 8008c34:	08009e24 	.word	0x08009e24
 8008c38:	08009de4 	.word	0x08009de4
 8008c3c:	08009c8c 	.word	0x08009c8c
 8008c40:	08009c92 	.word	0x08009c92
 8008c44:	08009c96 	.word	0x08009c96
 8008c48:	080066bd 	.word	0x080066bd
 8008c4c:	080089b9 	.word	0x080089b9

08008c50 <__swbuf_r>:
 8008c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c52:	0005      	movs	r5, r0
 8008c54:	000e      	movs	r6, r1
 8008c56:	0014      	movs	r4, r2
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d004      	beq.n	8008c66 <__swbuf_r+0x16>
 8008c5c:	6983      	ldr	r3, [r0, #24]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d101      	bne.n	8008c66 <__swbuf_r+0x16>
 8008c62:	f000 fa07 	bl	8009074 <__sinit>
 8008c66:	4b22      	ldr	r3, [pc, #136]	; (8008cf0 <__swbuf_r+0xa0>)
 8008c68:	429c      	cmp	r4, r3
 8008c6a:	d12e      	bne.n	8008cca <__swbuf_r+0x7a>
 8008c6c:	686c      	ldr	r4, [r5, #4]
 8008c6e:	69a3      	ldr	r3, [r4, #24]
 8008c70:	60a3      	str	r3, [r4, #8]
 8008c72:	89a3      	ldrh	r3, [r4, #12]
 8008c74:	071b      	lsls	r3, r3, #28
 8008c76:	d532      	bpl.n	8008cde <__swbuf_r+0x8e>
 8008c78:	6923      	ldr	r3, [r4, #16]
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d02f      	beq.n	8008cde <__swbuf_r+0x8e>
 8008c7e:	6823      	ldr	r3, [r4, #0]
 8008c80:	6922      	ldr	r2, [r4, #16]
 8008c82:	b2f7      	uxtb	r7, r6
 8008c84:	1a98      	subs	r0, r3, r2
 8008c86:	6963      	ldr	r3, [r4, #20]
 8008c88:	b2f6      	uxtb	r6, r6
 8008c8a:	4283      	cmp	r3, r0
 8008c8c:	dc05      	bgt.n	8008c9a <__swbuf_r+0x4a>
 8008c8e:	0021      	movs	r1, r4
 8008c90:	0028      	movs	r0, r5
 8008c92:	f000 f94d 	bl	8008f30 <_fflush_r>
 8008c96:	2800      	cmp	r0, #0
 8008c98:	d127      	bne.n	8008cea <__swbuf_r+0x9a>
 8008c9a:	68a3      	ldr	r3, [r4, #8]
 8008c9c:	3001      	adds	r0, #1
 8008c9e:	3b01      	subs	r3, #1
 8008ca0:	60a3      	str	r3, [r4, #8]
 8008ca2:	6823      	ldr	r3, [r4, #0]
 8008ca4:	1c5a      	adds	r2, r3, #1
 8008ca6:	6022      	str	r2, [r4, #0]
 8008ca8:	701f      	strb	r7, [r3, #0]
 8008caa:	6963      	ldr	r3, [r4, #20]
 8008cac:	4283      	cmp	r3, r0
 8008cae:	d004      	beq.n	8008cba <__swbuf_r+0x6a>
 8008cb0:	89a3      	ldrh	r3, [r4, #12]
 8008cb2:	07db      	lsls	r3, r3, #31
 8008cb4:	d507      	bpl.n	8008cc6 <__swbuf_r+0x76>
 8008cb6:	2e0a      	cmp	r6, #10
 8008cb8:	d105      	bne.n	8008cc6 <__swbuf_r+0x76>
 8008cba:	0021      	movs	r1, r4
 8008cbc:	0028      	movs	r0, r5
 8008cbe:	f000 f937 	bl	8008f30 <_fflush_r>
 8008cc2:	2800      	cmp	r0, #0
 8008cc4:	d111      	bne.n	8008cea <__swbuf_r+0x9a>
 8008cc6:	0030      	movs	r0, r6
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cca:	4b0a      	ldr	r3, [pc, #40]	; (8008cf4 <__swbuf_r+0xa4>)
 8008ccc:	429c      	cmp	r4, r3
 8008cce:	d101      	bne.n	8008cd4 <__swbuf_r+0x84>
 8008cd0:	68ac      	ldr	r4, [r5, #8]
 8008cd2:	e7cc      	b.n	8008c6e <__swbuf_r+0x1e>
 8008cd4:	4b08      	ldr	r3, [pc, #32]	; (8008cf8 <__swbuf_r+0xa8>)
 8008cd6:	429c      	cmp	r4, r3
 8008cd8:	d1c9      	bne.n	8008c6e <__swbuf_r+0x1e>
 8008cda:	68ec      	ldr	r4, [r5, #12]
 8008cdc:	e7c7      	b.n	8008c6e <__swbuf_r+0x1e>
 8008cde:	0021      	movs	r1, r4
 8008ce0:	0028      	movs	r0, r5
 8008ce2:	f000 f819 	bl	8008d18 <__swsetup_r>
 8008ce6:	2800      	cmp	r0, #0
 8008ce8:	d0c9      	beq.n	8008c7e <__swbuf_r+0x2e>
 8008cea:	2601      	movs	r6, #1
 8008cec:	4276      	negs	r6, r6
 8008cee:	e7ea      	b.n	8008cc6 <__swbuf_r+0x76>
 8008cf0:	08009e04 	.word	0x08009e04
 8008cf4:	08009e24 	.word	0x08009e24
 8008cf8:	08009de4 	.word	0x08009de4

08008cfc <__ascii_wctomb>:
 8008cfc:	0003      	movs	r3, r0
 8008cfe:	1e08      	subs	r0, r1, #0
 8008d00:	d005      	beq.n	8008d0e <__ascii_wctomb+0x12>
 8008d02:	2aff      	cmp	r2, #255	; 0xff
 8008d04:	d904      	bls.n	8008d10 <__ascii_wctomb+0x14>
 8008d06:	228a      	movs	r2, #138	; 0x8a
 8008d08:	2001      	movs	r0, #1
 8008d0a:	601a      	str	r2, [r3, #0]
 8008d0c:	4240      	negs	r0, r0
 8008d0e:	4770      	bx	lr
 8008d10:	2001      	movs	r0, #1
 8008d12:	700a      	strb	r2, [r1, #0]
 8008d14:	e7fb      	b.n	8008d0e <__ascii_wctomb+0x12>
	...

08008d18 <__swsetup_r>:
 8008d18:	4b37      	ldr	r3, [pc, #220]	; (8008df8 <__swsetup_r+0xe0>)
 8008d1a:	b570      	push	{r4, r5, r6, lr}
 8008d1c:	681d      	ldr	r5, [r3, #0]
 8008d1e:	0006      	movs	r6, r0
 8008d20:	000c      	movs	r4, r1
 8008d22:	2d00      	cmp	r5, #0
 8008d24:	d005      	beq.n	8008d32 <__swsetup_r+0x1a>
 8008d26:	69ab      	ldr	r3, [r5, #24]
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	d102      	bne.n	8008d32 <__swsetup_r+0x1a>
 8008d2c:	0028      	movs	r0, r5
 8008d2e:	f000 f9a1 	bl	8009074 <__sinit>
 8008d32:	4b32      	ldr	r3, [pc, #200]	; (8008dfc <__swsetup_r+0xe4>)
 8008d34:	429c      	cmp	r4, r3
 8008d36:	d10f      	bne.n	8008d58 <__swsetup_r+0x40>
 8008d38:	686c      	ldr	r4, [r5, #4]
 8008d3a:	230c      	movs	r3, #12
 8008d3c:	5ee2      	ldrsh	r2, [r4, r3]
 8008d3e:	b293      	uxth	r3, r2
 8008d40:	0711      	lsls	r1, r2, #28
 8008d42:	d42d      	bmi.n	8008da0 <__swsetup_r+0x88>
 8008d44:	06d9      	lsls	r1, r3, #27
 8008d46:	d411      	bmi.n	8008d6c <__swsetup_r+0x54>
 8008d48:	2309      	movs	r3, #9
 8008d4a:	2001      	movs	r0, #1
 8008d4c:	6033      	str	r3, [r6, #0]
 8008d4e:	3337      	adds	r3, #55	; 0x37
 8008d50:	4313      	orrs	r3, r2
 8008d52:	81a3      	strh	r3, [r4, #12]
 8008d54:	4240      	negs	r0, r0
 8008d56:	bd70      	pop	{r4, r5, r6, pc}
 8008d58:	4b29      	ldr	r3, [pc, #164]	; (8008e00 <__swsetup_r+0xe8>)
 8008d5a:	429c      	cmp	r4, r3
 8008d5c:	d101      	bne.n	8008d62 <__swsetup_r+0x4a>
 8008d5e:	68ac      	ldr	r4, [r5, #8]
 8008d60:	e7eb      	b.n	8008d3a <__swsetup_r+0x22>
 8008d62:	4b28      	ldr	r3, [pc, #160]	; (8008e04 <__swsetup_r+0xec>)
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d1e8      	bne.n	8008d3a <__swsetup_r+0x22>
 8008d68:	68ec      	ldr	r4, [r5, #12]
 8008d6a:	e7e6      	b.n	8008d3a <__swsetup_r+0x22>
 8008d6c:	075b      	lsls	r3, r3, #29
 8008d6e:	d513      	bpl.n	8008d98 <__swsetup_r+0x80>
 8008d70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008d72:	2900      	cmp	r1, #0
 8008d74:	d008      	beq.n	8008d88 <__swsetup_r+0x70>
 8008d76:	0023      	movs	r3, r4
 8008d78:	3344      	adds	r3, #68	; 0x44
 8008d7a:	4299      	cmp	r1, r3
 8008d7c:	d002      	beq.n	8008d84 <__swsetup_r+0x6c>
 8008d7e:	0030      	movs	r0, r6
 8008d80:	f7ff fb1c 	bl	80083bc <_free_r>
 8008d84:	2300      	movs	r3, #0
 8008d86:	6363      	str	r3, [r4, #52]	; 0x34
 8008d88:	2224      	movs	r2, #36	; 0x24
 8008d8a:	89a3      	ldrh	r3, [r4, #12]
 8008d8c:	4393      	bics	r3, r2
 8008d8e:	81a3      	strh	r3, [r4, #12]
 8008d90:	2300      	movs	r3, #0
 8008d92:	6063      	str	r3, [r4, #4]
 8008d94:	6923      	ldr	r3, [r4, #16]
 8008d96:	6023      	str	r3, [r4, #0]
 8008d98:	2308      	movs	r3, #8
 8008d9a:	89a2      	ldrh	r2, [r4, #12]
 8008d9c:	4313      	orrs	r3, r2
 8008d9e:	81a3      	strh	r3, [r4, #12]
 8008da0:	6923      	ldr	r3, [r4, #16]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d10b      	bne.n	8008dbe <__swsetup_r+0xa6>
 8008da6:	21a0      	movs	r1, #160	; 0xa0
 8008da8:	2280      	movs	r2, #128	; 0x80
 8008daa:	89a3      	ldrh	r3, [r4, #12]
 8008dac:	0089      	lsls	r1, r1, #2
 8008dae:	0092      	lsls	r2, r2, #2
 8008db0:	400b      	ands	r3, r1
 8008db2:	4293      	cmp	r3, r2
 8008db4:	d003      	beq.n	8008dbe <__swsetup_r+0xa6>
 8008db6:	0021      	movs	r1, r4
 8008db8:	0030      	movs	r0, r6
 8008dba:	f000 fa27 	bl	800920c <__smakebuf_r>
 8008dbe:	220c      	movs	r2, #12
 8008dc0:	5ea3      	ldrsh	r3, [r4, r2]
 8008dc2:	2001      	movs	r0, #1
 8008dc4:	001a      	movs	r2, r3
 8008dc6:	b299      	uxth	r1, r3
 8008dc8:	4002      	ands	r2, r0
 8008dca:	4203      	tst	r3, r0
 8008dcc:	d00f      	beq.n	8008dee <__swsetup_r+0xd6>
 8008dce:	2200      	movs	r2, #0
 8008dd0:	60a2      	str	r2, [r4, #8]
 8008dd2:	6962      	ldr	r2, [r4, #20]
 8008dd4:	4252      	negs	r2, r2
 8008dd6:	61a2      	str	r2, [r4, #24]
 8008dd8:	2000      	movs	r0, #0
 8008dda:	6922      	ldr	r2, [r4, #16]
 8008ddc:	4282      	cmp	r2, r0
 8008dde:	d1ba      	bne.n	8008d56 <__swsetup_r+0x3e>
 8008de0:	060a      	lsls	r2, r1, #24
 8008de2:	d5b8      	bpl.n	8008d56 <__swsetup_r+0x3e>
 8008de4:	2240      	movs	r2, #64	; 0x40
 8008de6:	4313      	orrs	r3, r2
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	3801      	subs	r0, #1
 8008dec:	e7b3      	b.n	8008d56 <__swsetup_r+0x3e>
 8008dee:	0788      	lsls	r0, r1, #30
 8008df0:	d400      	bmi.n	8008df4 <__swsetup_r+0xdc>
 8008df2:	6962      	ldr	r2, [r4, #20]
 8008df4:	60a2      	str	r2, [r4, #8]
 8008df6:	e7ef      	b.n	8008dd8 <__swsetup_r+0xc0>
 8008df8:	20000018 	.word	0x20000018
 8008dfc:	08009e04 	.word	0x08009e04
 8008e00:	08009e24 	.word	0x08009e24
 8008e04:	08009de4 	.word	0x08009de4

08008e08 <abort>:
 8008e08:	2006      	movs	r0, #6
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	f000 fa74 	bl	80092f8 <raise>
 8008e10:	2001      	movs	r0, #1
 8008e12:	f7fb f860 	bl	8003ed6 <_exit>
	...

08008e18 <__sflush_r>:
 8008e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e1a:	898b      	ldrh	r3, [r1, #12]
 8008e1c:	0005      	movs	r5, r0
 8008e1e:	000c      	movs	r4, r1
 8008e20:	071a      	lsls	r2, r3, #28
 8008e22:	d45f      	bmi.n	8008ee4 <__sflush_r+0xcc>
 8008e24:	684a      	ldr	r2, [r1, #4]
 8008e26:	2a00      	cmp	r2, #0
 8008e28:	dc04      	bgt.n	8008e34 <__sflush_r+0x1c>
 8008e2a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 8008e2c:	2a00      	cmp	r2, #0
 8008e2e:	dc01      	bgt.n	8008e34 <__sflush_r+0x1c>
 8008e30:	2000      	movs	r0, #0
 8008e32:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8008e34:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e36:	2f00      	cmp	r7, #0
 8008e38:	d0fa      	beq.n	8008e30 <__sflush_r+0x18>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	2180      	movs	r1, #128	; 0x80
 8008e3e:	682e      	ldr	r6, [r5, #0]
 8008e40:	602a      	str	r2, [r5, #0]
 8008e42:	001a      	movs	r2, r3
 8008e44:	0149      	lsls	r1, r1, #5
 8008e46:	400a      	ands	r2, r1
 8008e48:	420b      	tst	r3, r1
 8008e4a:	d034      	beq.n	8008eb6 <__sflush_r+0x9e>
 8008e4c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e4e:	89a3      	ldrh	r3, [r4, #12]
 8008e50:	075b      	lsls	r3, r3, #29
 8008e52:	d506      	bpl.n	8008e62 <__sflush_r+0x4a>
 8008e54:	6863      	ldr	r3, [r4, #4]
 8008e56:	1ac0      	subs	r0, r0, r3
 8008e58:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d001      	beq.n	8008e62 <__sflush_r+0x4a>
 8008e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e60:	1ac0      	subs	r0, r0, r3
 8008e62:	0002      	movs	r2, r0
 8008e64:	6a21      	ldr	r1, [r4, #32]
 8008e66:	2300      	movs	r3, #0
 8008e68:	0028      	movs	r0, r5
 8008e6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8008e6c:	47b8      	blx	r7
 8008e6e:	89a1      	ldrh	r1, [r4, #12]
 8008e70:	1c43      	adds	r3, r0, #1
 8008e72:	d106      	bne.n	8008e82 <__sflush_r+0x6a>
 8008e74:	682b      	ldr	r3, [r5, #0]
 8008e76:	2b1d      	cmp	r3, #29
 8008e78:	d831      	bhi.n	8008ede <__sflush_r+0xc6>
 8008e7a:	4a2c      	ldr	r2, [pc, #176]	; (8008f2c <__sflush_r+0x114>)
 8008e7c:	40da      	lsrs	r2, r3
 8008e7e:	07d3      	lsls	r3, r2, #31
 8008e80:	d52d      	bpl.n	8008ede <__sflush_r+0xc6>
 8008e82:	2300      	movs	r3, #0
 8008e84:	6063      	str	r3, [r4, #4]
 8008e86:	6923      	ldr	r3, [r4, #16]
 8008e88:	6023      	str	r3, [r4, #0]
 8008e8a:	04cb      	lsls	r3, r1, #19
 8008e8c:	d505      	bpl.n	8008e9a <__sflush_r+0x82>
 8008e8e:	1c43      	adds	r3, r0, #1
 8008e90:	d102      	bne.n	8008e98 <__sflush_r+0x80>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d100      	bne.n	8008e9a <__sflush_r+0x82>
 8008e98:	6560      	str	r0, [r4, #84]	; 0x54
 8008e9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9c:	602e      	str	r6, [r5, #0]
 8008e9e:	2900      	cmp	r1, #0
 8008ea0:	d0c6      	beq.n	8008e30 <__sflush_r+0x18>
 8008ea2:	0023      	movs	r3, r4
 8008ea4:	3344      	adds	r3, #68	; 0x44
 8008ea6:	4299      	cmp	r1, r3
 8008ea8:	d002      	beq.n	8008eb0 <__sflush_r+0x98>
 8008eaa:	0028      	movs	r0, r5
 8008eac:	f7ff fa86 	bl	80083bc <_free_r>
 8008eb0:	2000      	movs	r0, #0
 8008eb2:	6360      	str	r0, [r4, #52]	; 0x34
 8008eb4:	e7bd      	b.n	8008e32 <__sflush_r+0x1a>
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	0028      	movs	r0, r5
 8008eba:	6a21      	ldr	r1, [r4, #32]
 8008ebc:	47b8      	blx	r7
 8008ebe:	1c43      	adds	r3, r0, #1
 8008ec0:	d1c5      	bne.n	8008e4e <__sflush_r+0x36>
 8008ec2:	682b      	ldr	r3, [r5, #0]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d0c2      	beq.n	8008e4e <__sflush_r+0x36>
 8008ec8:	2b1d      	cmp	r3, #29
 8008eca:	d001      	beq.n	8008ed0 <__sflush_r+0xb8>
 8008ecc:	2b16      	cmp	r3, #22
 8008ece:	d101      	bne.n	8008ed4 <__sflush_r+0xbc>
 8008ed0:	602e      	str	r6, [r5, #0]
 8008ed2:	e7ad      	b.n	8008e30 <__sflush_r+0x18>
 8008ed4:	2340      	movs	r3, #64	; 0x40
 8008ed6:	89a2      	ldrh	r2, [r4, #12]
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	e7a9      	b.n	8008e32 <__sflush_r+0x1a>
 8008ede:	2340      	movs	r3, #64	; 0x40
 8008ee0:	430b      	orrs	r3, r1
 8008ee2:	e7fa      	b.n	8008eda <__sflush_r+0xc2>
 8008ee4:	690f      	ldr	r7, [r1, #16]
 8008ee6:	2f00      	cmp	r7, #0
 8008ee8:	d0a2      	beq.n	8008e30 <__sflush_r+0x18>
 8008eea:	680a      	ldr	r2, [r1, #0]
 8008eec:	600f      	str	r7, [r1, #0]
 8008eee:	1bd2      	subs	r2, r2, r7
 8008ef0:	9201      	str	r2, [sp, #4]
 8008ef2:	2200      	movs	r2, #0
 8008ef4:	079b      	lsls	r3, r3, #30
 8008ef6:	d100      	bne.n	8008efa <__sflush_r+0xe2>
 8008ef8:	694a      	ldr	r2, [r1, #20]
 8008efa:	60a2      	str	r2, [r4, #8]
 8008efc:	9b01      	ldr	r3, [sp, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	dc00      	bgt.n	8008f04 <__sflush_r+0xec>
 8008f02:	e795      	b.n	8008e30 <__sflush_r+0x18>
 8008f04:	003a      	movs	r2, r7
 8008f06:	0028      	movs	r0, r5
 8008f08:	9b01      	ldr	r3, [sp, #4]
 8008f0a:	6a21      	ldr	r1, [r4, #32]
 8008f0c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f0e:	47b0      	blx	r6
 8008f10:	2800      	cmp	r0, #0
 8008f12:	dc06      	bgt.n	8008f22 <__sflush_r+0x10a>
 8008f14:	2340      	movs	r3, #64	; 0x40
 8008f16:	2001      	movs	r0, #1
 8008f18:	89a2      	ldrh	r2, [r4, #12]
 8008f1a:	4240      	negs	r0, r0
 8008f1c:	4313      	orrs	r3, r2
 8008f1e:	81a3      	strh	r3, [r4, #12]
 8008f20:	e787      	b.n	8008e32 <__sflush_r+0x1a>
 8008f22:	9b01      	ldr	r3, [sp, #4]
 8008f24:	183f      	adds	r7, r7, r0
 8008f26:	1a1b      	subs	r3, r3, r0
 8008f28:	9301      	str	r3, [sp, #4]
 8008f2a:	e7e7      	b.n	8008efc <__sflush_r+0xe4>
 8008f2c:	20400001 	.word	0x20400001

08008f30 <_fflush_r>:
 8008f30:	690b      	ldr	r3, [r1, #16]
 8008f32:	b570      	push	{r4, r5, r6, lr}
 8008f34:	0005      	movs	r5, r0
 8008f36:	000c      	movs	r4, r1
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d102      	bne.n	8008f42 <_fflush_r+0x12>
 8008f3c:	2500      	movs	r5, #0
 8008f3e:	0028      	movs	r0, r5
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
 8008f42:	2800      	cmp	r0, #0
 8008f44:	d004      	beq.n	8008f50 <_fflush_r+0x20>
 8008f46:	6983      	ldr	r3, [r0, #24]
 8008f48:	2b00      	cmp	r3, #0
 8008f4a:	d101      	bne.n	8008f50 <_fflush_r+0x20>
 8008f4c:	f000 f892 	bl	8009074 <__sinit>
 8008f50:	4b14      	ldr	r3, [pc, #80]	; (8008fa4 <_fflush_r+0x74>)
 8008f52:	429c      	cmp	r4, r3
 8008f54:	d11b      	bne.n	8008f8e <_fflush_r+0x5e>
 8008f56:	686c      	ldr	r4, [r5, #4]
 8008f58:	220c      	movs	r2, #12
 8008f5a:	5ea3      	ldrsh	r3, [r4, r2]
 8008f5c:	2b00      	cmp	r3, #0
 8008f5e:	d0ed      	beq.n	8008f3c <_fflush_r+0xc>
 8008f60:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f62:	07d2      	lsls	r2, r2, #31
 8008f64:	d404      	bmi.n	8008f70 <_fflush_r+0x40>
 8008f66:	059b      	lsls	r3, r3, #22
 8008f68:	d402      	bmi.n	8008f70 <_fflush_r+0x40>
 8008f6a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f6c:	f000 f923 	bl	80091b6 <__retarget_lock_acquire_recursive>
 8008f70:	0028      	movs	r0, r5
 8008f72:	0021      	movs	r1, r4
 8008f74:	f7ff ff50 	bl	8008e18 <__sflush_r>
 8008f78:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f7a:	0005      	movs	r5, r0
 8008f7c:	07db      	lsls	r3, r3, #31
 8008f7e:	d4de      	bmi.n	8008f3e <_fflush_r+0xe>
 8008f80:	89a3      	ldrh	r3, [r4, #12]
 8008f82:	059b      	lsls	r3, r3, #22
 8008f84:	d4db      	bmi.n	8008f3e <_fflush_r+0xe>
 8008f86:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f88:	f000 f916 	bl	80091b8 <__retarget_lock_release_recursive>
 8008f8c:	e7d7      	b.n	8008f3e <_fflush_r+0xe>
 8008f8e:	4b06      	ldr	r3, [pc, #24]	; (8008fa8 <_fflush_r+0x78>)
 8008f90:	429c      	cmp	r4, r3
 8008f92:	d101      	bne.n	8008f98 <_fflush_r+0x68>
 8008f94:	68ac      	ldr	r4, [r5, #8]
 8008f96:	e7df      	b.n	8008f58 <_fflush_r+0x28>
 8008f98:	4b04      	ldr	r3, [pc, #16]	; (8008fac <_fflush_r+0x7c>)
 8008f9a:	429c      	cmp	r4, r3
 8008f9c:	d1dc      	bne.n	8008f58 <_fflush_r+0x28>
 8008f9e:	68ec      	ldr	r4, [r5, #12]
 8008fa0:	e7da      	b.n	8008f58 <_fflush_r+0x28>
 8008fa2:	46c0      	nop			; (mov r8, r8)
 8008fa4:	08009e04 	.word	0x08009e04
 8008fa8:	08009e24 	.word	0x08009e24
 8008fac:	08009de4 	.word	0x08009de4

08008fb0 <std>:
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	b510      	push	{r4, lr}
 8008fb4:	0004      	movs	r4, r0
 8008fb6:	6003      	str	r3, [r0, #0]
 8008fb8:	6043      	str	r3, [r0, #4]
 8008fba:	6083      	str	r3, [r0, #8]
 8008fbc:	8181      	strh	r1, [r0, #12]
 8008fbe:	6643      	str	r3, [r0, #100]	; 0x64
 8008fc0:	0019      	movs	r1, r3
 8008fc2:	81c2      	strh	r2, [r0, #14]
 8008fc4:	6103      	str	r3, [r0, #16]
 8008fc6:	6143      	str	r3, [r0, #20]
 8008fc8:	6183      	str	r3, [r0, #24]
 8008fca:	2208      	movs	r2, #8
 8008fcc:	305c      	adds	r0, #92	; 0x5c
 8008fce:	f7fd fac2 	bl	8006556 <memset>
 8008fd2:	4b05      	ldr	r3, [pc, #20]	; (8008fe8 <std+0x38>)
 8008fd4:	6224      	str	r4, [r4, #32]
 8008fd6:	6263      	str	r3, [r4, #36]	; 0x24
 8008fd8:	4b04      	ldr	r3, [pc, #16]	; (8008fec <std+0x3c>)
 8008fda:	62a3      	str	r3, [r4, #40]	; 0x28
 8008fdc:	4b04      	ldr	r3, [pc, #16]	; (8008ff0 <std+0x40>)
 8008fde:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008fe0:	4b04      	ldr	r3, [pc, #16]	; (8008ff4 <std+0x44>)
 8008fe2:	6323      	str	r3, [r4, #48]	; 0x30
 8008fe4:	bd10      	pop	{r4, pc}
 8008fe6:	46c0      	nop			; (mov r8, r8)
 8008fe8:	08009339 	.word	0x08009339
 8008fec:	08009361 	.word	0x08009361
 8008ff0:	08009399 	.word	0x08009399
 8008ff4:	080093c5 	.word	0x080093c5

08008ff8 <_cleanup_r>:
 8008ff8:	b510      	push	{r4, lr}
 8008ffa:	4902      	ldr	r1, [pc, #8]	; (8009004 <_cleanup_r+0xc>)
 8008ffc:	f000 f8ba 	bl	8009174 <_fwalk_reent>
 8009000:	bd10      	pop	{r4, pc}
 8009002:	46c0      	nop			; (mov r8, r8)
 8009004:	08008f31 	.word	0x08008f31

08009008 <__sfmoreglue>:
 8009008:	b570      	push	{r4, r5, r6, lr}
 800900a:	2568      	movs	r5, #104	; 0x68
 800900c:	1e4a      	subs	r2, r1, #1
 800900e:	4355      	muls	r5, r2
 8009010:	000e      	movs	r6, r1
 8009012:	0029      	movs	r1, r5
 8009014:	3174      	adds	r1, #116	; 0x74
 8009016:	f7ff fa3d 	bl	8008494 <_malloc_r>
 800901a:	1e04      	subs	r4, r0, #0
 800901c:	d008      	beq.n	8009030 <__sfmoreglue+0x28>
 800901e:	2100      	movs	r1, #0
 8009020:	002a      	movs	r2, r5
 8009022:	6001      	str	r1, [r0, #0]
 8009024:	6046      	str	r6, [r0, #4]
 8009026:	300c      	adds	r0, #12
 8009028:	60a0      	str	r0, [r4, #8]
 800902a:	3268      	adds	r2, #104	; 0x68
 800902c:	f7fd fa93 	bl	8006556 <memset>
 8009030:	0020      	movs	r0, r4
 8009032:	bd70      	pop	{r4, r5, r6, pc}

08009034 <__sfp_lock_acquire>:
 8009034:	b510      	push	{r4, lr}
 8009036:	4802      	ldr	r0, [pc, #8]	; (8009040 <__sfp_lock_acquire+0xc>)
 8009038:	f000 f8bd 	bl	80091b6 <__retarget_lock_acquire_recursive>
 800903c:	bd10      	pop	{r4, pc}
 800903e:	46c0      	nop			; (mov r8, r8)
 8009040:	200014d5 	.word	0x200014d5

08009044 <__sfp_lock_release>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4802      	ldr	r0, [pc, #8]	; (8009050 <__sfp_lock_release+0xc>)
 8009048:	f000 f8b6 	bl	80091b8 <__retarget_lock_release_recursive>
 800904c:	bd10      	pop	{r4, pc}
 800904e:	46c0      	nop			; (mov r8, r8)
 8009050:	200014d5 	.word	0x200014d5

08009054 <__sinit_lock_acquire>:
 8009054:	b510      	push	{r4, lr}
 8009056:	4802      	ldr	r0, [pc, #8]	; (8009060 <__sinit_lock_acquire+0xc>)
 8009058:	f000 f8ad 	bl	80091b6 <__retarget_lock_acquire_recursive>
 800905c:	bd10      	pop	{r4, pc}
 800905e:	46c0      	nop			; (mov r8, r8)
 8009060:	200014d6 	.word	0x200014d6

08009064 <__sinit_lock_release>:
 8009064:	b510      	push	{r4, lr}
 8009066:	4802      	ldr	r0, [pc, #8]	; (8009070 <__sinit_lock_release+0xc>)
 8009068:	f000 f8a6 	bl	80091b8 <__retarget_lock_release_recursive>
 800906c:	bd10      	pop	{r4, pc}
 800906e:	46c0      	nop			; (mov r8, r8)
 8009070:	200014d6 	.word	0x200014d6

08009074 <__sinit>:
 8009074:	b513      	push	{r0, r1, r4, lr}
 8009076:	0004      	movs	r4, r0
 8009078:	f7ff ffec 	bl	8009054 <__sinit_lock_acquire>
 800907c:	69a3      	ldr	r3, [r4, #24]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d002      	beq.n	8009088 <__sinit+0x14>
 8009082:	f7ff ffef 	bl	8009064 <__sinit_lock_release>
 8009086:	bd13      	pop	{r0, r1, r4, pc}
 8009088:	64a3      	str	r3, [r4, #72]	; 0x48
 800908a:	64e3      	str	r3, [r4, #76]	; 0x4c
 800908c:	6523      	str	r3, [r4, #80]	; 0x50
 800908e:	4b13      	ldr	r3, [pc, #76]	; (80090dc <__sinit+0x68>)
 8009090:	4a13      	ldr	r2, [pc, #76]	; (80090e0 <__sinit+0x6c>)
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	62a2      	str	r2, [r4, #40]	; 0x28
 8009096:	9301      	str	r3, [sp, #4]
 8009098:	42a3      	cmp	r3, r4
 800909a:	d101      	bne.n	80090a0 <__sinit+0x2c>
 800909c:	2301      	movs	r3, #1
 800909e:	61a3      	str	r3, [r4, #24]
 80090a0:	0020      	movs	r0, r4
 80090a2:	f000 f81f 	bl	80090e4 <__sfp>
 80090a6:	6060      	str	r0, [r4, #4]
 80090a8:	0020      	movs	r0, r4
 80090aa:	f000 f81b 	bl	80090e4 <__sfp>
 80090ae:	60a0      	str	r0, [r4, #8]
 80090b0:	0020      	movs	r0, r4
 80090b2:	f000 f817 	bl	80090e4 <__sfp>
 80090b6:	2200      	movs	r2, #0
 80090b8:	2104      	movs	r1, #4
 80090ba:	60e0      	str	r0, [r4, #12]
 80090bc:	6860      	ldr	r0, [r4, #4]
 80090be:	f7ff ff77 	bl	8008fb0 <std>
 80090c2:	2201      	movs	r2, #1
 80090c4:	2109      	movs	r1, #9
 80090c6:	68a0      	ldr	r0, [r4, #8]
 80090c8:	f7ff ff72 	bl	8008fb0 <std>
 80090cc:	2202      	movs	r2, #2
 80090ce:	2112      	movs	r1, #18
 80090d0:	68e0      	ldr	r0, [r4, #12]
 80090d2:	f7ff ff6d 	bl	8008fb0 <std>
 80090d6:	2301      	movs	r3, #1
 80090d8:	61a3      	str	r3, [r4, #24]
 80090da:	e7d2      	b.n	8009082 <__sinit+0xe>
 80090dc:	08009a68 	.word	0x08009a68
 80090e0:	08008ff9 	.word	0x08008ff9

080090e4 <__sfp>:
 80090e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090e6:	0007      	movs	r7, r0
 80090e8:	f7ff ffa4 	bl	8009034 <__sfp_lock_acquire>
 80090ec:	4b1f      	ldr	r3, [pc, #124]	; (800916c <__sfp+0x88>)
 80090ee:	681e      	ldr	r6, [r3, #0]
 80090f0:	69b3      	ldr	r3, [r6, #24]
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d102      	bne.n	80090fc <__sfp+0x18>
 80090f6:	0030      	movs	r0, r6
 80090f8:	f7ff ffbc 	bl	8009074 <__sinit>
 80090fc:	3648      	adds	r6, #72	; 0x48
 80090fe:	68b4      	ldr	r4, [r6, #8]
 8009100:	6873      	ldr	r3, [r6, #4]
 8009102:	3b01      	subs	r3, #1
 8009104:	d504      	bpl.n	8009110 <__sfp+0x2c>
 8009106:	6833      	ldr	r3, [r6, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d022      	beq.n	8009152 <__sfp+0x6e>
 800910c:	6836      	ldr	r6, [r6, #0]
 800910e:	e7f6      	b.n	80090fe <__sfp+0x1a>
 8009110:	220c      	movs	r2, #12
 8009112:	5ea5      	ldrsh	r5, [r4, r2]
 8009114:	2d00      	cmp	r5, #0
 8009116:	d11a      	bne.n	800914e <__sfp+0x6a>
 8009118:	0020      	movs	r0, r4
 800911a:	4b15      	ldr	r3, [pc, #84]	; (8009170 <__sfp+0x8c>)
 800911c:	3058      	adds	r0, #88	; 0x58
 800911e:	60e3      	str	r3, [r4, #12]
 8009120:	6665      	str	r5, [r4, #100]	; 0x64
 8009122:	f000 f847 	bl	80091b4 <__retarget_lock_init_recursive>
 8009126:	f7ff ff8d 	bl	8009044 <__sfp_lock_release>
 800912a:	0020      	movs	r0, r4
 800912c:	2208      	movs	r2, #8
 800912e:	0029      	movs	r1, r5
 8009130:	6025      	str	r5, [r4, #0]
 8009132:	60a5      	str	r5, [r4, #8]
 8009134:	6065      	str	r5, [r4, #4]
 8009136:	6125      	str	r5, [r4, #16]
 8009138:	6165      	str	r5, [r4, #20]
 800913a:	61a5      	str	r5, [r4, #24]
 800913c:	305c      	adds	r0, #92	; 0x5c
 800913e:	f7fd fa0a 	bl	8006556 <memset>
 8009142:	6365      	str	r5, [r4, #52]	; 0x34
 8009144:	63a5      	str	r5, [r4, #56]	; 0x38
 8009146:	64a5      	str	r5, [r4, #72]	; 0x48
 8009148:	64e5      	str	r5, [r4, #76]	; 0x4c
 800914a:	0020      	movs	r0, r4
 800914c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800914e:	3468      	adds	r4, #104	; 0x68
 8009150:	e7d7      	b.n	8009102 <__sfp+0x1e>
 8009152:	2104      	movs	r1, #4
 8009154:	0038      	movs	r0, r7
 8009156:	f7ff ff57 	bl	8009008 <__sfmoreglue>
 800915a:	1e04      	subs	r4, r0, #0
 800915c:	6030      	str	r0, [r6, #0]
 800915e:	d1d5      	bne.n	800910c <__sfp+0x28>
 8009160:	f7ff ff70 	bl	8009044 <__sfp_lock_release>
 8009164:	230c      	movs	r3, #12
 8009166:	603b      	str	r3, [r7, #0]
 8009168:	e7ef      	b.n	800914a <__sfp+0x66>
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	08009a68 	.word	0x08009a68
 8009170:	ffff0001 	.word	0xffff0001

08009174 <_fwalk_reent>:
 8009174:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009176:	0004      	movs	r4, r0
 8009178:	0006      	movs	r6, r0
 800917a:	2700      	movs	r7, #0
 800917c:	9101      	str	r1, [sp, #4]
 800917e:	3448      	adds	r4, #72	; 0x48
 8009180:	6863      	ldr	r3, [r4, #4]
 8009182:	68a5      	ldr	r5, [r4, #8]
 8009184:	9300      	str	r3, [sp, #0]
 8009186:	9b00      	ldr	r3, [sp, #0]
 8009188:	3b01      	subs	r3, #1
 800918a:	9300      	str	r3, [sp, #0]
 800918c:	d504      	bpl.n	8009198 <_fwalk_reent+0x24>
 800918e:	6824      	ldr	r4, [r4, #0]
 8009190:	2c00      	cmp	r4, #0
 8009192:	d1f5      	bne.n	8009180 <_fwalk_reent+0xc>
 8009194:	0038      	movs	r0, r7
 8009196:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009198:	89ab      	ldrh	r3, [r5, #12]
 800919a:	2b01      	cmp	r3, #1
 800919c:	d908      	bls.n	80091b0 <_fwalk_reent+0x3c>
 800919e:	220e      	movs	r2, #14
 80091a0:	5eab      	ldrsh	r3, [r5, r2]
 80091a2:	3301      	adds	r3, #1
 80091a4:	d004      	beq.n	80091b0 <_fwalk_reent+0x3c>
 80091a6:	0029      	movs	r1, r5
 80091a8:	0030      	movs	r0, r6
 80091aa:	9b01      	ldr	r3, [sp, #4]
 80091ac:	4798      	blx	r3
 80091ae:	4307      	orrs	r7, r0
 80091b0:	3568      	adds	r5, #104	; 0x68
 80091b2:	e7e8      	b.n	8009186 <_fwalk_reent+0x12>

080091b4 <__retarget_lock_init_recursive>:
 80091b4:	4770      	bx	lr

080091b6 <__retarget_lock_acquire_recursive>:
 80091b6:	4770      	bx	lr

080091b8 <__retarget_lock_release_recursive>:
 80091b8:	4770      	bx	lr
	...

080091bc <__swhatbuf_r>:
 80091bc:	b570      	push	{r4, r5, r6, lr}
 80091be:	000e      	movs	r6, r1
 80091c0:	001d      	movs	r5, r3
 80091c2:	230e      	movs	r3, #14
 80091c4:	5ec9      	ldrsh	r1, [r1, r3]
 80091c6:	0014      	movs	r4, r2
 80091c8:	b096      	sub	sp, #88	; 0x58
 80091ca:	2900      	cmp	r1, #0
 80091cc:	da08      	bge.n	80091e0 <__swhatbuf_r+0x24>
 80091ce:	220c      	movs	r2, #12
 80091d0:	5eb3      	ldrsh	r3, [r6, r2]
 80091d2:	2200      	movs	r2, #0
 80091d4:	602a      	str	r2, [r5, #0]
 80091d6:	061b      	lsls	r3, r3, #24
 80091d8:	d411      	bmi.n	80091fe <__swhatbuf_r+0x42>
 80091da:	2380      	movs	r3, #128	; 0x80
 80091dc:	00db      	lsls	r3, r3, #3
 80091de:	e00f      	b.n	8009200 <__swhatbuf_r+0x44>
 80091e0:	466a      	mov	r2, sp
 80091e2:	f000 f91b 	bl	800941c <_fstat_r>
 80091e6:	2800      	cmp	r0, #0
 80091e8:	dbf1      	blt.n	80091ce <__swhatbuf_r+0x12>
 80091ea:	23f0      	movs	r3, #240	; 0xf0
 80091ec:	9901      	ldr	r1, [sp, #4]
 80091ee:	021b      	lsls	r3, r3, #8
 80091f0:	4019      	ands	r1, r3
 80091f2:	4b05      	ldr	r3, [pc, #20]	; (8009208 <__swhatbuf_r+0x4c>)
 80091f4:	18c9      	adds	r1, r1, r3
 80091f6:	424b      	negs	r3, r1
 80091f8:	4159      	adcs	r1, r3
 80091fa:	6029      	str	r1, [r5, #0]
 80091fc:	e7ed      	b.n	80091da <__swhatbuf_r+0x1e>
 80091fe:	2340      	movs	r3, #64	; 0x40
 8009200:	2000      	movs	r0, #0
 8009202:	6023      	str	r3, [r4, #0]
 8009204:	b016      	add	sp, #88	; 0x58
 8009206:	bd70      	pop	{r4, r5, r6, pc}
 8009208:	ffffe000 	.word	0xffffe000

0800920c <__smakebuf_r>:
 800920c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800920e:	2602      	movs	r6, #2
 8009210:	898b      	ldrh	r3, [r1, #12]
 8009212:	0005      	movs	r5, r0
 8009214:	000c      	movs	r4, r1
 8009216:	4233      	tst	r3, r6
 8009218:	d006      	beq.n	8009228 <__smakebuf_r+0x1c>
 800921a:	0023      	movs	r3, r4
 800921c:	3347      	adds	r3, #71	; 0x47
 800921e:	6023      	str	r3, [r4, #0]
 8009220:	6123      	str	r3, [r4, #16]
 8009222:	2301      	movs	r3, #1
 8009224:	6163      	str	r3, [r4, #20]
 8009226:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 8009228:	466a      	mov	r2, sp
 800922a:	ab01      	add	r3, sp, #4
 800922c:	f7ff ffc6 	bl	80091bc <__swhatbuf_r>
 8009230:	9900      	ldr	r1, [sp, #0]
 8009232:	0007      	movs	r7, r0
 8009234:	0028      	movs	r0, r5
 8009236:	f7ff f92d 	bl	8008494 <_malloc_r>
 800923a:	2800      	cmp	r0, #0
 800923c:	d108      	bne.n	8009250 <__smakebuf_r+0x44>
 800923e:	220c      	movs	r2, #12
 8009240:	5ea3      	ldrsh	r3, [r4, r2]
 8009242:	059a      	lsls	r2, r3, #22
 8009244:	d4ef      	bmi.n	8009226 <__smakebuf_r+0x1a>
 8009246:	2203      	movs	r2, #3
 8009248:	4393      	bics	r3, r2
 800924a:	431e      	orrs	r6, r3
 800924c:	81a6      	strh	r6, [r4, #12]
 800924e:	e7e4      	b.n	800921a <__smakebuf_r+0xe>
 8009250:	4b0f      	ldr	r3, [pc, #60]	; (8009290 <__smakebuf_r+0x84>)
 8009252:	62ab      	str	r3, [r5, #40]	; 0x28
 8009254:	2380      	movs	r3, #128	; 0x80
 8009256:	89a2      	ldrh	r2, [r4, #12]
 8009258:	6020      	str	r0, [r4, #0]
 800925a:	4313      	orrs	r3, r2
 800925c:	81a3      	strh	r3, [r4, #12]
 800925e:	9b00      	ldr	r3, [sp, #0]
 8009260:	6120      	str	r0, [r4, #16]
 8009262:	6163      	str	r3, [r4, #20]
 8009264:	9b01      	ldr	r3, [sp, #4]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00d      	beq.n	8009286 <__smakebuf_r+0x7a>
 800926a:	0028      	movs	r0, r5
 800926c:	230e      	movs	r3, #14
 800926e:	5ee1      	ldrsh	r1, [r4, r3]
 8009270:	f000 f8e6 	bl	8009440 <_isatty_r>
 8009274:	2800      	cmp	r0, #0
 8009276:	d006      	beq.n	8009286 <__smakebuf_r+0x7a>
 8009278:	2203      	movs	r2, #3
 800927a:	89a3      	ldrh	r3, [r4, #12]
 800927c:	4393      	bics	r3, r2
 800927e:	001a      	movs	r2, r3
 8009280:	2301      	movs	r3, #1
 8009282:	4313      	orrs	r3, r2
 8009284:	81a3      	strh	r3, [r4, #12]
 8009286:	89a0      	ldrh	r0, [r4, #12]
 8009288:	4307      	orrs	r7, r0
 800928a:	81a7      	strh	r7, [r4, #12]
 800928c:	e7cb      	b.n	8009226 <__smakebuf_r+0x1a>
 800928e:	46c0      	nop			; (mov r8, r8)
 8009290:	08008ff9 	.word	0x08008ff9

08009294 <_malloc_usable_size_r>:
 8009294:	1f0b      	subs	r3, r1, #4
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	1f18      	subs	r0, r3, #4
 800929a:	2b00      	cmp	r3, #0
 800929c:	da01      	bge.n	80092a2 <_malloc_usable_size_r+0xe>
 800929e:	580b      	ldr	r3, [r1, r0]
 80092a0:	18c0      	adds	r0, r0, r3
 80092a2:	4770      	bx	lr

080092a4 <_raise_r>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	0004      	movs	r4, r0
 80092a8:	000d      	movs	r5, r1
 80092aa:	291f      	cmp	r1, #31
 80092ac:	d904      	bls.n	80092b8 <_raise_r+0x14>
 80092ae:	2316      	movs	r3, #22
 80092b0:	6003      	str	r3, [r0, #0]
 80092b2:	2001      	movs	r0, #1
 80092b4:	4240      	negs	r0, r0
 80092b6:	bd70      	pop	{r4, r5, r6, pc}
 80092b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d004      	beq.n	80092c8 <_raise_r+0x24>
 80092be:	008a      	lsls	r2, r1, #2
 80092c0:	189b      	adds	r3, r3, r2
 80092c2:	681a      	ldr	r2, [r3, #0]
 80092c4:	2a00      	cmp	r2, #0
 80092c6:	d108      	bne.n	80092da <_raise_r+0x36>
 80092c8:	0020      	movs	r0, r4
 80092ca:	f000 f831 	bl	8009330 <_getpid_r>
 80092ce:	002a      	movs	r2, r5
 80092d0:	0001      	movs	r1, r0
 80092d2:	0020      	movs	r0, r4
 80092d4:	f000 f81a 	bl	800930c <_kill_r>
 80092d8:	e7ed      	b.n	80092b6 <_raise_r+0x12>
 80092da:	2000      	movs	r0, #0
 80092dc:	2a01      	cmp	r2, #1
 80092de:	d0ea      	beq.n	80092b6 <_raise_r+0x12>
 80092e0:	1c51      	adds	r1, r2, #1
 80092e2:	d103      	bne.n	80092ec <_raise_r+0x48>
 80092e4:	2316      	movs	r3, #22
 80092e6:	3001      	adds	r0, #1
 80092e8:	6023      	str	r3, [r4, #0]
 80092ea:	e7e4      	b.n	80092b6 <_raise_r+0x12>
 80092ec:	2400      	movs	r4, #0
 80092ee:	0028      	movs	r0, r5
 80092f0:	601c      	str	r4, [r3, #0]
 80092f2:	4790      	blx	r2
 80092f4:	0020      	movs	r0, r4
 80092f6:	e7de      	b.n	80092b6 <_raise_r+0x12>

080092f8 <raise>:
 80092f8:	b510      	push	{r4, lr}
 80092fa:	4b03      	ldr	r3, [pc, #12]	; (8009308 <raise+0x10>)
 80092fc:	0001      	movs	r1, r0
 80092fe:	6818      	ldr	r0, [r3, #0]
 8009300:	f7ff ffd0 	bl	80092a4 <_raise_r>
 8009304:	bd10      	pop	{r4, pc}
 8009306:	46c0      	nop			; (mov r8, r8)
 8009308:	20000018 	.word	0x20000018

0800930c <_kill_r>:
 800930c:	2300      	movs	r3, #0
 800930e:	b570      	push	{r4, r5, r6, lr}
 8009310:	4d06      	ldr	r5, [pc, #24]	; (800932c <_kill_r+0x20>)
 8009312:	0004      	movs	r4, r0
 8009314:	0008      	movs	r0, r1
 8009316:	0011      	movs	r1, r2
 8009318:	602b      	str	r3, [r5, #0]
 800931a:	f7fa fdcc 	bl	8003eb6 <_kill>
 800931e:	1c43      	adds	r3, r0, #1
 8009320:	d103      	bne.n	800932a <_kill_r+0x1e>
 8009322:	682b      	ldr	r3, [r5, #0]
 8009324:	2b00      	cmp	r3, #0
 8009326:	d000      	beq.n	800932a <_kill_r+0x1e>
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	bd70      	pop	{r4, r5, r6, pc}
 800932c:	200014d0 	.word	0x200014d0

08009330 <_getpid_r>:
 8009330:	b510      	push	{r4, lr}
 8009332:	f7fa fdba 	bl	8003eaa <_getpid>
 8009336:	bd10      	pop	{r4, pc}

08009338 <__sread>:
 8009338:	b570      	push	{r4, r5, r6, lr}
 800933a:	000c      	movs	r4, r1
 800933c:	250e      	movs	r5, #14
 800933e:	5f49      	ldrsh	r1, [r1, r5]
 8009340:	f000 f8a4 	bl	800948c <_read_r>
 8009344:	2800      	cmp	r0, #0
 8009346:	db03      	blt.n	8009350 <__sread+0x18>
 8009348:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800934a:	181b      	adds	r3, r3, r0
 800934c:	6563      	str	r3, [r4, #84]	; 0x54
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	89a3      	ldrh	r3, [r4, #12]
 8009352:	4a02      	ldr	r2, [pc, #8]	; (800935c <__sread+0x24>)
 8009354:	4013      	ands	r3, r2
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	e7f9      	b.n	800934e <__sread+0x16>
 800935a:	46c0      	nop			; (mov r8, r8)
 800935c:	ffffefff 	.word	0xffffefff

08009360 <__swrite>:
 8009360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009362:	001f      	movs	r7, r3
 8009364:	898b      	ldrh	r3, [r1, #12]
 8009366:	0005      	movs	r5, r0
 8009368:	000c      	movs	r4, r1
 800936a:	0016      	movs	r6, r2
 800936c:	05db      	lsls	r3, r3, #23
 800936e:	d505      	bpl.n	800937c <__swrite+0x1c>
 8009370:	230e      	movs	r3, #14
 8009372:	5ec9      	ldrsh	r1, [r1, r3]
 8009374:	2200      	movs	r2, #0
 8009376:	2302      	movs	r3, #2
 8009378:	f000 f874 	bl	8009464 <_lseek_r>
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	4a05      	ldr	r2, [pc, #20]	; (8009394 <__swrite+0x34>)
 8009380:	0028      	movs	r0, r5
 8009382:	4013      	ands	r3, r2
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	0032      	movs	r2, r6
 8009388:	230e      	movs	r3, #14
 800938a:	5ee1      	ldrsh	r1, [r4, r3]
 800938c:	003b      	movs	r3, r7
 800938e:	f000 f81f 	bl	80093d0 <_write_r>
 8009392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009394:	ffffefff 	.word	0xffffefff

08009398 <__sseek>:
 8009398:	b570      	push	{r4, r5, r6, lr}
 800939a:	000c      	movs	r4, r1
 800939c:	250e      	movs	r5, #14
 800939e:	5f49      	ldrsh	r1, [r1, r5]
 80093a0:	f000 f860 	bl	8009464 <_lseek_r>
 80093a4:	89a3      	ldrh	r3, [r4, #12]
 80093a6:	1c42      	adds	r2, r0, #1
 80093a8:	d103      	bne.n	80093b2 <__sseek+0x1a>
 80093aa:	4a05      	ldr	r2, [pc, #20]	; (80093c0 <__sseek+0x28>)
 80093ac:	4013      	ands	r3, r2
 80093ae:	81a3      	strh	r3, [r4, #12]
 80093b0:	bd70      	pop	{r4, r5, r6, pc}
 80093b2:	2280      	movs	r2, #128	; 0x80
 80093b4:	0152      	lsls	r2, r2, #5
 80093b6:	4313      	orrs	r3, r2
 80093b8:	81a3      	strh	r3, [r4, #12]
 80093ba:	6560      	str	r0, [r4, #84]	; 0x54
 80093bc:	e7f8      	b.n	80093b0 <__sseek+0x18>
 80093be:	46c0      	nop			; (mov r8, r8)
 80093c0:	ffffefff 	.word	0xffffefff

080093c4 <__sclose>:
 80093c4:	b510      	push	{r4, lr}
 80093c6:	230e      	movs	r3, #14
 80093c8:	5ec9      	ldrsh	r1, [r1, r3]
 80093ca:	f000 f815 	bl	80093f8 <_close_r>
 80093ce:	bd10      	pop	{r4, pc}

080093d0 <_write_r>:
 80093d0:	b570      	push	{r4, r5, r6, lr}
 80093d2:	0004      	movs	r4, r0
 80093d4:	0008      	movs	r0, r1
 80093d6:	0011      	movs	r1, r2
 80093d8:	001a      	movs	r2, r3
 80093da:	2300      	movs	r3, #0
 80093dc:	4d05      	ldr	r5, [pc, #20]	; (80093f4 <_write_r+0x24>)
 80093de:	602b      	str	r3, [r5, #0]
 80093e0:	f7fa fda2 	bl	8003f28 <_write>
 80093e4:	1c43      	adds	r3, r0, #1
 80093e6:	d103      	bne.n	80093f0 <_write_r+0x20>
 80093e8:	682b      	ldr	r3, [r5, #0]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d000      	beq.n	80093f0 <_write_r+0x20>
 80093ee:	6023      	str	r3, [r4, #0]
 80093f0:	bd70      	pop	{r4, r5, r6, pc}
 80093f2:	46c0      	nop			; (mov r8, r8)
 80093f4:	200014d0 	.word	0x200014d0

080093f8 <_close_r>:
 80093f8:	2300      	movs	r3, #0
 80093fa:	b570      	push	{r4, r5, r6, lr}
 80093fc:	4d06      	ldr	r5, [pc, #24]	; (8009418 <_close_r+0x20>)
 80093fe:	0004      	movs	r4, r0
 8009400:	0008      	movs	r0, r1
 8009402:	602b      	str	r3, [r5, #0]
 8009404:	f7fa fdac 	bl	8003f60 <_close>
 8009408:	1c43      	adds	r3, r0, #1
 800940a:	d103      	bne.n	8009414 <_close_r+0x1c>
 800940c:	682b      	ldr	r3, [r5, #0]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d000      	beq.n	8009414 <_close_r+0x1c>
 8009412:	6023      	str	r3, [r4, #0]
 8009414:	bd70      	pop	{r4, r5, r6, pc}
 8009416:	46c0      	nop			; (mov r8, r8)
 8009418:	200014d0 	.word	0x200014d0

0800941c <_fstat_r>:
 800941c:	2300      	movs	r3, #0
 800941e:	b570      	push	{r4, r5, r6, lr}
 8009420:	4d06      	ldr	r5, [pc, #24]	; (800943c <_fstat_r+0x20>)
 8009422:	0004      	movs	r4, r0
 8009424:	0008      	movs	r0, r1
 8009426:	0011      	movs	r1, r2
 8009428:	602b      	str	r3, [r5, #0]
 800942a:	f7fa fda3 	bl	8003f74 <_fstat>
 800942e:	1c43      	adds	r3, r0, #1
 8009430:	d103      	bne.n	800943a <_fstat_r+0x1e>
 8009432:	682b      	ldr	r3, [r5, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d000      	beq.n	800943a <_fstat_r+0x1e>
 8009438:	6023      	str	r3, [r4, #0]
 800943a:	bd70      	pop	{r4, r5, r6, pc}
 800943c:	200014d0 	.word	0x200014d0

08009440 <_isatty_r>:
 8009440:	2300      	movs	r3, #0
 8009442:	b570      	push	{r4, r5, r6, lr}
 8009444:	4d06      	ldr	r5, [pc, #24]	; (8009460 <_isatty_r+0x20>)
 8009446:	0004      	movs	r4, r0
 8009448:	0008      	movs	r0, r1
 800944a:	602b      	str	r3, [r5, #0]
 800944c:	f7fa fda0 	bl	8003f90 <_isatty>
 8009450:	1c43      	adds	r3, r0, #1
 8009452:	d103      	bne.n	800945c <_isatty_r+0x1c>
 8009454:	682b      	ldr	r3, [r5, #0]
 8009456:	2b00      	cmp	r3, #0
 8009458:	d000      	beq.n	800945c <_isatty_r+0x1c>
 800945a:	6023      	str	r3, [r4, #0]
 800945c:	bd70      	pop	{r4, r5, r6, pc}
 800945e:	46c0      	nop			; (mov r8, r8)
 8009460:	200014d0 	.word	0x200014d0

08009464 <_lseek_r>:
 8009464:	b570      	push	{r4, r5, r6, lr}
 8009466:	0004      	movs	r4, r0
 8009468:	0008      	movs	r0, r1
 800946a:	0011      	movs	r1, r2
 800946c:	001a      	movs	r2, r3
 800946e:	2300      	movs	r3, #0
 8009470:	4d05      	ldr	r5, [pc, #20]	; (8009488 <_lseek_r+0x24>)
 8009472:	602b      	str	r3, [r5, #0]
 8009474:	f7fa fd95 	bl	8003fa2 <_lseek>
 8009478:	1c43      	adds	r3, r0, #1
 800947a:	d103      	bne.n	8009484 <_lseek_r+0x20>
 800947c:	682b      	ldr	r3, [r5, #0]
 800947e:	2b00      	cmp	r3, #0
 8009480:	d000      	beq.n	8009484 <_lseek_r+0x20>
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	bd70      	pop	{r4, r5, r6, pc}
 8009486:	46c0      	nop			; (mov r8, r8)
 8009488:	200014d0 	.word	0x200014d0

0800948c <_read_r>:
 800948c:	b570      	push	{r4, r5, r6, lr}
 800948e:	0004      	movs	r4, r0
 8009490:	0008      	movs	r0, r1
 8009492:	0011      	movs	r1, r2
 8009494:	001a      	movs	r2, r3
 8009496:	2300      	movs	r3, #0
 8009498:	4d05      	ldr	r5, [pc, #20]	; (80094b0 <_read_r+0x24>)
 800949a:	602b      	str	r3, [r5, #0]
 800949c:	f7fa fd27 	bl	8003eee <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d103      	bne.n	80094ac <_read_r+0x20>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d000      	beq.n	80094ac <_read_r+0x20>
 80094aa:	6023      	str	r3, [r4, #0]
 80094ac:	bd70      	pop	{r4, r5, r6, pc}
 80094ae:	46c0      	nop			; (mov r8, r8)
 80094b0:	200014d0 	.word	0x200014d0

080094b4 <log>:
 80094b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094b6:	0004      	movs	r4, r0
 80094b8:	000d      	movs	r5, r1
 80094ba:	f000 f831 	bl	8009520 <__ieee754_log>
 80094be:	0022      	movs	r2, r4
 80094c0:	0006      	movs	r6, r0
 80094c2:	000f      	movs	r7, r1
 80094c4:	002b      	movs	r3, r5
 80094c6:	0020      	movs	r0, r4
 80094c8:	0029      	movs	r1, r5
 80094ca:	f7f9 f84d 	bl	8002568 <__aeabi_dcmpun>
 80094ce:	2800      	cmp	r0, #0
 80094d0:	d115      	bne.n	80094fe <log+0x4a>
 80094d2:	2200      	movs	r2, #0
 80094d4:	2300      	movs	r3, #0
 80094d6:	0020      	movs	r0, r4
 80094d8:	0029      	movs	r1, r5
 80094da:	f7f6 ffd1 	bl	8000480 <__aeabi_dcmpgt>
 80094de:	2800      	cmp	r0, #0
 80094e0:	d10d      	bne.n	80094fe <log+0x4a>
 80094e2:	2200      	movs	r2, #0
 80094e4:	2300      	movs	r3, #0
 80094e6:	0020      	movs	r0, r4
 80094e8:	0029      	movs	r1, r5
 80094ea:	f7f6 ffaf 	bl	800044c <__aeabi_dcmpeq>
 80094ee:	2800      	cmp	r0, #0
 80094f0:	d008      	beq.n	8009504 <log+0x50>
 80094f2:	f7fc fffd 	bl	80064f0 <__errno>
 80094f6:	2322      	movs	r3, #34	; 0x22
 80094f8:	2600      	movs	r6, #0
 80094fa:	4f07      	ldr	r7, [pc, #28]	; (8009518 <log+0x64>)
 80094fc:	6003      	str	r3, [r0, #0]
 80094fe:	0030      	movs	r0, r6
 8009500:	0039      	movs	r1, r7
 8009502:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009504:	f7fc fff4 	bl	80064f0 <__errno>
 8009508:	2321      	movs	r3, #33	; 0x21
 800950a:	6003      	str	r3, [r0, #0]
 800950c:	4803      	ldr	r0, [pc, #12]	; (800951c <log+0x68>)
 800950e:	f000 f9b7 	bl	8009880 <nan>
 8009512:	0006      	movs	r6, r0
 8009514:	000f      	movs	r7, r1
 8009516:	e7f2      	b.n	80094fe <log+0x4a>
 8009518:	fff00000 	.word	0xfff00000
 800951c:	08009cd8 	.word	0x08009cd8

08009520 <__ieee754_log>:
 8009520:	2280      	movs	r2, #128	; 0x80
 8009522:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009524:	000b      	movs	r3, r1
 8009526:	b08d      	sub	sp, #52	; 0x34
 8009528:	0352      	lsls	r2, r2, #13
 800952a:	4291      	cmp	r1, r2
 800952c:	da22      	bge.n	8009574 <__ieee754_log+0x54>
 800952e:	004a      	lsls	r2, r1, #1
 8009530:	0852      	lsrs	r2, r2, #1
 8009532:	4302      	orrs	r2, r0
 8009534:	d107      	bne.n	8009546 <__ieee754_log+0x26>
 8009536:	2200      	movs	r2, #0
 8009538:	2300      	movs	r3, #0
 800953a:	2000      	movs	r0, #0
 800953c:	49b3      	ldr	r1, [pc, #716]	; (800980c <__ieee754_log+0x2ec>)
 800953e:	f7f7 fe13 	bl	8001168 <__aeabi_ddiv>
 8009542:	b00d      	add	sp, #52	; 0x34
 8009544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009546:	2900      	cmp	r1, #0
 8009548:	da05      	bge.n	8009556 <__ieee754_log+0x36>
 800954a:	0002      	movs	r2, r0
 800954c:	f7f8 fc7a 	bl	8001e44 <__aeabi_dsub>
 8009550:	2200      	movs	r2, #0
 8009552:	2300      	movs	r3, #0
 8009554:	e7f3      	b.n	800953e <__ieee754_log+0x1e>
 8009556:	4bae      	ldr	r3, [pc, #696]	; (8009810 <__ieee754_log+0x2f0>)
 8009558:	2200      	movs	r2, #0
 800955a:	f7f8 fa07 	bl	800196c <__aeabi_dmul>
 800955e:	2436      	movs	r4, #54	; 0x36
 8009560:	000b      	movs	r3, r1
 8009562:	4264      	negs	r4, r4
 8009564:	4aab      	ldr	r2, [pc, #684]	; (8009814 <__ieee754_log+0x2f4>)
 8009566:	4293      	cmp	r3, r2
 8009568:	dd06      	ble.n	8009578 <__ieee754_log+0x58>
 800956a:	0002      	movs	r2, r0
 800956c:	000b      	movs	r3, r1
 800956e:	f7f7 fabf 	bl	8000af0 <__aeabi_dadd>
 8009572:	e7e6      	b.n	8009542 <__ieee754_log+0x22>
 8009574:	2400      	movs	r4, #0
 8009576:	e7f5      	b.n	8009564 <__ieee754_log+0x44>
 8009578:	4da7      	ldr	r5, [pc, #668]	; (8009818 <__ieee754_log+0x2f8>)
 800957a:	151a      	asrs	r2, r3, #20
 800957c:	1952      	adds	r2, r2, r5
 800957e:	1912      	adds	r2, r2, r4
 8009580:	031b      	lsls	r3, r3, #12
 8009582:	4ca6      	ldr	r4, [pc, #664]	; (800981c <__ieee754_log+0x2fc>)
 8009584:	0b1b      	lsrs	r3, r3, #12
 8009586:	9302      	str	r3, [sp, #8]
 8009588:	191c      	adds	r4, r3, r4
 800958a:	2380      	movs	r3, #128	; 0x80
 800958c:	035b      	lsls	r3, r3, #13
 800958e:	4023      	ands	r3, r4
 8009590:	4ca3      	ldr	r4, [pc, #652]	; (8009820 <__ieee754_log+0x300>)
 8009592:	9d02      	ldr	r5, [sp, #8]
 8009594:	405c      	eors	r4, r3
 8009596:	151b      	asrs	r3, r3, #20
 8009598:	189b      	adds	r3, r3, r2
 800959a:	4325      	orrs	r5, r4
 800959c:	2200      	movs	r2, #0
 800959e:	9300      	str	r3, [sp, #0]
 80095a0:	0029      	movs	r1, r5
 80095a2:	4b9f      	ldr	r3, [pc, #636]	; (8009820 <__ieee754_log+0x300>)
 80095a4:	f7f8 fc4e 	bl	8001e44 <__aeabi_dsub>
 80095a8:	9b02      	ldr	r3, [sp, #8]
 80095aa:	0006      	movs	r6, r0
 80095ac:	3302      	adds	r3, #2
 80095ae:	031b      	lsls	r3, r3, #12
 80095b0:	000f      	movs	r7, r1
 80095b2:	2200      	movs	r2, #0
 80095b4:	0b1b      	lsrs	r3, r3, #12
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	dc64      	bgt.n	8009684 <__ieee754_log+0x164>
 80095ba:	2300      	movs	r3, #0
 80095bc:	f7f6 ff46 	bl	800044c <__aeabi_dcmpeq>
 80095c0:	2800      	cmp	r0, #0
 80095c2:	d019      	beq.n	80095f8 <__ieee754_log+0xd8>
 80095c4:	9b00      	ldr	r3, [sp, #0]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	d100      	bne.n	80095cc <__ieee754_log+0xac>
 80095ca:	e11c      	b.n	8009806 <__ieee754_log+0x2e6>
 80095cc:	0018      	movs	r0, r3
 80095ce:	f7f9 f81f 	bl	8002610 <__aeabi_i2d>
 80095d2:	4a94      	ldr	r2, [pc, #592]	; (8009824 <__ieee754_log+0x304>)
 80095d4:	4b94      	ldr	r3, [pc, #592]	; (8009828 <__ieee754_log+0x308>)
 80095d6:	0004      	movs	r4, r0
 80095d8:	000d      	movs	r5, r1
 80095da:	f7f8 f9c7 	bl	800196c <__aeabi_dmul>
 80095de:	4a93      	ldr	r2, [pc, #588]	; (800982c <__ieee754_log+0x30c>)
 80095e0:	0006      	movs	r6, r0
 80095e2:	000f      	movs	r7, r1
 80095e4:	4b92      	ldr	r3, [pc, #584]	; (8009830 <__ieee754_log+0x310>)
 80095e6:	0020      	movs	r0, r4
 80095e8:	0029      	movs	r1, r5
 80095ea:	f7f8 f9bf 	bl	800196c <__aeabi_dmul>
 80095ee:	0002      	movs	r2, r0
 80095f0:	000b      	movs	r3, r1
 80095f2:	0030      	movs	r0, r6
 80095f4:	0039      	movs	r1, r7
 80095f6:	e7ba      	b.n	800956e <__ieee754_log+0x4e>
 80095f8:	4a8e      	ldr	r2, [pc, #568]	; (8009834 <__ieee754_log+0x314>)
 80095fa:	4b8f      	ldr	r3, [pc, #572]	; (8009838 <__ieee754_log+0x318>)
 80095fc:	0030      	movs	r0, r6
 80095fe:	0039      	movs	r1, r7
 8009600:	f7f8 f9b4 	bl	800196c <__aeabi_dmul>
 8009604:	0002      	movs	r2, r0
 8009606:	000b      	movs	r3, r1
 8009608:	2000      	movs	r0, #0
 800960a:	498c      	ldr	r1, [pc, #560]	; (800983c <__ieee754_log+0x31c>)
 800960c:	f7f8 fc1a 	bl	8001e44 <__aeabi_dsub>
 8009610:	0032      	movs	r2, r6
 8009612:	0004      	movs	r4, r0
 8009614:	000d      	movs	r5, r1
 8009616:	003b      	movs	r3, r7
 8009618:	0030      	movs	r0, r6
 800961a:	0039      	movs	r1, r7
 800961c:	f7f8 f9a6 	bl	800196c <__aeabi_dmul>
 8009620:	000b      	movs	r3, r1
 8009622:	0002      	movs	r2, r0
 8009624:	0029      	movs	r1, r5
 8009626:	0020      	movs	r0, r4
 8009628:	f7f8 f9a0 	bl	800196c <__aeabi_dmul>
 800962c:	9b00      	ldr	r3, [sp, #0]
 800962e:	9002      	str	r0, [sp, #8]
 8009630:	9103      	str	r1, [sp, #12]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d106      	bne.n	8009644 <__ieee754_log+0x124>
 8009636:	0002      	movs	r2, r0
 8009638:	000b      	movs	r3, r1
 800963a:	0030      	movs	r0, r6
 800963c:	0039      	movs	r1, r7
 800963e:	f7f8 fc01 	bl	8001e44 <__aeabi_dsub>
 8009642:	e77e      	b.n	8009542 <__ieee754_log+0x22>
 8009644:	9800      	ldr	r0, [sp, #0]
 8009646:	f7f8 ffe3 	bl	8002610 <__aeabi_i2d>
 800964a:	4a76      	ldr	r2, [pc, #472]	; (8009824 <__ieee754_log+0x304>)
 800964c:	4b76      	ldr	r3, [pc, #472]	; (8009828 <__ieee754_log+0x308>)
 800964e:	0004      	movs	r4, r0
 8009650:	000d      	movs	r5, r1
 8009652:	f7f8 f98b 	bl	800196c <__aeabi_dmul>
 8009656:	4a75      	ldr	r2, [pc, #468]	; (800982c <__ieee754_log+0x30c>)
 8009658:	9000      	str	r0, [sp, #0]
 800965a:	9101      	str	r1, [sp, #4]
 800965c:	4b74      	ldr	r3, [pc, #464]	; (8009830 <__ieee754_log+0x310>)
 800965e:	0020      	movs	r0, r4
 8009660:	0029      	movs	r1, r5
 8009662:	f7f8 f983 	bl	800196c <__aeabi_dmul>
 8009666:	0002      	movs	r2, r0
 8009668:	000b      	movs	r3, r1
 800966a:	9802      	ldr	r0, [sp, #8]
 800966c:	9903      	ldr	r1, [sp, #12]
 800966e:	f7f8 fbe9 	bl	8001e44 <__aeabi_dsub>
 8009672:	0032      	movs	r2, r6
 8009674:	003b      	movs	r3, r7
 8009676:	f7f8 fbe5 	bl	8001e44 <__aeabi_dsub>
 800967a:	0002      	movs	r2, r0
 800967c:	000b      	movs	r3, r1
 800967e:	9800      	ldr	r0, [sp, #0]
 8009680:	9901      	ldr	r1, [sp, #4]
 8009682:	e7dc      	b.n	800963e <__ieee754_log+0x11e>
 8009684:	2380      	movs	r3, #128	; 0x80
 8009686:	05db      	lsls	r3, r3, #23
 8009688:	f7f7 fa32 	bl	8000af0 <__aeabi_dadd>
 800968c:	0002      	movs	r2, r0
 800968e:	000b      	movs	r3, r1
 8009690:	0030      	movs	r0, r6
 8009692:	0039      	movs	r1, r7
 8009694:	f7f7 fd68 	bl	8001168 <__aeabi_ddiv>
 8009698:	9004      	str	r0, [sp, #16]
 800969a:	9105      	str	r1, [sp, #20]
 800969c:	9800      	ldr	r0, [sp, #0]
 800969e:	f7f8 ffb7 	bl	8002610 <__aeabi_i2d>
 80096a2:	9a04      	ldr	r2, [sp, #16]
 80096a4:	9b05      	ldr	r3, [sp, #20]
 80096a6:	9006      	str	r0, [sp, #24]
 80096a8:	9107      	str	r1, [sp, #28]
 80096aa:	0010      	movs	r0, r2
 80096ac:	0019      	movs	r1, r3
 80096ae:	f7f8 f95d 	bl	800196c <__aeabi_dmul>
 80096b2:	4a63      	ldr	r2, [pc, #396]	; (8009840 <__ieee754_log+0x320>)
 80096b4:	9b02      	ldr	r3, [sp, #8]
 80096b6:	4694      	mov	ip, r2
 80096b8:	4463      	add	r3, ip
 80096ba:	0002      	movs	r2, r0
 80096bc:	930b      	str	r3, [sp, #44]	; 0x2c
 80096be:	000b      	movs	r3, r1
 80096c0:	9008      	str	r0, [sp, #32]
 80096c2:	9109      	str	r1, [sp, #36]	; 0x24
 80096c4:	f7f8 f952 	bl	800196c <__aeabi_dmul>
 80096c8:	0004      	movs	r4, r0
 80096ca:	000d      	movs	r5, r1
 80096cc:	4a5d      	ldr	r2, [pc, #372]	; (8009844 <__ieee754_log+0x324>)
 80096ce:	4b5e      	ldr	r3, [pc, #376]	; (8009848 <__ieee754_log+0x328>)
 80096d0:	f7f8 f94c 	bl	800196c <__aeabi_dmul>
 80096d4:	4a5d      	ldr	r2, [pc, #372]	; (800984c <__ieee754_log+0x32c>)
 80096d6:	4b5e      	ldr	r3, [pc, #376]	; (8009850 <__ieee754_log+0x330>)
 80096d8:	f7f7 fa0a 	bl	8000af0 <__aeabi_dadd>
 80096dc:	0022      	movs	r2, r4
 80096de:	002b      	movs	r3, r5
 80096e0:	f7f8 f944 	bl	800196c <__aeabi_dmul>
 80096e4:	4a5b      	ldr	r2, [pc, #364]	; (8009854 <__ieee754_log+0x334>)
 80096e6:	4b5c      	ldr	r3, [pc, #368]	; (8009858 <__ieee754_log+0x338>)
 80096e8:	f7f7 fa02 	bl	8000af0 <__aeabi_dadd>
 80096ec:	0022      	movs	r2, r4
 80096ee:	002b      	movs	r3, r5
 80096f0:	f7f8 f93c 	bl	800196c <__aeabi_dmul>
 80096f4:	4a59      	ldr	r2, [pc, #356]	; (800985c <__ieee754_log+0x33c>)
 80096f6:	4b5a      	ldr	r3, [pc, #360]	; (8009860 <__ieee754_log+0x340>)
 80096f8:	f7f7 f9fa 	bl	8000af0 <__aeabi_dadd>
 80096fc:	9a08      	ldr	r2, [sp, #32]
 80096fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009700:	f7f8 f934 	bl	800196c <__aeabi_dmul>
 8009704:	4a57      	ldr	r2, [pc, #348]	; (8009864 <__ieee754_log+0x344>)
 8009706:	9008      	str	r0, [sp, #32]
 8009708:	9109      	str	r1, [sp, #36]	; 0x24
 800970a:	4b57      	ldr	r3, [pc, #348]	; (8009868 <__ieee754_log+0x348>)
 800970c:	0020      	movs	r0, r4
 800970e:	0029      	movs	r1, r5
 8009710:	f7f8 f92c 	bl	800196c <__aeabi_dmul>
 8009714:	4a55      	ldr	r2, [pc, #340]	; (800986c <__ieee754_log+0x34c>)
 8009716:	4b56      	ldr	r3, [pc, #344]	; (8009870 <__ieee754_log+0x350>)
 8009718:	f7f7 f9ea 	bl	8000af0 <__aeabi_dadd>
 800971c:	0022      	movs	r2, r4
 800971e:	002b      	movs	r3, r5
 8009720:	f7f8 f924 	bl	800196c <__aeabi_dmul>
 8009724:	4a53      	ldr	r2, [pc, #332]	; (8009874 <__ieee754_log+0x354>)
 8009726:	4b54      	ldr	r3, [pc, #336]	; (8009878 <__ieee754_log+0x358>)
 8009728:	f7f7 f9e2 	bl	8000af0 <__aeabi_dadd>
 800972c:	0022      	movs	r2, r4
 800972e:	002b      	movs	r3, r5
 8009730:	f7f8 f91c 	bl	800196c <__aeabi_dmul>
 8009734:	0002      	movs	r2, r0
 8009736:	000b      	movs	r3, r1
 8009738:	9808      	ldr	r0, [sp, #32]
 800973a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800973c:	f7f7 f9d8 	bl	8000af0 <__aeabi_dadd>
 8009740:	9a02      	ldr	r2, [sp, #8]
 8009742:	4b4e      	ldr	r3, [pc, #312]	; (800987c <__ieee754_log+0x35c>)
 8009744:	0004      	movs	r4, r0
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800974a:	000d      	movs	r5, r1
 800974c:	4313      	orrs	r3, r2
 800974e:	2b00      	cmp	r3, #0
 8009750:	dd34      	ble.n	80097bc <__ieee754_log+0x29c>
 8009752:	2200      	movs	r2, #0
 8009754:	4b39      	ldr	r3, [pc, #228]	; (800983c <__ieee754_log+0x31c>)
 8009756:	0030      	movs	r0, r6
 8009758:	0039      	movs	r1, r7
 800975a:	f7f8 f907 	bl	800196c <__aeabi_dmul>
 800975e:	0032      	movs	r2, r6
 8009760:	003b      	movs	r3, r7
 8009762:	f7f8 f903 	bl	800196c <__aeabi_dmul>
 8009766:	0002      	movs	r2, r0
 8009768:	000b      	movs	r3, r1
 800976a:	9002      	str	r0, [sp, #8]
 800976c:	9103      	str	r1, [sp, #12]
 800976e:	0020      	movs	r0, r4
 8009770:	0029      	movs	r1, r5
 8009772:	f7f7 f9bd 	bl	8000af0 <__aeabi_dadd>
 8009776:	9a04      	ldr	r2, [sp, #16]
 8009778:	9b05      	ldr	r3, [sp, #20]
 800977a:	f7f8 f8f7 	bl	800196c <__aeabi_dmul>
 800977e:	9b00      	ldr	r3, [sp, #0]
 8009780:	0004      	movs	r4, r0
 8009782:	000d      	movs	r5, r1
 8009784:	2b00      	cmp	r3, #0
 8009786:	d106      	bne.n	8009796 <__ieee754_log+0x276>
 8009788:	0002      	movs	r2, r0
 800978a:	000b      	movs	r3, r1
 800978c:	9802      	ldr	r0, [sp, #8]
 800978e:	9903      	ldr	r1, [sp, #12]
 8009790:	f7f8 fb58 	bl	8001e44 <__aeabi_dsub>
 8009794:	e74f      	b.n	8009636 <__ieee754_log+0x116>
 8009796:	4a23      	ldr	r2, [pc, #140]	; (8009824 <__ieee754_log+0x304>)
 8009798:	4b23      	ldr	r3, [pc, #140]	; (8009828 <__ieee754_log+0x308>)
 800979a:	9806      	ldr	r0, [sp, #24]
 800979c:	9907      	ldr	r1, [sp, #28]
 800979e:	f7f8 f8e5 	bl	800196c <__aeabi_dmul>
 80097a2:	4a22      	ldr	r2, [pc, #136]	; (800982c <__ieee754_log+0x30c>)
 80097a4:	9000      	str	r0, [sp, #0]
 80097a6:	9101      	str	r1, [sp, #4]
 80097a8:	9806      	ldr	r0, [sp, #24]
 80097aa:	9907      	ldr	r1, [sp, #28]
 80097ac:	4b20      	ldr	r3, [pc, #128]	; (8009830 <__ieee754_log+0x310>)
 80097ae:	f7f8 f8dd 	bl	800196c <__aeabi_dmul>
 80097b2:	0022      	movs	r2, r4
 80097b4:	002b      	movs	r3, r5
 80097b6:	f7f7 f99b 	bl	8000af0 <__aeabi_dadd>
 80097ba:	e754      	b.n	8009666 <__ieee754_log+0x146>
 80097bc:	0002      	movs	r2, r0
 80097be:	000b      	movs	r3, r1
 80097c0:	0030      	movs	r0, r6
 80097c2:	0039      	movs	r1, r7
 80097c4:	f7f8 fb3e 	bl	8001e44 <__aeabi_dsub>
 80097c8:	9a04      	ldr	r2, [sp, #16]
 80097ca:	9b05      	ldr	r3, [sp, #20]
 80097cc:	f7f8 f8ce 	bl	800196c <__aeabi_dmul>
 80097d0:	9b00      	ldr	r3, [sp, #0]
 80097d2:	0004      	movs	r4, r0
 80097d4:	000d      	movs	r5, r1
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d102      	bne.n	80097e0 <__ieee754_log+0x2c0>
 80097da:	0002      	movs	r2, r0
 80097dc:	000b      	movs	r3, r1
 80097de:	e72c      	b.n	800963a <__ieee754_log+0x11a>
 80097e0:	4a10      	ldr	r2, [pc, #64]	; (8009824 <__ieee754_log+0x304>)
 80097e2:	4b11      	ldr	r3, [pc, #68]	; (8009828 <__ieee754_log+0x308>)
 80097e4:	9806      	ldr	r0, [sp, #24]
 80097e6:	9907      	ldr	r1, [sp, #28]
 80097e8:	f7f8 f8c0 	bl	800196c <__aeabi_dmul>
 80097ec:	4a0f      	ldr	r2, [pc, #60]	; (800982c <__ieee754_log+0x30c>)
 80097ee:	9000      	str	r0, [sp, #0]
 80097f0:	9101      	str	r1, [sp, #4]
 80097f2:	9806      	ldr	r0, [sp, #24]
 80097f4:	9907      	ldr	r1, [sp, #28]
 80097f6:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <__ieee754_log+0x310>)
 80097f8:	f7f8 f8b8 	bl	800196c <__aeabi_dmul>
 80097fc:	0002      	movs	r2, r0
 80097fe:	000b      	movs	r3, r1
 8009800:	0020      	movs	r0, r4
 8009802:	0029      	movs	r1, r5
 8009804:	e733      	b.n	800966e <__ieee754_log+0x14e>
 8009806:	2000      	movs	r0, #0
 8009808:	2100      	movs	r1, #0
 800980a:	e69a      	b.n	8009542 <__ieee754_log+0x22>
 800980c:	c3500000 	.word	0xc3500000
 8009810:	43500000 	.word	0x43500000
 8009814:	7fefffff 	.word	0x7fefffff
 8009818:	fffffc01 	.word	0xfffffc01
 800981c:	00095f64 	.word	0x00095f64
 8009820:	3ff00000 	.word	0x3ff00000
 8009824:	fee00000 	.word	0xfee00000
 8009828:	3fe62e42 	.word	0x3fe62e42
 800982c:	35793c76 	.word	0x35793c76
 8009830:	3dea39ef 	.word	0x3dea39ef
 8009834:	55555555 	.word	0x55555555
 8009838:	3fd55555 	.word	0x3fd55555
 800983c:	3fe00000 	.word	0x3fe00000
 8009840:	fff9eb86 	.word	0xfff9eb86
 8009844:	df3e5244 	.word	0xdf3e5244
 8009848:	3fc2f112 	.word	0x3fc2f112
 800984c:	96cb03de 	.word	0x96cb03de
 8009850:	3fc74664 	.word	0x3fc74664
 8009854:	94229359 	.word	0x94229359
 8009858:	3fd24924 	.word	0x3fd24924
 800985c:	55555593 	.word	0x55555593
 8009860:	3fe55555 	.word	0x3fe55555
 8009864:	d078c69f 	.word	0xd078c69f
 8009868:	3fc39a09 	.word	0x3fc39a09
 800986c:	1d8e78af 	.word	0x1d8e78af
 8009870:	3fcc71c5 	.word	0x3fcc71c5
 8009874:	9997fa04 	.word	0x9997fa04
 8009878:	3fd99999 	.word	0x3fd99999
 800987c:	0006b851 	.word	0x0006b851

08009880 <nan>:
 8009880:	2000      	movs	r0, #0
 8009882:	4901      	ldr	r1, [pc, #4]	; (8009888 <nan+0x8>)
 8009884:	4770      	bx	lr
 8009886:	46c0      	nop			; (mov r8, r8)
 8009888:	7ff80000 	.word	0x7ff80000

0800988c <_init>:
 800988c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800988e:	46c0      	nop			; (mov r8, r8)
 8009890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009892:	bc08      	pop	{r3}
 8009894:	469e      	mov	lr, r3
 8009896:	4770      	bx	lr

08009898 <_fini>:
 8009898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800989a:	46c0      	nop			; (mov r8, r8)
 800989c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800989e:	bc08      	pop	{r3}
 80098a0:	469e      	mov	lr, r3
 80098a2:	4770      	bx	lr
