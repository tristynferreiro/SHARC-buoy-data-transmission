
ICM20948.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045f4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080046b4  080046b4  000146b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004728  08004728  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004728  08004728  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004728  08004728  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004728  08004728  00014728  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800472c  0800472c  0001472c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004730  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000144  20000070  080047a0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001b4  080047a0  000201b4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009829  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000154c  00000000  00000000  000298c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000868  00000000  00000000  0002ae10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007e0  00000000  00000000  0002b678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001212d  00000000  00000000  0002be58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a2ff  00000000  00000000  0003df85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006be0e  00000000  00000000  00048284  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b4092  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002208  00000000  00000000  000b40e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800469c 	.word	0x0800469c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	0800469c 	.word	0x0800469c

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f8f0 	bl	8000404 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__divsi3>:
 8000230:	4603      	mov	r3, r0
 8000232:	430b      	orrs	r3, r1
 8000234:	d47f      	bmi.n	8000336 <__divsi3+0x106>
 8000236:	2200      	movs	r2, #0
 8000238:	0843      	lsrs	r3, r0, #1
 800023a:	428b      	cmp	r3, r1
 800023c:	d374      	bcc.n	8000328 <__divsi3+0xf8>
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d35f      	bcc.n	8000304 <__divsi3+0xd4>
 8000244:	0a03      	lsrs	r3, r0, #8
 8000246:	428b      	cmp	r3, r1
 8000248:	d344      	bcc.n	80002d4 <__divsi3+0xa4>
 800024a:	0b03      	lsrs	r3, r0, #12
 800024c:	428b      	cmp	r3, r1
 800024e:	d328      	bcc.n	80002a2 <__divsi3+0x72>
 8000250:	0c03      	lsrs	r3, r0, #16
 8000252:	428b      	cmp	r3, r1
 8000254:	d30d      	bcc.n	8000272 <__divsi3+0x42>
 8000256:	22ff      	movs	r2, #255	; 0xff
 8000258:	0209      	lsls	r1, r1, #8
 800025a:	ba12      	rev	r2, r2
 800025c:	0c03      	lsrs	r3, r0, #16
 800025e:	428b      	cmp	r3, r1
 8000260:	d302      	bcc.n	8000268 <__divsi3+0x38>
 8000262:	1212      	asrs	r2, r2, #8
 8000264:	0209      	lsls	r1, r1, #8
 8000266:	d065      	beq.n	8000334 <__divsi3+0x104>
 8000268:	0b03      	lsrs	r3, r0, #12
 800026a:	428b      	cmp	r3, r1
 800026c:	d319      	bcc.n	80002a2 <__divsi3+0x72>
 800026e:	e000      	b.n	8000272 <__divsi3+0x42>
 8000270:	0a09      	lsrs	r1, r1, #8
 8000272:	0bc3      	lsrs	r3, r0, #15
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x4c>
 8000278:	03cb      	lsls	r3, r1, #15
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b83      	lsrs	r3, r0, #14
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x58>
 8000284:	038b      	lsls	r3, r1, #14
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0b43      	lsrs	r3, r0, #13
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x64>
 8000290:	034b      	lsls	r3, r1, #13
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0b03      	lsrs	r3, r0, #12
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x70>
 800029c:	030b      	lsls	r3, r1, #12
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0ac3      	lsrs	r3, r0, #11
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x7c>
 80002a8:	02cb      	lsls	r3, r1, #11
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a83      	lsrs	r3, r0, #10
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x88>
 80002b4:	028b      	lsls	r3, r1, #10
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0a43      	lsrs	r3, r0, #9
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x94>
 80002c0:	024b      	lsls	r3, r1, #9
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0a03      	lsrs	r3, r0, #8
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0xa0>
 80002cc:	020b      	lsls	r3, r1, #8
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	d2cd      	bcs.n	8000270 <__divsi3+0x40>
 80002d4:	09c3      	lsrs	r3, r0, #7
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xae>
 80002da:	01cb      	lsls	r3, r1, #7
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0983      	lsrs	r3, r0, #6
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xba>
 80002e6:	018b      	lsls	r3, r1, #6
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	0943      	lsrs	r3, r0, #5
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xc6>
 80002f2:	014b      	lsls	r3, r1, #5
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0903      	lsrs	r3, r0, #4
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xd2>
 80002fe:	010b      	lsls	r3, r1, #4
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	08c3      	lsrs	r3, r0, #3
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xde>
 800030a:	00cb      	lsls	r3, r1, #3
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0883      	lsrs	r3, r0, #2
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xea>
 8000316:	008b      	lsls	r3, r1, #2
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0843      	lsrs	r3, r0, #1
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xf6>
 8000322:	004b      	lsls	r3, r1, #1
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	1a41      	subs	r1, r0, r1
 800032a:	d200      	bcs.n	800032e <__divsi3+0xfe>
 800032c:	4601      	mov	r1, r0
 800032e:	4152      	adcs	r2, r2
 8000330:	4610      	mov	r0, r2
 8000332:	4770      	bx	lr
 8000334:	e05d      	b.n	80003f2 <__divsi3+0x1c2>
 8000336:	0fca      	lsrs	r2, r1, #31
 8000338:	d000      	beq.n	800033c <__divsi3+0x10c>
 800033a:	4249      	negs	r1, r1
 800033c:	1003      	asrs	r3, r0, #32
 800033e:	d300      	bcc.n	8000342 <__divsi3+0x112>
 8000340:	4240      	negs	r0, r0
 8000342:	4053      	eors	r3, r2
 8000344:	2200      	movs	r2, #0
 8000346:	469c      	mov	ip, r3
 8000348:	0903      	lsrs	r3, r0, #4
 800034a:	428b      	cmp	r3, r1
 800034c:	d32d      	bcc.n	80003aa <__divsi3+0x17a>
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d312      	bcc.n	800037a <__divsi3+0x14a>
 8000354:	22fc      	movs	r2, #252	; 0xfc
 8000356:	0189      	lsls	r1, r1, #6
 8000358:	ba12      	rev	r2, r2
 800035a:	0a03      	lsrs	r3, r0, #8
 800035c:	428b      	cmp	r3, r1
 800035e:	d30c      	bcc.n	800037a <__divsi3+0x14a>
 8000360:	0189      	lsls	r1, r1, #6
 8000362:	1192      	asrs	r2, r2, #6
 8000364:	428b      	cmp	r3, r1
 8000366:	d308      	bcc.n	800037a <__divsi3+0x14a>
 8000368:	0189      	lsls	r1, r1, #6
 800036a:	1192      	asrs	r2, r2, #6
 800036c:	428b      	cmp	r3, r1
 800036e:	d304      	bcc.n	800037a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	d03a      	beq.n	80003ea <__divsi3+0x1ba>
 8000374:	1192      	asrs	r2, r2, #6
 8000376:	e000      	b.n	800037a <__divsi3+0x14a>
 8000378:	0989      	lsrs	r1, r1, #6
 800037a:	09c3      	lsrs	r3, r0, #7
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x154>
 8000380:	01cb      	lsls	r3, r1, #7
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0983      	lsrs	r3, r0, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x160>
 800038c:	018b      	lsls	r3, r1, #6
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	0943      	lsrs	r3, r0, #5
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x16c>
 8000398:	014b      	lsls	r3, r1, #5
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0903      	lsrs	r3, r0, #4
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x178>
 80003a4:	010b      	lsls	r3, r1, #4
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	08c3      	lsrs	r3, r0, #3
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x184>
 80003b0:	00cb      	lsls	r3, r1, #3
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0883      	lsrs	r3, r0, #2
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x190>
 80003bc:	008b      	lsls	r3, r1, #2
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	d2d9      	bcs.n	8000378 <__divsi3+0x148>
 80003c4:	0843      	lsrs	r3, r0, #1
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d301      	bcc.n	80003ce <__divsi3+0x19e>
 80003ca:	004b      	lsls	r3, r1, #1
 80003cc:	1ac0      	subs	r0, r0, r3
 80003ce:	4152      	adcs	r2, r2
 80003d0:	1a41      	subs	r1, r0, r1
 80003d2:	d200      	bcs.n	80003d6 <__divsi3+0x1a6>
 80003d4:	4601      	mov	r1, r0
 80003d6:	4663      	mov	r3, ip
 80003d8:	4152      	adcs	r2, r2
 80003da:	105b      	asrs	r3, r3, #1
 80003dc:	4610      	mov	r0, r2
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x1b4>
 80003e0:	4240      	negs	r0, r0
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	d500      	bpl.n	80003e8 <__divsi3+0x1b8>
 80003e6:	4249      	negs	r1, r1
 80003e8:	4770      	bx	lr
 80003ea:	4663      	mov	r3, ip
 80003ec:	105b      	asrs	r3, r3, #1
 80003ee:	d300      	bcc.n	80003f2 <__divsi3+0x1c2>
 80003f0:	4240      	negs	r0, r0
 80003f2:	b501      	push	{r0, lr}
 80003f4:	2000      	movs	r0, #0
 80003f6:	f000 f805 	bl	8000404 <__aeabi_idiv0>
 80003fa:	bd02      	pop	{r1, pc}

080003fc <__aeabi_idivmod>:
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d0f8      	beq.n	80003f2 <__divsi3+0x1c2>
 8000400:	e716      	b.n	8000230 <__divsi3>
 8000402:	4770      	bx	lr

08000404 <__aeabi_idiv0>:
 8000404:	4770      	bx	lr
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_fadd>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	46c6      	mov	lr, r8
 800040c:	0243      	lsls	r3, r0, #9
 800040e:	0a5b      	lsrs	r3, r3, #9
 8000410:	024e      	lsls	r6, r1, #9
 8000412:	0045      	lsls	r5, r0, #1
 8000414:	004f      	lsls	r7, r1, #1
 8000416:	00da      	lsls	r2, r3, #3
 8000418:	0fc4      	lsrs	r4, r0, #31
 800041a:	469c      	mov	ip, r3
 800041c:	0a70      	lsrs	r0, r6, #9
 800041e:	4690      	mov	r8, r2
 8000420:	b500      	push	{lr}
 8000422:	0e2d      	lsrs	r5, r5, #24
 8000424:	0e3f      	lsrs	r7, r7, #24
 8000426:	0fc9      	lsrs	r1, r1, #31
 8000428:	09b6      	lsrs	r6, r6, #6
 800042a:	428c      	cmp	r4, r1
 800042c:	d04b      	beq.n	80004c6 <__aeabi_fadd+0xbe>
 800042e:	1bea      	subs	r2, r5, r7
 8000430:	2a00      	cmp	r2, #0
 8000432:	dd36      	ble.n	80004a2 <__aeabi_fadd+0x9a>
 8000434:	2f00      	cmp	r7, #0
 8000436:	d061      	beq.n	80004fc <__aeabi_fadd+0xf4>
 8000438:	2dff      	cmp	r5, #255	; 0xff
 800043a:	d100      	bne.n	800043e <__aeabi_fadd+0x36>
 800043c:	e0ad      	b.n	800059a <__aeabi_fadd+0x192>
 800043e:	2380      	movs	r3, #128	; 0x80
 8000440:	04db      	lsls	r3, r3, #19
 8000442:	431e      	orrs	r6, r3
 8000444:	2a1b      	cmp	r2, #27
 8000446:	dc00      	bgt.n	800044a <__aeabi_fadd+0x42>
 8000448:	e0d3      	b.n	80005f2 <__aeabi_fadd+0x1ea>
 800044a:	2001      	movs	r0, #1
 800044c:	4643      	mov	r3, r8
 800044e:	1a18      	subs	r0, r3, r0
 8000450:	0143      	lsls	r3, r0, #5
 8000452:	d400      	bmi.n	8000456 <__aeabi_fadd+0x4e>
 8000454:	e08c      	b.n	8000570 <__aeabi_fadd+0x168>
 8000456:	0180      	lsls	r0, r0, #6
 8000458:	0987      	lsrs	r7, r0, #6
 800045a:	0038      	movs	r0, r7
 800045c:	f000 fa28 	bl	80008b0 <__clzsi2>
 8000460:	3805      	subs	r0, #5
 8000462:	4087      	lsls	r7, r0
 8000464:	4285      	cmp	r5, r0
 8000466:	dc00      	bgt.n	800046a <__aeabi_fadd+0x62>
 8000468:	e0b6      	b.n	80005d8 <__aeabi_fadd+0x1d0>
 800046a:	1a2d      	subs	r5, r5, r0
 800046c:	48b3      	ldr	r0, [pc, #716]	; (800073c <__aeabi_fadd+0x334>)
 800046e:	4038      	ands	r0, r7
 8000470:	0743      	lsls	r3, r0, #29
 8000472:	d004      	beq.n	800047e <__aeabi_fadd+0x76>
 8000474:	230f      	movs	r3, #15
 8000476:	4003      	ands	r3, r0
 8000478:	2b04      	cmp	r3, #4
 800047a:	d000      	beq.n	800047e <__aeabi_fadd+0x76>
 800047c:	3004      	adds	r0, #4
 800047e:	0143      	lsls	r3, r0, #5
 8000480:	d400      	bmi.n	8000484 <__aeabi_fadd+0x7c>
 8000482:	e078      	b.n	8000576 <__aeabi_fadd+0x16e>
 8000484:	1c6a      	adds	r2, r5, #1
 8000486:	2dfe      	cmp	r5, #254	; 0xfe
 8000488:	d065      	beq.n	8000556 <__aeabi_fadd+0x14e>
 800048a:	0180      	lsls	r0, r0, #6
 800048c:	0a43      	lsrs	r3, r0, #9
 800048e:	469c      	mov	ip, r3
 8000490:	b2d2      	uxtb	r2, r2
 8000492:	4663      	mov	r3, ip
 8000494:	05d0      	lsls	r0, r2, #23
 8000496:	4318      	orrs	r0, r3
 8000498:	07e4      	lsls	r4, r4, #31
 800049a:	4320      	orrs	r0, r4
 800049c:	bc80      	pop	{r7}
 800049e:	46b8      	mov	r8, r7
 80004a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a2:	2a00      	cmp	r2, #0
 80004a4:	d035      	beq.n	8000512 <__aeabi_fadd+0x10a>
 80004a6:	1b7a      	subs	r2, r7, r5
 80004a8:	2d00      	cmp	r5, #0
 80004aa:	d000      	beq.n	80004ae <__aeabi_fadd+0xa6>
 80004ac:	e0af      	b.n	800060e <__aeabi_fadd+0x206>
 80004ae:	4643      	mov	r3, r8
 80004b0:	2b00      	cmp	r3, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_fadd+0xae>
 80004b4:	e0a7      	b.n	8000606 <__aeabi_fadd+0x1fe>
 80004b6:	1e53      	subs	r3, r2, #1
 80004b8:	2a01      	cmp	r2, #1
 80004ba:	d100      	bne.n	80004be <__aeabi_fadd+0xb6>
 80004bc:	e12f      	b.n	800071e <__aeabi_fadd+0x316>
 80004be:	2aff      	cmp	r2, #255	; 0xff
 80004c0:	d069      	beq.n	8000596 <__aeabi_fadd+0x18e>
 80004c2:	001a      	movs	r2, r3
 80004c4:	e0aa      	b.n	800061c <__aeabi_fadd+0x214>
 80004c6:	1be9      	subs	r1, r5, r7
 80004c8:	2900      	cmp	r1, #0
 80004ca:	dd70      	ble.n	80005ae <__aeabi_fadd+0x1a6>
 80004cc:	2f00      	cmp	r7, #0
 80004ce:	d037      	beq.n	8000540 <__aeabi_fadd+0x138>
 80004d0:	2dff      	cmp	r5, #255	; 0xff
 80004d2:	d062      	beq.n	800059a <__aeabi_fadd+0x192>
 80004d4:	2380      	movs	r3, #128	; 0x80
 80004d6:	04db      	lsls	r3, r3, #19
 80004d8:	431e      	orrs	r6, r3
 80004da:	291b      	cmp	r1, #27
 80004dc:	dc00      	bgt.n	80004e0 <__aeabi_fadd+0xd8>
 80004de:	e0b0      	b.n	8000642 <__aeabi_fadd+0x23a>
 80004e0:	2001      	movs	r0, #1
 80004e2:	4440      	add	r0, r8
 80004e4:	0143      	lsls	r3, r0, #5
 80004e6:	d543      	bpl.n	8000570 <__aeabi_fadd+0x168>
 80004e8:	3501      	adds	r5, #1
 80004ea:	2dff      	cmp	r5, #255	; 0xff
 80004ec:	d033      	beq.n	8000556 <__aeabi_fadd+0x14e>
 80004ee:	2301      	movs	r3, #1
 80004f0:	4a93      	ldr	r2, [pc, #588]	; (8000740 <__aeabi_fadd+0x338>)
 80004f2:	4003      	ands	r3, r0
 80004f4:	0840      	lsrs	r0, r0, #1
 80004f6:	4010      	ands	r0, r2
 80004f8:	4318      	orrs	r0, r3
 80004fa:	e7b9      	b.n	8000470 <__aeabi_fadd+0x68>
 80004fc:	2e00      	cmp	r6, #0
 80004fe:	d100      	bne.n	8000502 <__aeabi_fadd+0xfa>
 8000500:	e083      	b.n	800060a <__aeabi_fadd+0x202>
 8000502:	1e51      	subs	r1, r2, #1
 8000504:	2a01      	cmp	r2, #1
 8000506:	d100      	bne.n	800050a <__aeabi_fadd+0x102>
 8000508:	e0d8      	b.n	80006bc <__aeabi_fadd+0x2b4>
 800050a:	2aff      	cmp	r2, #255	; 0xff
 800050c:	d045      	beq.n	800059a <__aeabi_fadd+0x192>
 800050e:	000a      	movs	r2, r1
 8000510:	e798      	b.n	8000444 <__aeabi_fadd+0x3c>
 8000512:	27fe      	movs	r7, #254	; 0xfe
 8000514:	1c6a      	adds	r2, r5, #1
 8000516:	4217      	tst	r7, r2
 8000518:	d000      	beq.n	800051c <__aeabi_fadd+0x114>
 800051a:	e086      	b.n	800062a <__aeabi_fadd+0x222>
 800051c:	2d00      	cmp	r5, #0
 800051e:	d000      	beq.n	8000522 <__aeabi_fadd+0x11a>
 8000520:	e0b7      	b.n	8000692 <__aeabi_fadd+0x28a>
 8000522:	4643      	mov	r3, r8
 8000524:	2b00      	cmp	r3, #0
 8000526:	d100      	bne.n	800052a <__aeabi_fadd+0x122>
 8000528:	e0f3      	b.n	8000712 <__aeabi_fadd+0x30a>
 800052a:	2200      	movs	r2, #0
 800052c:	2e00      	cmp	r6, #0
 800052e:	d0b0      	beq.n	8000492 <__aeabi_fadd+0x8a>
 8000530:	1b98      	subs	r0, r3, r6
 8000532:	0143      	lsls	r3, r0, #5
 8000534:	d400      	bmi.n	8000538 <__aeabi_fadd+0x130>
 8000536:	e0fa      	b.n	800072e <__aeabi_fadd+0x326>
 8000538:	4643      	mov	r3, r8
 800053a:	000c      	movs	r4, r1
 800053c:	1af0      	subs	r0, r6, r3
 800053e:	e797      	b.n	8000470 <__aeabi_fadd+0x68>
 8000540:	2e00      	cmp	r6, #0
 8000542:	d100      	bne.n	8000546 <__aeabi_fadd+0x13e>
 8000544:	e0c8      	b.n	80006d8 <__aeabi_fadd+0x2d0>
 8000546:	1e4a      	subs	r2, r1, #1
 8000548:	2901      	cmp	r1, #1
 800054a:	d100      	bne.n	800054e <__aeabi_fadd+0x146>
 800054c:	e0ae      	b.n	80006ac <__aeabi_fadd+0x2a4>
 800054e:	29ff      	cmp	r1, #255	; 0xff
 8000550:	d023      	beq.n	800059a <__aeabi_fadd+0x192>
 8000552:	0011      	movs	r1, r2
 8000554:	e7c1      	b.n	80004da <__aeabi_fadd+0xd2>
 8000556:	2300      	movs	r3, #0
 8000558:	22ff      	movs	r2, #255	; 0xff
 800055a:	469c      	mov	ip, r3
 800055c:	e799      	b.n	8000492 <__aeabi_fadd+0x8a>
 800055e:	21fe      	movs	r1, #254	; 0xfe
 8000560:	1c6a      	adds	r2, r5, #1
 8000562:	4211      	tst	r1, r2
 8000564:	d077      	beq.n	8000656 <__aeabi_fadd+0x24e>
 8000566:	2aff      	cmp	r2, #255	; 0xff
 8000568:	d0f5      	beq.n	8000556 <__aeabi_fadd+0x14e>
 800056a:	0015      	movs	r5, r2
 800056c:	4446      	add	r6, r8
 800056e:	0870      	lsrs	r0, r6, #1
 8000570:	0743      	lsls	r3, r0, #29
 8000572:	d000      	beq.n	8000576 <__aeabi_fadd+0x16e>
 8000574:	e77e      	b.n	8000474 <__aeabi_fadd+0x6c>
 8000576:	08c3      	lsrs	r3, r0, #3
 8000578:	2dff      	cmp	r5, #255	; 0xff
 800057a:	d00e      	beq.n	800059a <__aeabi_fadd+0x192>
 800057c:	025b      	lsls	r3, r3, #9
 800057e:	0a5b      	lsrs	r3, r3, #9
 8000580:	469c      	mov	ip, r3
 8000582:	b2ea      	uxtb	r2, r5
 8000584:	e785      	b.n	8000492 <__aeabi_fadd+0x8a>
 8000586:	2e00      	cmp	r6, #0
 8000588:	d007      	beq.n	800059a <__aeabi_fadd+0x192>
 800058a:	2280      	movs	r2, #128	; 0x80
 800058c:	03d2      	lsls	r2, r2, #15
 800058e:	4213      	tst	r3, r2
 8000590:	d003      	beq.n	800059a <__aeabi_fadd+0x192>
 8000592:	4210      	tst	r0, r2
 8000594:	d101      	bne.n	800059a <__aeabi_fadd+0x192>
 8000596:	000c      	movs	r4, r1
 8000598:	0003      	movs	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d0db      	beq.n	8000556 <__aeabi_fadd+0x14e>
 800059e:	2080      	movs	r0, #128	; 0x80
 80005a0:	03c0      	lsls	r0, r0, #15
 80005a2:	4318      	orrs	r0, r3
 80005a4:	0240      	lsls	r0, r0, #9
 80005a6:	0a43      	lsrs	r3, r0, #9
 80005a8:	469c      	mov	ip, r3
 80005aa:	22ff      	movs	r2, #255	; 0xff
 80005ac:	e771      	b.n	8000492 <__aeabi_fadd+0x8a>
 80005ae:	2900      	cmp	r1, #0
 80005b0:	d0d5      	beq.n	800055e <__aeabi_fadd+0x156>
 80005b2:	1b7a      	subs	r2, r7, r5
 80005b4:	2d00      	cmp	r5, #0
 80005b6:	d160      	bne.n	800067a <__aeabi_fadd+0x272>
 80005b8:	4643      	mov	r3, r8
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d024      	beq.n	8000608 <__aeabi_fadd+0x200>
 80005be:	1e53      	subs	r3, r2, #1
 80005c0:	2a01      	cmp	r2, #1
 80005c2:	d073      	beq.n	80006ac <__aeabi_fadd+0x2a4>
 80005c4:	2aff      	cmp	r2, #255	; 0xff
 80005c6:	d0e7      	beq.n	8000598 <__aeabi_fadd+0x190>
 80005c8:	001a      	movs	r2, r3
 80005ca:	2a1b      	cmp	r2, #27
 80005cc:	dc00      	bgt.n	80005d0 <__aeabi_fadd+0x1c8>
 80005ce:	e085      	b.n	80006dc <__aeabi_fadd+0x2d4>
 80005d0:	2001      	movs	r0, #1
 80005d2:	003d      	movs	r5, r7
 80005d4:	1980      	adds	r0, r0, r6
 80005d6:	e785      	b.n	80004e4 <__aeabi_fadd+0xdc>
 80005d8:	2320      	movs	r3, #32
 80005da:	003a      	movs	r2, r7
 80005dc:	1b45      	subs	r5, r0, r5
 80005de:	0038      	movs	r0, r7
 80005e0:	3501      	adds	r5, #1
 80005e2:	40ea      	lsrs	r2, r5
 80005e4:	1b5d      	subs	r5, r3, r5
 80005e6:	40a8      	lsls	r0, r5
 80005e8:	1e43      	subs	r3, r0, #1
 80005ea:	4198      	sbcs	r0, r3
 80005ec:	2500      	movs	r5, #0
 80005ee:	4310      	orrs	r0, r2
 80005f0:	e73e      	b.n	8000470 <__aeabi_fadd+0x68>
 80005f2:	2320      	movs	r3, #32
 80005f4:	0030      	movs	r0, r6
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	0031      	movs	r1, r6
 80005fa:	4098      	lsls	r0, r3
 80005fc:	40d1      	lsrs	r1, r2
 80005fe:	1e43      	subs	r3, r0, #1
 8000600:	4198      	sbcs	r0, r3
 8000602:	4308      	orrs	r0, r1
 8000604:	e722      	b.n	800044c <__aeabi_fadd+0x44>
 8000606:	000c      	movs	r4, r1
 8000608:	0003      	movs	r3, r0
 800060a:	0015      	movs	r5, r2
 800060c:	e7b4      	b.n	8000578 <__aeabi_fadd+0x170>
 800060e:	2fff      	cmp	r7, #255	; 0xff
 8000610:	d0c1      	beq.n	8000596 <__aeabi_fadd+0x18e>
 8000612:	2380      	movs	r3, #128	; 0x80
 8000614:	4640      	mov	r0, r8
 8000616:	04db      	lsls	r3, r3, #19
 8000618:	4318      	orrs	r0, r3
 800061a:	4680      	mov	r8, r0
 800061c:	2a1b      	cmp	r2, #27
 800061e:	dd51      	ble.n	80006c4 <__aeabi_fadd+0x2bc>
 8000620:	2001      	movs	r0, #1
 8000622:	000c      	movs	r4, r1
 8000624:	003d      	movs	r5, r7
 8000626:	1a30      	subs	r0, r6, r0
 8000628:	e712      	b.n	8000450 <__aeabi_fadd+0x48>
 800062a:	4643      	mov	r3, r8
 800062c:	1b9f      	subs	r7, r3, r6
 800062e:	017b      	lsls	r3, r7, #5
 8000630:	d42b      	bmi.n	800068a <__aeabi_fadd+0x282>
 8000632:	2f00      	cmp	r7, #0
 8000634:	d000      	beq.n	8000638 <__aeabi_fadd+0x230>
 8000636:	e710      	b.n	800045a <__aeabi_fadd+0x52>
 8000638:	2300      	movs	r3, #0
 800063a:	2400      	movs	r4, #0
 800063c:	2200      	movs	r2, #0
 800063e:	469c      	mov	ip, r3
 8000640:	e727      	b.n	8000492 <__aeabi_fadd+0x8a>
 8000642:	2320      	movs	r3, #32
 8000644:	0032      	movs	r2, r6
 8000646:	0030      	movs	r0, r6
 8000648:	40ca      	lsrs	r2, r1
 800064a:	1a59      	subs	r1, r3, r1
 800064c:	4088      	lsls	r0, r1
 800064e:	1e43      	subs	r3, r0, #1
 8000650:	4198      	sbcs	r0, r3
 8000652:	4310      	orrs	r0, r2
 8000654:	e745      	b.n	80004e2 <__aeabi_fadd+0xda>
 8000656:	2d00      	cmp	r5, #0
 8000658:	d14a      	bne.n	80006f0 <__aeabi_fadd+0x2e8>
 800065a:	4643      	mov	r3, r8
 800065c:	2b00      	cmp	r3, #0
 800065e:	d063      	beq.n	8000728 <__aeabi_fadd+0x320>
 8000660:	2200      	movs	r2, #0
 8000662:	2e00      	cmp	r6, #0
 8000664:	d100      	bne.n	8000668 <__aeabi_fadd+0x260>
 8000666:	e714      	b.n	8000492 <__aeabi_fadd+0x8a>
 8000668:	0030      	movs	r0, r6
 800066a:	4440      	add	r0, r8
 800066c:	0143      	lsls	r3, r0, #5
 800066e:	d400      	bmi.n	8000672 <__aeabi_fadd+0x26a>
 8000670:	e77e      	b.n	8000570 <__aeabi_fadd+0x168>
 8000672:	4b32      	ldr	r3, [pc, #200]	; (800073c <__aeabi_fadd+0x334>)
 8000674:	3501      	adds	r5, #1
 8000676:	4018      	ands	r0, r3
 8000678:	e77a      	b.n	8000570 <__aeabi_fadd+0x168>
 800067a:	2fff      	cmp	r7, #255	; 0xff
 800067c:	d08c      	beq.n	8000598 <__aeabi_fadd+0x190>
 800067e:	2380      	movs	r3, #128	; 0x80
 8000680:	4641      	mov	r1, r8
 8000682:	04db      	lsls	r3, r3, #19
 8000684:	4319      	orrs	r1, r3
 8000686:	4688      	mov	r8, r1
 8000688:	e79f      	b.n	80005ca <__aeabi_fadd+0x1c2>
 800068a:	4643      	mov	r3, r8
 800068c:	000c      	movs	r4, r1
 800068e:	1af7      	subs	r7, r6, r3
 8000690:	e6e3      	b.n	800045a <__aeabi_fadd+0x52>
 8000692:	4642      	mov	r2, r8
 8000694:	2a00      	cmp	r2, #0
 8000696:	d000      	beq.n	800069a <__aeabi_fadd+0x292>
 8000698:	e775      	b.n	8000586 <__aeabi_fadd+0x17e>
 800069a:	2e00      	cmp	r6, #0
 800069c:	d000      	beq.n	80006a0 <__aeabi_fadd+0x298>
 800069e:	e77a      	b.n	8000596 <__aeabi_fadd+0x18e>
 80006a0:	2380      	movs	r3, #128	; 0x80
 80006a2:	03db      	lsls	r3, r3, #15
 80006a4:	2400      	movs	r4, #0
 80006a6:	469c      	mov	ip, r3
 80006a8:	22ff      	movs	r2, #255	; 0xff
 80006aa:	e6f2      	b.n	8000492 <__aeabi_fadd+0x8a>
 80006ac:	0030      	movs	r0, r6
 80006ae:	4440      	add	r0, r8
 80006b0:	2501      	movs	r5, #1
 80006b2:	0143      	lsls	r3, r0, #5
 80006b4:	d400      	bmi.n	80006b8 <__aeabi_fadd+0x2b0>
 80006b6:	e75b      	b.n	8000570 <__aeabi_fadd+0x168>
 80006b8:	2502      	movs	r5, #2
 80006ba:	e718      	b.n	80004ee <__aeabi_fadd+0xe6>
 80006bc:	4643      	mov	r3, r8
 80006be:	2501      	movs	r5, #1
 80006c0:	1b98      	subs	r0, r3, r6
 80006c2:	e6c5      	b.n	8000450 <__aeabi_fadd+0x48>
 80006c4:	2320      	movs	r3, #32
 80006c6:	4644      	mov	r4, r8
 80006c8:	4640      	mov	r0, r8
 80006ca:	40d4      	lsrs	r4, r2
 80006cc:	1a9a      	subs	r2, r3, r2
 80006ce:	4090      	lsls	r0, r2
 80006d0:	1e43      	subs	r3, r0, #1
 80006d2:	4198      	sbcs	r0, r3
 80006d4:	4320      	orrs	r0, r4
 80006d6:	e7a4      	b.n	8000622 <__aeabi_fadd+0x21a>
 80006d8:	000d      	movs	r5, r1
 80006da:	e74d      	b.n	8000578 <__aeabi_fadd+0x170>
 80006dc:	2320      	movs	r3, #32
 80006de:	4641      	mov	r1, r8
 80006e0:	4640      	mov	r0, r8
 80006e2:	40d1      	lsrs	r1, r2
 80006e4:	1a9a      	subs	r2, r3, r2
 80006e6:	4090      	lsls	r0, r2
 80006e8:	1e43      	subs	r3, r0, #1
 80006ea:	4198      	sbcs	r0, r3
 80006ec:	4308      	orrs	r0, r1
 80006ee:	e770      	b.n	80005d2 <__aeabi_fadd+0x1ca>
 80006f0:	4642      	mov	r2, r8
 80006f2:	2a00      	cmp	r2, #0
 80006f4:	d100      	bne.n	80006f8 <__aeabi_fadd+0x2f0>
 80006f6:	e74f      	b.n	8000598 <__aeabi_fadd+0x190>
 80006f8:	2e00      	cmp	r6, #0
 80006fa:	d100      	bne.n	80006fe <__aeabi_fadd+0x2f6>
 80006fc:	e74d      	b.n	800059a <__aeabi_fadd+0x192>
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	03d2      	lsls	r2, r2, #15
 8000702:	4213      	tst	r3, r2
 8000704:	d100      	bne.n	8000708 <__aeabi_fadd+0x300>
 8000706:	e748      	b.n	800059a <__aeabi_fadd+0x192>
 8000708:	4210      	tst	r0, r2
 800070a:	d000      	beq.n	800070e <__aeabi_fadd+0x306>
 800070c:	e745      	b.n	800059a <__aeabi_fadd+0x192>
 800070e:	0003      	movs	r3, r0
 8000710:	e743      	b.n	800059a <__aeabi_fadd+0x192>
 8000712:	2e00      	cmp	r6, #0
 8000714:	d090      	beq.n	8000638 <__aeabi_fadd+0x230>
 8000716:	000c      	movs	r4, r1
 8000718:	4684      	mov	ip, r0
 800071a:	2200      	movs	r2, #0
 800071c:	e6b9      	b.n	8000492 <__aeabi_fadd+0x8a>
 800071e:	4643      	mov	r3, r8
 8000720:	000c      	movs	r4, r1
 8000722:	1af0      	subs	r0, r6, r3
 8000724:	3501      	adds	r5, #1
 8000726:	e693      	b.n	8000450 <__aeabi_fadd+0x48>
 8000728:	4684      	mov	ip, r0
 800072a:	2200      	movs	r2, #0
 800072c:	e6b1      	b.n	8000492 <__aeabi_fadd+0x8a>
 800072e:	2800      	cmp	r0, #0
 8000730:	d000      	beq.n	8000734 <__aeabi_fadd+0x32c>
 8000732:	e71d      	b.n	8000570 <__aeabi_fadd+0x168>
 8000734:	2300      	movs	r3, #0
 8000736:	2400      	movs	r4, #0
 8000738:	469c      	mov	ip, r3
 800073a:	e6aa      	b.n	8000492 <__aeabi_fadd+0x8a>
 800073c:	fbffffff 	.word	0xfbffffff
 8000740:	7dffffff 	.word	0x7dffffff

08000744 <__aeabi_f2iz>:
 8000744:	0241      	lsls	r1, r0, #9
 8000746:	0042      	lsls	r2, r0, #1
 8000748:	0fc3      	lsrs	r3, r0, #31
 800074a:	0a49      	lsrs	r1, r1, #9
 800074c:	2000      	movs	r0, #0
 800074e:	0e12      	lsrs	r2, r2, #24
 8000750:	2a7e      	cmp	r2, #126	; 0x7e
 8000752:	dd03      	ble.n	800075c <__aeabi_f2iz+0x18>
 8000754:	2a9d      	cmp	r2, #157	; 0x9d
 8000756:	dd02      	ble.n	800075e <__aeabi_f2iz+0x1a>
 8000758:	4a09      	ldr	r2, [pc, #36]	; (8000780 <__aeabi_f2iz+0x3c>)
 800075a:	1898      	adds	r0, r3, r2
 800075c:	4770      	bx	lr
 800075e:	2080      	movs	r0, #128	; 0x80
 8000760:	0400      	lsls	r0, r0, #16
 8000762:	4301      	orrs	r1, r0
 8000764:	2a95      	cmp	r2, #149	; 0x95
 8000766:	dc07      	bgt.n	8000778 <__aeabi_f2iz+0x34>
 8000768:	2096      	movs	r0, #150	; 0x96
 800076a:	1a82      	subs	r2, r0, r2
 800076c:	40d1      	lsrs	r1, r2
 800076e:	4248      	negs	r0, r1
 8000770:	2b00      	cmp	r3, #0
 8000772:	d1f3      	bne.n	800075c <__aeabi_f2iz+0x18>
 8000774:	0008      	movs	r0, r1
 8000776:	e7f1      	b.n	800075c <__aeabi_f2iz+0x18>
 8000778:	3a96      	subs	r2, #150	; 0x96
 800077a:	4091      	lsls	r1, r2
 800077c:	e7f7      	b.n	800076e <__aeabi_f2iz+0x2a>
 800077e:	46c0      	nop			; (mov r8, r8)
 8000780:	7fffffff 	.word	0x7fffffff

08000784 <__aeabi_i2f>:
 8000784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000786:	2800      	cmp	r0, #0
 8000788:	d013      	beq.n	80007b2 <__aeabi_i2f+0x2e>
 800078a:	17c3      	asrs	r3, r0, #31
 800078c:	18c6      	adds	r6, r0, r3
 800078e:	405e      	eors	r6, r3
 8000790:	0fc4      	lsrs	r4, r0, #31
 8000792:	0030      	movs	r0, r6
 8000794:	f000 f88c 	bl	80008b0 <__clzsi2>
 8000798:	239e      	movs	r3, #158	; 0x9e
 800079a:	0005      	movs	r5, r0
 800079c:	1a1b      	subs	r3, r3, r0
 800079e:	2b96      	cmp	r3, #150	; 0x96
 80007a0:	dc0f      	bgt.n	80007c2 <__aeabi_i2f+0x3e>
 80007a2:	2808      	cmp	r0, #8
 80007a4:	dd01      	ble.n	80007aa <__aeabi_i2f+0x26>
 80007a6:	3d08      	subs	r5, #8
 80007a8:	40ae      	lsls	r6, r5
 80007aa:	0276      	lsls	r6, r6, #9
 80007ac:	0a76      	lsrs	r6, r6, #9
 80007ae:	b2d8      	uxtb	r0, r3
 80007b0:	e002      	b.n	80007b8 <__aeabi_i2f+0x34>
 80007b2:	2400      	movs	r4, #0
 80007b4:	2000      	movs	r0, #0
 80007b6:	2600      	movs	r6, #0
 80007b8:	05c0      	lsls	r0, r0, #23
 80007ba:	4330      	orrs	r0, r6
 80007bc:	07e4      	lsls	r4, r4, #31
 80007be:	4320      	orrs	r0, r4
 80007c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80007c2:	2b99      	cmp	r3, #153	; 0x99
 80007c4:	dd0c      	ble.n	80007e0 <__aeabi_i2f+0x5c>
 80007c6:	2205      	movs	r2, #5
 80007c8:	0031      	movs	r1, r6
 80007ca:	1a12      	subs	r2, r2, r0
 80007cc:	40d1      	lsrs	r1, r2
 80007ce:	000a      	movs	r2, r1
 80007d0:	0001      	movs	r1, r0
 80007d2:	0030      	movs	r0, r6
 80007d4:	311b      	adds	r1, #27
 80007d6:	4088      	lsls	r0, r1
 80007d8:	1e41      	subs	r1, r0, #1
 80007da:	4188      	sbcs	r0, r1
 80007dc:	4302      	orrs	r2, r0
 80007de:	0016      	movs	r6, r2
 80007e0:	2d05      	cmp	r5, #5
 80007e2:	dc12      	bgt.n	800080a <__aeabi_i2f+0x86>
 80007e4:	0031      	movs	r1, r6
 80007e6:	4f0d      	ldr	r7, [pc, #52]	; (800081c <__aeabi_i2f+0x98>)
 80007e8:	4039      	ands	r1, r7
 80007ea:	0772      	lsls	r2, r6, #29
 80007ec:	d009      	beq.n	8000802 <__aeabi_i2f+0x7e>
 80007ee:	200f      	movs	r0, #15
 80007f0:	4030      	ands	r0, r6
 80007f2:	2804      	cmp	r0, #4
 80007f4:	d005      	beq.n	8000802 <__aeabi_i2f+0x7e>
 80007f6:	3104      	adds	r1, #4
 80007f8:	014a      	lsls	r2, r1, #5
 80007fa:	d502      	bpl.n	8000802 <__aeabi_i2f+0x7e>
 80007fc:	239f      	movs	r3, #159	; 0x9f
 80007fe:	4039      	ands	r1, r7
 8000800:	1b5b      	subs	r3, r3, r5
 8000802:	0189      	lsls	r1, r1, #6
 8000804:	0a4e      	lsrs	r6, r1, #9
 8000806:	b2d8      	uxtb	r0, r3
 8000808:	e7d6      	b.n	80007b8 <__aeabi_i2f+0x34>
 800080a:	1f6a      	subs	r2, r5, #5
 800080c:	4096      	lsls	r6, r2
 800080e:	0031      	movs	r1, r6
 8000810:	4f02      	ldr	r7, [pc, #8]	; (800081c <__aeabi_i2f+0x98>)
 8000812:	4039      	ands	r1, r7
 8000814:	0772      	lsls	r2, r6, #29
 8000816:	d0f4      	beq.n	8000802 <__aeabi_i2f+0x7e>
 8000818:	e7e9      	b.n	80007ee <__aeabi_i2f+0x6a>
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	fbffffff 	.word	0xfbffffff

08000820 <__aeabi_f2d>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	0043      	lsls	r3, r0, #1
 8000824:	0246      	lsls	r6, r0, #9
 8000826:	0fc4      	lsrs	r4, r0, #31
 8000828:	20fe      	movs	r0, #254	; 0xfe
 800082a:	0e1b      	lsrs	r3, r3, #24
 800082c:	1c59      	adds	r1, r3, #1
 800082e:	0a75      	lsrs	r5, r6, #9
 8000830:	4208      	tst	r0, r1
 8000832:	d00c      	beq.n	800084e <__aeabi_f2d+0x2e>
 8000834:	22e0      	movs	r2, #224	; 0xe0
 8000836:	0092      	lsls	r2, r2, #2
 8000838:	4694      	mov	ip, r2
 800083a:	076d      	lsls	r5, r5, #29
 800083c:	0b36      	lsrs	r6, r6, #12
 800083e:	4463      	add	r3, ip
 8000840:	051b      	lsls	r3, r3, #20
 8000842:	4333      	orrs	r3, r6
 8000844:	07e4      	lsls	r4, r4, #31
 8000846:	4323      	orrs	r3, r4
 8000848:	0028      	movs	r0, r5
 800084a:	0019      	movs	r1, r3
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	2b00      	cmp	r3, #0
 8000850:	d114      	bne.n	800087c <__aeabi_f2d+0x5c>
 8000852:	2d00      	cmp	r5, #0
 8000854:	d01b      	beq.n	800088e <__aeabi_f2d+0x6e>
 8000856:	0028      	movs	r0, r5
 8000858:	f000 f82a 	bl	80008b0 <__clzsi2>
 800085c:	280a      	cmp	r0, #10
 800085e:	dc1c      	bgt.n	800089a <__aeabi_f2d+0x7a>
 8000860:	230b      	movs	r3, #11
 8000862:	002e      	movs	r6, r5
 8000864:	1a1b      	subs	r3, r3, r0
 8000866:	40de      	lsrs	r6, r3
 8000868:	0003      	movs	r3, r0
 800086a:	3315      	adds	r3, #21
 800086c:	409d      	lsls	r5, r3
 800086e:	4a0e      	ldr	r2, [pc, #56]	; (80008a8 <__aeabi_f2d+0x88>)
 8000870:	0336      	lsls	r6, r6, #12
 8000872:	1a12      	subs	r2, r2, r0
 8000874:	0552      	lsls	r2, r2, #21
 8000876:	0b36      	lsrs	r6, r6, #12
 8000878:	0d53      	lsrs	r3, r2, #21
 800087a:	e7e1      	b.n	8000840 <__aeabi_f2d+0x20>
 800087c:	2d00      	cmp	r5, #0
 800087e:	d009      	beq.n	8000894 <__aeabi_f2d+0x74>
 8000880:	2280      	movs	r2, #128	; 0x80
 8000882:	0b36      	lsrs	r6, r6, #12
 8000884:	0312      	lsls	r2, r2, #12
 8000886:	4b09      	ldr	r3, [pc, #36]	; (80008ac <__aeabi_f2d+0x8c>)
 8000888:	076d      	lsls	r5, r5, #29
 800088a:	4316      	orrs	r6, r2
 800088c:	e7d8      	b.n	8000840 <__aeabi_f2d+0x20>
 800088e:	2300      	movs	r3, #0
 8000890:	2600      	movs	r6, #0
 8000892:	e7d5      	b.n	8000840 <__aeabi_f2d+0x20>
 8000894:	2600      	movs	r6, #0
 8000896:	4b05      	ldr	r3, [pc, #20]	; (80008ac <__aeabi_f2d+0x8c>)
 8000898:	e7d2      	b.n	8000840 <__aeabi_f2d+0x20>
 800089a:	0003      	movs	r3, r0
 800089c:	3b0b      	subs	r3, #11
 800089e:	409d      	lsls	r5, r3
 80008a0:	002e      	movs	r6, r5
 80008a2:	2500      	movs	r5, #0
 80008a4:	e7e3      	b.n	800086e <__aeabi_f2d+0x4e>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	00000389 	.word	0x00000389
 80008ac:	000007ff 	.word	0x000007ff

080008b0 <__clzsi2>:
 80008b0:	211c      	movs	r1, #28
 80008b2:	2301      	movs	r3, #1
 80008b4:	041b      	lsls	r3, r3, #16
 80008b6:	4298      	cmp	r0, r3
 80008b8:	d301      	bcc.n	80008be <__clzsi2+0xe>
 80008ba:	0c00      	lsrs	r0, r0, #16
 80008bc:	3910      	subs	r1, #16
 80008be:	0a1b      	lsrs	r3, r3, #8
 80008c0:	4298      	cmp	r0, r3
 80008c2:	d301      	bcc.n	80008c8 <__clzsi2+0x18>
 80008c4:	0a00      	lsrs	r0, r0, #8
 80008c6:	3908      	subs	r1, #8
 80008c8:	091b      	lsrs	r3, r3, #4
 80008ca:	4298      	cmp	r0, r3
 80008cc:	d301      	bcc.n	80008d2 <__clzsi2+0x22>
 80008ce:	0900      	lsrs	r0, r0, #4
 80008d0:	3904      	subs	r1, #4
 80008d2:	a202      	add	r2, pc, #8	; (adr r2, 80008dc <__clzsi2+0x2c>)
 80008d4:	5c10      	ldrb	r0, [r2, r0]
 80008d6:	1840      	adds	r0, r0, r1
 80008d8:	4770      	bx	lr
 80008da:	46c0      	nop			; (mov r8, r8)
 80008dc:	02020304 	.word	0x02020304
 80008e0:	01010101 	.word	0x01010101
	...

080008ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008f2:	f001 f801 	bl	80018f8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008f6:	f000 f82b 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008fa:	f000 f8d7 	bl	8000aac <MX_GPIO_Init>
  MX_SPI2_Init();
 80008fe:	f000 f867 	bl	80009d0 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 8000902:	f000 f8a3 	bl	8000a4c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  icm20948_init();
 8000906:	f000 f91b 	bl	8000b40 <icm20948_init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	// raw data
	icm20948_gyro_read(&my_gyro);
 800090a:	4b0d      	ldr	r3, [pc, #52]	; (8000940 <main+0x54>)
 800090c:	0018      	movs	r0, r3
 800090e:	f000 f947 	bl	8000ba0 <icm20948_gyro_read>
	char temp[5];
	sprintf(temp, "%d",my_gyro.x);
 8000912:	4b0b      	ldr	r3, [pc, #44]	; (8000940 <main+0x54>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	1c18      	adds	r0, r3, #0
 8000918:	f7ff ff82 	bl	8000820 <__aeabi_f2d>
 800091c:	0002      	movs	r2, r0
 800091e:	000b      	movs	r3, r1
 8000920:	4908      	ldr	r1, [pc, #32]	; (8000944 <main+0x58>)
 8000922:	0038      	movs	r0, r7
 8000924:	f003 fa50 	bl	8003dc8 <siprintf>
	HAL_UART_Transmit(&huart2, temp, sizeof(temp), 1000);
 8000928:	23fa      	movs	r3, #250	; 0xfa
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	0039      	movs	r1, r7
 800092e:	4806      	ldr	r0, [pc, #24]	; (8000948 <main+0x5c>)
 8000930:	2205      	movs	r2, #5
 8000932:	f002 fe6d 	bl	8003610 <HAL_UART_Transmit>

	icm20948_accel_read(&my_accel);
 8000936:	4b05      	ldr	r3, [pc, #20]	; (800094c <main+0x60>)
 8000938:	0018      	movs	r0, r3
 800093a:	f000 f973 	bl	8000c24 <icm20948_accel_read>
  {
 800093e:	e7e4      	b.n	800090a <main+0x1e>
 8000940:	20000174 	.word	0x20000174
 8000944:	080046b4 	.word	0x080046b4
 8000948:	200000f0 	.word	0x200000f0
 800094c:	20000180 	.word	0x20000180

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b590      	push	{r4, r7, lr}
 8000952:	b091      	sub	sp, #68	; 0x44
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	2410      	movs	r4, #16
 8000958:	193b      	adds	r3, r7, r4
 800095a:	0018      	movs	r0, r3
 800095c:	2330      	movs	r3, #48	; 0x30
 800095e:	001a      	movs	r2, r3
 8000960:	2100      	movs	r1, #0
 8000962:	f003 fa29 	bl	8003db8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000966:	003b      	movs	r3, r7
 8000968:	0018      	movs	r0, r3
 800096a:	2310      	movs	r3, #16
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f003 fa22 	bl	8003db8 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000974:	0021      	movs	r1, r4
 8000976:	187b      	adds	r3, r7, r1
 8000978:	2202      	movs	r2, #2
 800097a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	187b      	adds	r3, r7, r1
 800097e:	2201      	movs	r2, #1
 8000980:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000982:	187b      	adds	r3, r7, r1
 8000984:	2210      	movs	r2, #16
 8000986:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000988:	187b      	adds	r3, r7, r1
 800098a:	2200      	movs	r2, #0
 800098c:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800098e:	187b      	adds	r3, r7, r1
 8000990:	0018      	movs	r0, r3
 8000992:	f001 fa7b 	bl	8001e8c <HAL_RCC_OscConfig>
 8000996:	1e03      	subs	r3, r0, #0
 8000998:	d001      	beq.n	800099e <SystemClock_Config+0x4e>
  {
    Error_Handler();
 800099a:	f000 fe6b 	bl	8001674 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800099e:	003b      	movs	r3, r7
 80009a0:	2207      	movs	r2, #7
 80009a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a4:	003b      	movs	r3, r7
 80009a6:	2200      	movs	r2, #0
 80009a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009aa:	003b      	movs	r3, r7
 80009ac:	2200      	movs	r2, #0
 80009ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009b0:	003b      	movs	r3, r7
 80009b2:	2200      	movs	r2, #0
 80009b4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80009b6:	003b      	movs	r3, r7
 80009b8:	2100      	movs	r1, #0
 80009ba:	0018      	movs	r0, r3
 80009bc:	f001 fd80 	bl	80024c0 <HAL_RCC_ClockConfig>
 80009c0:	1e03      	subs	r3, r0, #0
 80009c2:	d001      	beq.n	80009c8 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80009c4:	f000 fe56 	bl	8001674 <Error_Handler>
  }
}
 80009c8:	46c0      	nop			; (mov r8, r8)
 80009ca:	46bd      	mov	sp, r7
 80009cc:	b011      	add	sp, #68	; 0x44
 80009ce:	bd90      	pop	{r4, r7, pc}

080009d0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_SPI2_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009dc:	2282      	movs	r2, #130	; 0x82
 80009de:	0052      	lsls	r2, r2, #1
 80009e0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80009e2:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009e4:	2200      	movs	r2, #0
 80009e6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80009e8:	4b16      	ldr	r3, [pc, #88]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009ea:	22e0      	movs	r2, #224	; 0xe0
 80009ec:	00d2      	lsls	r2, r2, #3
 80009ee:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80009f0:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009f2:	2200      	movs	r2, #0
 80009f4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80009f6:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_SPI2_Init+0x74>)
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	0092      	lsls	r2, r2, #2
 8000a02:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a0a:	4b0e      	ldr	r3, [pc, #56]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a16:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000a1c:	4b09      	ldr	r3, [pc, #36]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a1e:	2207      	movs	r2, #7
 8000a20:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000a22:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000a28:	4b06      	ldr	r3, [pc, #24]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a2a:	2208      	movs	r2, #8
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a2e:	4b05      	ldr	r3, [pc, #20]	; (8000a44 <MX_SPI2_Init+0x74>)
 8000a30:	0018      	movs	r0, r3
 8000a32:	f001 fe97 	bl	8002764 <HAL_SPI_Init>
 8000a36:	1e03      	subs	r3, r0, #0
 8000a38:	d001      	beq.n	8000a3e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fe1b 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a3e:	46c0      	nop			; (mov r8, r8)
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bd80      	pop	{r7, pc}
 8000a44:	2000008c 	.word	0x2000008c
 8000a48:	40003800 	.word	0x40003800

08000a4c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a50:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a52:	4a15      	ldr	r2, [pc, #84]	; (8000aa8 <MX_USART2_UART_Init+0x5c>)
 8000a54:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000a56:	4b13      	ldr	r3, [pc, #76]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a58:	2296      	movs	r2, #150	; 0x96
 8000a5a:	0192      	lsls	r2, r2, #6
 8000a5c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a72:	220c      	movs	r2, #12
 8000a74:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a7c:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a8e:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <MX_USART2_UART_Init+0x58>)
 8000a90:	0018      	movs	r0, r3
 8000a92:	f002 fd69 	bl	8003568 <HAL_UART_Init>
 8000a96:	1e03      	subs	r3, r0, #0
 8000a98:	d001      	beq.n	8000a9e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a9a:	f000 fdeb 	bl	8001674 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a9e:	46c0      	nop			; (mov r8, r8)
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	200000f0 	.word	0x200000f0
 8000aa8:	40004400 	.word	0x40004400

08000aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000aac:	b590      	push	{r4, r7, lr}
 8000aae:	b089      	sub	sp, #36	; 0x24
 8000ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab2:	240c      	movs	r4, #12
 8000ab4:	193b      	adds	r3, r7, r4
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	2314      	movs	r3, #20
 8000aba:	001a      	movs	r2, r3
 8000abc:	2100      	movs	r1, #0
 8000abe:	f003 f97b 	bl	8003db8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac2:	4b1d      	ldr	r3, [pc, #116]	; (8000b38 <MX_GPIO_Init+0x8c>)
 8000ac4:	695a      	ldr	r2, [r3, #20]
 8000ac6:	4b1c      	ldr	r3, [pc, #112]	; (8000b38 <MX_GPIO_Init+0x8c>)
 8000ac8:	2180      	movs	r1, #128	; 0x80
 8000aca:	0289      	lsls	r1, r1, #10
 8000acc:	430a      	orrs	r2, r1
 8000ace:	615a      	str	r2, [r3, #20]
 8000ad0:	4b19      	ldr	r3, [pc, #100]	; (8000b38 <MX_GPIO_Init+0x8c>)
 8000ad2:	695a      	ldr	r2, [r3, #20]
 8000ad4:	2380      	movs	r3, #128	; 0x80
 8000ad6:	029b      	lsls	r3, r3, #10
 8000ad8:	4013      	ands	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]
 8000adc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ade:	4b16      	ldr	r3, [pc, #88]	; (8000b38 <MX_GPIO_Init+0x8c>)
 8000ae0:	695a      	ldr	r2, [r3, #20]
 8000ae2:	4b15      	ldr	r3, [pc, #84]	; (8000b38 <MX_GPIO_Init+0x8c>)
 8000ae4:	2180      	movs	r1, #128	; 0x80
 8000ae6:	02c9      	lsls	r1, r1, #11
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	4b12      	ldr	r3, [pc, #72]	; (8000b38 <MX_GPIO_Init+0x8c>)
 8000aee:	695a      	ldr	r2, [r3, #20]
 8000af0:	2380      	movs	r3, #128	; 0x80
 8000af2:	02db      	lsls	r3, r3, #11
 8000af4:	4013      	ands	r3, r2
 8000af6:	607b      	str	r3, [r7, #4]
 8000af8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI2_CS_GPIO_Port, SPI2_CS_Pin, GPIO_PIN_SET);
 8000afa:	2380      	movs	r3, #128	; 0x80
 8000afc:	015b      	lsls	r3, r3, #5
 8000afe:	480f      	ldr	r0, [pc, #60]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	0019      	movs	r1, r3
 8000b04:	f001 f9a4 	bl	8001e50 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SPI2_CS_Pin */
  GPIO_InitStruct.Pin = SPI2_CS_Pin;
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	2280      	movs	r2, #128	; 0x80
 8000b0c:	0152      	lsls	r2, r2, #5
 8000b0e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b10:	193b      	adds	r3, r7, r4
 8000b12:	2201      	movs	r2, #1
 8000b14:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	193b      	adds	r3, r7, r4
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1c:	193b      	adds	r3, r7, r4
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SPI2_CS_GPIO_Port, &GPIO_InitStruct);
 8000b22:	193b      	adds	r3, r7, r4
 8000b24:	4a05      	ldr	r2, [pc, #20]	; (8000b3c <MX_GPIO_Init+0x90>)
 8000b26:	0019      	movs	r1, r3
 8000b28:	0010      	movs	r0, r2
 8000b2a:	f001 f821 	bl	8001b70 <HAL_GPIO_Init>

}
 8000b2e:	46c0      	nop			; (mov r8, r8)
 8000b30:	46bd      	mov	sp, r7
 8000b32:	b009      	add	sp, #36	; 0x24
 8000b34:	bd90      	pop	{r4, r7, pc}
 8000b36:	46c0      	nop			; (mov r8, r8)
 8000b38:	40021000 	.word	0x40021000
 8000b3c:	48000400 	.word	0x48000400

08000b40 <icm20948_init>:

/* USER CODE BEGIN 4 */
void icm20948_init()
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
	while(!icm20948_who_am_i());
 8000b44:	46c0      	nop			; (mov r8, r8)
 8000b46:	f000 f8b9 	bl	8000cbc <icm20948_who_am_i>
 8000b4a:	0003      	movs	r3, r0
 8000b4c:	001a      	movs	r2, r3
 8000b4e:	2301      	movs	r3, #1
 8000b50:	4053      	eors	r3, r2
 8000b52:	b2db      	uxtb	r3, r3
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d1f6      	bne.n	8000b46 <icm20948_init+0x6>

	icm20948_device_reset();
 8000b58:	f000 f8c5 	bl	8000ce6 <icm20948_device_reset>
	icm20948_wakeup();
 8000b5c:	f000 f8d0 	bl	8000d00 <icm20948_wakeup>

	icm20948_clock_source(1);
 8000b60:	2001      	movs	r0, #1
 8000b62:	f000 f906 	bl	8000d72 <icm20948_clock_source>
	icm20948_odr_align_enable();
 8000b66:	f000 f925 	bl	8000db4 <icm20948_odr_align_enable>

	icm20948_spi_slave_enable();
 8000b6a:	f000 f8e7 	bl	8000d3c <icm20948_spi_slave_enable>

	icm20948_gyro_low_pass_filter(0);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f000 f92a 	bl	8000dc8 <icm20948_gyro_low_pass_filter>
	icm20948_accel_low_pass_filter(0);
 8000b74:	2000      	movs	r0, #0
 8000b76:	f000 f94b 	bl	8000e10 <icm20948_accel_low_pass_filter>

	icm20948_gyro_sample_rate_divider(0);
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f000 f96c 	bl	8000e58 <icm20948_gyro_sample_rate_divider>
	icm20948_accel_sample_rate_divider(0);
 8000b80:	2000      	movs	r0, #0
 8000b82:	f000 f97a 	bl	8000e7a <icm20948_accel_sample_rate_divider>

	icm20948_gyro_calibration();
 8000b86:	f000 f99f 	bl	8000ec8 <icm20948_gyro_calibration>
	icm20948_accel_calibration();
 8000b8a:	f000 fa63 	bl	8001054 <icm20948_accel_calibration>

	icm20948_gyro_full_scale_select(_2000dps);
 8000b8e:	2003      	movs	r0, #3
 8000b90:	f000 fbb4 	bl	80012fc <icm20948_gyro_full_scale_select>
	icm20948_accel_full_scale_select(_16g);
 8000b94:	2003      	movs	r0, #3
 8000b96:	f000 fc0d 	bl	80013b4 <icm20948_accel_full_scale_select>
}
 8000b9a:	46c0      	nop			; (mov r8, r8)
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <icm20948_gyro_read>:

void icm20948_gyro_read(axises* data)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_GYRO_XOUT_H, 6);
 8000ba8:	2206      	movs	r2, #6
 8000baa:	2133      	movs	r1, #51	; 0x33
 8000bac:	2000      	movs	r0, #0
 8000bae:	f000 fcf3 	bl	8001598 <read_multiple_icm20948_reg>
 8000bb2:	0003      	movs	r3, r0
 8000bb4:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	781b      	ldrb	r3, [r3, #0]
 8000bba:	021b      	lsls	r3, r3, #8
 8000bbc:	b21a      	sxth	r2, r3
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	3301      	adds	r3, #1
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	0018      	movs	r0, r3
 8000bcc:	f7ff fdda 	bl	8000784 <__aeabi_i2f>
 8000bd0:	1c02      	adds	r2, r0, #0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3302      	adds	r3, #2
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	021b      	lsls	r3, r3, #8
 8000bde:	b21a      	sxth	r2, r3
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	3303      	adds	r3, #3
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	b21b      	sxth	r3, r3
 8000be8:	4313      	orrs	r3, r2
 8000bea:	b21b      	sxth	r3, r3
 8000bec:	0018      	movs	r0, r3
 8000bee:	f7ff fdc9 	bl	8000784 <__aeabi_i2f>
 8000bf2:	1c02      	adds	r2, r0, #0
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	3304      	adds	r3, #4
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	3305      	adds	r3, #5
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	b21b      	sxth	r3, r3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	b21b      	sxth	r3, r3
 8000c0e:	0018      	movs	r0, r3
 8000c10:	f7ff fdb8 	bl	8000784 <__aeabi_i2f>
 8000c14:	1c02      	adds	r2, r0, #0
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	609a      	str	r2, [r3, #8]
}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b004      	add	sp, #16
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <icm20948_accel_read>:

void icm20948_accel_read(axises* data)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b084      	sub	sp, #16
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
	uint8_t* temp = read_multiple_icm20948_reg(ub_0, B0_ACCEL_XOUT_H, 6);
 8000c2c:	2206      	movs	r2, #6
 8000c2e:	212d      	movs	r1, #45	; 0x2d
 8000c30:	2000      	movs	r0, #0
 8000c32:	f000 fcb1 	bl	8001598 <read_multiple_icm20948_reg>
 8000c36:	0003      	movs	r3, r0
 8000c38:	60fb      	str	r3, [r7, #12]

	data->x = (int16_t)(temp[0] << 8 | temp[1]);
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	021b      	lsls	r3, r3, #8
 8000c40:	b21a      	sxth	r2, r3
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	3301      	adds	r3, #1
 8000c46:	781b      	ldrb	r3, [r3, #0]
 8000c48:	b21b      	sxth	r3, r3
 8000c4a:	4313      	orrs	r3, r2
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f7ff fd98 	bl	8000784 <__aeabi_i2f>
 8000c54:	1c02      	adds	r2, r0, #0
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	601a      	str	r2, [r3, #0]
	data->y = (int16_t)(temp[2] << 8 | temp[3]);
 8000c5a:	68fb      	ldr	r3, [r7, #12]
 8000c5c:	3302      	adds	r3, #2
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	b21a      	sxth	r2, r3
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	3303      	adds	r3, #3
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	b21b      	sxth	r3, r3
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	b21b      	sxth	r3, r3
 8000c70:	0018      	movs	r0, r3
 8000c72:	f7ff fd87 	bl	8000784 <__aeabi_i2f>
 8000c76:	1c02      	adds	r2, r0, #0
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	605a      	str	r2, [r3, #4]
	data->z = (int16_t)(temp[4] << 8 | temp[5]) + accel_scale_factor;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	3304      	adds	r3, #4
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	021b      	lsls	r3, r3, #8
 8000c84:	b21a      	sxth	r2, r3
 8000c86:	68fb      	ldr	r3, [r7, #12]
 8000c88:	3305      	adds	r3, #5
 8000c8a:	781b      	ldrb	r3, [r3, #0]
 8000c8c:	b21b      	sxth	r3, r3
 8000c8e:	4313      	orrs	r3, r2
 8000c90:	b21b      	sxth	r3, r3
 8000c92:	0018      	movs	r0, r3
 8000c94:	f7ff fd76 	bl	8000784 <__aeabi_i2f>
 8000c98:	1c02      	adds	r2, r0, #0
 8000c9a:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <icm20948_accel_read+0x94>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	1c19      	adds	r1, r3, #0
 8000ca0:	1c10      	adds	r0, r2, #0
 8000ca2:	f7ff fbb1 	bl	8000408 <__aeabi_fadd>
 8000ca6:	1c03      	adds	r3, r0, #0
 8000ca8:	1c1a      	adds	r2, r3, #0
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	609a      	str	r2, [r3, #8]
	// Add scale factor because calibraiton function offset gravity acceleration.
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b004      	add	sp, #16
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	20000190 	.word	0x20000190

08000cbc <icm20948_who_am_i>:
	data->y /= accel_scale_factor;
	data->z /= accel_scale_factor;
}
*/
bool icm20948_who_am_i()
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
	uint8_t icm20948_id = read_single_icm20948_reg(ub_0, B0_WHO_AM_I);
 8000cc2:	1dfc      	adds	r4, r7, #7
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	2000      	movs	r0, #0
 8000cc8:	f000 fc06 	bl	80014d8 <read_single_icm20948_reg>
 8000ccc:	0003      	movs	r3, r0
 8000cce:	7023      	strb	r3, [r4, #0]

	if(icm20948_id == ICM20948_ID)
 8000cd0:	1dfb      	adds	r3, r7, #7
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	2bea      	cmp	r3, #234	; 0xea
 8000cd6:	d101      	bne.n	8000cdc <icm20948_who_am_i+0x20>
		return true;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	e000      	b.n	8000cde <icm20948_who_am_i+0x22>
	else
		return false;
 8000cdc:	2300      	movs	r3, #0
}
 8000cde:	0018      	movs	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b003      	add	sp, #12
 8000ce4:	bd90      	pop	{r4, r7, pc}

08000ce6 <icm20948_device_reset>:

void icm20948_device_reset()
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, 0x80 | 0x41);
 8000cea:	22c1      	movs	r2, #193	; 0xc1
 8000cec:	2106      	movs	r1, #6
 8000cee:	2000      	movs	r0, #0
 8000cf0:	f000 fc24 	bl	800153c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000cf4:	2064      	movs	r0, #100	; 0x64
 8000cf6:	f000 fe63 	bl	80019c0 <HAL_Delay>
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <icm20948_wakeup>:

void icm20948_wakeup()
{
 8000d00:	b590      	push	{r4, r7, lr}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000d06:	1dfc      	adds	r4, r7, #7
 8000d08:	2106      	movs	r1, #6
 8000d0a:	2000      	movs	r0, #0
 8000d0c:	f000 fbe4 	bl	80014d8 <read_single_icm20948_reg>
 8000d10:	0003      	movs	r3, r0
 8000d12:	7023      	strb	r3, [r4, #0]
	new_val &= 0xBF;
 8000d14:	1dfb      	adds	r3, r7, #7
 8000d16:	1dfa      	adds	r2, r7, #7
 8000d18:	7812      	ldrb	r2, [r2, #0]
 8000d1a:	2140      	movs	r1, #64	; 0x40
 8000d1c:	438a      	bics	r2, r1
 8000d1e:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000d20:	1dfb      	adds	r3, r7, #7
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	001a      	movs	r2, r3
 8000d26:	2106      	movs	r1, #6
 8000d28:	2000      	movs	r0, #0
 8000d2a:	f000 fc07 	bl	800153c <write_single_icm20948_reg>
	HAL_Delay(100);
 8000d2e:	2064      	movs	r0, #100	; 0x64
 8000d30:	f000 fe46 	bl	80019c0 <HAL_Delay>
}
 8000d34:	46c0      	nop			; (mov r8, r8)
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b003      	add	sp, #12
 8000d3a:	bd90      	pop	{r4, r7, pc}

08000d3c <icm20948_spi_slave_enable>:
	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
	HAL_Delay(100);
}

void icm20948_spi_slave_enable()
{
 8000d3c:	b590      	push	{r4, r7, lr}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_USER_CTRL);
 8000d42:	1dfc      	adds	r4, r7, #7
 8000d44:	2103      	movs	r1, #3
 8000d46:	2000      	movs	r0, #0
 8000d48:	f000 fbc6 	bl	80014d8 <read_single_icm20948_reg>
 8000d4c:	0003      	movs	r3, r0
 8000d4e:	7023      	strb	r3, [r4, #0]
	new_val |= 0x10;
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	1dfa      	adds	r2, r7, #7
 8000d54:	7812      	ldrb	r2, [r2, #0]
 8000d56:	2110      	movs	r1, #16
 8000d58:	430a      	orrs	r2, r1
 8000d5a:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_USER_CTRL, new_val);
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	001a      	movs	r2, r3
 8000d62:	2103      	movs	r1, #3
 8000d64:	2000      	movs	r0, #0
 8000d66:	f000 fbe9 	bl	800153c <write_single_icm20948_reg>
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b003      	add	sp, #12
 8000d70:	bd90      	pop	{r4, r7, pc}

08000d72 <icm20948_clock_source>:

	write_single_icm20948_reg(ub_3, B3_I2C_MST_CTRL, new_val);
}
*/
void icm20948_clock_source(uint8_t source)
{
 8000d72:	b5b0      	push	{r4, r5, r7, lr}
 8000d74:	b084      	sub	sp, #16
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	0002      	movs	r2, r0
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_0, B0_PWR_MGMT_1);
 8000d7e:	250f      	movs	r5, #15
 8000d80:	197c      	adds	r4, r7, r5
 8000d82:	2106      	movs	r1, #6
 8000d84:	2000      	movs	r0, #0
 8000d86:	f000 fba7 	bl	80014d8 <read_single_icm20948_reg>
 8000d8a:	0003      	movs	r3, r0
 8000d8c:	7023      	strb	r3, [r4, #0]
	new_val |= source;
 8000d8e:	0028      	movs	r0, r5
 8000d90:	183b      	adds	r3, r7, r0
 8000d92:	1839      	adds	r1, r7, r0
 8000d94:	1dfa      	adds	r2, r7, #7
 8000d96:	7809      	ldrb	r1, [r1, #0]
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	430a      	orrs	r2, r1
 8000d9c:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_0, B0_PWR_MGMT_1, new_val);
 8000d9e:	183b      	adds	r3, r7, r0
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	001a      	movs	r2, r3
 8000da4:	2106      	movs	r1, #6
 8000da6:	2000      	movs	r0, #0
 8000da8:	f000 fbc8 	bl	800153c <write_single_icm20948_reg>
}
 8000dac:	46c0      	nop			; (mov r8, r8)
 8000dae:	46bd      	mov	sp, r7
 8000db0:	b004      	add	sp, #16
 8000db2:	bdb0      	pop	{r4, r5, r7, pc}

08000db4 <icm20948_odr_align_enable>:

void icm20948_odr_align_enable()
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
	write_single_icm20948_reg(ub_2, B2_ODR_ALIGN_EN, 0x01);
 8000db8:	2201      	movs	r2, #1
 8000dba:	2109      	movs	r1, #9
 8000dbc:	2020      	movs	r0, #32
 8000dbe:	f000 fbbd 	bl	800153c <write_single_icm20948_reg>
}
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <icm20948_gyro_low_pass_filter>:

void icm20948_gyro_low_pass_filter(uint8_t config)
{
 8000dc8:	b5b0      	push	{r4, r5, r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	0002      	movs	r2, r0
 8000dd0:	1dfb      	adds	r3, r7, #7
 8000dd2:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8000dd4:	250f      	movs	r5, #15
 8000dd6:	197c      	adds	r4, r7, r5
 8000dd8:	2101      	movs	r1, #1
 8000dda:	2020      	movs	r0, #32
 8000ddc:	f000 fb7c 	bl	80014d8 <read_single_icm20948_reg>
 8000de0:	0003      	movs	r3, r0
 8000de2:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8000de4:	1dfb      	adds	r3, r7, #7
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	00db      	lsls	r3, r3, #3
 8000dea:	b25a      	sxtb	r2, r3
 8000dec:	197b      	adds	r3, r7, r5
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	4313      	orrs	r3, r2
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	197b      	adds	r3, r7, r5
 8000df8:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000dfa:	197b      	adds	r3, r7, r5
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	001a      	movs	r2, r3
 8000e00:	2101      	movs	r1, #1
 8000e02:	2020      	movs	r0, #32
 8000e04:	f000 fb9a 	bl	800153c <write_single_icm20948_reg>
}
 8000e08:	46c0      	nop			; (mov r8, r8)
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	b004      	add	sp, #16
 8000e0e:	bdb0      	pop	{r4, r5, r7, pc}

08000e10 <icm20948_accel_low_pass_filter>:

void icm20948_accel_low_pass_filter(uint8_t config)
{
 8000e10:	b5b0      	push	{r4, r5, r7, lr}
 8000e12:	b084      	sub	sp, #16
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	0002      	movs	r2, r0
 8000e18:	1dfb      	adds	r3, r7, #7
 8000e1a:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 8000e1c:	250f      	movs	r5, #15
 8000e1e:	197c      	adds	r4, r7, r5
 8000e20:	2114      	movs	r1, #20
 8000e22:	2020      	movs	r0, #32
 8000e24:	f000 fb58 	bl	80014d8 <read_single_icm20948_reg>
 8000e28:	0003      	movs	r3, r0
 8000e2a:	7023      	strb	r3, [r4, #0]
	new_val |= config << 3;
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	b25a      	sxtb	r2, r3
 8000e34:	197b      	adds	r3, r7, r5
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	b25b      	sxtb	r3, r3
 8000e3a:	4313      	orrs	r3, r2
 8000e3c:	b25a      	sxtb	r2, r3
 8000e3e:	197b      	adds	r3, r7, r5
 8000e40:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8000e42:	197b      	adds	r3, r7, r5
 8000e44:	781b      	ldrb	r3, [r3, #0]
 8000e46:	001a      	movs	r2, r3
 8000e48:	2101      	movs	r1, #1
 8000e4a:	2020      	movs	r0, #32
 8000e4c:	f000 fb76 	bl	800153c <write_single_icm20948_reg>
}
 8000e50:	46c0      	nop			; (mov r8, r8)
 8000e52:	46bd      	mov	sp, r7
 8000e54:	b004      	add	sp, #16
 8000e56:	bdb0      	pop	{r4, r5, r7, pc}

08000e58 <icm20948_gyro_sample_rate_divider>:

void icm20948_gyro_sample_rate_divider(uint8_t divider)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	0002      	movs	r2, r0
 8000e60:	1dfb      	adds	r3, r7, #7
 8000e62:	701a      	strb	r2, [r3, #0]
	write_single_icm20948_reg(ub_2, B2_GYRO_SMPLRT_DIV, divider);
 8000e64:	1dfb      	adds	r3, r7, #7
 8000e66:	781b      	ldrb	r3, [r3, #0]
 8000e68:	001a      	movs	r2, r3
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	2020      	movs	r0, #32
 8000e6e:	f000 fb65 	bl	800153c <write_single_icm20948_reg>
}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <icm20948_accel_sample_rate_divider>:

void icm20948_accel_sample_rate_divider(uint16_t divider)
{
 8000e7a:	b590      	push	{r4, r7, lr}
 8000e7c:	b085      	sub	sp, #20
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	0002      	movs	r2, r0
 8000e82:	1dbb      	adds	r3, r7, #6
 8000e84:	801a      	strh	r2, [r3, #0]
	uint8_t divider_1 = (uint8_t)(divider >> 8);
 8000e86:	1dbb      	adds	r3, r7, #6
 8000e88:	881b      	ldrh	r3, [r3, #0]
 8000e8a:	0a1b      	lsrs	r3, r3, #8
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	200f      	movs	r0, #15
 8000e90:	183b      	adds	r3, r7, r0
 8000e92:	701a      	strb	r2, [r3, #0]
	uint8_t divider_2 = (uint8_t)(0x0F & divider);
 8000e94:	1dbb      	adds	r3, r7, #6
 8000e96:	881b      	ldrh	r3, [r3, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	240e      	movs	r4, #14
 8000e9c:	193b      	adds	r3, r7, r4
 8000e9e:	210f      	movs	r1, #15
 8000ea0:	400a      	ands	r2, r1
 8000ea2:	701a      	strb	r2, [r3, #0]

	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_1, divider_1);
 8000ea4:	183b      	adds	r3, r7, r0
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	001a      	movs	r2, r3
 8000eaa:	2110      	movs	r1, #16
 8000eac:	2020      	movs	r0, #32
 8000eae:	f000 fb45 	bl	800153c <write_single_icm20948_reg>
	write_single_icm20948_reg(ub_2, B2_ACCEL_SMPLRT_DIV_2, divider_2);
 8000eb2:	193b      	adds	r3, r7, r4
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	001a      	movs	r2, r3
 8000eb8:	2111      	movs	r1, #17
 8000eba:	2020      	movs	r0, #32
 8000ebc:	f000 fb3e 	bl	800153c <write_single_icm20948_reg>
}
 8000ec0:	46c0      	nop			; (mov r8, r8)
 8000ec2:	46bd      	mov	sp, r7
 8000ec4:	b005      	add	sp, #20
 8000ec6:	bd90      	pop	{r4, r7, pc}

08000ec8 <icm20948_gyro_calibration>:

void icm20948_gyro_calibration()
{
 8000ec8:	b5b0      	push	{r4, r5, r7, lr}
 8000eca:	b08a      	sub	sp, #40	; 0x28
 8000ecc:	af00      	add	r7, sp, #0
	axises temp;
	int32_t gyro_bias[3] = {0};
 8000ece:	230c      	movs	r3, #12
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	230c      	movs	r3, #12
 8000ed6:	001a      	movs	r2, r3
 8000ed8:	2100      	movs	r1, #0
 8000eda:	f002 ff6d 	bl	8003db8 <memset>
	uint8_t gyro_offset[6] = {0};
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	601a      	str	r2, [r3, #0]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
 8000eec:	e041      	b.n	8000f72 <icm20948_gyro_calibration+0xaa>
	{
		icm20948_gyro_read(&temp);
 8000eee:	2518      	movs	r5, #24
 8000ef0:	197b      	adds	r3, r7, r5
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f7ff fe54 	bl	8000ba0 <icm20948_gyro_read>
		gyro_bias[0] += temp.x;
 8000ef8:	240c      	movs	r4, #12
 8000efa:	193b      	adds	r3, r7, r4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	0018      	movs	r0, r3
 8000f00:	f7ff fc40 	bl	8000784 <__aeabi_i2f>
 8000f04:	1c02      	adds	r2, r0, #0
 8000f06:	197b      	adds	r3, r7, r5
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	1c19      	adds	r1, r3, #0
 8000f0c:	1c10      	adds	r0, r2, #0
 8000f0e:	f7ff fa7b 	bl	8000408 <__aeabi_fadd>
 8000f12:	1c03      	adds	r3, r0, #0
 8000f14:	1c18      	adds	r0, r3, #0
 8000f16:	f7ff fc15 	bl	8000744 <__aeabi_f2iz>
 8000f1a:	0002      	movs	r2, r0
 8000f1c:	193b      	adds	r3, r7, r4
 8000f1e:	601a      	str	r2, [r3, #0]
		gyro_bias[1] += temp.y;
 8000f20:	193b      	adds	r3, r7, r4
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff fc2d 	bl	8000784 <__aeabi_i2f>
 8000f2a:	1c02      	adds	r2, r0, #0
 8000f2c:	197b      	adds	r3, r7, r5
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	1c19      	adds	r1, r3, #0
 8000f32:	1c10      	adds	r0, r2, #0
 8000f34:	f7ff fa68 	bl	8000408 <__aeabi_fadd>
 8000f38:	1c03      	adds	r3, r0, #0
 8000f3a:	1c18      	adds	r0, r3, #0
 8000f3c:	f7ff fc02 	bl	8000744 <__aeabi_f2iz>
 8000f40:	0002      	movs	r2, r0
 8000f42:	193b      	adds	r3, r7, r4
 8000f44:	605a      	str	r2, [r3, #4]
		gyro_bias[2] += temp.z;
 8000f46:	193b      	adds	r3, r7, r4
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f7ff fc1a 	bl	8000784 <__aeabi_i2f>
 8000f50:	1c02      	adds	r2, r0, #0
 8000f52:	197b      	adds	r3, r7, r5
 8000f54:	689b      	ldr	r3, [r3, #8]
 8000f56:	1c19      	adds	r1, r3, #0
 8000f58:	1c10      	adds	r0, r2, #0
 8000f5a:	f7ff fa55 	bl	8000408 <__aeabi_fadd>
 8000f5e:	1c03      	adds	r3, r0, #0
 8000f60:	1c18      	adds	r0, r3, #0
 8000f62:	f7ff fbef 	bl	8000744 <__aeabi_f2iz>
 8000f66:	0002      	movs	r2, r0
 8000f68:	193b      	adds	r3, r7, r4
 8000f6a:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	3301      	adds	r3, #1
 8000f70:	627b      	str	r3, [r7, #36]	; 0x24
 8000f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f74:	2b63      	cmp	r3, #99	; 0x63
 8000f76:	ddba      	ble.n	8000eee <icm20948_gyro_calibration+0x26>
	}

	gyro_bias[0] /= 100;
 8000f78:	240c      	movs	r4, #12
 8000f7a:	193b      	adds	r3, r7, r4
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2164      	movs	r1, #100	; 0x64
 8000f80:	0018      	movs	r0, r3
 8000f82:	f7ff f955 	bl	8000230 <__divsi3>
 8000f86:	0003      	movs	r3, r0
 8000f88:	001a      	movs	r2, r3
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	601a      	str	r2, [r3, #0]
	gyro_bias[1] /= 100;
 8000f8e:	193b      	adds	r3, r7, r4
 8000f90:	685b      	ldr	r3, [r3, #4]
 8000f92:	2164      	movs	r1, #100	; 0x64
 8000f94:	0018      	movs	r0, r3
 8000f96:	f7ff f94b 	bl	8000230 <__divsi3>
 8000f9a:	0003      	movs	r3, r0
 8000f9c:	001a      	movs	r2, r3
 8000f9e:	193b      	adds	r3, r7, r4
 8000fa0:	605a      	str	r2, [r3, #4]
	gyro_bias[2] /= 100;
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	2164      	movs	r1, #100	; 0x64
 8000fa8:	0018      	movs	r0, r3
 8000faa:	f7ff f941 	bl	8000230 <__divsi3>
 8000fae:	0003      	movs	r3, r0
 8000fb0:	001a      	movs	r2, r3
 8000fb2:	193b      	adds	r3, r7, r4
 8000fb4:	609a      	str	r2, [r3, #8]

	// Construct the gyro biases for push to the hardware gyro bias registers,
	// which are reset to zero upon device startup.
	// Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format.
	// Biases are additive, so change sign on calculated average gyro biases
	gyro_offset[0] = (-gyro_bias[0] / 4  >> 8) & 0xFF;
 8000fb6:	193b      	adds	r3, r7, r4
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	425b      	negs	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	da00      	bge.n	8000fc2 <icm20948_gyro_calibration+0xfa>
 8000fc0:	3303      	adds	r3, #3
 8000fc2:	109b      	asrs	r3, r3, #2
 8000fc4:	121b      	asrs	r3, r3, #8
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	1d3b      	adds	r3, r7, #4
 8000fca:	701a      	strb	r2, [r3, #0]
	gyro_offset[1] = (-gyro_bias[0] / 4)       & 0xFF;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	18fb      	adds	r3, r7, r3
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	425b      	negs	r3, r3
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	da00      	bge.n	8000fda <icm20948_gyro_calibration+0x112>
 8000fd8:	3303      	adds	r3, #3
 8000fda:	109b      	asrs	r3, r3, #2
 8000fdc:	b2da      	uxtb	r2, r3
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	705a      	strb	r2, [r3, #1]
	gyro_offset[2] = (-gyro_bias[1] / 4  >> 8) & 0xFF;
 8000fe2:	230c      	movs	r3, #12
 8000fe4:	18fb      	adds	r3, r7, r3
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	425b      	negs	r3, r3
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	da00      	bge.n	8000ff0 <icm20948_gyro_calibration+0x128>
 8000fee:	3303      	adds	r3, #3
 8000ff0:	109b      	asrs	r3, r3, #2
 8000ff2:	121b      	asrs	r3, r3, #8
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	1d3b      	adds	r3, r7, #4
 8000ff8:	709a      	strb	r2, [r3, #2]
	gyro_offset[3] = (-gyro_bias[1] / 4)       & 0xFF;
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	18fb      	adds	r3, r7, r3
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	425b      	negs	r3, r3
 8001002:	2b00      	cmp	r3, #0
 8001004:	da00      	bge.n	8001008 <icm20948_gyro_calibration+0x140>
 8001006:	3303      	adds	r3, #3
 8001008:	109b      	asrs	r3, r3, #2
 800100a:	b2da      	uxtb	r2, r3
 800100c:	1d3b      	adds	r3, r7, #4
 800100e:	70da      	strb	r2, [r3, #3]
	gyro_offset[4] = (-gyro_bias[2] / 4  >> 8) & 0xFF;
 8001010:	230c      	movs	r3, #12
 8001012:	18fb      	adds	r3, r7, r3
 8001014:	689b      	ldr	r3, [r3, #8]
 8001016:	425b      	negs	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	da00      	bge.n	800101e <icm20948_gyro_calibration+0x156>
 800101c:	3303      	adds	r3, #3
 800101e:	109b      	asrs	r3, r3, #2
 8001020:	121b      	asrs	r3, r3, #8
 8001022:	b2da      	uxtb	r2, r3
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	711a      	strb	r2, [r3, #4]
	gyro_offset[5] = (-gyro_bias[2] / 4)       & 0xFF;
 8001028:	230c      	movs	r3, #12
 800102a:	18fb      	adds	r3, r7, r3
 800102c:	689b      	ldr	r3, [r3, #8]
 800102e:	425b      	negs	r3, r3
 8001030:	2b00      	cmp	r3, #0
 8001032:	da00      	bge.n	8001036 <icm20948_gyro_calibration+0x16e>
 8001034:	3303      	adds	r3, #3
 8001036:	109b      	asrs	r3, r3, #2
 8001038:	b2da      	uxtb	r2, r3
 800103a:	1d3b      	adds	r3, r7, #4
 800103c:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_2, B2_XG_OFFS_USRH, gyro_offset, 6);
 800103e:	1d3a      	adds	r2, r7, #4
 8001040:	2306      	movs	r3, #6
 8001042:	2103      	movs	r1, #3
 8001044:	2020      	movs	r0, #32
 8001046:	f000 fae1 	bl	800160c <write_multiple_icm20948_reg>
}
 800104a:	46c0      	nop			; (mov r8, r8)
 800104c:	46bd      	mov	sp, r7
 800104e:	b00a      	add	sp, #40	; 0x28
 8001050:	bdb0      	pop	{r4, r5, r7, pc}
	...

08001054 <icm20948_accel_calibration>:

void icm20948_accel_calibration()
{
 8001054:	b5b0      	push	{r4, r5, r7, lr}
 8001056:	b090      	sub	sp, #64	; 0x40
 8001058:	af00      	add	r7, sp, #0
	axises temp;
	uint8_t* temp2;
	uint8_t* temp3;
	uint8_t* temp4;

	int32_t accel_bias[3] = {0};
 800105a:	2318      	movs	r3, #24
 800105c:	18fb      	adds	r3, r7, r3
 800105e:	0018      	movs	r0, r3
 8001060:	230c      	movs	r3, #12
 8001062:	001a      	movs	r2, r3
 8001064:	2100      	movs	r1, #0
 8001066:	f002 fea7 	bl	8003db8 <memset>
	int32_t accel_bias_reg[3] = {0};
 800106a:	230c      	movs	r3, #12
 800106c:	18fb      	adds	r3, r7, r3
 800106e:	0018      	movs	r0, r3
 8001070:	230c      	movs	r3, #12
 8001072:	001a      	movs	r2, r3
 8001074:	2100      	movs	r1, #0
 8001076:	f002 fe9f 	bl	8003db8 <memset>
	uint8_t accel_offset[6] = {0};
 800107a:	1d3b      	adds	r3, r7, #4
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	2200      	movs	r2, #0
 8001082:	809a      	strh	r2, [r3, #4]

	for(int i = 0; i < 100; i++)
 8001084:	2300      	movs	r3, #0
 8001086:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001088:	e041      	b.n	800110e <icm20948_accel_calibration+0xba>
	{
		icm20948_accel_read(&temp);
 800108a:	2524      	movs	r5, #36	; 0x24
 800108c:	197b      	adds	r3, r7, r5
 800108e:	0018      	movs	r0, r3
 8001090:	f7ff fdc8 	bl	8000c24 <icm20948_accel_read>
		accel_bias[0] += temp.x;
 8001094:	2418      	movs	r4, #24
 8001096:	193b      	adds	r3, r7, r4
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	0018      	movs	r0, r3
 800109c:	f7ff fb72 	bl	8000784 <__aeabi_i2f>
 80010a0:	1c02      	adds	r2, r0, #0
 80010a2:	197b      	adds	r3, r7, r5
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	1c19      	adds	r1, r3, #0
 80010a8:	1c10      	adds	r0, r2, #0
 80010aa:	f7ff f9ad 	bl	8000408 <__aeabi_fadd>
 80010ae:	1c03      	adds	r3, r0, #0
 80010b0:	1c18      	adds	r0, r3, #0
 80010b2:	f7ff fb47 	bl	8000744 <__aeabi_f2iz>
 80010b6:	0002      	movs	r2, r0
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	601a      	str	r2, [r3, #0]
		accel_bias[1] += temp.y;
 80010bc:	193b      	adds	r3, r7, r4
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	0018      	movs	r0, r3
 80010c2:	f7ff fb5f 	bl	8000784 <__aeabi_i2f>
 80010c6:	1c02      	adds	r2, r0, #0
 80010c8:	197b      	adds	r3, r7, r5
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	1c19      	adds	r1, r3, #0
 80010ce:	1c10      	adds	r0, r2, #0
 80010d0:	f7ff f99a 	bl	8000408 <__aeabi_fadd>
 80010d4:	1c03      	adds	r3, r0, #0
 80010d6:	1c18      	adds	r0, r3, #0
 80010d8:	f7ff fb34 	bl	8000744 <__aeabi_f2iz>
 80010dc:	0002      	movs	r2, r0
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	605a      	str	r2, [r3, #4]
		accel_bias[2] += temp.z;
 80010e2:	193b      	adds	r3, r7, r4
 80010e4:	689b      	ldr	r3, [r3, #8]
 80010e6:	0018      	movs	r0, r3
 80010e8:	f7ff fb4c 	bl	8000784 <__aeabi_i2f>
 80010ec:	1c02      	adds	r2, r0, #0
 80010ee:	197b      	adds	r3, r7, r5
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	1c19      	adds	r1, r3, #0
 80010f4:	1c10      	adds	r0, r2, #0
 80010f6:	f7ff f987 	bl	8000408 <__aeabi_fadd>
 80010fa:	1c03      	adds	r3, r0, #0
 80010fc:	1c18      	adds	r0, r3, #0
 80010fe:	f7ff fb21 	bl	8000744 <__aeabi_f2iz>
 8001102:	0002      	movs	r2, r0
 8001104:	193b      	adds	r3, r7, r4
 8001106:	609a      	str	r2, [r3, #8]
	for(int i = 0; i < 100; i++)
 8001108:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800110a:	3301      	adds	r3, #1
 800110c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800110e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001110:	2b63      	cmp	r3, #99	; 0x63
 8001112:	ddba      	ble.n	800108a <icm20948_accel_calibration+0x36>
	}

	accel_bias[0] /= 100;
 8001114:	2418      	movs	r4, #24
 8001116:	193b      	adds	r3, r7, r4
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	2164      	movs	r1, #100	; 0x64
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff f887 	bl	8000230 <__divsi3>
 8001122:	0003      	movs	r3, r0
 8001124:	001a      	movs	r2, r3
 8001126:	193b      	adds	r3, r7, r4
 8001128:	601a      	str	r2, [r3, #0]
	accel_bias[1] /= 100;
 800112a:	193b      	adds	r3, r7, r4
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	2164      	movs	r1, #100	; 0x64
 8001130:	0018      	movs	r0, r3
 8001132:	f7ff f87d 	bl	8000230 <__divsi3>
 8001136:	0003      	movs	r3, r0
 8001138:	001a      	movs	r2, r3
 800113a:	193b      	adds	r3, r7, r4
 800113c:	605a      	str	r2, [r3, #4]
	accel_bias[2] /= 100;
 800113e:	193b      	adds	r3, r7, r4
 8001140:	689b      	ldr	r3, [r3, #8]
 8001142:	2164      	movs	r1, #100	; 0x64
 8001144:	0018      	movs	r0, r3
 8001146:	f7ff f873 	bl	8000230 <__divsi3>
 800114a:	0003      	movs	r3, r0
 800114c:	001a      	movs	r2, r3
 800114e:	193b      	adds	r3, r7, r4
 8001150:	609a      	str	r2, [r3, #8]

	uint8_t mask_bit[3] = {0, 0, 0};
 8001152:	003b      	movs	r3, r7
 8001154:	4a68      	ldr	r2, [pc, #416]	; (80012f8 <icm20948_accel_calibration+0x2a4>)
 8001156:	8811      	ldrh	r1, [r2, #0]
 8001158:	8019      	strh	r1, [r3, #0]
 800115a:	7892      	ldrb	r2, [r2, #2]
 800115c:	709a      	strb	r2, [r3, #2]

	temp2 = read_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, 2);
 800115e:	2202      	movs	r2, #2
 8001160:	2114      	movs	r1, #20
 8001162:	2010      	movs	r0, #16
 8001164:	f000 fa18 	bl	8001598 <read_multiple_icm20948_reg>
 8001168:	0003      	movs	r3, r0
 800116a:	63bb      	str	r3, [r7, #56]	; 0x38
	accel_bias_reg[0] = (int32_t)(temp2[0] << 8 | temp2[1]);
 800116c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800116e:	781b      	ldrb	r3, [r3, #0]
 8001170:	021b      	lsls	r3, r3, #8
 8001172:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001174:	3201      	adds	r2, #1
 8001176:	7812      	ldrb	r2, [r2, #0]
 8001178:	431a      	orrs	r2, r3
 800117a:	250c      	movs	r5, #12
 800117c:	197b      	adds	r3, r7, r5
 800117e:	601a      	str	r2, [r3, #0]
	mask_bit[0] = temp2[1] & 0x01;
 8001180:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001182:	3301      	adds	r3, #1
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2201      	movs	r2, #1
 8001188:	4013      	ands	r3, r2
 800118a:	b2da      	uxtb	r2, r3
 800118c:	003b      	movs	r3, r7
 800118e:	701a      	strb	r2, [r3, #0]

	temp3 = read_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, 2);
 8001190:	2202      	movs	r2, #2
 8001192:	2117      	movs	r1, #23
 8001194:	2010      	movs	r0, #16
 8001196:	f000 f9ff 	bl	8001598 <read_multiple_icm20948_reg>
 800119a:	0003      	movs	r3, r0
 800119c:	637b      	str	r3, [r7, #52]	; 0x34
	accel_bias_reg[1] = (int32_t)(temp3[0] << 8 | temp3[1]);
 800119e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011a0:	781b      	ldrb	r3, [r3, #0]
 80011a2:	021b      	lsls	r3, r3, #8
 80011a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80011a6:	3201      	adds	r2, #1
 80011a8:	7812      	ldrb	r2, [r2, #0]
 80011aa:	431a      	orrs	r2, r3
 80011ac:	197b      	adds	r3, r7, r5
 80011ae:	605a      	str	r2, [r3, #4]
	mask_bit[1] = temp3[1] & 0x01;
 80011b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80011b2:	3301      	adds	r3, #1
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2201      	movs	r2, #1
 80011b8:	4013      	ands	r3, r2
 80011ba:	b2da      	uxtb	r2, r3
 80011bc:	003b      	movs	r3, r7
 80011be:	705a      	strb	r2, [r3, #1]

	temp4 = read_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, 2);
 80011c0:	2202      	movs	r2, #2
 80011c2:	211a      	movs	r1, #26
 80011c4:	2010      	movs	r0, #16
 80011c6:	f000 f9e7 	bl	8001598 <read_multiple_icm20948_reg>
 80011ca:	0003      	movs	r3, r0
 80011cc:	633b      	str	r3, [r7, #48]	; 0x30
	accel_bias_reg[2] = (int32_t)(temp4[0] << 8 | temp4[1]);
 80011ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011d0:	781b      	ldrb	r3, [r3, #0]
 80011d2:	021b      	lsls	r3, r3, #8
 80011d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80011d6:	3201      	adds	r2, #1
 80011d8:	7812      	ldrb	r2, [r2, #0]
 80011da:	431a      	orrs	r2, r3
 80011dc:	197b      	adds	r3, r7, r5
 80011de:	609a      	str	r2, [r3, #8]
	mask_bit[2] = temp4[1] & 0x01;
 80011e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80011e2:	3301      	adds	r3, #1
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	2201      	movs	r2, #1
 80011e8:	4013      	ands	r3, r2
 80011ea:	b2da      	uxtb	r2, r3
 80011ec:	003b      	movs	r3, r7
 80011ee:	709a      	strb	r2, [r3, #2]

	accel_bias_reg[0] -= (accel_bias[0] / 8);
 80011f0:	197b      	adds	r3, r7, r5
 80011f2:	681a      	ldr	r2, [r3, #0]
 80011f4:	193b      	adds	r3, r7, r4
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	da00      	bge.n	80011fe <icm20948_accel_calibration+0x1aa>
 80011fc:	3307      	adds	r3, #7
 80011fe:	10db      	asrs	r3, r3, #3
 8001200:	425b      	negs	r3, r3
 8001202:	18d2      	adds	r2, r2, r3
 8001204:	210c      	movs	r1, #12
 8001206:	187b      	adds	r3, r7, r1
 8001208:	601a      	str	r2, [r3, #0]
	accel_bias_reg[1] -= (accel_bias[1] / 8);
 800120a:	187b      	adds	r3, r7, r1
 800120c:	685a      	ldr	r2, [r3, #4]
 800120e:	2318      	movs	r3, #24
 8001210:	18fb      	adds	r3, r7, r3
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	2b00      	cmp	r3, #0
 8001216:	da00      	bge.n	800121a <icm20948_accel_calibration+0x1c6>
 8001218:	3307      	adds	r3, #7
 800121a:	10db      	asrs	r3, r3, #3
 800121c:	425b      	negs	r3, r3
 800121e:	18d2      	adds	r2, r2, r3
 8001220:	210c      	movs	r1, #12
 8001222:	187b      	adds	r3, r7, r1
 8001224:	605a      	str	r2, [r3, #4]
	accel_bias_reg[2] -= (accel_bias[2] / 8);
 8001226:	187b      	adds	r3, r7, r1
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	2318      	movs	r3, #24
 800122c:	18fb      	adds	r3, r7, r3
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	da00      	bge.n	8001236 <icm20948_accel_calibration+0x1e2>
 8001234:	3307      	adds	r3, #7
 8001236:	10db      	asrs	r3, r3, #3
 8001238:	425b      	negs	r3, r3
 800123a:	18d2      	adds	r2, r2, r3
 800123c:	210c      	movs	r1, #12
 800123e:	187b      	adds	r3, r7, r1
 8001240:	609a      	str	r2, [r3, #8]

	accel_offset[0] = (accel_bias_reg[0] >> 8) & 0xFF;
 8001242:	187b      	adds	r3, r7, r1
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	121b      	asrs	r3, r3, #8
 8001248:	b2da      	uxtb	r2, r3
 800124a:	1d3b      	adds	r3, r7, #4
 800124c:	701a      	strb	r2, [r3, #0]
  	accel_offset[1] = (accel_bias_reg[0])      & 0xFE;
 800124e:	187b      	adds	r3, r7, r1
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b2db      	uxtb	r3, r3
 8001254:	2201      	movs	r2, #1
 8001256:	4393      	bics	r3, r2
 8001258:	b2da      	uxtb	r2, r3
 800125a:	1d3b      	adds	r3, r7, #4
 800125c:	705a      	strb	r2, [r3, #1]
	accel_offset[1] = accel_offset[1] | mask_bit[0];
 800125e:	1d3b      	adds	r3, r7, #4
 8001260:	785a      	ldrb	r2, [r3, #1]
 8001262:	003b      	movs	r3, r7
 8001264:	781b      	ldrb	r3, [r3, #0]
 8001266:	4313      	orrs	r3, r2
 8001268:	b2da      	uxtb	r2, r3
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	705a      	strb	r2, [r3, #1]

	accel_offset[2] = (accel_bias_reg[1] >> 8) & 0xFF;
 800126e:	187b      	adds	r3, r7, r1
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	121b      	asrs	r3, r3, #8
 8001274:	b2da      	uxtb	r2, r3
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	709a      	strb	r2, [r3, #2]
  	accel_offset[3] = (accel_bias_reg[1])      & 0xFE;
 800127a:	187b      	adds	r3, r7, r1
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	b2db      	uxtb	r3, r3
 8001280:	2201      	movs	r2, #1
 8001282:	4393      	bics	r3, r2
 8001284:	b2da      	uxtb	r2, r3
 8001286:	1d3b      	adds	r3, r7, #4
 8001288:	70da      	strb	r2, [r3, #3]
	accel_offset[3] = accel_offset[3] | mask_bit[1];
 800128a:	1d3b      	adds	r3, r7, #4
 800128c:	78da      	ldrb	r2, [r3, #3]
 800128e:	003b      	movs	r3, r7
 8001290:	785b      	ldrb	r3, [r3, #1]
 8001292:	4313      	orrs	r3, r2
 8001294:	b2da      	uxtb	r2, r3
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	70da      	strb	r2, [r3, #3]

	accel_offset[4] = (accel_bias_reg[2] >> 8) & 0xFF;
 800129a:	187b      	adds	r3, r7, r1
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	121b      	asrs	r3, r3, #8
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	1d3b      	adds	r3, r7, #4
 80012a4:	711a      	strb	r2, [r3, #4]
	accel_offset[5] = (accel_bias_reg[2])      & 0xFE;
 80012a6:	187b      	adds	r3, r7, r1
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	b2db      	uxtb	r3, r3
 80012ac:	2201      	movs	r2, #1
 80012ae:	4393      	bics	r3, r2
 80012b0:	b2da      	uxtb	r2, r3
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	715a      	strb	r2, [r3, #5]
	accel_offset[5] = accel_offset[5] | mask_bit[2];
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	795a      	ldrb	r2, [r3, #5]
 80012ba:	003b      	movs	r3, r7
 80012bc:	789b      	ldrb	r3, [r3, #2]
 80012be:	4313      	orrs	r3, r2
 80012c0:	b2da      	uxtb	r2, r3
 80012c2:	1d3b      	adds	r3, r7, #4
 80012c4:	715a      	strb	r2, [r3, #5]

	write_multiple_icm20948_reg(ub_1, B1_XA_OFFS_H, &accel_offset[0], 2);
 80012c6:	1d3a      	adds	r2, r7, #4
 80012c8:	2302      	movs	r3, #2
 80012ca:	2114      	movs	r1, #20
 80012cc:	2010      	movs	r0, #16
 80012ce:	f000 f99d 	bl	800160c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_YA_OFFS_H, &accel_offset[2], 2);
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	1c9a      	adds	r2, r3, #2
 80012d6:	2302      	movs	r3, #2
 80012d8:	2117      	movs	r1, #23
 80012da:	2010      	movs	r0, #16
 80012dc:	f000 f996 	bl	800160c <write_multiple_icm20948_reg>
	write_multiple_icm20948_reg(ub_1, B1_ZA_OFFS_H, &accel_offset[4], 2);
 80012e0:	1d3b      	adds	r3, r7, #4
 80012e2:	1d1a      	adds	r2, r3, #4
 80012e4:	2302      	movs	r3, #2
 80012e6:	211a      	movs	r1, #26
 80012e8:	2010      	movs	r0, #16
 80012ea:	f000 f98f 	bl	800160c <write_multiple_icm20948_reg>
}
 80012ee:	46c0      	nop			; (mov r8, r8)
 80012f0:	46bd      	mov	sp, r7
 80012f2:	b010      	add	sp, #64	; 0x40
 80012f4:	bdb0      	pop	{r4, r5, r7, pc}
 80012f6:	46c0      	nop			; (mov r8, r8)
 80012f8:	080046b8 	.word	0x080046b8

080012fc <icm20948_gyro_full_scale_select>:

void icm20948_gyro_full_scale_select(gyro_full_scale full_scale)
{
 80012fc:	b590      	push	{r4, r7, lr}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	0002      	movs	r2, r0
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1);
 8001308:	230f      	movs	r3, #15
 800130a:	18fc      	adds	r4, r7, r3
 800130c:	2101      	movs	r1, #1
 800130e:	2020      	movs	r0, #32
 8001310:	f000 f8e2 	bl	80014d8 <read_single_icm20948_reg>
 8001314:	0003      	movs	r3, r0
 8001316:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 8001318:	1dfb      	adds	r3, r7, #7
 800131a:	781b      	ldrb	r3, [r3, #0]
 800131c:	2b03      	cmp	r3, #3
 800131e:	d027      	beq.n	8001370 <icm20948_gyro_full_scale_select+0x74>
 8001320:	dc31      	bgt.n	8001386 <icm20948_gyro_full_scale_select+0x8a>
 8001322:	2b02      	cmp	r3, #2
 8001324:	d019      	beq.n	800135a <icm20948_gyro_full_scale_select+0x5e>
 8001326:	dc2e      	bgt.n	8001386 <icm20948_gyro_full_scale_select+0x8a>
 8001328:	2b00      	cmp	r3, #0
 800132a:	d002      	beq.n	8001332 <icm20948_gyro_full_scale_select+0x36>
 800132c:	2b01      	cmp	r3, #1
 800132e:	d009      	beq.n	8001344 <icm20948_gyro_full_scale_select+0x48>
 8001330:	e029      	b.n	8001386 <icm20948_gyro_full_scale_select+0x8a>
	{
		case _250dps :
			new_val |= 0x00;
 8001332:	220f      	movs	r2, #15
 8001334:	18bb      	adds	r3, r7, r2
 8001336:	18ba      	adds	r2, r7, r2
 8001338:	7812      	ldrb	r2, [r2, #0]
 800133a:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 131.0;
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <icm20948_gyro_full_scale_select+0xa4>)
 800133e:	4a19      	ldr	r2, [pc, #100]	; (80013a4 <icm20948_gyro_full_scale_select+0xa8>)
 8001340:	601a      	str	r2, [r3, #0]
			break;
 8001342:	e020      	b.n	8001386 <icm20948_gyro_full_scale_select+0x8a>
		case _500dps :
			new_val |= 0x02;
 8001344:	220f      	movs	r2, #15
 8001346:	18bb      	adds	r3, r7, r2
 8001348:	18ba      	adds	r2, r7, r2
 800134a:	7812      	ldrb	r2, [r2, #0]
 800134c:	2102      	movs	r1, #2
 800134e:	430a      	orrs	r2, r1
 8001350:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 65.5;
 8001352:	4b13      	ldr	r3, [pc, #76]	; (80013a0 <icm20948_gyro_full_scale_select+0xa4>)
 8001354:	4a14      	ldr	r2, [pc, #80]	; (80013a8 <icm20948_gyro_full_scale_select+0xac>)
 8001356:	601a      	str	r2, [r3, #0]
			break;
 8001358:	e015      	b.n	8001386 <icm20948_gyro_full_scale_select+0x8a>
		case _1000dps :
			new_val |= 0x04;
 800135a:	220f      	movs	r2, #15
 800135c:	18bb      	adds	r3, r7, r2
 800135e:	18ba      	adds	r2, r7, r2
 8001360:	7812      	ldrb	r2, [r2, #0]
 8001362:	2104      	movs	r1, #4
 8001364:	430a      	orrs	r2, r1
 8001366:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 32.8;
 8001368:	4b0d      	ldr	r3, [pc, #52]	; (80013a0 <icm20948_gyro_full_scale_select+0xa4>)
 800136a:	4a10      	ldr	r2, [pc, #64]	; (80013ac <icm20948_gyro_full_scale_select+0xb0>)
 800136c:	601a      	str	r2, [r3, #0]
			break;
 800136e:	e00a      	b.n	8001386 <icm20948_gyro_full_scale_select+0x8a>
		case _2000dps :
			new_val |= 0x06;
 8001370:	220f      	movs	r2, #15
 8001372:	18bb      	adds	r3, r7, r2
 8001374:	18ba      	adds	r2, r7, r2
 8001376:	7812      	ldrb	r2, [r2, #0]
 8001378:	2106      	movs	r1, #6
 800137a:	430a      	orrs	r2, r1
 800137c:	701a      	strb	r2, [r3, #0]
			gyro_scale_factor = 16.4;
 800137e:	4b08      	ldr	r3, [pc, #32]	; (80013a0 <icm20948_gyro_full_scale_select+0xa4>)
 8001380:	4a0b      	ldr	r2, [pc, #44]	; (80013b0 <icm20948_gyro_full_scale_select+0xb4>)
 8001382:	601a      	str	r2, [r3, #0]
			break;
 8001384:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_GYRO_CONFIG_1, new_val);
 8001386:	230f      	movs	r3, #15
 8001388:	18fb      	adds	r3, r7, r3
 800138a:	781b      	ldrb	r3, [r3, #0]
 800138c:	001a      	movs	r2, r3
 800138e:	2101      	movs	r1, #1
 8001390:	2020      	movs	r0, #32
 8001392:	f000 f8d3 	bl	800153c <write_single_icm20948_reg>
}
 8001396:	46c0      	nop			; (mov r8, r8)
 8001398:	46bd      	mov	sp, r7
 800139a:	b005      	add	sp, #20
 800139c:	bd90      	pop	{r4, r7, pc}
 800139e:	46c0      	nop			; (mov r8, r8)
 80013a0:	2000018c 	.word	0x2000018c
 80013a4:	43030000 	.word	0x43030000
 80013a8:	42830000 	.word	0x42830000
 80013ac:	42033333 	.word	0x42033333
 80013b0:	41833333 	.word	0x41833333

080013b4 <icm20948_accel_full_scale_select>:

void icm20948_accel_full_scale_select(accel_full_scale full_scale)
{
 80013b4:	b590      	push	{r4, r7, lr}
 80013b6:	b085      	sub	sp, #20
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	0002      	movs	r2, r0
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	701a      	strb	r2, [r3, #0]
	uint8_t new_val = read_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG);
 80013c0:	230f      	movs	r3, #15
 80013c2:	18fc      	adds	r4, r7, r3
 80013c4:	2114      	movs	r1, #20
 80013c6:	2020      	movs	r0, #32
 80013c8:	f000 f886 	bl	80014d8 <read_single_icm20948_reg>
 80013cc:	0003      	movs	r3, r0
 80013ce:	7023      	strb	r3, [r4, #0]

	switch(full_scale)
 80013d0:	1dfb      	adds	r3, r7, #7
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b03      	cmp	r3, #3
 80013d6:	d02a      	beq.n	800142e <icm20948_accel_full_scale_select+0x7a>
 80013d8:	dc35      	bgt.n	8001446 <icm20948_accel_full_scale_select+0x92>
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d01b      	beq.n	8001416 <icm20948_accel_full_scale_select+0x62>
 80013de:	dc32      	bgt.n	8001446 <icm20948_accel_full_scale_select+0x92>
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d002      	beq.n	80013ea <icm20948_accel_full_scale_select+0x36>
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d00a      	beq.n	80013fe <icm20948_accel_full_scale_select+0x4a>
 80013e8:	e02d      	b.n	8001446 <icm20948_accel_full_scale_select+0x92>
	{
		case _2g :
			new_val |= 0x00;
 80013ea:	220f      	movs	r2, #15
 80013ec:	18bb      	adds	r3, r7, r2
 80013ee:	18ba      	adds	r2, r7, r2
 80013f0:	7812      	ldrb	r2, [r2, #0]
 80013f2:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 16384;
 80013f4:	4b1a      	ldr	r3, [pc, #104]	; (8001460 <icm20948_accel_full_scale_select+0xac>)
 80013f6:	228d      	movs	r2, #141	; 0x8d
 80013f8:	05d2      	lsls	r2, r2, #23
 80013fa:	601a      	str	r2, [r3, #0]
			break;
 80013fc:	e023      	b.n	8001446 <icm20948_accel_full_scale_select+0x92>
		case _4g :
			new_val |= 0x02;
 80013fe:	220f      	movs	r2, #15
 8001400:	18bb      	adds	r3, r7, r2
 8001402:	18ba      	adds	r2, r7, r2
 8001404:	7812      	ldrb	r2, [r2, #0]
 8001406:	2102      	movs	r1, #2
 8001408:	430a      	orrs	r2, r1
 800140a:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 8192;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <icm20948_accel_full_scale_select+0xac>)
 800140e:	228c      	movs	r2, #140	; 0x8c
 8001410:	05d2      	lsls	r2, r2, #23
 8001412:	601a      	str	r2, [r3, #0]
			break;
 8001414:	e017      	b.n	8001446 <icm20948_accel_full_scale_select+0x92>
		case _8g :
			new_val |= 0x04;
 8001416:	220f      	movs	r2, #15
 8001418:	18bb      	adds	r3, r7, r2
 800141a:	18ba      	adds	r2, r7, r2
 800141c:	7812      	ldrb	r2, [r2, #0]
 800141e:	2104      	movs	r1, #4
 8001420:	430a      	orrs	r2, r1
 8001422:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 4096;
 8001424:	4b0e      	ldr	r3, [pc, #56]	; (8001460 <icm20948_accel_full_scale_select+0xac>)
 8001426:	228b      	movs	r2, #139	; 0x8b
 8001428:	05d2      	lsls	r2, r2, #23
 800142a:	601a      	str	r2, [r3, #0]
			break;
 800142c:	e00b      	b.n	8001446 <icm20948_accel_full_scale_select+0x92>
		case _16g :
			new_val |= 0x06;
 800142e:	220f      	movs	r2, #15
 8001430:	18bb      	adds	r3, r7, r2
 8001432:	18ba      	adds	r2, r7, r2
 8001434:	7812      	ldrb	r2, [r2, #0]
 8001436:	2106      	movs	r1, #6
 8001438:	430a      	orrs	r2, r1
 800143a:	701a      	strb	r2, [r3, #0]
			accel_scale_factor = 2048;
 800143c:	4b08      	ldr	r3, [pc, #32]	; (8001460 <icm20948_accel_full_scale_select+0xac>)
 800143e:	228a      	movs	r2, #138	; 0x8a
 8001440:	05d2      	lsls	r2, r2, #23
 8001442:	601a      	str	r2, [r3, #0]
			break;
 8001444:	46c0      	nop			; (mov r8, r8)
	}

	write_single_icm20948_reg(ub_2, B2_ACCEL_CONFIG, new_val);
 8001446:	230f      	movs	r3, #15
 8001448:	18fb      	adds	r3, r7, r3
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	001a      	movs	r2, r3
 800144e:	2114      	movs	r1, #20
 8001450:	2020      	movs	r0, #32
 8001452:	f000 f873 	bl	800153c <write_single_icm20948_reg>
}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	46bd      	mov	sp, r7
 800145a:	b005      	add	sp, #20
 800145c:	bd90      	pop	{r4, r7, pc}
 800145e:	46c0      	nop			; (mov r8, r8)
 8001460:	20000190 	.word	0x20000190

08001464 <cs_high>:

/* Static Functions */

static void cs_high()
{
 8001464:	b580      	push	{r7, lr}
 8001466:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, SET);
 8001468:	2380      	movs	r3, #128	; 0x80
 800146a:	015b      	lsls	r3, r3, #5
 800146c:	4803      	ldr	r0, [pc, #12]	; (800147c <cs_high+0x18>)
 800146e:	2201      	movs	r2, #1
 8001470:	0019      	movs	r1, r3
 8001472:	f000 fced 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8001476:	46c0      	nop			; (mov r8, r8)
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	48000400 	.word	0x48000400

08001480 <cs_low>:

static void cs_low()
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(ICM20948_SPI_CS_PIN_PORT, ICM20948_SPI_CS_PIN_NUMBER, RESET);
 8001484:	2380      	movs	r3, #128	; 0x80
 8001486:	015b      	lsls	r3, r3, #5
 8001488:	4803      	ldr	r0, [pc, #12]	; (8001498 <cs_low+0x18>)
 800148a:	2200      	movs	r2, #0
 800148c:	0019      	movs	r1, r3
 800148e:	f000 fcdf 	bl	8001e50 <HAL_GPIO_WritePin>
}
 8001492:	46c0      	nop			; (mov r8, r8)
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	48000400 	.word	0x48000400

0800149c <select_user_bank>:

static void select_user_bank(userbank ub)
{
 800149c:	b590      	push	{r4, r7, lr}
 800149e:	b085      	sub	sp, #20
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	0002      	movs	r2, r0
 80014a4:	1dfb      	adds	r3, r7, #7
 80014a6:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | REG_BANK_SEL;
 80014a8:	240c      	movs	r4, #12
 80014aa:	193b      	adds	r3, r7, r4
 80014ac:	227f      	movs	r2, #127	; 0x7f
 80014ae:	701a      	strb	r2, [r3, #0]
	write_reg[1] = ub;
 80014b0:	193b      	adds	r3, r7, r4
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	705a      	strb	r2, [r3, #1]

	cs_low();
 80014b8:	f7ff ffe2 	bl	8001480 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 10);
 80014bc:	1939      	adds	r1, r7, r4
 80014be:	4805      	ldr	r0, [pc, #20]	; (80014d4 <select_user_bank+0x38>)
 80014c0:	230a      	movs	r3, #10
 80014c2:	2202      	movs	r2, #2
 80014c4:	f001 fa06 	bl	80028d4 <HAL_SPI_Transmit>
	cs_high();
 80014c8:	f7ff ffcc 	bl	8001464 <cs_high>
}
 80014cc:	46c0      	nop			; (mov r8, r8)
 80014ce:	46bd      	mov	sp, r7
 80014d0:	b005      	add	sp, #20
 80014d2:	bd90      	pop	{r4, r7, pc}
 80014d4:	2000008c 	.word	0x2000008c

080014d8 <read_single_icm20948_reg>:

static uint8_t read_single_icm20948_reg(userbank ub, uint8_t reg)
{
 80014d8:	b590      	push	{r4, r7, lr}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	0002      	movs	r2, r0
 80014e0:	1dfb      	adds	r3, r7, #7
 80014e2:	701a      	strb	r2, [r3, #0]
 80014e4:	1dbb      	adds	r3, r7, #6
 80014e6:	1c0a      	adds	r2, r1, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80014ea:	1dbb      	adds	r3, r7, #6
 80014ec:	781b      	ldrb	r3, [r3, #0]
 80014ee:	2280      	movs	r2, #128	; 0x80
 80014f0:	4252      	negs	r2, r2
 80014f2:	4313      	orrs	r3, r2
 80014f4:	b2da      	uxtb	r2, r3
 80014f6:	240f      	movs	r4, #15
 80014f8:	193b      	adds	r3, r7, r4
 80014fa:	701a      	strb	r2, [r3, #0]
	uint8_t reg_val;
	select_user_bank(ub);
 80014fc:	1dfb      	adds	r3, r7, #7
 80014fe:	781b      	ldrb	r3, [r3, #0]
 8001500:	0018      	movs	r0, r3
 8001502:	f7ff ffcb 	bl	800149c <select_user_bank>

	cs_low();
 8001506:	f7ff ffbb 	bl	8001480 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 800150a:	23fa      	movs	r3, #250	; 0xfa
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	1939      	adds	r1, r7, r4
 8001510:	4809      	ldr	r0, [pc, #36]	; (8001538 <read_single_icm20948_reg+0x60>)
 8001512:	2201      	movs	r2, #1
 8001514:	f001 f9de 	bl	80028d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, &reg_val, 1, 1000);
 8001518:	23fa      	movs	r3, #250	; 0xfa
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	240e      	movs	r4, #14
 800151e:	1939      	adds	r1, r7, r4
 8001520:	4805      	ldr	r0, [pc, #20]	; (8001538 <read_single_icm20948_reg+0x60>)
 8001522:	2201      	movs	r2, #1
 8001524:	f001 fb2e 	bl	8002b84 <HAL_SPI_Receive>
	cs_high();
 8001528:	f7ff ff9c 	bl	8001464 <cs_high>

	return reg_val;
 800152c:	193b      	adds	r3, r7, r4
 800152e:	781b      	ldrb	r3, [r3, #0]
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b005      	add	sp, #20
 8001536:	bd90      	pop	{r4, r7, pc}
 8001538:	2000008c 	.word	0x2000008c

0800153c <write_single_icm20948_reg>:

static void write_single_icm20948_reg(userbank ub, uint8_t reg, uint8_t val)
{
 800153c:	b590      	push	{r4, r7, lr}
 800153e:	b085      	sub	sp, #20
 8001540:	af00      	add	r7, sp, #0
 8001542:	0004      	movs	r4, r0
 8001544:	0008      	movs	r0, r1
 8001546:	0011      	movs	r1, r2
 8001548:	1dfb      	adds	r3, r7, #7
 800154a:	1c22      	adds	r2, r4, #0
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	1dbb      	adds	r3, r7, #6
 8001550:	1c02      	adds	r2, r0, #0
 8001552:	701a      	strb	r2, [r3, #0]
 8001554:	1d7b      	adds	r3, r7, #5
 8001556:	1c0a      	adds	r2, r1, #0
 8001558:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg[2];
	write_reg[0] = WRITE | reg;
 800155a:	240c      	movs	r4, #12
 800155c:	193b      	adds	r3, r7, r4
 800155e:	1dba      	adds	r2, r7, #6
 8001560:	7812      	ldrb	r2, [r2, #0]
 8001562:	701a      	strb	r2, [r3, #0]
	write_reg[1] = val;
 8001564:	193b      	adds	r3, r7, r4
 8001566:	1d7a      	adds	r2, r7, #5
 8001568:	7812      	ldrb	r2, [r2, #0]
 800156a:	705a      	strb	r2, [r3, #1]

	select_user_bank(ub);
 800156c:	1dfb      	adds	r3, r7, #7
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff93 	bl	800149c <select_user_bank>

	cs_low();
 8001576:	f7ff ff83 	bl	8001480 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, write_reg, 2, 1000);
 800157a:	23fa      	movs	r3, #250	; 0xfa
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	1939      	adds	r1, r7, r4
 8001580:	4804      	ldr	r0, [pc, #16]	; (8001594 <write_single_icm20948_reg+0x58>)
 8001582:	2202      	movs	r2, #2
 8001584:	f001 f9a6 	bl	80028d4 <HAL_SPI_Transmit>
	cs_high();
 8001588:	f7ff ff6c 	bl	8001464 <cs_high>
}
 800158c:	46c0      	nop			; (mov r8, r8)
 800158e:	46bd      	mov	sp, r7
 8001590:	b005      	add	sp, #20
 8001592:	bd90      	pop	{r4, r7, pc}
 8001594:	2000008c 	.word	0x2000008c

08001598 <read_multiple_icm20948_reg>:

static uint8_t* read_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t len)
{
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b085      	sub	sp, #20
 800159c:	af00      	add	r7, sp, #0
 800159e:	0004      	movs	r4, r0
 80015a0:	0008      	movs	r0, r1
 80015a2:	0011      	movs	r1, r2
 80015a4:	1dfb      	adds	r3, r7, #7
 80015a6:	1c22      	adds	r2, r4, #0
 80015a8:	701a      	strb	r2, [r3, #0]
 80015aa:	1dbb      	adds	r3, r7, #6
 80015ac:	1c02      	adds	r2, r0, #0
 80015ae:	701a      	strb	r2, [r3, #0]
 80015b0:	1d7b      	adds	r3, r7, #5
 80015b2:	1c0a      	adds	r2, r1, #0
 80015b4:	701a      	strb	r2, [r3, #0]
	uint8_t read_reg = READ | reg;
 80015b6:	1dbb      	adds	r3, r7, #6
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2280      	movs	r2, #128	; 0x80
 80015bc:	4252      	negs	r2, r2
 80015be:	4313      	orrs	r3, r2
 80015c0:	b2da      	uxtb	r2, r3
 80015c2:	240f      	movs	r4, #15
 80015c4:	193b      	adds	r3, r7, r4
 80015c6:	701a      	strb	r2, [r3, #0]
	static uint8_t reg_val[6];
	select_user_bank(ub);
 80015c8:	1dfb      	adds	r3, r7, #7
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff65 	bl	800149c <select_user_bank>

	cs_low();
 80015d2:	f7ff ff55 	bl	8001480 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &read_reg, 1, 1000);
 80015d6:	23fa      	movs	r3, #250	; 0xfa
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	1939      	adds	r1, r7, r4
 80015dc:	4809      	ldr	r0, [pc, #36]	; (8001604 <read_multiple_icm20948_reg+0x6c>)
 80015de:	2201      	movs	r2, #1
 80015e0:	f001 f978 	bl	80028d4 <HAL_SPI_Transmit>
	HAL_SPI_Receive(ICM20948_SPI, reg_val, len, 1000);
 80015e4:	1d7b      	adds	r3, r7, #5
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	b29a      	uxth	r2, r3
 80015ea:	23fa      	movs	r3, #250	; 0xfa
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	4906      	ldr	r1, [pc, #24]	; (8001608 <read_multiple_icm20948_reg+0x70>)
 80015f0:	4804      	ldr	r0, [pc, #16]	; (8001604 <read_multiple_icm20948_reg+0x6c>)
 80015f2:	f001 fac7 	bl	8002b84 <HAL_SPI_Receive>
	cs_high();
 80015f6:	f7ff ff35 	bl	8001464 <cs_high>

	return reg_val;
 80015fa:	4b03      	ldr	r3, [pc, #12]	; (8001608 <read_multiple_icm20948_reg+0x70>)
}
 80015fc:	0018      	movs	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	b005      	add	sp, #20
 8001602:	bd90      	pop	{r4, r7, pc}
 8001604:	2000008c 	.word	0x2000008c
 8001608:	20000194 	.word	0x20000194

0800160c <write_multiple_icm20948_reg>:

static void write_multiple_icm20948_reg(userbank ub, uint8_t reg, uint8_t* val, uint8_t len)
{
 800160c:	b590      	push	{r4, r7, lr}
 800160e:	b085      	sub	sp, #20
 8001610:	af00      	add	r7, sp, #0
 8001612:	0004      	movs	r4, r0
 8001614:	0008      	movs	r0, r1
 8001616:	603a      	str	r2, [r7, #0]
 8001618:	0019      	movs	r1, r3
 800161a:	1dfb      	adds	r3, r7, #7
 800161c:	1c22      	adds	r2, r4, #0
 800161e:	701a      	strb	r2, [r3, #0]
 8001620:	1dbb      	adds	r3, r7, #6
 8001622:	1c02      	adds	r2, r0, #0
 8001624:	701a      	strb	r2, [r3, #0]
 8001626:	1d7b      	adds	r3, r7, #5
 8001628:	1c0a      	adds	r2, r1, #0
 800162a:	701a      	strb	r2, [r3, #0]
	uint8_t write_reg = WRITE | reg;
 800162c:	240f      	movs	r4, #15
 800162e:	193b      	adds	r3, r7, r4
 8001630:	1dba      	adds	r2, r7, #6
 8001632:	7812      	ldrb	r2, [r2, #0]
 8001634:	701a      	strb	r2, [r3, #0]
	select_user_bank(ub);
 8001636:	1dfb      	adds	r3, r7, #7
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	0018      	movs	r0, r3
 800163c:	f7ff ff2e 	bl	800149c <select_user_bank>

	cs_low();
 8001640:	f7ff ff1e 	bl	8001480 <cs_low>
	HAL_SPI_Transmit(ICM20948_SPI, &write_reg, 1, 1000);
 8001644:	23fa      	movs	r3, #250	; 0xfa
 8001646:	009b      	lsls	r3, r3, #2
 8001648:	1939      	adds	r1, r7, r4
 800164a:	4809      	ldr	r0, [pc, #36]	; (8001670 <write_multiple_icm20948_reg+0x64>)
 800164c:	2201      	movs	r2, #1
 800164e:	f001 f941 	bl	80028d4 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(ICM20948_SPI, val, len, 1000);
 8001652:	1d7b      	adds	r3, r7, #5
 8001654:	781b      	ldrb	r3, [r3, #0]
 8001656:	b29a      	uxth	r2, r3
 8001658:	23fa      	movs	r3, #250	; 0xfa
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	6839      	ldr	r1, [r7, #0]
 800165e:	4804      	ldr	r0, [pc, #16]	; (8001670 <write_multiple_icm20948_reg+0x64>)
 8001660:	f001 f938 	bl	80028d4 <HAL_SPI_Transmit>
	cs_high();
 8001664:	f7ff fefe 	bl	8001464 <cs_high>
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	b005      	add	sp, #20
 800166e:	bd90      	pop	{r4, r7, pc}
 8001670:	2000008c 	.word	0x2000008c

08001674 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001678:	b672      	cpsid	i
}
 800167a:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800167c:	e7fe      	b.n	800167c <Error_Handler+0x8>
	...

08001680 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001680:	b580      	push	{r7, lr}
 8001682:	b082      	sub	sp, #8
 8001684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001686:	4b0f      	ldr	r3, [pc, #60]	; (80016c4 <HAL_MspInit+0x44>)
 8001688:	699a      	ldr	r2, [r3, #24]
 800168a:	4b0e      	ldr	r3, [pc, #56]	; (80016c4 <HAL_MspInit+0x44>)
 800168c:	2101      	movs	r1, #1
 800168e:	430a      	orrs	r2, r1
 8001690:	619a      	str	r2, [r3, #24]
 8001692:	4b0c      	ldr	r3, [pc, #48]	; (80016c4 <HAL_MspInit+0x44>)
 8001694:	699b      	ldr	r3, [r3, #24]
 8001696:	2201      	movs	r2, #1
 8001698:	4013      	ands	r3, r2
 800169a:	607b      	str	r3, [r7, #4]
 800169c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800169e:	4b09      	ldr	r3, [pc, #36]	; (80016c4 <HAL_MspInit+0x44>)
 80016a0:	69da      	ldr	r2, [r3, #28]
 80016a2:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <HAL_MspInit+0x44>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0549      	lsls	r1, r1, #21
 80016a8:	430a      	orrs	r2, r1
 80016aa:	61da      	str	r2, [r3, #28]
 80016ac:	4b05      	ldr	r3, [pc, #20]	; (80016c4 <HAL_MspInit+0x44>)
 80016ae:	69da      	ldr	r2, [r3, #28]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	055b      	lsls	r3, r3, #21
 80016b4:	4013      	ands	r3, r2
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	46bd      	mov	sp, r7
 80016be:	b002      	add	sp, #8
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	46c0      	nop			; (mov r8, r8)
 80016c4:	40021000 	.word	0x40021000

080016c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016c8:	b590      	push	{r4, r7, lr}
 80016ca:	b08b      	sub	sp, #44	; 0x2c
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016d0:	2414      	movs	r4, #20
 80016d2:	193b      	adds	r3, r7, r4
 80016d4:	0018      	movs	r0, r3
 80016d6:	2314      	movs	r3, #20
 80016d8:	001a      	movs	r2, r3
 80016da:	2100      	movs	r1, #0
 80016dc:	f002 fb6c 	bl	8003db8 <memset>
  if(hspi->Instance==SPI2)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a1c      	ldr	r2, [pc, #112]	; (8001758 <HAL_SPI_MspInit+0x90>)
 80016e6:	4293      	cmp	r3, r2
 80016e8:	d132      	bne.n	8001750 <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80016ea:	4b1c      	ldr	r3, [pc, #112]	; (800175c <HAL_SPI_MspInit+0x94>)
 80016ec:	69da      	ldr	r2, [r3, #28]
 80016ee:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_SPI_MspInit+0x94>)
 80016f0:	2180      	movs	r1, #128	; 0x80
 80016f2:	01c9      	lsls	r1, r1, #7
 80016f4:	430a      	orrs	r2, r1
 80016f6:	61da      	str	r2, [r3, #28]
 80016f8:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_SPI_MspInit+0x94>)
 80016fa:	69da      	ldr	r2, [r3, #28]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	01db      	lsls	r3, r3, #7
 8001700:	4013      	ands	r3, r2
 8001702:	613b      	str	r3, [r7, #16]
 8001704:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001706:	4b15      	ldr	r3, [pc, #84]	; (800175c <HAL_SPI_MspInit+0x94>)
 8001708:	695a      	ldr	r2, [r3, #20]
 800170a:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_SPI_MspInit+0x94>)
 800170c:	2180      	movs	r1, #128	; 0x80
 800170e:	02c9      	lsls	r1, r1, #11
 8001710:	430a      	orrs	r2, r1
 8001712:	615a      	str	r2, [r3, #20]
 8001714:	4b11      	ldr	r3, [pc, #68]	; (800175c <HAL_SPI_MspInit+0x94>)
 8001716:	695a      	ldr	r2, [r3, #20]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	02db      	lsls	r3, r3, #11
 800171c:	4013      	ands	r3, r2
 800171e:	60fb      	str	r3, [r7, #12]
 8001720:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001722:	193b      	adds	r3, r7, r4
 8001724:	22e0      	movs	r2, #224	; 0xe0
 8001726:	0212      	lsls	r2, r2, #8
 8001728:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	0021      	movs	r1, r4
 800172c:	187b      	adds	r3, r7, r1
 800172e:	2202      	movs	r2, #2
 8001730:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001732:	187b      	adds	r3, r7, r1
 8001734:	2200      	movs	r2, #0
 8001736:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001738:	187b      	adds	r3, r7, r1
 800173a:	2203      	movs	r2, #3
 800173c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 800173e:	187b      	adds	r3, r7, r1
 8001740:	2200      	movs	r2, #0
 8001742:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001744:	187b      	adds	r3, r7, r1
 8001746:	4a06      	ldr	r2, [pc, #24]	; (8001760 <HAL_SPI_MspInit+0x98>)
 8001748:	0019      	movs	r1, r3
 800174a:	0010      	movs	r0, r2
 800174c:	f000 fa10 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001750:	46c0      	nop			; (mov r8, r8)
 8001752:	46bd      	mov	sp, r7
 8001754:	b00b      	add	sp, #44	; 0x2c
 8001756:	bd90      	pop	{r4, r7, pc}
 8001758:	40003800 	.word	0x40003800
 800175c:	40021000 	.word	0x40021000
 8001760:	48000400 	.word	0x48000400

08001764 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001764:	b590      	push	{r4, r7, lr}
 8001766:	b08b      	sub	sp, #44	; 0x2c
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	2414      	movs	r4, #20
 800176e:	193b      	adds	r3, r7, r4
 8001770:	0018      	movs	r0, r3
 8001772:	2314      	movs	r3, #20
 8001774:	001a      	movs	r2, r3
 8001776:	2100      	movs	r1, #0
 8001778:	f002 fb1e 	bl	8003db8 <memset>
  if(huart->Instance==USART2)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <HAL_UART_MspInit+0x90>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d132      	bne.n	80017ec <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <HAL_UART_MspInit+0x94>)
 8001788:	69da      	ldr	r2, [r3, #28]
 800178a:	4b1b      	ldr	r3, [pc, #108]	; (80017f8 <HAL_UART_MspInit+0x94>)
 800178c:	2180      	movs	r1, #128	; 0x80
 800178e:	0289      	lsls	r1, r1, #10
 8001790:	430a      	orrs	r2, r1
 8001792:	61da      	str	r2, [r3, #28]
 8001794:	4b18      	ldr	r3, [pc, #96]	; (80017f8 <HAL_UART_MspInit+0x94>)
 8001796:	69da      	ldr	r2, [r3, #28]
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	029b      	lsls	r3, r3, #10
 800179c:	4013      	ands	r3, r2
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a2:	4b15      	ldr	r3, [pc, #84]	; (80017f8 <HAL_UART_MspInit+0x94>)
 80017a4:	695a      	ldr	r2, [r3, #20]
 80017a6:	4b14      	ldr	r3, [pc, #80]	; (80017f8 <HAL_UART_MspInit+0x94>)
 80017a8:	2180      	movs	r1, #128	; 0x80
 80017aa:	0289      	lsls	r1, r1, #10
 80017ac:	430a      	orrs	r2, r1
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	4b11      	ldr	r3, [pc, #68]	; (80017f8 <HAL_UART_MspInit+0x94>)
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	2380      	movs	r3, #128	; 0x80
 80017b6:	029b      	lsls	r3, r3, #10
 80017b8:	4013      	ands	r3, r2
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017be:	0021      	movs	r1, r4
 80017c0:	187b      	adds	r3, r7, r1
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c6:	187b      	adds	r3, r7, r1
 80017c8:	2202      	movs	r2, #2
 80017ca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017cc:	187b      	adds	r3, r7, r1
 80017ce:	2200      	movs	r2, #0
 80017d0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80017d2:	187b      	adds	r3, r7, r1
 80017d4:	2203      	movs	r2, #3
 80017d6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 80017d8:	187b      	adds	r3, r7, r1
 80017da:	2201      	movs	r2, #1
 80017dc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017de:	187a      	adds	r2, r7, r1
 80017e0:	2390      	movs	r3, #144	; 0x90
 80017e2:	05db      	lsls	r3, r3, #23
 80017e4:	0011      	movs	r1, r2
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 f9c2 	bl	8001b70 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80017ec:	46c0      	nop			; (mov r8, r8)
 80017ee:	46bd      	mov	sp, r7
 80017f0:	b00b      	add	sp, #44	; 0x2c
 80017f2:	bd90      	pop	{r4, r7, pc}
 80017f4:	40004400 	.word	0x40004400
 80017f8:	40021000 	.word	0x40021000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b580      	push	{r7, lr}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800180c:	46c0      	nop			; (mov r8, r8)
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}

08001812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001812:	b580      	push	{r7, lr}
 8001814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001816:	46c0      	nop			; (mov r8, r8)
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001820:	f000 f8b2 	bl	8001988 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001824:	46c0      	nop			; (mov r8, r8)
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
	...

0800182c <_sbrk>:
 800182c:	b580      	push	{r7, lr}
 800182e:	b086      	sub	sp, #24
 8001830:	af00      	add	r7, sp, #0
 8001832:	6078      	str	r0, [r7, #4]
 8001834:	4a14      	ldr	r2, [pc, #80]	; (8001888 <_sbrk+0x5c>)
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <_sbrk+0x60>)
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	613b      	str	r3, [r7, #16]
 8001840:	4b13      	ldr	r3, [pc, #76]	; (8001890 <_sbrk+0x64>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2b00      	cmp	r3, #0
 8001846:	d102      	bne.n	800184e <_sbrk+0x22>
 8001848:	4b11      	ldr	r3, [pc, #68]	; (8001890 <_sbrk+0x64>)
 800184a:	4a12      	ldr	r2, [pc, #72]	; (8001894 <_sbrk+0x68>)
 800184c:	601a      	str	r2, [r3, #0]
 800184e:	4b10      	ldr	r3, [pc, #64]	; (8001890 <_sbrk+0x64>)
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	18d3      	adds	r3, r2, r3
 8001856:	693a      	ldr	r2, [r7, #16]
 8001858:	429a      	cmp	r2, r3
 800185a:	d207      	bcs.n	800186c <_sbrk+0x40>
 800185c:	f002 fa82 	bl	8003d64 <__errno>
 8001860:	0003      	movs	r3, r0
 8001862:	220c      	movs	r2, #12
 8001864:	601a      	str	r2, [r3, #0]
 8001866:	2301      	movs	r3, #1
 8001868:	425b      	negs	r3, r3
 800186a:	e009      	b.n	8001880 <_sbrk+0x54>
 800186c:	4b08      	ldr	r3, [pc, #32]	; (8001890 <_sbrk+0x64>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	60fb      	str	r3, [r7, #12]
 8001872:	4b07      	ldr	r3, [pc, #28]	; (8001890 <_sbrk+0x64>)
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	18d2      	adds	r2, r2, r3
 800187a:	4b05      	ldr	r3, [pc, #20]	; (8001890 <_sbrk+0x64>)
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b006      	add	sp, #24
 8001886:	bd80      	pop	{r7, pc}
 8001888:	20002000 	.word	0x20002000
 800188c:	00000400 	.word	0x00000400
 8001890:	2000019c 	.word	0x2000019c
 8001894:	200001b8 	.word	0x200001b8

08001898 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800189c:	46c0      	nop			; (mov r8, r8)
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
	...

080018a4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80018a4:	480d      	ldr	r0, [pc, #52]	; (80018dc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80018a6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80018a8:	480d      	ldr	r0, [pc, #52]	; (80018e0 <LoopForever+0x6>)
  ldr r1, =_edata
 80018aa:	490e      	ldr	r1, [pc, #56]	; (80018e4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80018ac:	4a0e      	ldr	r2, [pc, #56]	; (80018e8 <LoopForever+0xe>)
  movs r3, #0
 80018ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80018b0:	e002      	b.n	80018b8 <LoopCopyDataInit>

080018b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80018b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80018b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80018b6:	3304      	adds	r3, #4

080018b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80018b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80018ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018bc:	d3f9      	bcc.n	80018b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018be:	4a0b      	ldr	r2, [pc, #44]	; (80018ec <LoopForever+0x12>)
  ldr r4, =_ebss
 80018c0:	4c0b      	ldr	r4, [pc, #44]	; (80018f0 <LoopForever+0x16>)
  movs r3, #0
 80018c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018c4:	e001      	b.n	80018ca <LoopFillZerobss>

080018c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018c8:	3204      	adds	r2, #4

080018ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018cc:	d3fb      	bcc.n	80018c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80018ce:	f7ff ffe3 	bl	8001898 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80018d2:	f002 fa4d 	bl	8003d70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018d6:	f7ff f809 	bl	80008ec <main>

080018da <LoopForever>:

LoopForever:
    b LoopForever
 80018da:	e7fe      	b.n	80018da <LoopForever>
  ldr   r0, =_estack
 80018dc:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 80018e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018e4:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80018e8:	08004730 	.word	0x08004730
  ldr r2, =_sbss
 80018ec:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80018f0:	200001b4 	.word	0x200001b4

080018f4 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018f4:	e7fe      	b.n	80018f4 <ADC1_COMP_IRQHandler>
	...

080018f8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018fc:	4b07      	ldr	r3, [pc, #28]	; (800191c <HAL_Init+0x24>)
 80018fe:	681a      	ldr	r2, [r3, #0]
 8001900:	4b06      	ldr	r3, [pc, #24]	; (800191c <HAL_Init+0x24>)
 8001902:	2110      	movs	r1, #16
 8001904:	430a      	orrs	r2, r1
 8001906:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001908:	2003      	movs	r0, #3
 800190a:	f000 f809 	bl	8001920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800190e:	f7ff feb7 	bl	8001680 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	0018      	movs	r0, r3
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	46c0      	nop			; (mov r8, r8)
 800191c:	40022000 	.word	0x40022000

08001920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001928:	4b14      	ldr	r3, [pc, #80]	; (800197c <HAL_InitTick+0x5c>)
 800192a:	681c      	ldr	r4, [r3, #0]
 800192c:	4b14      	ldr	r3, [pc, #80]	; (8001980 <HAL_InitTick+0x60>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	0019      	movs	r1, r3
 8001932:	23fa      	movs	r3, #250	; 0xfa
 8001934:	0098      	lsls	r0, r3, #2
 8001936:	f7fe fbf1 	bl	800011c <__udivsi3>
 800193a:	0003      	movs	r3, r0
 800193c:	0019      	movs	r1, r3
 800193e:	0020      	movs	r0, r4
 8001940:	f7fe fbec 	bl	800011c <__udivsi3>
 8001944:	0003      	movs	r3, r0
 8001946:	0018      	movs	r0, r3
 8001948:	f000 f905 	bl	8001b56 <HAL_SYSTICK_Config>
 800194c:	1e03      	subs	r3, r0, #0
 800194e:	d001      	beq.n	8001954 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001950:	2301      	movs	r3, #1
 8001952:	e00f      	b.n	8001974 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d80b      	bhi.n	8001972 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	2301      	movs	r3, #1
 800195e:	425b      	negs	r3, r3
 8001960:	2200      	movs	r2, #0
 8001962:	0018      	movs	r0, r3
 8001964:	f000 f8e2 	bl	8001b2c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_InitTick+0x64>)
 800196a:	687a      	ldr	r2, [r7, #4]
 800196c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800196e:	2300      	movs	r3, #0
 8001970:	e000      	b.n	8001974 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001972:	2301      	movs	r3, #1
}
 8001974:	0018      	movs	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	b003      	add	sp, #12
 800197a:	bd90      	pop	{r4, r7, pc}
 800197c:	20000000 	.word	0x20000000
 8001980:	20000008 	.word	0x20000008
 8001984:	20000004 	.word	0x20000004

08001988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b05      	ldr	r3, [pc, #20]	; (80019a4 <HAL_IncTick+0x1c>)
 800198e:	781b      	ldrb	r3, [r3, #0]
 8001990:	001a      	movs	r2, r3
 8001992:	4b05      	ldr	r3, [pc, #20]	; (80019a8 <HAL_IncTick+0x20>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	18d2      	adds	r2, r2, r3
 8001998:	4b03      	ldr	r3, [pc, #12]	; (80019a8 <HAL_IncTick+0x20>)
 800199a:	601a      	str	r2, [r3, #0]
}
 800199c:	46c0      	nop			; (mov r8, r8)
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	46c0      	nop			; (mov r8, r8)
 80019a4:	20000008 	.word	0x20000008
 80019a8:	200001a0 	.word	0x200001a0

080019ac <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b02      	ldr	r3, [pc, #8]	; (80019bc <HAL_GetTick+0x10>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	0018      	movs	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			; (mov r8, r8)
 80019bc:	200001a0 	.word	0x200001a0

080019c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b084      	sub	sp, #16
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff fff0 	bl	80019ac <HAL_GetTick>
 80019cc:	0003      	movs	r3, r0
 80019ce:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	3301      	adds	r3, #1
 80019d8:	d005      	beq.n	80019e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019da:	4b0a      	ldr	r3, [pc, #40]	; (8001a04 <HAL_Delay+0x44>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	001a      	movs	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	189b      	adds	r3, r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	f7ff ffe0 	bl	80019ac <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	68bb      	ldr	r3, [r7, #8]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	68fa      	ldr	r2, [r7, #12]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d8f7      	bhi.n	80019e8 <HAL_Delay+0x28>
  {
  }
}
 80019f8:	46c0      	nop			; (mov r8, r8)
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	46bd      	mov	sp, r7
 80019fe:	b004      	add	sp, #16
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	46c0      	nop			; (mov r8, r8)
 8001a04:	20000008 	.word	0x20000008

08001a08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a08:	b590      	push	{r4, r7, lr}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	0002      	movs	r2, r0
 8001a10:	6039      	str	r1, [r7, #0]
 8001a12:	1dfb      	adds	r3, r7, #7
 8001a14:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a16:	1dfb      	adds	r3, r7, #7
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	2b7f      	cmp	r3, #127	; 0x7f
 8001a1c:	d828      	bhi.n	8001a70 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a1e:	4a2f      	ldr	r2, [pc, #188]	; (8001adc <__NVIC_SetPriority+0xd4>)
 8001a20:	1dfb      	adds	r3, r7, #7
 8001a22:	781b      	ldrb	r3, [r3, #0]
 8001a24:	b25b      	sxtb	r3, r3
 8001a26:	089b      	lsrs	r3, r3, #2
 8001a28:	33c0      	adds	r3, #192	; 0xc0
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	589b      	ldr	r3, [r3, r2]
 8001a2e:	1dfa      	adds	r2, r7, #7
 8001a30:	7812      	ldrb	r2, [r2, #0]
 8001a32:	0011      	movs	r1, r2
 8001a34:	2203      	movs	r2, #3
 8001a36:	400a      	ands	r2, r1
 8001a38:	00d2      	lsls	r2, r2, #3
 8001a3a:	21ff      	movs	r1, #255	; 0xff
 8001a3c:	4091      	lsls	r1, r2
 8001a3e:	000a      	movs	r2, r1
 8001a40:	43d2      	mvns	r2, r2
 8001a42:	401a      	ands	r2, r3
 8001a44:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	019b      	lsls	r3, r3, #6
 8001a4a:	22ff      	movs	r2, #255	; 0xff
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	1dfb      	adds	r3, r7, #7
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	0018      	movs	r0, r3
 8001a54:	2303      	movs	r3, #3
 8001a56:	4003      	ands	r3, r0
 8001a58:	00db      	lsls	r3, r3, #3
 8001a5a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a5c:	481f      	ldr	r0, [pc, #124]	; (8001adc <__NVIC_SetPriority+0xd4>)
 8001a5e:	1dfb      	adds	r3, r7, #7
 8001a60:	781b      	ldrb	r3, [r3, #0]
 8001a62:	b25b      	sxtb	r3, r3
 8001a64:	089b      	lsrs	r3, r3, #2
 8001a66:	430a      	orrs	r2, r1
 8001a68:	33c0      	adds	r3, #192	; 0xc0
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a6e:	e031      	b.n	8001ad4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a70:	4a1b      	ldr	r2, [pc, #108]	; (8001ae0 <__NVIC_SetPriority+0xd8>)
 8001a72:	1dfb      	adds	r3, r7, #7
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	0019      	movs	r1, r3
 8001a78:	230f      	movs	r3, #15
 8001a7a:	400b      	ands	r3, r1
 8001a7c:	3b08      	subs	r3, #8
 8001a7e:	089b      	lsrs	r3, r3, #2
 8001a80:	3306      	adds	r3, #6
 8001a82:	009b      	lsls	r3, r3, #2
 8001a84:	18d3      	adds	r3, r2, r3
 8001a86:	3304      	adds	r3, #4
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	1dfa      	adds	r2, r7, #7
 8001a8c:	7812      	ldrb	r2, [r2, #0]
 8001a8e:	0011      	movs	r1, r2
 8001a90:	2203      	movs	r2, #3
 8001a92:	400a      	ands	r2, r1
 8001a94:	00d2      	lsls	r2, r2, #3
 8001a96:	21ff      	movs	r1, #255	; 0xff
 8001a98:	4091      	lsls	r1, r2
 8001a9a:	000a      	movs	r2, r1
 8001a9c:	43d2      	mvns	r2, r2
 8001a9e:	401a      	ands	r2, r3
 8001aa0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	019b      	lsls	r3, r3, #6
 8001aa6:	22ff      	movs	r2, #255	; 0xff
 8001aa8:	401a      	ands	r2, r3
 8001aaa:	1dfb      	adds	r3, r7, #7
 8001aac:	781b      	ldrb	r3, [r3, #0]
 8001aae:	0018      	movs	r0, r3
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	4003      	ands	r3, r0
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab8:	4809      	ldr	r0, [pc, #36]	; (8001ae0 <__NVIC_SetPriority+0xd8>)
 8001aba:	1dfb      	adds	r3, r7, #7
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	001c      	movs	r4, r3
 8001ac0:	230f      	movs	r3, #15
 8001ac2:	4023      	ands	r3, r4
 8001ac4:	3b08      	subs	r3, #8
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	3306      	adds	r3, #6
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	18c3      	adds	r3, r0, r3
 8001ad0:	3304      	adds	r3, #4
 8001ad2:	601a      	str	r2, [r3, #0]
}
 8001ad4:	46c0      	nop			; (mov r8, r8)
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	b003      	add	sp, #12
 8001ada:	bd90      	pop	{r4, r7, pc}
 8001adc:	e000e100 	.word	0xe000e100
 8001ae0:	e000ed00 	.word	0xe000ed00

08001ae4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b082      	sub	sp, #8
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	1e5a      	subs	r2, r3, #1
 8001af0:	2380      	movs	r3, #128	; 0x80
 8001af2:	045b      	lsls	r3, r3, #17
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d301      	bcc.n	8001afc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af8:	2301      	movs	r3, #1
 8001afa:	e010      	b.n	8001b1e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001afc:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <SysTick_Config+0x44>)
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	3a01      	subs	r2, #1
 8001b02:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b04:	2301      	movs	r3, #1
 8001b06:	425b      	negs	r3, r3
 8001b08:	2103      	movs	r1, #3
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	f7ff ff7c 	bl	8001a08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <SysTick_Config+0x44>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b16:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <SysTick_Config+0x44>)
 8001b18:	2207      	movs	r2, #7
 8001b1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b1c:	2300      	movs	r3, #0
}
 8001b1e:	0018      	movs	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	b002      	add	sp, #8
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	46c0      	nop			; (mov r8, r8)
 8001b28:	e000e010 	.word	0xe000e010

08001b2c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b2c:	b580      	push	{r7, lr}
 8001b2e:	b084      	sub	sp, #16
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60b9      	str	r1, [r7, #8]
 8001b34:	607a      	str	r2, [r7, #4]
 8001b36:	210f      	movs	r1, #15
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	1c02      	adds	r2, r0, #0
 8001b3c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	187b      	adds	r3, r7, r1
 8001b42:	781b      	ldrb	r3, [r3, #0]
 8001b44:	b25b      	sxtb	r3, r3
 8001b46:	0011      	movs	r1, r2
 8001b48:	0018      	movs	r0, r3
 8001b4a:	f7ff ff5d 	bl	8001a08 <__NVIC_SetPriority>
}
 8001b4e:	46c0      	nop			; (mov r8, r8)
 8001b50:	46bd      	mov	sp, r7
 8001b52:	b004      	add	sp, #16
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b56:	b580      	push	{r7, lr}
 8001b58:	b082      	sub	sp, #8
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	0018      	movs	r0, r3
 8001b62:	f7ff ffbf 	bl	8001ae4 <SysTick_Config>
 8001b66:	0003      	movs	r3, r0
}
 8001b68:	0018      	movs	r0, r3
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	b002      	add	sp, #8
 8001b6e:	bd80      	pop	{r7, pc}

08001b70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b086      	sub	sp, #24
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b7e:	e14f      	b.n	8001e20 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2101      	movs	r1, #1
 8001b86:	697a      	ldr	r2, [r7, #20]
 8001b88:	4091      	lsls	r1, r2
 8001b8a:	000a      	movs	r2, r1
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d100      	bne.n	8001b98 <HAL_GPIO_Init+0x28>
 8001b96:	e140      	b.n	8001e1a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2203      	movs	r2, #3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	2b01      	cmp	r3, #1
 8001ba2:	d005      	beq.n	8001bb0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	2203      	movs	r2, #3
 8001baa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d130      	bne.n	8001c12 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	005b      	lsls	r3, r3, #1
 8001bba:	2203      	movs	r2, #3
 8001bbc:	409a      	lsls	r2, r3
 8001bbe:	0013      	movs	r3, r2
 8001bc0:	43da      	mvns	r2, r3
 8001bc2:	693b      	ldr	r3, [r7, #16]
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	005b      	lsls	r3, r3, #1
 8001bd0:	409a      	lsls	r2, r3
 8001bd2:	0013      	movs	r3, r2
 8001bd4:	693a      	ldr	r2, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	693a      	ldr	r2, [r7, #16]
 8001bde:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001be6:	2201      	movs	r2, #1
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	409a      	lsls	r2, r3
 8001bec:	0013      	movs	r3, r2
 8001bee:	43da      	mvns	r2, r3
 8001bf0:	693b      	ldr	r3, [r7, #16]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	685b      	ldr	r3, [r3, #4]
 8001bfa:	091b      	lsrs	r3, r3, #4
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
 8001c04:	0013      	movs	r3, r2
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	2203      	movs	r2, #3
 8001c18:	4013      	ands	r3, r2
 8001c1a:	2b03      	cmp	r3, #3
 8001c1c:	d017      	beq.n	8001c4e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	68db      	ldr	r3, [r3, #12]
 8001c22:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	2203      	movs	r2, #3
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	0013      	movs	r3, r2
 8001c2e:	43da      	mvns	r2, r3
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	4013      	ands	r3, r2
 8001c34:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	689a      	ldr	r2, [r3, #8]
 8001c3a:	697b      	ldr	r3, [r7, #20]
 8001c3c:	005b      	lsls	r3, r3, #1
 8001c3e:	409a      	lsls	r2, r3
 8001c40:	0013      	movs	r3, r2
 8001c42:	693a      	ldr	r2, [r7, #16]
 8001c44:	4313      	orrs	r3, r2
 8001c46:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	2203      	movs	r2, #3
 8001c54:	4013      	ands	r3, r2
 8001c56:	2b02      	cmp	r3, #2
 8001c58:	d123      	bne.n	8001ca2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001c5a:	697b      	ldr	r3, [r7, #20]
 8001c5c:	08da      	lsrs	r2, r3, #3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	3208      	adds	r2, #8
 8001c62:	0092      	lsls	r2, r2, #2
 8001c64:	58d3      	ldr	r3, [r2, r3]
 8001c66:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2207      	movs	r2, #7
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	220f      	movs	r2, #15
 8001c72:	409a      	lsls	r2, r3
 8001c74:	0013      	movs	r3, r2
 8001c76:	43da      	mvns	r2, r3
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	691a      	ldr	r2, [r3, #16]
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	2107      	movs	r1, #7
 8001c86:	400b      	ands	r3, r1
 8001c88:	009b      	lsls	r3, r3, #2
 8001c8a:	409a      	lsls	r2, r3
 8001c8c:	0013      	movs	r3, r2
 8001c8e:	693a      	ldr	r2, [r7, #16]
 8001c90:	4313      	orrs	r3, r2
 8001c92:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	08da      	lsrs	r2, r3, #3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	3208      	adds	r2, #8
 8001c9c:	0092      	lsls	r2, r2, #2
 8001c9e:	6939      	ldr	r1, [r7, #16]
 8001ca0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	2203      	movs	r2, #3
 8001cae:	409a      	lsls	r2, r3
 8001cb0:	0013      	movs	r3, r2
 8001cb2:	43da      	mvns	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	4013      	ands	r3, r2
 8001cb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	2203      	movs	r2, #3
 8001cc0:	401a      	ands	r2, r3
 8001cc2:	697b      	ldr	r3, [r7, #20]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	409a      	lsls	r2, r3
 8001cc8:	0013      	movs	r3, r2
 8001cca:	693a      	ldr	r2, [r7, #16]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	693a      	ldr	r2, [r7, #16]
 8001cd4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	685a      	ldr	r2, [r3, #4]
 8001cda:	23c0      	movs	r3, #192	; 0xc0
 8001cdc:	029b      	lsls	r3, r3, #10
 8001cde:	4013      	ands	r3, r2
 8001ce0:	d100      	bne.n	8001ce4 <HAL_GPIO_Init+0x174>
 8001ce2:	e09a      	b.n	8001e1a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce4:	4b54      	ldr	r3, [pc, #336]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001ce6:	699a      	ldr	r2, [r3, #24]
 8001ce8:	4b53      	ldr	r3, [pc, #332]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001cea:	2101      	movs	r1, #1
 8001cec:	430a      	orrs	r2, r1
 8001cee:	619a      	str	r2, [r3, #24]
 8001cf0:	4b51      	ldr	r3, [pc, #324]	; (8001e38 <HAL_GPIO_Init+0x2c8>)
 8001cf2:	699b      	ldr	r3, [r3, #24]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	60bb      	str	r3, [r7, #8]
 8001cfa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001cfc:	4a4f      	ldr	r2, [pc, #316]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	089b      	lsrs	r3, r3, #2
 8001d02:	3302      	adds	r3, #2
 8001d04:	009b      	lsls	r3, r3, #2
 8001d06:	589b      	ldr	r3, [r3, r2]
 8001d08:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	2203      	movs	r2, #3
 8001d0e:	4013      	ands	r3, r2
 8001d10:	009b      	lsls	r3, r3, #2
 8001d12:	220f      	movs	r2, #15
 8001d14:	409a      	lsls	r2, r3
 8001d16:	0013      	movs	r3, r2
 8001d18:	43da      	mvns	r2, r3
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001d20:	687a      	ldr	r2, [r7, #4]
 8001d22:	2390      	movs	r3, #144	; 0x90
 8001d24:	05db      	lsls	r3, r3, #23
 8001d26:	429a      	cmp	r2, r3
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x1e2>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a44      	ldr	r2, [pc, #272]	; (8001e40 <HAL_GPIO_Init+0x2d0>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x1de>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a43      	ldr	r2, [pc, #268]	; (8001e44 <HAL_GPIO_Init+0x2d4>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x1da>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a42      	ldr	r2, [pc, #264]	; (8001e48 <HAL_GPIO_Init+0x2d8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x1d6>
 8001d42:	2303      	movs	r3, #3
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d46:	2305      	movs	r3, #5
 8001d48:	e004      	b.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d4a:	2302      	movs	r3, #2
 8001d4c:	e002      	b.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e000      	b.n	8001d54 <HAL_GPIO_Init+0x1e4>
 8001d52:	2300      	movs	r3, #0
 8001d54:	697a      	ldr	r2, [r7, #20]
 8001d56:	2103      	movs	r1, #3
 8001d58:	400a      	ands	r2, r1
 8001d5a:	0092      	lsls	r2, r2, #2
 8001d5c:	4093      	lsls	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001d64:	4935      	ldr	r1, [pc, #212]	; (8001e3c <HAL_GPIO_Init+0x2cc>)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	089b      	lsrs	r3, r3, #2
 8001d6a:	3302      	adds	r3, #2
 8001d6c:	009b      	lsls	r3, r3, #2
 8001d6e:	693a      	ldr	r2, [r7, #16]
 8001d70:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d72:	4b36      	ldr	r3, [pc, #216]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	43da      	mvns	r2, r3
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	685a      	ldr	r2, [r3, #4]
 8001d86:	2380      	movs	r3, #128	; 0x80
 8001d88:	025b      	lsls	r3, r3, #9
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	d003      	beq.n	8001d96 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001d8e:	693a      	ldr	r2, [r7, #16]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001d98:	693a      	ldr	r2, [r7, #16]
 8001d9a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001d9c:	4b2b      	ldr	r3, [pc, #172]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001d9e:	685b      	ldr	r3, [r3, #4]
 8001da0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	43da      	mvns	r2, r3
 8001da6:	693b      	ldr	r3, [r7, #16]
 8001da8:	4013      	ands	r3, r2
 8001daa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	685a      	ldr	r2, [r3, #4]
 8001db0:	2380      	movs	r3, #128	; 0x80
 8001db2:	029b      	lsls	r3, r3, #10
 8001db4:	4013      	ands	r3, r2
 8001db6:	d003      	beq.n	8001dc0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001db8:	693a      	ldr	r2, [r7, #16]
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001dc0:	4b22      	ldr	r3, [pc, #136]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	43da      	mvns	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685a      	ldr	r2, [r3, #4]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	035b      	lsls	r3, r3, #13
 8001dde:	4013      	ands	r3, r2
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001de2:	693a      	ldr	r2, [r7, #16]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001dea:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001dec:	693a      	ldr	r2, [r7, #16]
 8001dee:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001df0:	4b16      	ldr	r3, [pc, #88]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	43da      	mvns	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	039b      	lsls	r3, r3, #14
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001e0c:	693a      	ldr	r2, [r7, #16]
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <HAL_GPIO_Init+0x2dc>)
 8001e16:	693a      	ldr	r2, [r7, #16]
 8001e18:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	40da      	lsrs	r2, r3
 8001e28:	1e13      	subs	r3, r2, #0
 8001e2a:	d000      	beq.n	8001e2e <HAL_GPIO_Init+0x2be>
 8001e2c:	e6a8      	b.n	8001b80 <HAL_GPIO_Init+0x10>
  } 
}
 8001e2e:	46c0      	nop			; (mov r8, r8)
 8001e30:	46c0      	nop			; (mov r8, r8)
 8001e32:	46bd      	mov	sp, r7
 8001e34:	b006      	add	sp, #24
 8001e36:	bd80      	pop	{r7, pc}
 8001e38:	40021000 	.word	0x40021000
 8001e3c:	40010000 	.word	0x40010000
 8001e40:	48000400 	.word	0x48000400
 8001e44:	48000800 	.word	0x48000800
 8001e48:	48000c00 	.word	0x48000c00
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	b082      	sub	sp, #8
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	0008      	movs	r0, r1
 8001e5a:	0011      	movs	r1, r2
 8001e5c:	1cbb      	adds	r3, r7, #2
 8001e5e:	1c02      	adds	r2, r0, #0
 8001e60:	801a      	strh	r2, [r3, #0]
 8001e62:	1c7b      	adds	r3, r7, #1
 8001e64:	1c0a      	adds	r2, r1, #0
 8001e66:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e68:	1c7b      	adds	r3, r7, #1
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d004      	beq.n	8001e7a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e70:	1cbb      	adds	r3, r7, #2
 8001e72:	881a      	ldrh	r2, [r3, #0]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e78:	e003      	b.n	8001e82 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e7a:	1cbb      	adds	r3, r7, #2
 8001e7c:	881a      	ldrh	r2, [r3, #0]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e82:	46c0      	nop			; (mov r8, r8)
 8001e84:	46bd      	mov	sp, r7
 8001e86:	b002      	add	sp, #8
 8001e88:	bd80      	pop	{r7, pc}
	...

08001e8c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b088      	sub	sp, #32
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d101      	bne.n	8001e9e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e301      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2201      	movs	r2, #1
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d100      	bne.n	8001eaa <HAL_RCC_OscConfig+0x1e>
 8001ea8:	e08d      	b.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001eaa:	4bc3      	ldr	r3, [pc, #780]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	220c      	movs	r2, #12
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b04      	cmp	r3, #4
 8001eb4:	d00e      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001eb6:	4bc0      	ldr	r3, [pc, #768]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	220c      	movs	r2, #12
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	2b08      	cmp	r3, #8
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64>
 8001ec2:	4bbd      	ldr	r3, [pc, #756]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001ec4:	685a      	ldr	r2, [r3, #4]
 8001ec6:	2380      	movs	r3, #128	; 0x80
 8001ec8:	025b      	lsls	r3, r3, #9
 8001eca:	401a      	ands	r2, r3
 8001ecc:	2380      	movs	r3, #128	; 0x80
 8001ece:	025b      	lsls	r3, r3, #9
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d10d      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ed4:	4bb8      	ldr	r3, [pc, #736]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	2380      	movs	r3, #128	; 0x80
 8001eda:	029b      	lsls	r3, r3, #10
 8001edc:	4013      	ands	r3, r2
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x56>
 8001ee0:	e070      	b.n	8001fc4 <HAL_RCC_OscConfig+0x138>
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d000      	beq.n	8001eec <HAL_RCC_OscConfig+0x60>
 8001eea:	e06b      	b.n	8001fc4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e2d8      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d107      	bne.n	8001f08 <HAL_RCC_OscConfig+0x7c>
 8001ef8:	4baf      	ldr	r3, [pc, #700]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4bae      	ldr	r3, [pc, #696]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001efe:	2180      	movs	r1, #128	; 0x80
 8001f00:	0249      	lsls	r1, r1, #9
 8001f02:	430a      	orrs	r2, r1
 8001f04:	601a      	str	r2, [r3, #0]
 8001f06:	e02f      	b.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x9e>
 8001f10:	4ba9      	ldr	r3, [pc, #676]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f12:	681a      	ldr	r2, [r3, #0]
 8001f14:	4ba8      	ldr	r3, [pc, #672]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f16:	49a9      	ldr	r1, [pc, #676]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f18:	400a      	ands	r2, r1
 8001f1a:	601a      	str	r2, [r3, #0]
 8001f1c:	4ba6      	ldr	r3, [pc, #664]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	681a      	ldr	r2, [r3, #0]
 8001f20:	4ba5      	ldr	r3, [pc, #660]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f22:	49a7      	ldr	r1, [pc, #668]	; (80021c0 <HAL_RCC_OscConfig+0x334>)
 8001f24:	400a      	ands	r2, r1
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	e01e      	b.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2b05      	cmp	r3, #5
 8001f30:	d10e      	bne.n	8001f50 <HAL_RCC_OscConfig+0xc4>
 8001f32:	4ba1      	ldr	r3, [pc, #644]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f34:	681a      	ldr	r2, [r3, #0]
 8001f36:	4ba0      	ldr	r3, [pc, #640]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f38:	2180      	movs	r1, #128	; 0x80
 8001f3a:	02c9      	lsls	r1, r1, #11
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	601a      	str	r2, [r3, #0]
 8001f40:	4b9d      	ldr	r3, [pc, #628]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f42:	681a      	ldr	r2, [r3, #0]
 8001f44:	4b9c      	ldr	r3, [pc, #624]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f46:	2180      	movs	r1, #128	; 0x80
 8001f48:	0249      	lsls	r1, r1, #9
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	e00b      	b.n	8001f68 <HAL_RCC_OscConfig+0xdc>
 8001f50:	4b99      	ldr	r3, [pc, #612]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	4b98      	ldr	r3, [pc, #608]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f56:	4999      	ldr	r1, [pc, #612]	; (80021bc <HAL_RCC_OscConfig+0x330>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	601a      	str	r2, [r3, #0]
 8001f5c:	4b96      	ldr	r3, [pc, #600]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f5e:	681a      	ldr	r2, [r3, #0]
 8001f60:	4b95      	ldr	r3, [pc, #596]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f62:	4997      	ldr	r1, [pc, #604]	; (80021c0 <HAL_RCC_OscConfig+0x334>)
 8001f64:	400a      	ands	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d014      	beq.n	8001f9a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f70:	f7ff fd1c 	bl	80019ac <HAL_GetTick>
 8001f74:	0003      	movs	r3, r0
 8001f76:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7a:	f7ff fd17 	bl	80019ac <HAL_GetTick>
 8001f7e:	0002      	movs	r2, r0
 8001f80:	69bb      	ldr	r3, [r7, #24]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b64      	cmp	r3, #100	; 0x64
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e28a      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f8c:	4b8a      	ldr	r3, [pc, #552]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	2380      	movs	r3, #128	; 0x80
 8001f92:	029b      	lsls	r3, r3, #10
 8001f94:	4013      	ands	r3, r2
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0xee>
 8001f98:	e015      	b.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f9a:	f7ff fd07 	bl	80019ac <HAL_GetTick>
 8001f9e:	0003      	movs	r3, r0
 8001fa0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fa2:	e008      	b.n	8001fb6 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001fa4:	f7ff fd02 	bl	80019ac <HAL_GetTick>
 8001fa8:	0002      	movs	r2, r0
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	2b64      	cmp	r3, #100	; 0x64
 8001fb0:	d901      	bls.n	8001fb6 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001fb2:	2303      	movs	r3, #3
 8001fb4:	e275      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb6:	4b80      	ldr	r3, [pc, #512]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	2380      	movs	r3, #128	; 0x80
 8001fbc:	029b      	lsls	r3, r3, #10
 8001fbe:	4013      	ands	r3, r2
 8001fc0:	d1f0      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x118>
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fc4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	2202      	movs	r2, #2
 8001fcc:	4013      	ands	r3, r2
 8001fce:	d100      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x146>
 8001fd0:	e069      	b.n	80020a6 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001fd2:	4b79      	ldr	r3, [pc, #484]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	220c      	movs	r2, #12
 8001fd8:	4013      	ands	r3, r2
 8001fda:	d00b      	beq.n	8001ff4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001fdc:	4b76      	ldr	r3, [pc, #472]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	220c      	movs	r2, #12
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b08      	cmp	r3, #8
 8001fe6:	d11c      	bne.n	8002022 <HAL_RCC_OscConfig+0x196>
 8001fe8:	4b73      	ldr	r3, [pc, #460]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001fea:	685a      	ldr	r2, [r3, #4]
 8001fec:	2380      	movs	r3, #128	; 0x80
 8001fee:	025b      	lsls	r3, r3, #9
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	d116      	bne.n	8002022 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ff4:	4b70      	ldr	r3, [pc, #448]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	2202      	movs	r2, #2
 8001ffa:	4013      	ands	r3, r2
 8001ffc:	d005      	beq.n	800200a <HAL_RCC_OscConfig+0x17e>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	68db      	ldr	r3, [r3, #12]
 8002002:	2b01      	cmp	r3, #1
 8002004:	d001      	beq.n	800200a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e24b      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800200a:	4b6b      	ldr	r3, [pc, #428]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	22f8      	movs	r2, #248	; 0xf8
 8002010:	4393      	bics	r3, r2
 8002012:	0019      	movs	r1, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00da      	lsls	r2, r3, #3
 800201a:	4b67      	ldr	r3, [pc, #412]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800201c:	430a      	orrs	r2, r1
 800201e:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002020:	e041      	b.n	80020a6 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	68db      	ldr	r3, [r3, #12]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d024      	beq.n	8002074 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800202a:	4b63      	ldr	r3, [pc, #396]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002036:	f7ff fcb9 	bl	80019ac <HAL_GetTick>
 800203a:	0003      	movs	r3, r0
 800203c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fcb4 	bl	80019ac <HAL_GetTick>
 8002044:	0002      	movs	r2, r0
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e227      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002052:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	2202      	movs	r2, #2
 8002058:	4013      	ands	r3, r2
 800205a:	d0f1      	beq.n	8002040 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800205c:	4b56      	ldr	r3, [pc, #344]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	22f8      	movs	r2, #248	; 0xf8
 8002062:	4393      	bics	r3, r2
 8002064:	0019      	movs	r1, r3
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	691b      	ldr	r3, [r3, #16]
 800206a:	00da      	lsls	r2, r3, #3
 800206c:	4b52      	ldr	r3, [pc, #328]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800206e:	430a      	orrs	r2, r1
 8002070:	601a      	str	r2, [r3, #0]
 8002072:	e018      	b.n	80020a6 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002074:	4b50      	ldr	r3, [pc, #320]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002076:	681a      	ldr	r2, [r3, #0]
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800207a:	2101      	movs	r1, #1
 800207c:	438a      	bics	r2, r1
 800207e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002080:	f7ff fc94 	bl	80019ac <HAL_GetTick>
 8002084:	0003      	movs	r3, r0
 8002086:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002088:	e008      	b.n	800209c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800208a:	f7ff fc8f 	bl	80019ac <HAL_GetTick>
 800208e:	0002      	movs	r2, r0
 8002090:	69bb      	ldr	r3, [r7, #24]
 8002092:	1ad3      	subs	r3, r2, r3
 8002094:	2b02      	cmp	r3, #2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e202      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800209c:	4b46      	ldr	r3, [pc, #280]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	2202      	movs	r2, #2
 80020a2:	4013      	ands	r3, r2
 80020a4:	d1f1      	bne.n	800208a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	2208      	movs	r2, #8
 80020ac:	4013      	ands	r3, r2
 80020ae:	d036      	beq.n	800211e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	69db      	ldr	r3, [r3, #28]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d019      	beq.n	80020ec <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020b8:	4b3f      	ldr	r3, [pc, #252]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020bc:	4b3e      	ldr	r3, [pc, #248]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80020be:	2101      	movs	r1, #1
 80020c0:	430a      	orrs	r2, r1
 80020c2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c4:	f7ff fc72 	bl	80019ac <HAL_GetTick>
 80020c8:	0003      	movs	r3, r0
 80020ca:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020cc:	e008      	b.n	80020e0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ce:	f7ff fc6d 	bl	80019ac <HAL_GetTick>
 80020d2:	0002      	movs	r2, r0
 80020d4:	69bb      	ldr	r3, [r7, #24]
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e1e0      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e0:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020e4:	2202      	movs	r2, #2
 80020e6:	4013      	ands	r3, r2
 80020e8:	d0f1      	beq.n	80020ce <HAL_RCC_OscConfig+0x242>
 80020ea:	e018      	b.n	800211e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020ec:	4b32      	ldr	r3, [pc, #200]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80020ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80020f0:	4b31      	ldr	r3, [pc, #196]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80020f2:	2101      	movs	r1, #1
 80020f4:	438a      	bics	r2, r1
 80020f6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f8:	f7ff fc58 	bl	80019ac <HAL_GetTick>
 80020fc:	0003      	movs	r3, r0
 80020fe:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002100:	e008      	b.n	8002114 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002102:	f7ff fc53 	bl	80019ac <HAL_GetTick>
 8002106:	0002      	movs	r2, r0
 8002108:	69bb      	ldr	r3, [r7, #24]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	2b02      	cmp	r3, #2
 800210e:	d901      	bls.n	8002114 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002110:	2303      	movs	r3, #3
 8002112:	e1c6      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002118:	2202      	movs	r2, #2
 800211a:	4013      	ands	r3, r2
 800211c:	d1f1      	bne.n	8002102 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	2204      	movs	r2, #4
 8002124:	4013      	ands	r3, r2
 8002126:	d100      	bne.n	800212a <HAL_RCC_OscConfig+0x29e>
 8002128:	e0b4      	b.n	8002294 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800212a:	201f      	movs	r0, #31
 800212c:	183b      	adds	r3, r7, r0
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002132:	4b21      	ldr	r3, [pc, #132]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002134:	69da      	ldr	r2, [r3, #28]
 8002136:	2380      	movs	r3, #128	; 0x80
 8002138:	055b      	lsls	r3, r3, #21
 800213a:	4013      	ands	r3, r2
 800213c:	d110      	bne.n	8002160 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	4b1e      	ldr	r3, [pc, #120]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002140:	69da      	ldr	r2, [r3, #28]
 8002142:	4b1d      	ldr	r3, [pc, #116]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 8002144:	2180      	movs	r1, #128	; 0x80
 8002146:	0549      	lsls	r1, r1, #21
 8002148:	430a      	orrs	r2, r1
 800214a:	61da      	str	r2, [r3, #28]
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 800214e:	69da      	ldr	r2, [r3, #28]
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	055b      	lsls	r3, r3, #21
 8002154:	4013      	ands	r3, r2
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800215a:	183b      	adds	r3, r7, r0
 800215c:	2201      	movs	r2, #1
 800215e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002160:	4b18      	ldr	r3, [pc, #96]	; (80021c4 <HAL_RCC_OscConfig+0x338>)
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	2380      	movs	r3, #128	; 0x80
 8002166:	005b      	lsls	r3, r3, #1
 8002168:	4013      	ands	r3, r2
 800216a:	d11a      	bne.n	80021a2 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800216c:	4b15      	ldr	r3, [pc, #84]	; (80021c4 <HAL_RCC_OscConfig+0x338>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b14      	ldr	r3, [pc, #80]	; (80021c4 <HAL_RCC_OscConfig+0x338>)
 8002172:	2180      	movs	r1, #128	; 0x80
 8002174:	0049      	lsls	r1, r1, #1
 8002176:	430a      	orrs	r2, r1
 8002178:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800217a:	f7ff fc17 	bl	80019ac <HAL_GetTick>
 800217e:	0003      	movs	r3, r0
 8002180:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002182:	e008      	b.n	8002196 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002184:	f7ff fc12 	bl	80019ac <HAL_GetTick>
 8002188:	0002      	movs	r2, r0
 800218a:	69bb      	ldr	r3, [r7, #24]
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b64      	cmp	r3, #100	; 0x64
 8002190:	d901      	bls.n	8002196 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	e185      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b0b      	ldr	r3, [pc, #44]	; (80021c4 <HAL_RCC_OscConfig+0x338>)
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	2380      	movs	r3, #128	; 0x80
 800219c:	005b      	lsls	r3, r3, #1
 800219e:	4013      	ands	r3, r2
 80021a0:	d0f0      	beq.n	8002184 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	689b      	ldr	r3, [r3, #8]
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d10e      	bne.n	80021c8 <HAL_RCC_OscConfig+0x33c>
 80021aa:	4b03      	ldr	r3, [pc, #12]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80021ac:	6a1a      	ldr	r2, [r3, #32]
 80021ae:	4b02      	ldr	r3, [pc, #8]	; (80021b8 <HAL_RCC_OscConfig+0x32c>)
 80021b0:	2101      	movs	r1, #1
 80021b2:	430a      	orrs	r2, r1
 80021b4:	621a      	str	r2, [r3, #32]
 80021b6:	e035      	b.n	8002224 <HAL_RCC_OscConfig+0x398>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	fffeffff 	.word	0xfffeffff
 80021c0:	fffbffff 	.word	0xfffbffff
 80021c4:	40007000 	.word	0x40007000
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d10c      	bne.n	80021ea <HAL_RCC_OscConfig+0x35e>
 80021d0:	4bb6      	ldr	r3, [pc, #728]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80021d2:	6a1a      	ldr	r2, [r3, #32]
 80021d4:	4bb5      	ldr	r3, [pc, #724]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80021d6:	2101      	movs	r1, #1
 80021d8:	438a      	bics	r2, r1
 80021da:	621a      	str	r2, [r3, #32]
 80021dc:	4bb3      	ldr	r3, [pc, #716]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80021de:	6a1a      	ldr	r2, [r3, #32]
 80021e0:	4bb2      	ldr	r3, [pc, #712]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80021e2:	2104      	movs	r1, #4
 80021e4:	438a      	bics	r2, r1
 80021e6:	621a      	str	r2, [r3, #32]
 80021e8:	e01c      	b.n	8002224 <HAL_RCC_OscConfig+0x398>
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	2b05      	cmp	r3, #5
 80021f0:	d10c      	bne.n	800220c <HAL_RCC_OscConfig+0x380>
 80021f2:	4bae      	ldr	r3, [pc, #696]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80021f4:	6a1a      	ldr	r2, [r3, #32]
 80021f6:	4bad      	ldr	r3, [pc, #692]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80021f8:	2104      	movs	r1, #4
 80021fa:	430a      	orrs	r2, r1
 80021fc:	621a      	str	r2, [r3, #32]
 80021fe:	4bab      	ldr	r3, [pc, #684]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002200:	6a1a      	ldr	r2, [r3, #32]
 8002202:	4baa      	ldr	r3, [pc, #680]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002204:	2101      	movs	r1, #1
 8002206:	430a      	orrs	r2, r1
 8002208:	621a      	str	r2, [r3, #32]
 800220a:	e00b      	b.n	8002224 <HAL_RCC_OscConfig+0x398>
 800220c:	4ba7      	ldr	r3, [pc, #668]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800220e:	6a1a      	ldr	r2, [r3, #32]
 8002210:	4ba6      	ldr	r3, [pc, #664]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002212:	2101      	movs	r1, #1
 8002214:	438a      	bics	r2, r1
 8002216:	621a      	str	r2, [r3, #32]
 8002218:	4ba4      	ldr	r3, [pc, #656]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800221a:	6a1a      	ldr	r2, [r3, #32]
 800221c:	4ba3      	ldr	r3, [pc, #652]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800221e:	2104      	movs	r1, #4
 8002220:	438a      	bics	r2, r1
 8002222:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d014      	beq.n	8002256 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800222c:	f7ff fbbe 	bl	80019ac <HAL_GetTick>
 8002230:	0003      	movs	r3, r0
 8002232:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002234:	e009      	b.n	800224a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002236:	f7ff fbb9 	bl	80019ac <HAL_GetTick>
 800223a:	0002      	movs	r2, r0
 800223c:	69bb      	ldr	r3, [r7, #24]
 800223e:	1ad3      	subs	r3, r2, r3
 8002240:	4a9b      	ldr	r2, [pc, #620]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d901      	bls.n	800224a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002246:	2303      	movs	r3, #3
 8002248:	e12b      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800224a:	4b98      	ldr	r3, [pc, #608]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	2202      	movs	r2, #2
 8002250:	4013      	ands	r3, r2
 8002252:	d0f0      	beq.n	8002236 <HAL_RCC_OscConfig+0x3aa>
 8002254:	e013      	b.n	800227e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002256:	f7ff fba9 	bl	80019ac <HAL_GetTick>
 800225a:	0003      	movs	r3, r0
 800225c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800225e:	e009      	b.n	8002274 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002260:	f7ff fba4 	bl	80019ac <HAL_GetTick>
 8002264:	0002      	movs	r2, r0
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	4a91      	ldr	r2, [pc, #580]	; (80024b0 <HAL_RCC_OscConfig+0x624>)
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e116      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002274:	4b8d      	ldr	r3, [pc, #564]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	2202      	movs	r2, #2
 800227a:	4013      	ands	r3, r2
 800227c:	d1f0      	bne.n	8002260 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800227e:	231f      	movs	r3, #31
 8002280:	18fb      	adds	r3, r7, r3
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	2b01      	cmp	r3, #1
 8002286:	d105      	bne.n	8002294 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002288:	4b88      	ldr	r3, [pc, #544]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800228a:	69da      	ldr	r2, [r3, #28]
 800228c:	4b87      	ldr	r3, [pc, #540]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800228e:	4989      	ldr	r1, [pc, #548]	; (80024b4 <HAL_RCC_OscConfig+0x628>)
 8002290:	400a      	ands	r2, r1
 8002292:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	2210      	movs	r2, #16
 800229a:	4013      	ands	r3, r2
 800229c:	d063      	beq.n	8002366 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	695b      	ldr	r3, [r3, #20]
 80022a2:	2b01      	cmp	r3, #1
 80022a4:	d12a      	bne.n	80022fc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80022a6:	4b81      	ldr	r3, [pc, #516]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022aa:	4b80      	ldr	r3, [pc, #512]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022ac:	2104      	movs	r1, #4
 80022ae:	430a      	orrs	r2, r1
 80022b0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80022b2:	4b7e      	ldr	r3, [pc, #504]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80022b6:	4b7d      	ldr	r3, [pc, #500]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022b8:	2101      	movs	r1, #1
 80022ba:	430a      	orrs	r2, r1
 80022bc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022be:	f7ff fb75 	bl	80019ac <HAL_GetTick>
 80022c2:	0003      	movs	r3, r0
 80022c4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022c6:	e008      	b.n	80022da <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80022c8:	f7ff fb70 	bl	80019ac <HAL_GetTick>
 80022cc:	0002      	movs	r2, r0
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	2b02      	cmp	r3, #2
 80022d4:	d901      	bls.n	80022da <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80022d6:	2303      	movs	r3, #3
 80022d8:	e0e3      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80022da:	4b74      	ldr	r3, [pc, #464]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022de:	2202      	movs	r2, #2
 80022e0:	4013      	ands	r3, r2
 80022e2:	d0f1      	beq.n	80022c8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80022e4:	4b71      	ldr	r3, [pc, #452]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	22f8      	movs	r2, #248	; 0xf8
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	699b      	ldr	r3, [r3, #24]
 80022f2:	00da      	lsls	r2, r3, #3
 80022f4:	4b6d      	ldr	r3, [pc, #436]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80022f6:	430a      	orrs	r2, r1
 80022f8:	635a      	str	r2, [r3, #52]	; 0x34
 80022fa:	e034      	b.n	8002366 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	695b      	ldr	r3, [r3, #20]
 8002300:	3305      	adds	r3, #5
 8002302:	d111      	bne.n	8002328 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002304:	4b69      	ldr	r3, [pc, #420]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002306:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002308:	4b68      	ldr	r3, [pc, #416]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800230a:	2104      	movs	r1, #4
 800230c:	438a      	bics	r2, r1
 800230e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002310:	4b66      	ldr	r3, [pc, #408]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002312:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002314:	22f8      	movs	r2, #248	; 0xf8
 8002316:	4393      	bics	r3, r2
 8002318:	0019      	movs	r1, r3
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	699b      	ldr	r3, [r3, #24]
 800231e:	00da      	lsls	r2, r3, #3
 8002320:	4b62      	ldr	r3, [pc, #392]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002322:	430a      	orrs	r2, r1
 8002324:	635a      	str	r2, [r3, #52]	; 0x34
 8002326:	e01e      	b.n	8002366 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002328:	4b60      	ldr	r3, [pc, #384]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800232a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800232c:	4b5f      	ldr	r3, [pc, #380]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800232e:	2104      	movs	r1, #4
 8002330:	430a      	orrs	r2, r1
 8002332:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002334:	4b5d      	ldr	r3, [pc, #372]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002336:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002338:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002340:	f7ff fb34 	bl	80019ac <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800234a:	f7ff fb2f 	bl	80019ac <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e0a2      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800235c:	4b53      	ldr	r3, [pc, #332]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800235e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d1f1      	bne.n	800234a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	6a1b      	ldr	r3, [r3, #32]
 800236a:	2b00      	cmp	r3, #0
 800236c:	d100      	bne.n	8002370 <HAL_RCC_OscConfig+0x4e4>
 800236e:	e097      	b.n	80024a0 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002370:	4b4e      	ldr	r3, [pc, #312]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	220c      	movs	r2, #12
 8002376:	4013      	ands	r3, r2
 8002378:	2b08      	cmp	r3, #8
 800237a:	d100      	bne.n	800237e <HAL_RCC_OscConfig+0x4f2>
 800237c:	e06b      	b.n	8002456 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	2b02      	cmp	r3, #2
 8002384:	d14c      	bne.n	8002420 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002386:	4b49      	ldr	r3, [pc, #292]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	4b48      	ldr	r3, [pc, #288]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800238c:	494a      	ldr	r1, [pc, #296]	; (80024b8 <HAL_RCC_OscConfig+0x62c>)
 800238e:	400a      	ands	r2, r1
 8002390:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002392:	f7ff fb0b 	bl	80019ac <HAL_GetTick>
 8002396:	0003      	movs	r3, r0
 8002398:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800239a:	e008      	b.n	80023ae <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800239c:	f7ff fb06 	bl	80019ac <HAL_GetTick>
 80023a0:	0002      	movs	r2, r0
 80023a2:	69bb      	ldr	r3, [r7, #24]
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	2b02      	cmp	r3, #2
 80023a8:	d901      	bls.n	80023ae <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80023aa:	2303      	movs	r3, #3
 80023ac:	e079      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023ae:	4b3f      	ldr	r3, [pc, #252]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023b0:	681a      	ldr	r2, [r3, #0]
 80023b2:	2380      	movs	r3, #128	; 0x80
 80023b4:	049b      	lsls	r3, r3, #18
 80023b6:	4013      	ands	r3, r2
 80023b8:	d1f0      	bne.n	800239c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ba:	4b3c      	ldr	r3, [pc, #240]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023be:	220f      	movs	r2, #15
 80023c0:	4393      	bics	r3, r2
 80023c2:	0019      	movs	r1, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	4b38      	ldr	r3, [pc, #224]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023ca:	430a      	orrs	r2, r1
 80023cc:	62da      	str	r2, [r3, #44]	; 0x2c
 80023ce:	4b37      	ldr	r3, [pc, #220]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	4a3a      	ldr	r2, [pc, #232]	; (80024bc <HAL_RCC_OscConfig+0x630>)
 80023d4:	4013      	ands	r3, r2
 80023d6:	0019      	movs	r1, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	431a      	orrs	r2, r3
 80023e2:	4b32      	ldr	r3, [pc, #200]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023e4:	430a      	orrs	r2, r1
 80023e6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80023e8:	4b30      	ldr	r3, [pc, #192]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023ea:	681a      	ldr	r2, [r3, #0]
 80023ec:	4b2f      	ldr	r3, [pc, #188]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 80023ee:	2180      	movs	r1, #128	; 0x80
 80023f0:	0449      	lsls	r1, r1, #17
 80023f2:	430a      	orrs	r2, r1
 80023f4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023f6:	f7ff fad9 	bl	80019ac <HAL_GetTick>
 80023fa:	0003      	movs	r3, r0
 80023fc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80023fe:	e008      	b.n	8002412 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002400:	f7ff fad4 	bl	80019ac <HAL_GetTick>
 8002404:	0002      	movs	r2, r0
 8002406:	69bb      	ldr	r3, [r7, #24]
 8002408:	1ad3      	subs	r3, r2, r3
 800240a:	2b02      	cmp	r3, #2
 800240c:	d901      	bls.n	8002412 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800240e:	2303      	movs	r3, #3
 8002410:	e047      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002412:	4b26      	ldr	r3, [pc, #152]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	049b      	lsls	r3, r3, #18
 800241a:	4013      	ands	r3, r2
 800241c:	d0f0      	beq.n	8002400 <HAL_RCC_OscConfig+0x574>
 800241e:	e03f      	b.n	80024a0 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002420:	4b22      	ldr	r3, [pc, #136]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002422:	681a      	ldr	r2, [r3, #0]
 8002424:	4b21      	ldr	r3, [pc, #132]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002426:	4924      	ldr	r1, [pc, #144]	; (80024b8 <HAL_RCC_OscConfig+0x62c>)
 8002428:	400a      	ands	r2, r1
 800242a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242c:	f7ff fabe 	bl	80019ac <HAL_GetTick>
 8002430:	0003      	movs	r3, r0
 8002432:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fab9 	bl	80019ac <HAL_GetTick>
 800243a:	0002      	movs	r2, r0
 800243c:	69bb      	ldr	r3, [r7, #24]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e02c      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	2380      	movs	r3, #128	; 0x80
 800244e:	049b      	lsls	r3, r3, #18
 8002450:	4013      	ands	r3, r2
 8002452:	d1f0      	bne.n	8002436 <HAL_RCC_OscConfig+0x5aa>
 8002454:	e024      	b.n	80024a0 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6a1b      	ldr	r3, [r3, #32]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d101      	bne.n	8002462 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e01f      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002462:	4b12      	ldr	r3, [pc, #72]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002468:	4b10      	ldr	r3, [pc, #64]	; (80024ac <HAL_RCC_OscConfig+0x620>)
 800246a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800246e:	697a      	ldr	r2, [r7, #20]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	025b      	lsls	r3, r3, #9
 8002474:	401a      	ands	r2, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	429a      	cmp	r2, r3
 800247c:	d10e      	bne.n	800249c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800247e:	693b      	ldr	r3, [r7, #16]
 8002480:	220f      	movs	r2, #15
 8002482:	401a      	ands	r2, r3
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002488:	429a      	cmp	r2, r3
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 800248c:	697a      	ldr	r2, [r7, #20]
 800248e:	23f0      	movs	r3, #240	; 0xf0
 8002490:	039b      	lsls	r3, r3, #14
 8002492:	401a      	ands	r2, r3
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002498:	429a      	cmp	r2, r3
 800249a:	d001      	beq.n	80024a0 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e000      	b.n	80024a2 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80024a0:	2300      	movs	r3, #0
}
 80024a2:	0018      	movs	r0, r3
 80024a4:	46bd      	mov	sp, r7
 80024a6:	b008      	add	sp, #32
 80024a8:	bd80      	pop	{r7, pc}
 80024aa:	46c0      	nop			; (mov r8, r8)
 80024ac:	40021000 	.word	0x40021000
 80024b0:	00001388 	.word	0x00001388
 80024b4:	efffffff 	.word	0xefffffff
 80024b8:	feffffff 	.word	0xfeffffff
 80024bc:	ffc2ffff 	.word	0xffc2ffff

080024c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b084      	sub	sp, #16
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d101      	bne.n	80024d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e0b3      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80024d4:	4b5b      	ldr	r3, [pc, #364]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2201      	movs	r2, #1
 80024da:	4013      	ands	r3, r2
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d911      	bls.n	8002506 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b58      	ldr	r3, [pc, #352]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2201      	movs	r2, #1
 80024e8:	4393      	bics	r3, r2
 80024ea:	0019      	movs	r1, r3
 80024ec:	4b55      	ldr	r3, [pc, #340]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80024ee:	683a      	ldr	r2, [r7, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f4:	4b53      	ldr	r3, [pc, #332]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	2201      	movs	r2, #1
 80024fa:	4013      	ands	r3, r2
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	429a      	cmp	r2, r3
 8002500:	d001      	beq.n	8002506 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e09a      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2202      	movs	r2, #2
 800250c:	4013      	ands	r3, r2
 800250e:	d015      	beq.n	800253c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	2204      	movs	r2, #4
 8002516:	4013      	ands	r3, r2
 8002518:	d006      	beq.n	8002528 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800251a:	4b4b      	ldr	r3, [pc, #300]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	4b4a      	ldr	r3, [pc, #296]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002520:	21e0      	movs	r1, #224	; 0xe0
 8002522:	00c9      	lsls	r1, r1, #3
 8002524:	430a      	orrs	r2, r1
 8002526:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002528:	4b47      	ldr	r3, [pc, #284]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	22f0      	movs	r2, #240	; 0xf0
 800252e:	4393      	bics	r3, r2
 8002530:	0019      	movs	r1, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689a      	ldr	r2, [r3, #8]
 8002536:	4b44      	ldr	r3, [pc, #272]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002538:	430a      	orrs	r2, r1
 800253a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d040      	beq.n	80025c8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b01      	cmp	r3, #1
 800254c:	d107      	bne.n	800255e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002550:	681a      	ldr	r2, [r3, #0]
 8002552:	2380      	movs	r3, #128	; 0x80
 8002554:	029b      	lsls	r3, r3, #10
 8002556:	4013      	ands	r3, r2
 8002558:	d114      	bne.n	8002584 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e06e      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d107      	bne.n	8002576 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002566:	4b38      	ldr	r3, [pc, #224]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	2380      	movs	r3, #128	; 0x80
 800256c:	049b      	lsls	r3, r3, #18
 800256e:	4013      	ands	r3, r2
 8002570:	d108      	bne.n	8002584 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e062      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2202      	movs	r2, #2
 800257c:	4013      	ands	r3, r2
 800257e:	d101      	bne.n	8002584 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002580:	2301      	movs	r3, #1
 8002582:	e05b      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002584:	4b30      	ldr	r3, [pc, #192]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2203      	movs	r2, #3
 800258a:	4393      	bics	r3, r2
 800258c:	0019      	movs	r1, r3
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	685a      	ldr	r2, [r3, #4]
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002594:	430a      	orrs	r2, r1
 8002596:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002598:	f7ff fa08 	bl	80019ac <HAL_GetTick>
 800259c:	0003      	movs	r3, r0
 800259e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a0:	e009      	b.n	80025b6 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7ff fa03 	bl	80019ac <HAL_GetTick>
 80025a6:	0002      	movs	r2, r0
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	4a27      	ldr	r2, [pc, #156]	; (800264c <HAL_RCC_ClockConfig+0x18c>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e042      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b6:	4b24      	ldr	r3, [pc, #144]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	220c      	movs	r2, #12
 80025bc:	401a      	ands	r2, r3
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	009b      	lsls	r3, r3, #2
 80025c4:	429a      	cmp	r2, r3
 80025c6:	d1ec      	bne.n	80025a2 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80025c8:	4b1e      	ldr	r3, [pc, #120]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	2201      	movs	r2, #1
 80025ce:	4013      	ands	r3, r2
 80025d0:	683a      	ldr	r2, [r7, #0]
 80025d2:	429a      	cmp	r2, r3
 80025d4:	d211      	bcs.n	80025fa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025d6:	4b1b      	ldr	r3, [pc, #108]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	2201      	movs	r2, #1
 80025dc:	4393      	bics	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	4b18      	ldr	r3, [pc, #96]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80025e2:	683a      	ldr	r2, [r7, #0]
 80025e4:	430a      	orrs	r2, r1
 80025e6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80025e8:	4b16      	ldr	r3, [pc, #88]	; (8002644 <HAL_RCC_ClockConfig+0x184>)
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	2201      	movs	r2, #1
 80025ee:	4013      	ands	r3, r2
 80025f0:	683a      	ldr	r2, [r7, #0]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d001      	beq.n	80025fa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 80025f6:	2301      	movs	r3, #1
 80025f8:	e020      	b.n	800263c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	2204      	movs	r2, #4
 8002600:	4013      	ands	r3, r2
 8002602:	d009      	beq.n	8002618 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002604:	4b10      	ldr	r3, [pc, #64]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	4a11      	ldr	r2, [pc, #68]	; (8002650 <HAL_RCC_ClockConfig+0x190>)
 800260a:	4013      	ands	r3, r2
 800260c:	0019      	movs	r1, r3
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	4b0d      	ldr	r3, [pc, #52]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002614:	430a      	orrs	r2, r1
 8002616:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002618:	f000 f820 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800261c:	0001      	movs	r1, r0
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <HAL_RCC_ClockConfig+0x188>)
 8002620:	685b      	ldr	r3, [r3, #4]
 8002622:	091b      	lsrs	r3, r3, #4
 8002624:	220f      	movs	r2, #15
 8002626:	4013      	ands	r3, r2
 8002628:	4a0a      	ldr	r2, [pc, #40]	; (8002654 <HAL_RCC_ClockConfig+0x194>)
 800262a:	5cd3      	ldrb	r3, [r2, r3]
 800262c:	000a      	movs	r2, r1
 800262e:	40da      	lsrs	r2, r3
 8002630:	4b09      	ldr	r3, [pc, #36]	; (8002658 <HAL_RCC_ClockConfig+0x198>)
 8002632:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002634:	2003      	movs	r0, #3
 8002636:	f7ff f973 	bl	8001920 <HAL_InitTick>
  
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	0018      	movs	r0, r3
 800263e:	46bd      	mov	sp, r7
 8002640:	b004      	add	sp, #16
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40022000 	.word	0x40022000
 8002648:	40021000 	.word	0x40021000
 800264c:	00001388 	.word	0x00001388
 8002650:	fffff8ff 	.word	0xfffff8ff
 8002654:	080046dc 	.word	0x080046dc
 8002658:	20000000 	.word	0x20000000

0800265c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800265c:	b590      	push	{r4, r7, lr}
 800265e:	b08f      	sub	sp, #60	; 0x3c
 8002660:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002662:	2314      	movs	r3, #20
 8002664:	18fb      	adds	r3, r7, r3
 8002666:	4a2b      	ldr	r2, [pc, #172]	; (8002714 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002668:	ca13      	ldmia	r2!, {r0, r1, r4}
 800266a:	c313      	stmia	r3!, {r0, r1, r4}
 800266c:	6812      	ldr	r2, [r2, #0]
 800266e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4a29      	ldr	r2, [pc, #164]	; (8002718 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002674:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002676:	c313      	stmia	r3!, {r0, r1, r4}
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800267c:	2300      	movs	r3, #0
 800267e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002680:	2300      	movs	r3, #0
 8002682:	62bb      	str	r3, [r7, #40]	; 0x28
 8002684:	2300      	movs	r3, #0
 8002686:	637b      	str	r3, [r7, #52]	; 0x34
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002690:	4b22      	ldr	r3, [pc, #136]	; (800271c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002696:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002698:	220c      	movs	r2, #12
 800269a:	4013      	ands	r3, r2
 800269c:	2b04      	cmp	r3, #4
 800269e:	d002      	beq.n	80026a6 <HAL_RCC_GetSysClockFreq+0x4a>
 80026a0:	2b08      	cmp	r3, #8
 80026a2:	d003      	beq.n	80026ac <HAL_RCC_GetSysClockFreq+0x50>
 80026a4:	e02d      	b.n	8002702 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026a6:	4b1e      	ldr	r3, [pc, #120]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026a8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80026aa:	e02d      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80026ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026ae:	0c9b      	lsrs	r3, r3, #18
 80026b0:	220f      	movs	r2, #15
 80026b2:	4013      	ands	r3, r2
 80026b4:	2214      	movs	r2, #20
 80026b6:	18ba      	adds	r2, r7, r2
 80026b8:	5cd3      	ldrb	r3, [r2, r3]
 80026ba:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80026bc:	4b17      	ldr	r3, [pc, #92]	; (800271c <HAL_RCC_GetSysClockFreq+0xc0>)
 80026be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c0:	220f      	movs	r2, #15
 80026c2:	4013      	ands	r3, r2
 80026c4:	1d3a      	adds	r2, r7, #4
 80026c6:	5cd3      	ldrb	r3, [r2, r3]
 80026c8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80026ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026cc:	2380      	movs	r3, #128	; 0x80
 80026ce:	025b      	lsls	r3, r3, #9
 80026d0:	4013      	ands	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80026d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026d6:	4812      	ldr	r0, [pc, #72]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc4>)
 80026d8:	f7fd fd20 	bl	800011c <__udivsi3>
 80026dc:	0003      	movs	r3, r0
 80026de:	001a      	movs	r2, r3
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	4353      	muls	r3, r2
 80026e4:	637b      	str	r3, [r7, #52]	; 0x34
 80026e6:	e009      	b.n	80026fc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80026e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026ea:	000a      	movs	r2, r1
 80026ec:	0152      	lsls	r2, r2, #5
 80026ee:	1a52      	subs	r2, r2, r1
 80026f0:	0193      	lsls	r3, r2, #6
 80026f2:	1a9b      	subs	r3, r3, r2
 80026f4:	00db      	lsls	r3, r3, #3
 80026f6:	185b      	adds	r3, r3, r1
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80026fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002700:	e002      	b.n	8002708 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002702:	4b07      	ldr	r3, [pc, #28]	; (8002720 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002704:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002706:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 800270a:	0018      	movs	r0, r3
 800270c:	46bd      	mov	sp, r7
 800270e:	b00f      	add	sp, #60	; 0x3c
 8002710:	bd90      	pop	{r4, r7, pc}
 8002712:	46c0      	nop			; (mov r8, r8)
 8002714:	080046bc 	.word	0x080046bc
 8002718:	080046cc 	.word	0x080046cc
 800271c:	40021000 	.word	0x40021000
 8002720:	007a1200 	.word	0x007a1200

08002724 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002728:	4b02      	ldr	r3, [pc, #8]	; (8002734 <HAL_RCC_GetHCLKFreq+0x10>)
 800272a:	681b      	ldr	r3, [r3, #0]
}
 800272c:	0018      	movs	r0, r3
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	46c0      	nop			; (mov r8, r8)
 8002734:	20000000 	.word	0x20000000

08002738 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800273c:	f7ff fff2 	bl	8002724 <HAL_RCC_GetHCLKFreq>
 8002740:	0001      	movs	r1, r0
 8002742:	4b06      	ldr	r3, [pc, #24]	; (800275c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0a1b      	lsrs	r3, r3, #8
 8002748:	2207      	movs	r2, #7
 800274a:	4013      	ands	r3, r2
 800274c:	4a04      	ldr	r2, [pc, #16]	; (8002760 <HAL_RCC_GetPCLK1Freq+0x28>)
 800274e:	5cd3      	ldrb	r3, [r2, r3]
 8002750:	40d9      	lsrs	r1, r3
 8002752:	000b      	movs	r3, r1
}    
 8002754:	0018      	movs	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	bd80      	pop	{r7, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	40021000 	.word	0x40021000
 8002760:	080046ec 	.word	0x080046ec

08002764 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	b084      	sub	sp, #16
 8002768:	af00      	add	r7, sp, #0
 800276a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d101      	bne.n	8002776 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002772:	2301      	movs	r3, #1
 8002774:	e0a8      	b.n	80028c8 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	2b00      	cmp	r3, #0
 800277c:	d109      	bne.n	8002792 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	2382      	movs	r3, #130	; 0x82
 8002784:	005b      	lsls	r3, r3, #1
 8002786:	429a      	cmp	r2, r3
 8002788:	d009      	beq.n	800279e <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	61da      	str	r2, [r3, #28]
 8002790:	e005      	b.n	800279e <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	225d      	movs	r2, #93	; 0x5d
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	b2db      	uxtb	r3, r3
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d107      	bne.n	80027c0 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	225c      	movs	r2, #92	; 0x5c
 80027b4:	2100      	movs	r1, #0
 80027b6:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	0018      	movs	r0, r3
 80027bc:	f7fe ff84 	bl	80016c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	225d      	movs	r2, #93	; 0x5d
 80027c4:	2102      	movs	r1, #2
 80027c6:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2140      	movs	r1, #64	; 0x40
 80027d4:	438a      	bics	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	23e0      	movs	r3, #224	; 0xe0
 80027de:	00db      	lsls	r3, r3, #3
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d902      	bls.n	80027ea <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027e4:	2300      	movs	r3, #0
 80027e6:	60fb      	str	r3, [r7, #12]
 80027e8:	e002      	b.n	80027f0 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027ea:	2380      	movs	r3, #128	; 0x80
 80027ec:	015b      	lsls	r3, r3, #5
 80027ee:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	68da      	ldr	r2, [r3, #12]
 80027f4:	23f0      	movs	r3, #240	; 0xf0
 80027f6:	011b      	lsls	r3, r3, #4
 80027f8:	429a      	cmp	r2, r3
 80027fa:	d008      	beq.n	800280e <HAL_SPI_Init+0xaa>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	68da      	ldr	r2, [r3, #12]
 8002800:	23e0      	movs	r3, #224	; 0xe0
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	429a      	cmp	r2, r3
 8002806:	d002      	beq.n	800280e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2200      	movs	r2, #0
 800280c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	685a      	ldr	r2, [r3, #4]
 8002812:	2382      	movs	r3, #130	; 0x82
 8002814:	005b      	lsls	r3, r3, #1
 8002816:	401a      	ands	r2, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6899      	ldr	r1, [r3, #8]
 800281c:	2384      	movs	r3, #132	; 0x84
 800281e:	021b      	lsls	r3, r3, #8
 8002820:	400b      	ands	r3, r1
 8002822:	431a      	orrs	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	691b      	ldr	r3, [r3, #16]
 8002828:	2102      	movs	r1, #2
 800282a:	400b      	ands	r3, r1
 800282c:	431a      	orrs	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	2101      	movs	r1, #1
 8002834:	400b      	ands	r3, r1
 8002836:	431a      	orrs	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6999      	ldr	r1, [r3, #24]
 800283c:	2380      	movs	r3, #128	; 0x80
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	400b      	ands	r3, r1
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	69db      	ldr	r3, [r3, #28]
 8002848:	2138      	movs	r1, #56	; 0x38
 800284a:	400b      	ands	r3, r1
 800284c:	431a      	orrs	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6a1b      	ldr	r3, [r3, #32]
 8002852:	2180      	movs	r1, #128	; 0x80
 8002854:	400b      	ands	r3, r1
 8002856:	431a      	orrs	r2, r3
 8002858:	0011      	movs	r1, r2
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	019b      	lsls	r3, r3, #6
 8002862:	401a      	ands	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	0c1b      	lsrs	r3, r3, #16
 8002872:	2204      	movs	r2, #4
 8002874:	401a      	ands	r2, r3
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800287a:	2110      	movs	r1, #16
 800287c:	400b      	ands	r3, r1
 800287e:	431a      	orrs	r2, r3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002884:	2108      	movs	r1, #8
 8002886:	400b      	ands	r3, r1
 8002888:	431a      	orrs	r2, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	68d9      	ldr	r1, [r3, #12]
 800288e:	23f0      	movs	r3, #240	; 0xf0
 8002890:	011b      	lsls	r3, r3, #4
 8002892:	400b      	ands	r3, r1
 8002894:	431a      	orrs	r2, r3
 8002896:	0011      	movs	r1, r2
 8002898:	68fa      	ldr	r2, [r7, #12]
 800289a:	2380      	movs	r3, #128	; 0x80
 800289c:	015b      	lsls	r3, r3, #5
 800289e:	401a      	ands	r2, r3
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69da      	ldr	r2, [r3, #28]
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4907      	ldr	r1, [pc, #28]	; (80028d0 <HAL_SPI_Init+0x16c>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2200      	movs	r2, #0
 80028bc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	225d      	movs	r2, #93	; 0x5d
 80028c2:	2101      	movs	r1, #1
 80028c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028c6:	2300      	movs	r3, #0
}
 80028c8:	0018      	movs	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b004      	add	sp, #16
 80028ce:	bd80      	pop	{r7, pc}
 80028d0:	fffff7ff 	.word	0xfffff7ff

080028d4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	603b      	str	r3, [r7, #0]
 80028e0:	1dbb      	adds	r3, r7, #6
 80028e2:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028e4:	231f      	movs	r3, #31
 80028e6:	18fb      	adds	r3, r7, r3
 80028e8:	2200      	movs	r2, #0
 80028ea:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	225c      	movs	r2, #92	; 0x5c
 80028f0:	5c9b      	ldrb	r3, [r3, r2]
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <HAL_SPI_Transmit+0x26>
 80028f6:	2302      	movs	r3, #2
 80028f8:	e140      	b.n	8002b7c <HAL_SPI_Transmit+0x2a8>
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	225c      	movs	r2, #92	; 0x5c
 80028fe:	2101      	movs	r1, #1
 8002900:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002902:	f7ff f853 	bl	80019ac <HAL_GetTick>
 8002906:	0003      	movs	r3, r0
 8002908:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800290a:	2316      	movs	r3, #22
 800290c:	18fb      	adds	r3, r7, r3
 800290e:	1dba      	adds	r2, r7, #6
 8002910:	8812      	ldrh	r2, [r2, #0]
 8002912:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	225d      	movs	r2, #93	; 0x5d
 8002918:	5c9b      	ldrb	r3, [r3, r2]
 800291a:	b2db      	uxtb	r3, r3
 800291c:	2b01      	cmp	r3, #1
 800291e:	d004      	beq.n	800292a <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2202      	movs	r2, #2
 8002926:	701a      	strb	r2, [r3, #0]
    goto error;
 8002928:	e11d      	b.n	8002b66 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <HAL_SPI_Transmit+0x64>
 8002930:	1dbb      	adds	r3, r7, #6
 8002932:	881b      	ldrh	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d104      	bne.n	8002942 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002938:	231f      	movs	r3, #31
 800293a:	18fb      	adds	r3, r7, r3
 800293c:	2201      	movs	r2, #1
 800293e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002940:	e111      	b.n	8002b66 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	225d      	movs	r2, #93	; 0x5d
 8002946:	2103      	movs	r1, #3
 8002948:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	2200      	movs	r2, #0
 800294e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	68ba      	ldr	r2, [r7, #8]
 8002954:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1dba      	adds	r2, r7, #6
 800295a:	8812      	ldrh	r2, [r2, #0]
 800295c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1dba      	adds	r2, r7, #6
 8002962:	8812      	ldrh	r2, [r2, #0]
 8002964:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	2200      	movs	r2, #0
 800296a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	2244      	movs	r2, #68	; 0x44
 8002970:	2100      	movs	r1, #0
 8002972:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	2246      	movs	r2, #70	; 0x46
 8002978:	2100      	movs	r1, #0
 800297a:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	2200      	movs	r2, #0
 8002980:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	689a      	ldr	r2, [r3, #8]
 800298c:	2380      	movs	r3, #128	; 0x80
 800298e:	021b      	lsls	r3, r3, #8
 8002990:	429a      	cmp	r2, r3
 8002992:	d110      	bne.n	80029b6 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	2140      	movs	r1, #64	; 0x40
 80029a0:	438a      	bics	r2, r1
 80029a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	2180      	movs	r1, #128	; 0x80
 80029b0:	01c9      	lsls	r1, r1, #7
 80029b2:	430a      	orrs	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2240      	movs	r2, #64	; 0x40
 80029be:	4013      	ands	r3, r2
 80029c0:	2b40      	cmp	r3, #64	; 0x40
 80029c2:	d007      	beq.n	80029d4 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	2140      	movs	r1, #64	; 0x40
 80029d0:	430a      	orrs	r2, r1
 80029d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	68da      	ldr	r2, [r3, #12]
 80029d8:	23e0      	movs	r3, #224	; 0xe0
 80029da:	00db      	lsls	r3, r3, #3
 80029dc:	429a      	cmp	r2, r3
 80029de:	d94e      	bls.n	8002a7e <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d004      	beq.n	80029f2 <HAL_SPI_Transmit+0x11e>
 80029e8:	2316      	movs	r3, #22
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	2b01      	cmp	r3, #1
 80029f0:	d13f      	bne.n	8002a72 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029f6:	881a      	ldrh	r2, [r3, #0]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a02:	1c9a      	adds	r2, r3, #2
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0c:	b29b      	uxth	r3, r3
 8002a0e:	3b01      	subs	r3, #1
 8002a10:	b29a      	uxth	r2, r3
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002a16:	e02c      	b.n	8002a72 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	689b      	ldr	r3, [r3, #8]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d112      	bne.n	8002a4c <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a2a:	881a      	ldrh	r2, [r3, #0]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a36:	1c9a      	adds	r2, r3, #2
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a40:	b29b      	uxth	r3, r3
 8002a42:	3b01      	subs	r3, #1
 8002a44:	b29a      	uxth	r2, r3
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a4a:	e012      	b.n	8002a72 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a4c:	f7fe ffae 	bl	80019ac <HAL_GetTick>
 8002a50:	0002      	movs	r2, r0
 8002a52:	69bb      	ldr	r3, [r7, #24]
 8002a54:	1ad3      	subs	r3, r2, r3
 8002a56:	683a      	ldr	r2, [r7, #0]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d802      	bhi.n	8002a62 <HAL_SPI_Transmit+0x18e>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	d102      	bne.n	8002a68 <HAL_SPI_Transmit+0x194>
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d104      	bne.n	8002a72 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002a68:	231f      	movs	r3, #31
 8002a6a:	18fb      	adds	r3, r7, r3
 8002a6c:	2203      	movs	r2, #3
 8002a6e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a70:	e079      	b.n	8002b66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a76:	b29b      	uxth	r3, r3
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1cd      	bne.n	8002a18 <HAL_SPI_Transmit+0x144>
 8002a7c:	e04f      	b.n	8002b1e <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d004      	beq.n	8002a90 <HAL_SPI_Transmit+0x1bc>
 8002a86:	2316      	movs	r3, #22
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	881b      	ldrh	r3, [r3, #0]
 8002a8c:	2b01      	cmp	r3, #1
 8002a8e:	d141      	bne.n	8002b14 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	330c      	adds	r3, #12
 8002a9a:	7812      	ldrb	r2, [r2, #0]
 8002a9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa2:	1c5a      	adds	r2, r3, #1
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 8002ab6:	e02d      	b.n	8002b14 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	2202      	movs	r2, #2
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	2b02      	cmp	r3, #2
 8002ac4:	d113      	bne.n	8002aee <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	330c      	adds	r3, #12
 8002ad0:	7812      	ldrb	r2, [r2, #0]
 8002ad2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aec:	e012      	b.n	8002b14 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002aee:	f7fe ff5d 	bl	80019ac <HAL_GetTick>
 8002af2:	0002      	movs	r2, r0
 8002af4:	69bb      	ldr	r3, [r7, #24]
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d802      	bhi.n	8002b04 <HAL_SPI_Transmit+0x230>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	3301      	adds	r3, #1
 8002b02:	d102      	bne.n	8002b0a <HAL_SPI_Transmit+0x236>
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d104      	bne.n	8002b14 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 8002b0a:	231f      	movs	r3, #31
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	2203      	movs	r2, #3
 8002b10:	701a      	strb	r2, [r3, #0]
          goto error;
 8002b12:	e028      	b.n	8002b66 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d1cc      	bne.n	8002ab8 <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	6839      	ldr	r1, [r7, #0]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 fcd9 	bl	80034dc <SPI_EndRxTxTransaction>
 8002b2a:	1e03      	subs	r3, r0, #0
 8002b2c:	d002      	beq.n	8002b34 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2220      	movs	r2, #32
 8002b32:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	689b      	ldr	r3, [r3, #8]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d10a      	bne.n	8002b52 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	613b      	str	r3, [r7, #16]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	68db      	ldr	r3, [r3, #12]
 8002b46:	613b      	str	r3, [r7, #16]
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	613b      	str	r3, [r7, #16]
 8002b50:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d004      	beq.n	8002b64 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8002b5a:	231f      	movs	r3, #31
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e000      	b.n	8002b66 <HAL_SPI_Transmit+0x292>
  }

error:
 8002b64:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	225d      	movs	r2, #93	; 0x5d
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	225c      	movs	r2, #92	; 0x5c
 8002b72:	2100      	movs	r1, #0
 8002b74:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002b76:	231f      	movs	r3, #31
 8002b78:	18fb      	adds	r3, r7, r3
 8002b7a:	781b      	ldrb	r3, [r3, #0]
}
 8002b7c:	0018      	movs	r0, r3
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	b008      	add	sp, #32
 8002b82:	bd80      	pop	{r7, pc}

08002b84 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b84:	b590      	push	{r4, r7, lr}
 8002b86:	b089      	sub	sp, #36	; 0x24
 8002b88:	af02      	add	r7, sp, #8
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	603b      	str	r3, [r7, #0]
 8002b90:	1dbb      	adds	r3, r7, #6
 8002b92:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002b94:	2317      	movs	r3, #23
 8002b96:	18fb      	adds	r3, r7, r3
 8002b98:	2200      	movs	r2, #0
 8002b9a:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	2382      	movs	r3, #130	; 0x82
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d113      	bne.n	8002bd0 <HAL_SPI_Receive+0x4c>
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d10f      	bne.n	8002bd0 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	225d      	movs	r2, #93	; 0x5d
 8002bb4:	2104      	movs	r1, #4
 8002bb6:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002bb8:	1dbb      	adds	r3, r7, #6
 8002bba:	881c      	ldrh	r4, [r3, #0]
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	68b9      	ldr	r1, [r7, #8]
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	9300      	str	r3, [sp, #0]
 8002bc6:	0023      	movs	r3, r4
 8002bc8:	f000 f928 	bl	8002e1c <HAL_SPI_TransmitReceive>
 8002bcc:	0003      	movs	r3, r0
 8002bce:	e11c      	b.n	8002e0a <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	225c      	movs	r2, #92	; 0x5c
 8002bd4:	5c9b      	ldrb	r3, [r3, r2]
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d101      	bne.n	8002bde <HAL_SPI_Receive+0x5a>
 8002bda:	2302      	movs	r3, #2
 8002bdc:	e115      	b.n	8002e0a <HAL_SPI_Receive+0x286>
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	225c      	movs	r2, #92	; 0x5c
 8002be2:	2101      	movs	r1, #1
 8002be4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002be6:	f7fe fee1 	bl	80019ac <HAL_GetTick>
 8002bea:	0003      	movs	r3, r0
 8002bec:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	225d      	movs	r2, #93	; 0x5d
 8002bf2:	5c9b      	ldrb	r3, [r3, r2]
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d004      	beq.n	8002c04 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002bfa:	2317      	movs	r3, #23
 8002bfc:	18fb      	adds	r3, r7, r3
 8002bfe:	2202      	movs	r2, #2
 8002c00:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c02:	e0f7      	b.n	8002df4 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d003      	beq.n	8002c12 <HAL_SPI_Receive+0x8e>
 8002c0a:	1dbb      	adds	r3, r7, #6
 8002c0c:	881b      	ldrh	r3, [r3, #0]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d104      	bne.n	8002c1c <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 8002c12:	2317      	movs	r3, #23
 8002c14:	18fb      	adds	r3, r7, r3
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c1a:	e0eb      	b.n	8002df4 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	225d      	movs	r2, #93	; 0x5d
 8002c20:	2104      	movs	r1, #4
 8002c22:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2200      	movs	r2, #0
 8002c28:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	68ba      	ldr	r2, [r7, #8]
 8002c2e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	1dba      	adds	r2, r7, #6
 8002c34:	2144      	movs	r1, #68	; 0x44
 8002c36:	8812      	ldrh	r2, [r2, #0]
 8002c38:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	1dba      	adds	r2, r7, #6
 8002c3e:	2146      	movs	r1, #70	; 0x46
 8002c40:	8812      	ldrh	r2, [r2, #0]
 8002c42:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	2200      	movs	r2, #0
 8002c48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2200      	movs	r2, #0
 8002c54:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	23e0      	movs	r3, #224	; 0xe0
 8002c68:	00db      	lsls	r3, r3, #3
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d908      	bls.n	8002c80 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685a      	ldr	r2, [r3, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4966      	ldr	r1, [pc, #408]	; (8002e14 <HAL_SPI_Receive+0x290>)
 8002c7a:	400a      	ands	r2, r1
 8002c7c:	605a      	str	r2, [r3, #4]
 8002c7e:	e008      	b.n	8002c92 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	685a      	ldr	r2, [r3, #4]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2180      	movs	r1, #128	; 0x80
 8002c8c:	0149      	lsls	r1, r1, #5
 8002c8e:	430a      	orrs	r2, r1
 8002c90:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	689a      	ldr	r2, [r3, #8]
 8002c96:	2380      	movs	r3, #128	; 0x80
 8002c98:	021b      	lsls	r3, r3, #8
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d10f      	bne.n	8002cbe <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	681a      	ldr	r2, [r3, #0]
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2140      	movs	r1, #64	; 0x40
 8002caa:	438a      	bics	r2, r1
 8002cac:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4957      	ldr	r1, [pc, #348]	; (8002e18 <HAL_SPI_Receive+0x294>)
 8002cba:	400a      	ands	r2, r1
 8002cbc:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2240      	movs	r2, #64	; 0x40
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b40      	cmp	r3, #64	; 0x40
 8002cca:	d007      	beq.n	8002cdc <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2140      	movs	r1, #64	; 0x40
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	23e0      	movs	r3, #224	; 0xe0
 8002ce2:	00db      	lsls	r3, r3, #3
 8002ce4:	429a      	cmp	r2, r3
 8002ce6:	d900      	bls.n	8002cea <HAL_SPI_Receive+0x166>
 8002ce8:	e069      	b.n	8002dbe <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002cea:	e031      	b.n	8002d50 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d117      	bne.n	8002d2a <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	330c      	adds	r3, #12
 8002d00:	001a      	movs	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d06:	7812      	ldrb	r2, [r2, #0]
 8002d08:	b2d2      	uxtb	r2, r2
 8002d0a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	1c5a      	adds	r2, r3, #1
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2246      	movs	r2, #70	; 0x46
 8002d1a:	5a9b      	ldrh	r3, [r3, r2]
 8002d1c:	b29b      	uxth	r3, r3
 8002d1e:	3b01      	subs	r3, #1
 8002d20:	b299      	uxth	r1, r3
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2246      	movs	r2, #70	; 0x46
 8002d26:	5299      	strh	r1, [r3, r2]
 8002d28:	e012      	b.n	8002d50 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d2a:	f7fe fe3f 	bl	80019ac <HAL_GetTick>
 8002d2e:	0002      	movs	r2, r0
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	1ad3      	subs	r3, r2, r3
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d802      	bhi.n	8002d40 <HAL_SPI_Receive+0x1bc>
 8002d3a:	683b      	ldr	r3, [r7, #0]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	d102      	bne.n	8002d46 <HAL_SPI_Receive+0x1c2>
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d104      	bne.n	8002d50 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 8002d46:	2317      	movs	r3, #23
 8002d48:	18fb      	adds	r3, r7, r3
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	701a      	strb	r2, [r3, #0]
          goto error;
 8002d4e:	e051      	b.n	8002df4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	2246      	movs	r2, #70	; 0x46
 8002d54:	5a9b      	ldrh	r3, [r3, r2]
 8002d56:	b29b      	uxth	r3, r3
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1c7      	bne.n	8002cec <HAL_SPI_Receive+0x168>
 8002d5c:	e035      	b.n	8002dca <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	2201      	movs	r2, #1
 8002d66:	4013      	ands	r3, r2
 8002d68:	2b01      	cmp	r3, #1
 8002d6a:	d115      	bne.n	8002d98 <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d76:	b292      	uxth	r2, r2
 8002d78:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	1c9a      	adds	r2, r3, #2
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2246      	movs	r2, #70	; 0x46
 8002d88:	5a9b      	ldrh	r3, [r3, r2]
 8002d8a:	b29b      	uxth	r3, r3
 8002d8c:	3b01      	subs	r3, #1
 8002d8e:	b299      	uxth	r1, r3
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	2246      	movs	r2, #70	; 0x46
 8002d94:	5299      	strh	r1, [r3, r2]
 8002d96:	e012      	b.n	8002dbe <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d98:	f7fe fe08 	bl	80019ac <HAL_GetTick>
 8002d9c:	0002      	movs	r2, r0
 8002d9e:	693b      	ldr	r3, [r7, #16]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	683a      	ldr	r2, [r7, #0]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	d802      	bhi.n	8002dae <HAL_SPI_Receive+0x22a>
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	3301      	adds	r3, #1
 8002dac:	d102      	bne.n	8002db4 <HAL_SPI_Receive+0x230>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d104      	bne.n	8002dbe <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002db4:	2317      	movs	r3, #23
 8002db6:	18fb      	adds	r3, r7, r3
 8002db8:	2203      	movs	r2, #3
 8002dba:	701a      	strb	r2, [r3, #0]
          goto error;
 8002dbc:	e01a      	b.n	8002df4 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	2246      	movs	r2, #70	; 0x46
 8002dc2:	5a9b      	ldrh	r3, [r3, r2]
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1c9      	bne.n	8002d5e <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002dca:	693a      	ldr	r2, [r7, #16]
 8002dcc:	6839      	ldr	r1, [r7, #0]
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	0018      	movs	r0, r3
 8002dd2:	f000 fb25 	bl	8003420 <SPI_EndRxTransaction>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d002      	beq.n	8002de0 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	2220      	movs	r2, #32
 8002dde:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d004      	beq.n	8002df2 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 8002de8:	2317      	movs	r3, #23
 8002dea:	18fb      	adds	r3, r7, r3
 8002dec:	2201      	movs	r2, #1
 8002dee:	701a      	strb	r2, [r3, #0]
 8002df0:	e000      	b.n	8002df4 <HAL_SPI_Receive+0x270>
  }

error :
 8002df2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	225d      	movs	r2, #93	; 0x5d
 8002df8:	2101      	movs	r1, #1
 8002dfa:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	225c      	movs	r2, #92	; 0x5c
 8002e00:	2100      	movs	r1, #0
 8002e02:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002e04:	2317      	movs	r3, #23
 8002e06:	18fb      	adds	r3, r7, r3
 8002e08:	781b      	ldrb	r3, [r3, #0]
}
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	b007      	add	sp, #28
 8002e10:	bd90      	pop	{r4, r7, pc}
 8002e12:	46c0      	nop			; (mov r8, r8)
 8002e14:	ffffefff 	.word	0xffffefff
 8002e18:	ffffbfff 	.word	0xffffbfff

08002e1c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	60f8      	str	r0, [r7, #12]
 8002e24:	60b9      	str	r1, [r7, #8]
 8002e26:	607a      	str	r2, [r7, #4]
 8002e28:	001a      	movs	r2, r3
 8002e2a:	1cbb      	adds	r3, r7, #2
 8002e2c:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e32:	2323      	movs	r3, #35	; 0x23
 8002e34:	18fb      	adds	r3, r7, r3
 8002e36:	2200      	movs	r2, #0
 8002e38:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	225c      	movs	r2, #92	; 0x5c
 8002e3e:	5c9b      	ldrb	r3, [r3, r2]
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_SPI_TransmitReceive+0x2c>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e1b5      	b.n	80031b4 <HAL_SPI_TransmitReceive+0x398>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	225c      	movs	r2, #92	; 0x5c
 8002e4c:	2101      	movs	r1, #1
 8002e4e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e50:	f7fe fdac 	bl	80019ac <HAL_GetTick>
 8002e54:	0003      	movs	r3, r0
 8002e56:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002e58:	201b      	movs	r0, #27
 8002e5a:	183b      	adds	r3, r7, r0
 8002e5c:	68fa      	ldr	r2, [r7, #12]
 8002e5e:	215d      	movs	r1, #93	; 0x5d
 8002e60:	5c52      	ldrb	r2, [r2, r1]
 8002e62:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8002e6a:	2312      	movs	r3, #18
 8002e6c:	18fb      	adds	r3, r7, r3
 8002e6e:	1cba      	adds	r2, r7, #2
 8002e70:	8812      	ldrh	r2, [r2, #0]
 8002e72:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002e74:	183b      	adds	r3, r7, r0
 8002e76:	781b      	ldrb	r3, [r3, #0]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	d011      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x84>
 8002e7c:	697a      	ldr	r2, [r7, #20]
 8002e7e:	2382      	movs	r3, #130	; 0x82
 8002e80:	005b      	lsls	r3, r3, #1
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d107      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d103      	bne.n	8002e96 <HAL_SPI_TransmitReceive+0x7a>
 8002e8e:	183b      	adds	r3, r7, r0
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	d004      	beq.n	8002ea0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002e96:	2323      	movs	r3, #35	; 0x23
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	2202      	movs	r2, #2
 8002e9c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002e9e:	e17e      	b.n	800319e <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d006      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x98>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d003      	beq.n	8002eb4 <HAL_SPI_TransmitReceive+0x98>
 8002eac:	1cbb      	adds	r3, r7, #2
 8002eae:	881b      	ldrh	r3, [r3, #0]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d104      	bne.n	8002ebe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002eb4:	2323      	movs	r3, #35	; 0x23
 8002eb6:	18fb      	adds	r3, r7, r3
 8002eb8:	2201      	movs	r2, #1
 8002eba:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ebc:	e16f      	b.n	800319e <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	225d      	movs	r2, #93	; 0x5d
 8002ec2:	5c9b      	ldrb	r3, [r3, r2]
 8002ec4:	b2db      	uxtb	r3, r3
 8002ec6:	2b04      	cmp	r3, #4
 8002ec8:	d003      	beq.n	8002ed2 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	225d      	movs	r2, #93	; 0x5d
 8002ece:	2105      	movs	r1, #5
 8002ed0:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	687a      	ldr	r2, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	1cba      	adds	r2, r7, #2
 8002ee2:	2146      	movs	r1, #70	; 0x46
 8002ee4:	8812      	ldrh	r2, [r2, #0]
 8002ee6:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	1cba      	adds	r2, r7, #2
 8002eec:	2144      	movs	r1, #68	; 0x44
 8002eee:	8812      	ldrh	r2, [r2, #0]
 8002ef0:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	68ba      	ldr	r2, [r7, #8]
 8002ef6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1cba      	adds	r2, r7, #2
 8002efc:	8812      	ldrh	r2, [r2, #0]
 8002efe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	1cba      	adds	r2, r7, #2
 8002f04:	8812      	ldrh	r2, [r2, #0]
 8002f06:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	2200      	movs	r2, #0
 8002f12:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68da      	ldr	r2, [r3, #12]
 8002f18:	23e0      	movs	r3, #224	; 0xe0
 8002f1a:	00db      	lsls	r3, r3, #3
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d908      	bls.n	8002f32 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	49a4      	ldr	r1, [pc, #656]	; (80031bc <HAL_SPI_TransmitReceive+0x3a0>)
 8002f2c:	400a      	ands	r2, r1
 8002f2e:	605a      	str	r2, [r3, #4]
 8002f30:	e008      	b.n	8002f44 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	2180      	movs	r1, #128	; 0x80
 8002f3e:	0149      	lsls	r1, r1, #5
 8002f40:	430a      	orrs	r2, r1
 8002f42:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2240      	movs	r2, #64	; 0x40
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	2b40      	cmp	r3, #64	; 0x40
 8002f50:	d007      	beq.n	8002f62 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681a      	ldr	r2, [r3, #0]
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	430a      	orrs	r2, r1
 8002f60:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	68da      	ldr	r2, [r3, #12]
 8002f66:	23e0      	movs	r3, #224	; 0xe0
 8002f68:	00db      	lsls	r3, r3, #3
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d800      	bhi.n	8002f70 <HAL_SPI_TransmitReceive+0x154>
 8002f6e:	e07f      	b.n	8003070 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d005      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x168>
 8002f78:	2312      	movs	r3, #18
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	881b      	ldrh	r3, [r3, #0]
 8002f7e:	2b01      	cmp	r3, #1
 8002f80:	d000      	beq.n	8002f84 <HAL_SPI_TransmitReceive+0x168>
 8002f82:	e069      	b.n	8003058 <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f88:	881a      	ldrh	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f94:	1c9a      	adds	r2, r3, #2
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	b29a      	uxth	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa8:	e056      	b.n	8003058 <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2202      	movs	r2, #2
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x1d4>
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_SPI_TransmitReceive+0x1d4>
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	2b01      	cmp	r3, #1
 8002fc6:	d113      	bne.n	8002ff0 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fcc:	881a      	ldrh	r2, [r3, #0]
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd8:	1c9a      	adds	r2, r3, #2
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fec:	2300      	movs	r3, #0
 8002fee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d11c      	bne.n	8003038 <HAL_SPI_TransmitReceive+0x21c>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2246      	movs	r2, #70	; 0x46
 8003002:	5a9b      	ldrh	r3, [r3, r2]
 8003004:	b29b      	uxth	r3, r3
 8003006:	2b00      	cmp	r3, #0
 8003008:	d016      	beq.n	8003038 <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68da      	ldr	r2, [r3, #12]
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	b292      	uxth	r2, r2
 8003016:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301c:	1c9a      	adds	r2, r3, #2
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2246      	movs	r2, #70	; 0x46
 8003026:	5a9b      	ldrh	r3, [r3, r2]
 8003028:	b29b      	uxth	r3, r3
 800302a:	3b01      	subs	r3, #1
 800302c:	b299      	uxth	r1, r3
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2246      	movs	r2, #70	; 0x46
 8003032:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003034:	2301      	movs	r3, #1
 8003036:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003038:	f7fe fcb8 	bl	80019ac <HAL_GetTick>
 800303c:	0002      	movs	r2, r0
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	1ad3      	subs	r3, r2, r3
 8003042:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003044:	429a      	cmp	r2, r3
 8003046:	d807      	bhi.n	8003058 <HAL_SPI_TransmitReceive+0x23c>
 8003048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304a:	3301      	adds	r3, #1
 800304c:	d004      	beq.n	8003058 <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 800304e:	2323      	movs	r3, #35	; 0x23
 8003050:	18fb      	adds	r3, r7, r3
 8003052:	2203      	movs	r2, #3
 8003054:	701a      	strb	r2, [r3, #0]
        goto error;
 8003056:	e0a2      	b.n	800319e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800305c:	b29b      	uxth	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d1a3      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x18e>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2246      	movs	r2, #70	; 0x46
 8003066:	5a9b      	ldrh	r3, [r3, r2]
 8003068:	b29b      	uxth	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d19d      	bne.n	8002faa <HAL_SPI_TransmitReceive+0x18e>
 800306e:	e085      	b.n	800317c <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d005      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x268>
 8003078:	2312      	movs	r3, #18
 800307a:	18fb      	adds	r3, r7, r3
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d000      	beq.n	8003084 <HAL_SPI_TransmitReceive+0x268>
 8003082:	e070      	b.n	8003166 <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	330c      	adds	r3, #12
 800308e:	7812      	ldrb	r2, [r2, #0]
 8003090:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003096:	1c5a      	adds	r2, r3, #1
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29a      	uxth	r2, r3
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030aa:	e05c      	b.n	8003166 <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	689b      	ldr	r3, [r3, #8]
 80030b2:	2202      	movs	r2, #2
 80030b4:	4013      	ands	r3, r2
 80030b6:	2b02      	cmp	r3, #2
 80030b8:	d11c      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x2d8>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030be:	b29b      	uxth	r3, r3
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d017      	beq.n	80030f4 <HAL_SPI_TransmitReceive+0x2d8>
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d114      	bne.n	80030f4 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	330c      	adds	r3, #12
 80030d4:	7812      	ldrb	r2, [r2, #0]
 80030d6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030e6:	b29b      	uxth	r3, r3
 80030e8:	3b01      	subs	r3, #1
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030f0:	2300      	movs	r3, #0
 80030f2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	2201      	movs	r2, #1
 80030fc:	4013      	ands	r3, r2
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d11e      	bne.n	8003140 <HAL_SPI_TransmitReceive+0x324>
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2246      	movs	r2, #70	; 0x46
 8003106:	5a9b      	ldrh	r3, [r3, r2]
 8003108:	b29b      	uxth	r3, r3
 800310a:	2b00      	cmp	r3, #0
 800310c:	d018      	beq.n	8003140 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	330c      	adds	r3, #12
 8003114:	001a      	movs	r2, r3
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800311a:	7812      	ldrb	r2, [r2, #0]
 800311c:	b2d2      	uxtb	r2, r2
 800311e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003124:	1c5a      	adds	r2, r3, #1
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2246      	movs	r2, #70	; 0x46
 800312e:	5a9b      	ldrh	r3, [r3, r2]
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b299      	uxth	r1, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2246      	movs	r2, #70	; 0x46
 800313a:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800313c:	2301      	movs	r3, #1
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003140:	f7fe fc34 	bl	80019ac <HAL_GetTick>
 8003144:	0002      	movs	r2, r0
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800314c:	429a      	cmp	r2, r3
 800314e:	d802      	bhi.n	8003156 <HAL_SPI_TransmitReceive+0x33a>
 8003150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003152:	3301      	adds	r3, #1
 8003154:	d102      	bne.n	800315c <HAL_SPI_TransmitReceive+0x340>
 8003156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003158:	2b00      	cmp	r3, #0
 800315a:	d104      	bne.n	8003166 <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 800315c:	2323      	movs	r3, #35	; 0x23
 800315e:	18fb      	adds	r3, r7, r3
 8003160:	2203      	movs	r2, #3
 8003162:	701a      	strb	r2, [r3, #0]
        goto error;
 8003164:	e01b      	b.n	800319e <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800316a:	b29b      	uxth	r3, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	d19d      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x290>
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	2246      	movs	r2, #70	; 0x46
 8003174:	5a9b      	ldrh	r3, [r3, r2]
 8003176:	b29b      	uxth	r3, r3
 8003178:	2b00      	cmp	r3, #0
 800317a:	d197      	bne.n	80030ac <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800317c:	69fa      	ldr	r2, [r7, #28]
 800317e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	0018      	movs	r0, r3
 8003184:	f000 f9aa 	bl	80034dc <SPI_EndRxTxTransaction>
 8003188:	1e03      	subs	r3, r0, #0
 800318a:	d007      	beq.n	800319c <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 800318c:	2323      	movs	r3, #35	; 0x23
 800318e:	18fb      	adds	r3, r7, r3
 8003190:	2201      	movs	r2, #1
 8003192:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	2220      	movs	r2, #32
 8003198:	661a      	str	r2, [r3, #96]	; 0x60
 800319a:	e000      	b.n	800319e <HAL_SPI_TransmitReceive+0x382>
  }

error :
 800319c:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	225d      	movs	r2, #93	; 0x5d
 80031a2:	2101      	movs	r1, #1
 80031a4:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	225c      	movs	r2, #92	; 0x5c
 80031aa:	2100      	movs	r1, #0
 80031ac:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80031ae:	2323      	movs	r3, #35	; 0x23
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	781b      	ldrb	r3, [r3, #0]
}
 80031b4:	0018      	movs	r0, r3
 80031b6:	46bd      	mov	sp, r7
 80031b8:	b00a      	add	sp, #40	; 0x28
 80031ba:	bd80      	pop	{r7, pc}
 80031bc:	ffffefff 	.word	0xffffefff

080031c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b088      	sub	sp, #32
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	603b      	str	r3, [r7, #0]
 80031cc:	1dfb      	adds	r3, r7, #7
 80031ce:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031d0:	f7fe fbec 	bl	80019ac <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d8:	1a9b      	subs	r3, r3, r2
 80031da:	683a      	ldr	r2, [r7, #0]
 80031dc:	18d3      	adds	r3, r2, r3
 80031de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031e0:	f7fe fbe4 	bl	80019ac <HAL_GetTick>
 80031e4:	0003      	movs	r3, r0
 80031e6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031e8:	4b3a      	ldr	r3, [pc, #232]	; (80032d4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	015b      	lsls	r3, r3, #5
 80031ee:	0d1b      	lsrs	r3, r3, #20
 80031f0:	69fa      	ldr	r2, [r7, #28]
 80031f2:	4353      	muls	r3, r2
 80031f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80031f6:	e058      	b.n	80032aa <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 80031f8:	683b      	ldr	r3, [r7, #0]
 80031fa:	3301      	adds	r3, #1
 80031fc:	d055      	beq.n	80032aa <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031fe:	f7fe fbd5 	bl	80019ac <HAL_GetTick>
 8003202:	0002      	movs	r2, r0
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	1ad3      	subs	r3, r2, r3
 8003208:	69fa      	ldr	r2, [r7, #28]
 800320a:	429a      	cmp	r2, r3
 800320c:	d902      	bls.n	8003214 <SPI_WaitFlagStateUntilTimeout+0x54>
 800320e:	69fb      	ldr	r3, [r7, #28]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d142      	bne.n	800329a <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	21e0      	movs	r1, #224	; 0xe0
 8003220:	438a      	bics	r2, r1
 8003222:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	2382      	movs	r3, #130	; 0x82
 800322a:	005b      	lsls	r3, r3, #1
 800322c:	429a      	cmp	r2, r3
 800322e:	d113      	bne.n	8003258 <SPI_WaitFlagStateUntilTimeout+0x98>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	2380      	movs	r3, #128	; 0x80
 8003236:	021b      	lsls	r3, r3, #8
 8003238:	429a      	cmp	r2, r3
 800323a:	d005      	beq.n	8003248 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	689a      	ldr	r2, [r3, #8]
 8003240:	2380      	movs	r3, #128	; 0x80
 8003242:	00db      	lsls	r3, r3, #3
 8003244:	429a      	cmp	r2, r3
 8003246:	d107      	bne.n	8003258 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681a      	ldr	r2, [r3, #0]
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2140      	movs	r1, #64	; 0x40
 8003254:	438a      	bics	r2, r1
 8003256:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	019b      	lsls	r3, r3, #6
 8003260:	429a      	cmp	r2, r3
 8003262:	d110      	bne.n	8003286 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681a      	ldr	r2, [r3, #0]
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	491a      	ldr	r1, [pc, #104]	; (80032d8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8003270:	400a      	ands	r2, r1
 8003272:	601a      	str	r2, [r3, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	681a      	ldr	r2, [r3, #0]
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2180      	movs	r1, #128	; 0x80
 8003280:	0189      	lsls	r1, r1, #6
 8003282:	430a      	orrs	r2, r1
 8003284:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	225d      	movs	r2, #93	; 0x5d
 800328a:	2101      	movs	r1, #1
 800328c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	225c      	movs	r2, #92	; 0x5c
 8003292:	2100      	movs	r1, #0
 8003294:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e017      	b.n	80032ca <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d101      	bne.n	80032a4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3b01      	subs	r3, #1
 80032a8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	689b      	ldr	r3, [r3, #8]
 80032b0:	68ba      	ldr	r2, [r7, #8]
 80032b2:	4013      	ands	r3, r2
 80032b4:	68ba      	ldr	r2, [r7, #8]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	425a      	negs	r2, r3
 80032ba:	4153      	adcs	r3, r2
 80032bc:	b2db      	uxtb	r3, r3
 80032be:	001a      	movs	r2, r3
 80032c0:	1dfb      	adds	r3, r7, #7
 80032c2:	781b      	ldrb	r3, [r3, #0]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d197      	bne.n	80031f8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032c8:	2300      	movs	r3, #0
}
 80032ca:	0018      	movs	r0, r3
 80032cc:	46bd      	mov	sp, r7
 80032ce:	b008      	add	sp, #32
 80032d0:	bd80      	pop	{r7, pc}
 80032d2:	46c0      	nop			; (mov r8, r8)
 80032d4:	20000000 	.word	0x20000000
 80032d8:	ffffdfff 	.word	0xffffdfff

080032dc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b08a      	sub	sp, #40	; 0x28
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	60f8      	str	r0, [r7, #12]
 80032e4:	60b9      	str	r1, [r7, #8]
 80032e6:	607a      	str	r2, [r7, #4]
 80032e8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80032ea:	2317      	movs	r3, #23
 80032ec:	18fb      	adds	r3, r7, r3
 80032ee:	2200      	movs	r2, #0
 80032f0:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 80032f2:	f7fe fb5b 	bl	80019ac <HAL_GetTick>
 80032f6:	0002      	movs	r2, r0
 80032f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032fa:	1a9b      	subs	r3, r3, r2
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	18d3      	adds	r3, r2, r3
 8003300:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8003302:	f7fe fb53 	bl	80019ac <HAL_GetTick>
 8003306:	0003      	movs	r3, r0
 8003308:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	330c      	adds	r3, #12
 8003310:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003312:	4b41      	ldr	r3, [pc, #260]	; (8003418 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	0013      	movs	r3, r2
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	189b      	adds	r3, r3, r2
 800331c:	00da      	lsls	r2, r3, #3
 800331e:	1ad3      	subs	r3, r2, r3
 8003320:	0d1b      	lsrs	r3, r3, #20
 8003322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003324:	4353      	muls	r3, r2
 8003326:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003328:	e068      	b.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800332a:	68ba      	ldr	r2, [r7, #8]
 800332c:	23c0      	movs	r3, #192	; 0xc0
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	429a      	cmp	r2, r3
 8003332:	d10a      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d107      	bne.n	800334a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	b2da      	uxtb	r2, r3
 8003340:	2117      	movs	r1, #23
 8003342:	187b      	adds	r3, r7, r1
 8003344:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003346:	187b      	adds	r3, r7, r1
 8003348:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	3301      	adds	r3, #1
 800334e:	d055      	beq.n	80033fc <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003350:	f7fe fb2c 	bl	80019ac <HAL_GetTick>
 8003354:	0002      	movs	r2, r0
 8003356:	6a3b      	ldr	r3, [r7, #32]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	429a      	cmp	r2, r3
 800335e:	d902      	bls.n	8003366 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8003360:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003362:	2b00      	cmp	r3, #0
 8003364:	d142      	bne.n	80033ec <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	21e0      	movs	r1, #224	; 0xe0
 8003372:	438a      	bics	r2, r1
 8003374:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	2382      	movs	r3, #130	; 0x82
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	429a      	cmp	r2, r3
 8003380:	d113      	bne.n	80033aa <SPI_WaitFifoStateUntilTimeout+0xce>
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	689a      	ldr	r2, [r3, #8]
 8003386:	2380      	movs	r3, #128	; 0x80
 8003388:	021b      	lsls	r3, r3, #8
 800338a:	429a      	cmp	r2, r3
 800338c:	d005      	beq.n	800339a <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	689a      	ldr	r2, [r3, #8]
 8003392:	2380      	movs	r3, #128	; 0x80
 8003394:	00db      	lsls	r3, r3, #3
 8003396:	429a      	cmp	r2, r3
 8003398:	d107      	bne.n	80033aa <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	681a      	ldr	r2, [r3, #0]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	2140      	movs	r1, #64	; 0x40
 80033a6:	438a      	bics	r2, r1
 80033a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80033ae:	2380      	movs	r3, #128	; 0x80
 80033b0:	019b      	lsls	r3, r3, #6
 80033b2:	429a      	cmp	r2, r3
 80033b4:	d110      	bne.n	80033d8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	681a      	ldr	r2, [r3, #0]
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4916      	ldr	r1, [pc, #88]	; (800341c <SPI_WaitFifoStateUntilTimeout+0x140>)
 80033c2:	400a      	ands	r2, r1
 80033c4:	601a      	str	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2180      	movs	r1, #128	; 0x80
 80033d2:	0189      	lsls	r1, r1, #6
 80033d4:	430a      	orrs	r2, r1
 80033d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	225d      	movs	r2, #93	; 0x5d
 80033dc:	2101      	movs	r1, #1
 80033de:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	225c      	movs	r2, #92	; 0x5c
 80033e4:	2100      	movs	r1, #0
 80033e6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80033e8:	2303      	movs	r3, #3
 80033ea:	e010      	b.n	800340e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80033ec:	69bb      	ldr	r3, [r7, #24]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d101      	bne.n	80033f6 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	3b01      	subs	r3, #1
 80033fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	68ba      	ldr	r2, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	429a      	cmp	r2, r3
 800340a:	d18e      	bne.n	800332a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 800340c:	2300      	movs	r3, #0
}
 800340e:	0018      	movs	r0, r3
 8003410:	46bd      	mov	sp, r7
 8003412:	b00a      	add	sp, #40	; 0x28
 8003414:	bd80      	pop	{r7, pc}
 8003416:	46c0      	nop			; (mov r8, r8)
 8003418:	20000000 	.word	0x20000000
 800341c:	ffffdfff 	.word	0xffffdfff

08003420 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b086      	sub	sp, #24
 8003424:	af02      	add	r7, sp, #8
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	685a      	ldr	r2, [r3, #4]
 8003430:	2382      	movs	r3, #130	; 0x82
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	429a      	cmp	r2, r3
 8003436:	d113      	bne.n	8003460 <SPI_EndRxTransaction+0x40>
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	2380      	movs	r3, #128	; 0x80
 800343e:	021b      	lsls	r3, r3, #8
 8003440:	429a      	cmp	r2, r3
 8003442:	d005      	beq.n	8003450 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	689a      	ldr	r2, [r3, #8]
 8003448:	2380      	movs	r3, #128	; 0x80
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	429a      	cmp	r2, r3
 800344e:	d107      	bne.n	8003460 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	2140      	movs	r1, #64	; 0x40
 800345c:	438a      	bics	r2, r1
 800345e:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003460:	68ba      	ldr	r2, [r7, #8]
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	9300      	str	r3, [sp, #0]
 8003468:	0013      	movs	r3, r2
 800346a:	2200      	movs	r2, #0
 800346c:	2180      	movs	r1, #128	; 0x80
 800346e:	f7ff fea7 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 8003472:	1e03      	subs	r3, r0, #0
 8003474:	d007      	beq.n	8003486 <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800347a:	2220      	movs	r2, #32
 800347c:	431a      	orrs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e026      	b.n	80034d4 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	2382      	movs	r3, #130	; 0x82
 800348c:	005b      	lsls	r3, r3, #1
 800348e:	429a      	cmp	r2, r3
 8003490:	d11f      	bne.n	80034d2 <SPI_EndRxTransaction+0xb2>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	689a      	ldr	r2, [r3, #8]
 8003496:	2380      	movs	r3, #128	; 0x80
 8003498:	021b      	lsls	r3, r3, #8
 800349a:	429a      	cmp	r2, r3
 800349c:	d005      	beq.n	80034aa <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	689a      	ldr	r2, [r3, #8]
 80034a2:	2380      	movs	r3, #128	; 0x80
 80034a4:	00db      	lsls	r3, r3, #3
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d113      	bne.n	80034d2 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034aa:	68ba      	ldr	r2, [r7, #8]
 80034ac:	23c0      	movs	r3, #192	; 0xc0
 80034ae:	00d9      	lsls	r1, r3, #3
 80034b0:	68f8      	ldr	r0, [r7, #12]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	9300      	str	r3, [sp, #0]
 80034b6:	0013      	movs	r3, r2
 80034b8:	2200      	movs	r2, #0
 80034ba:	f7ff ff0f 	bl	80032dc <SPI_WaitFifoStateUntilTimeout>
 80034be:	1e03      	subs	r3, r0, #0
 80034c0:	d007      	beq.n	80034d2 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034c6:	2220      	movs	r2, #32
 80034c8:	431a      	orrs	r2, r3
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e000      	b.n	80034d4 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
}
 80034d4:	0018      	movs	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	b004      	add	sp, #16
 80034da:	bd80      	pop	{r7, pc}

080034dc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034dc:	b580      	push	{r7, lr}
 80034de:	b086      	sub	sp, #24
 80034e0:	af02      	add	r7, sp, #8
 80034e2:	60f8      	str	r0, [r7, #12]
 80034e4:	60b9      	str	r1, [r7, #8]
 80034e6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034e8:	68ba      	ldr	r2, [r7, #8]
 80034ea:	23c0      	movs	r3, #192	; 0xc0
 80034ec:	0159      	lsls	r1, r3, #5
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	0013      	movs	r3, r2
 80034f6:	2200      	movs	r2, #0
 80034f8:	f7ff fef0 	bl	80032dc <SPI_WaitFifoStateUntilTimeout>
 80034fc:	1e03      	subs	r3, r0, #0
 80034fe:	d007      	beq.n	8003510 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003504:	2220      	movs	r2, #32
 8003506:	431a      	orrs	r2, r3
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800350c:	2303      	movs	r3, #3
 800350e:	e027      	b.n	8003560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	68f8      	ldr	r0, [r7, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	9300      	str	r3, [sp, #0]
 8003518:	0013      	movs	r3, r2
 800351a:	2200      	movs	r2, #0
 800351c:	2180      	movs	r1, #128	; 0x80
 800351e:	f7ff fe4f 	bl	80031c0 <SPI_WaitFlagStateUntilTimeout>
 8003522:	1e03      	subs	r3, r0, #0
 8003524:	d007      	beq.n	8003536 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800352a:	2220      	movs	r2, #32
 800352c:	431a      	orrs	r2, r3
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e014      	b.n	8003560 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003536:	68ba      	ldr	r2, [r7, #8]
 8003538:	23c0      	movs	r3, #192	; 0xc0
 800353a:	00d9      	lsls	r1, r3, #3
 800353c:	68f8      	ldr	r0, [r7, #12]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	0013      	movs	r3, r2
 8003544:	2200      	movs	r2, #0
 8003546:	f7ff fec9 	bl	80032dc <SPI_WaitFifoStateUntilTimeout>
 800354a:	1e03      	subs	r3, r0, #0
 800354c:	d007      	beq.n	800355e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003552:	2220      	movs	r2, #32
 8003554:	431a      	orrs	r2, r3
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800355a:	2303      	movs	r3, #3
 800355c:	e000      	b.n	8003560 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800355e:	2300      	movs	r3, #0
}
 8003560:	0018      	movs	r0, r3
 8003562:	46bd      	mov	sp, r7
 8003564:	b004      	add	sp, #16
 8003566:	bd80      	pop	{r7, pc}

08003568 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d101      	bne.n	800357a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	e044      	b.n	8003604 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800357e:	2b00      	cmp	r3, #0
 8003580:	d107      	bne.n	8003592 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2274      	movs	r2, #116	; 0x74
 8003586:	2100      	movs	r1, #0
 8003588:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	0018      	movs	r0, r3
 800358e:	f7fe f8e9 	bl	8001764 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2224      	movs	r2, #36	; 0x24
 8003596:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	2101      	movs	r1, #1
 80035a4:	438a      	bics	r2, r1
 80035a6:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	0018      	movs	r0, r3
 80035ac:	f000 f8da 	bl	8003764 <UART_SetConfig>
 80035b0:	0003      	movs	r3, r0
 80035b2:	2b01      	cmp	r3, #1
 80035b4:	d101      	bne.n	80035ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e024      	b.n	8003604 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d003      	beq.n	80035ca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	0018      	movs	r0, r3
 80035c6:	f000 fa0d 	bl	80039e4 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	490d      	ldr	r1, [pc, #52]	; (800360c <HAL_UART_Init+0xa4>)
 80035d6:	400a      	ands	r2, r1
 80035d8:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	212a      	movs	r1, #42	; 0x2a
 80035e6:	438a      	bics	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2101      	movs	r1, #1
 80035f6:	430a      	orrs	r2, r1
 80035f8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	0018      	movs	r0, r3
 80035fe:	f000 faa5 	bl	8003b4c <UART_CheckIdleState>
 8003602:	0003      	movs	r3, r0
}
 8003604:	0018      	movs	r0, r3
 8003606:	46bd      	mov	sp, r7
 8003608:	b002      	add	sp, #8
 800360a:	bd80      	pop	{r7, pc}
 800360c:	ffffb7ff 	.word	0xffffb7ff

08003610 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af02      	add	r7, sp, #8
 8003616:	60f8      	str	r0, [r7, #12]
 8003618:	60b9      	str	r1, [r7, #8]
 800361a:	603b      	str	r3, [r7, #0]
 800361c:	1dbb      	adds	r3, r7, #6
 800361e:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003624:	2b20      	cmp	r3, #32
 8003626:	d000      	beq.n	800362a <HAL_UART_Transmit+0x1a>
 8003628:	e096      	b.n	8003758 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d003      	beq.n	8003638 <HAL_UART_Transmit+0x28>
 8003630:	1dbb      	adds	r3, r7, #6
 8003632:	881b      	ldrh	r3, [r3, #0]
 8003634:	2b00      	cmp	r3, #0
 8003636:	d101      	bne.n	800363c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e08e      	b.n	800375a <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	689a      	ldr	r2, [r3, #8]
 8003640:	2380      	movs	r3, #128	; 0x80
 8003642:	015b      	lsls	r3, r3, #5
 8003644:	429a      	cmp	r2, r3
 8003646:	d109      	bne.n	800365c <HAL_UART_Transmit+0x4c>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	691b      	ldr	r3, [r3, #16]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d105      	bne.n	800365c <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	2201      	movs	r2, #1
 8003654:	4013      	ands	r3, r2
 8003656:	d001      	beq.n	800365c <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	e07e      	b.n	800375a <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	2274      	movs	r2, #116	; 0x74
 8003660:	5c9b      	ldrb	r3, [r3, r2]
 8003662:	2b01      	cmp	r3, #1
 8003664:	d101      	bne.n	800366a <HAL_UART_Transmit+0x5a>
 8003666:	2302      	movs	r3, #2
 8003668:	e077      	b.n	800375a <HAL_UART_Transmit+0x14a>
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	2274      	movs	r2, #116	; 0x74
 800366e:	2101      	movs	r1, #1
 8003670:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	2280      	movs	r2, #128	; 0x80
 8003676:	2100      	movs	r1, #0
 8003678:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2221      	movs	r2, #33	; 0x21
 800367e:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003680:	f7fe f994 	bl	80019ac <HAL_GetTick>
 8003684:	0003      	movs	r3, r0
 8003686:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	1dba      	adds	r2, r7, #6
 800368c:	2150      	movs	r1, #80	; 0x50
 800368e:	8812      	ldrh	r2, [r2, #0]
 8003690:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1dba      	adds	r2, r7, #6
 8003696:	2152      	movs	r1, #82	; 0x52
 8003698:	8812      	ldrh	r2, [r2, #0]
 800369a:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	2380      	movs	r3, #128	; 0x80
 80036a2:	015b      	lsls	r3, r3, #5
 80036a4:	429a      	cmp	r2, r3
 80036a6:	d108      	bne.n	80036ba <HAL_UART_Transmit+0xaa>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	691b      	ldr	r3, [r3, #16]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d104      	bne.n	80036ba <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 80036b0:	2300      	movs	r3, #0
 80036b2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	61bb      	str	r3, [r7, #24]
 80036b8:	e003      	b.n	80036c2 <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	2274      	movs	r2, #116	; 0x74
 80036c6:	2100      	movs	r1, #0
 80036c8:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80036ca:	e02d      	b.n	8003728 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80036cc:	697a      	ldr	r2, [r7, #20]
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	9300      	str	r3, [sp, #0]
 80036d4:	0013      	movs	r3, r2
 80036d6:	2200      	movs	r2, #0
 80036d8:	2180      	movs	r1, #128	; 0x80
 80036da:	f000 fa7f 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 80036de:	1e03      	subs	r3, r0, #0
 80036e0:	d001      	beq.n	80036e6 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80036e2:	2303      	movs	r3, #3
 80036e4:	e039      	b.n	800375a <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d10b      	bne.n	8003704 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80036ec:	69bb      	ldr	r3, [r7, #24]
 80036ee:	881a      	ldrh	r2, [r3, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	05d2      	lsls	r2, r2, #23
 80036f6:	0dd2      	lsrs	r2, r2, #23
 80036f8:	b292      	uxth	r2, r2
 80036fa:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	3302      	adds	r3, #2
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e008      	b.n	8003716 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003704:	69fb      	ldr	r3, [r7, #28]
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b292      	uxth	r2, r2
 800370e:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	3301      	adds	r3, #1
 8003714:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2252      	movs	r2, #82	; 0x52
 800371a:	5a9b      	ldrh	r3, [r3, r2]
 800371c:	b29b      	uxth	r3, r3
 800371e:	3b01      	subs	r3, #1
 8003720:	b299      	uxth	r1, r3
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	2252      	movs	r2, #82	; 0x52
 8003726:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	2252      	movs	r2, #82	; 0x52
 800372c:	5a9b      	ldrh	r3, [r3, r2]
 800372e:	b29b      	uxth	r3, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	d1cb      	bne.n	80036cc <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	0013      	movs	r3, r2
 800373e:	2200      	movs	r2, #0
 8003740:	2140      	movs	r1, #64	; 0x40
 8003742:	f000 fa4b 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003746:	1e03      	subs	r3, r0, #0
 8003748:	d001      	beq.n	800374e <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 800374a:	2303      	movs	r3, #3
 800374c:	e005      	b.n	800375a <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2220      	movs	r2, #32
 8003752:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003754:	2300      	movs	r3, #0
 8003756:	e000      	b.n	800375a <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003758:	2302      	movs	r3, #2
  }
}
 800375a:	0018      	movs	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	b008      	add	sp, #32
 8003760:	bd80      	pop	{r7, pc}
	...

08003764 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b088      	sub	sp, #32
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800376c:	231e      	movs	r3, #30
 800376e:	18fb      	adds	r3, r7, r3
 8003770:	2200      	movs	r2, #0
 8003772:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689a      	ldr	r2, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	691b      	ldr	r3, [r3, #16]
 800377c:	431a      	orrs	r2, r3
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	695b      	ldr	r3, [r3, #20]
 8003782:	431a      	orrs	r2, r3
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	4313      	orrs	r3, r2
 800378a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a8d      	ldr	r2, [pc, #564]	; (80039c8 <UART_SetConfig+0x264>)
 8003794:	4013      	ands	r3, r2
 8003796:	0019      	movs	r1, r3
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	697a      	ldr	r2, [r7, #20]
 800379e:	430a      	orrs	r2, r1
 80037a0:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	4a88      	ldr	r2, [pc, #544]	; (80039cc <UART_SetConfig+0x268>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	0019      	movs	r1, r3
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	699b      	ldr	r3, [r3, #24]
 80037be:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6a1b      	ldr	r3, [r3, #32]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	689b      	ldr	r3, [r3, #8]
 80037d0:	4a7f      	ldr	r2, [pc, #508]	; (80039d0 <UART_SetConfig+0x26c>)
 80037d2:	4013      	ands	r3, r2
 80037d4:	0019      	movs	r1, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	697a      	ldr	r2, [r7, #20]
 80037dc:	430a      	orrs	r2, r1
 80037de:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a7b      	ldr	r2, [pc, #492]	; (80039d4 <UART_SetConfig+0x270>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d127      	bne.n	800383a <UART_SetConfig+0xd6>
 80037ea:	4b7b      	ldr	r3, [pc, #492]	; (80039d8 <UART_SetConfig+0x274>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	2203      	movs	r2, #3
 80037f0:	4013      	ands	r3, r2
 80037f2:	2b03      	cmp	r3, #3
 80037f4:	d00d      	beq.n	8003812 <UART_SetConfig+0xae>
 80037f6:	d81b      	bhi.n	8003830 <UART_SetConfig+0xcc>
 80037f8:	2b02      	cmp	r3, #2
 80037fa:	d014      	beq.n	8003826 <UART_SetConfig+0xc2>
 80037fc:	d818      	bhi.n	8003830 <UART_SetConfig+0xcc>
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d002      	beq.n	8003808 <UART_SetConfig+0xa4>
 8003802:	2b01      	cmp	r3, #1
 8003804:	d00a      	beq.n	800381c <UART_SetConfig+0xb8>
 8003806:	e013      	b.n	8003830 <UART_SetConfig+0xcc>
 8003808:	231f      	movs	r3, #31
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e021      	b.n	8003856 <UART_SetConfig+0xf2>
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2202      	movs	r2, #2
 8003818:	701a      	strb	r2, [r3, #0]
 800381a:	e01c      	b.n	8003856 <UART_SetConfig+0xf2>
 800381c:	231f      	movs	r3, #31
 800381e:	18fb      	adds	r3, r7, r3
 8003820:	2204      	movs	r2, #4
 8003822:	701a      	strb	r2, [r3, #0]
 8003824:	e017      	b.n	8003856 <UART_SetConfig+0xf2>
 8003826:	231f      	movs	r3, #31
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	2208      	movs	r2, #8
 800382c:	701a      	strb	r2, [r3, #0]
 800382e:	e012      	b.n	8003856 <UART_SetConfig+0xf2>
 8003830:	231f      	movs	r3, #31
 8003832:	18fb      	adds	r3, r7, r3
 8003834:	2210      	movs	r2, #16
 8003836:	701a      	strb	r2, [r3, #0]
 8003838:	e00d      	b.n	8003856 <UART_SetConfig+0xf2>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	4a67      	ldr	r2, [pc, #412]	; (80039dc <UART_SetConfig+0x278>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d104      	bne.n	800384e <UART_SetConfig+0xea>
 8003844:	231f      	movs	r3, #31
 8003846:	18fb      	adds	r3, r7, r3
 8003848:	2200      	movs	r2, #0
 800384a:	701a      	strb	r2, [r3, #0]
 800384c:	e003      	b.n	8003856 <UART_SetConfig+0xf2>
 800384e:	231f      	movs	r3, #31
 8003850:	18fb      	adds	r3, r7, r3
 8003852:	2210      	movs	r2, #16
 8003854:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	69da      	ldr	r2, [r3, #28]
 800385a:	2380      	movs	r3, #128	; 0x80
 800385c:	021b      	lsls	r3, r3, #8
 800385e:	429a      	cmp	r2, r3
 8003860:	d15d      	bne.n	800391e <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003862:	231f      	movs	r3, #31
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	781b      	ldrb	r3, [r3, #0]
 8003868:	2b08      	cmp	r3, #8
 800386a:	d015      	beq.n	8003898 <UART_SetConfig+0x134>
 800386c:	dc18      	bgt.n	80038a0 <UART_SetConfig+0x13c>
 800386e:	2b04      	cmp	r3, #4
 8003870:	d00d      	beq.n	800388e <UART_SetConfig+0x12a>
 8003872:	dc15      	bgt.n	80038a0 <UART_SetConfig+0x13c>
 8003874:	2b00      	cmp	r3, #0
 8003876:	d002      	beq.n	800387e <UART_SetConfig+0x11a>
 8003878:	2b02      	cmp	r3, #2
 800387a:	d005      	beq.n	8003888 <UART_SetConfig+0x124>
 800387c:	e010      	b.n	80038a0 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800387e:	f7fe ff5b 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 8003882:	0003      	movs	r3, r0
 8003884:	61bb      	str	r3, [r7, #24]
        break;
 8003886:	e012      	b.n	80038ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003888:	4b55      	ldr	r3, [pc, #340]	; (80039e0 <UART_SetConfig+0x27c>)
 800388a:	61bb      	str	r3, [r7, #24]
        break;
 800388c:	e00f      	b.n	80038ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800388e:	f7fe fee5 	bl	800265c <HAL_RCC_GetSysClockFreq>
 8003892:	0003      	movs	r3, r0
 8003894:	61bb      	str	r3, [r7, #24]
        break;
 8003896:	e00a      	b.n	80038ae <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003898:	2380      	movs	r3, #128	; 0x80
 800389a:	021b      	lsls	r3, r3, #8
 800389c:	61bb      	str	r3, [r7, #24]
        break;
 800389e:	e006      	b.n	80038ae <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 80038a0:	2300      	movs	r3, #0
 80038a2:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80038a4:	231e      	movs	r3, #30
 80038a6:	18fb      	adds	r3, r7, r3
 80038a8:	2201      	movs	r2, #1
 80038aa:	701a      	strb	r2, [r3, #0]
        break;
 80038ac:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ae:	69bb      	ldr	r3, [r7, #24]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d100      	bne.n	80038b6 <UART_SetConfig+0x152>
 80038b4:	e07b      	b.n	80039ae <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	005a      	lsls	r2, r3, #1
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	085b      	lsrs	r3, r3, #1
 80038c0:	18d2      	adds	r2, r2, r3
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	0019      	movs	r1, r3
 80038c8:	0010      	movs	r0, r2
 80038ca:	f7fc fc27 	bl	800011c <__udivsi3>
 80038ce:	0003      	movs	r3, r0
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038d4:	693b      	ldr	r3, [r7, #16]
 80038d6:	2b0f      	cmp	r3, #15
 80038d8:	d91c      	bls.n	8003914 <UART_SetConfig+0x1b0>
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	2380      	movs	r3, #128	; 0x80
 80038de:	025b      	lsls	r3, r3, #9
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d217      	bcs.n	8003914 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038e4:	693b      	ldr	r3, [r7, #16]
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	200e      	movs	r0, #14
 80038ea:	183b      	adds	r3, r7, r0
 80038ec:	210f      	movs	r1, #15
 80038ee:	438a      	bics	r2, r1
 80038f0:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	085b      	lsrs	r3, r3, #1
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	2207      	movs	r2, #7
 80038fa:	4013      	ands	r3, r2
 80038fc:	b299      	uxth	r1, r3
 80038fe:	183b      	adds	r3, r7, r0
 8003900:	183a      	adds	r2, r7, r0
 8003902:	8812      	ldrh	r2, [r2, #0]
 8003904:	430a      	orrs	r2, r1
 8003906:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	183a      	adds	r2, r7, r0
 800390e:	8812      	ldrh	r2, [r2, #0]
 8003910:	60da      	str	r2, [r3, #12]
 8003912:	e04c      	b.n	80039ae <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 8003914:	231e      	movs	r3, #30
 8003916:	18fb      	adds	r3, r7, r3
 8003918:	2201      	movs	r2, #1
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e047      	b.n	80039ae <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 800391e:	231f      	movs	r3, #31
 8003920:	18fb      	adds	r3, r7, r3
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	2b08      	cmp	r3, #8
 8003926:	d015      	beq.n	8003954 <UART_SetConfig+0x1f0>
 8003928:	dc18      	bgt.n	800395c <UART_SetConfig+0x1f8>
 800392a:	2b04      	cmp	r3, #4
 800392c:	d00d      	beq.n	800394a <UART_SetConfig+0x1e6>
 800392e:	dc15      	bgt.n	800395c <UART_SetConfig+0x1f8>
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <UART_SetConfig+0x1d6>
 8003934:	2b02      	cmp	r3, #2
 8003936:	d005      	beq.n	8003944 <UART_SetConfig+0x1e0>
 8003938:	e010      	b.n	800395c <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800393a:	f7fe fefd 	bl	8002738 <HAL_RCC_GetPCLK1Freq>
 800393e:	0003      	movs	r3, r0
 8003940:	61bb      	str	r3, [r7, #24]
        break;
 8003942:	e012      	b.n	800396a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003944:	4b26      	ldr	r3, [pc, #152]	; (80039e0 <UART_SetConfig+0x27c>)
 8003946:	61bb      	str	r3, [r7, #24]
        break;
 8003948:	e00f      	b.n	800396a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394a:	f7fe fe87 	bl	800265c <HAL_RCC_GetSysClockFreq>
 800394e:	0003      	movs	r3, r0
 8003950:	61bb      	str	r3, [r7, #24]
        break;
 8003952:	e00a      	b.n	800396a <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003954:	2380      	movs	r3, #128	; 0x80
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	61bb      	str	r3, [r7, #24]
        break;
 800395a:	e006      	b.n	800396a <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 800395c:	2300      	movs	r3, #0
 800395e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003960:	231e      	movs	r3, #30
 8003962:	18fb      	adds	r3, r7, r3
 8003964:	2201      	movs	r2, #1
 8003966:	701a      	strb	r2, [r3, #0]
        break;
 8003968:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d01e      	beq.n	80039ae <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	085a      	lsrs	r2, r3, #1
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	18d2      	adds	r2, r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	0019      	movs	r1, r3
 8003980:	0010      	movs	r0, r2
 8003982:	f7fc fbcb 	bl	800011c <__udivsi3>
 8003986:	0003      	movs	r3, r0
 8003988:	b29b      	uxth	r3, r3
 800398a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b0f      	cmp	r3, #15
 8003990:	d909      	bls.n	80039a6 <UART_SetConfig+0x242>
 8003992:	693a      	ldr	r2, [r7, #16]
 8003994:	2380      	movs	r3, #128	; 0x80
 8003996:	025b      	lsls	r3, r3, #9
 8003998:	429a      	cmp	r2, r3
 800399a:	d204      	bcs.n	80039a6 <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	60da      	str	r2, [r3, #12]
 80039a4:	e003      	b.n	80039ae <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80039a6:	231e      	movs	r3, #30
 80039a8:	18fb      	adds	r3, r7, r3
 80039aa:	2201      	movs	r2, #1
 80039ac:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039ba:	231e      	movs	r3, #30
 80039bc:	18fb      	adds	r3, r7, r3
 80039be:	781b      	ldrb	r3, [r3, #0]
}
 80039c0:	0018      	movs	r0, r3
 80039c2:	46bd      	mov	sp, r7
 80039c4:	b008      	add	sp, #32
 80039c6:	bd80      	pop	{r7, pc}
 80039c8:	ffff69f3 	.word	0xffff69f3
 80039cc:	ffffcfff 	.word	0xffffcfff
 80039d0:	fffff4ff 	.word	0xfffff4ff
 80039d4:	40013800 	.word	0x40013800
 80039d8:	40021000 	.word	0x40021000
 80039dc:	40004400 	.word	0x40004400
 80039e0:	007a1200 	.word	0x007a1200

080039e4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b082      	sub	sp, #8
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f0:	2201      	movs	r2, #1
 80039f2:	4013      	ands	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	4a4a      	ldr	r2, [pc, #296]	; (8003b28 <UART_AdvFeatureConfig+0x144>)
 80039fe:	4013      	ands	r3, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	430a      	orrs	r2, r1
 8003a0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a12:	2202      	movs	r2, #2
 8003a14:	4013      	ands	r3, r2
 8003a16:	d00b      	beq.n	8003a30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	4a43      	ldr	r2, [pc, #268]	; (8003b2c <UART_AdvFeatureConfig+0x148>)
 8003a20:	4013      	ands	r3, r2
 8003a22:	0019      	movs	r1, r3
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	430a      	orrs	r2, r1
 8003a2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a34:	2204      	movs	r2, #4
 8003a36:	4013      	ands	r3, r2
 8003a38:	d00b      	beq.n	8003a52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	4a3b      	ldr	r2, [pc, #236]	; (8003b30 <UART_AdvFeatureConfig+0x14c>)
 8003a42:	4013      	ands	r3, r2
 8003a44:	0019      	movs	r1, r3
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	430a      	orrs	r2, r1
 8003a50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a56:	2208      	movs	r2, #8
 8003a58:	4013      	ands	r3, r2
 8003a5a:	d00b      	beq.n	8003a74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	4a34      	ldr	r2, [pc, #208]	; (8003b34 <UART_AdvFeatureConfig+0x150>)
 8003a64:	4013      	ands	r3, r2
 8003a66:	0019      	movs	r1, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	430a      	orrs	r2, r1
 8003a72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2210      	movs	r2, #16
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	4a2c      	ldr	r2, [pc, #176]	; (8003b38 <UART_AdvFeatureConfig+0x154>)
 8003a86:	4013      	ands	r3, r2
 8003a88:	0019      	movs	r1, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	430a      	orrs	r2, r1
 8003a94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9a:	2220      	movs	r2, #32
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	d00b      	beq.n	8003ab8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	4a25      	ldr	r2, [pc, #148]	; (8003b3c <UART_AdvFeatureConfig+0x158>)
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	0019      	movs	r1, r3
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	430a      	orrs	r2, r1
 8003ab6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abc:	2240      	movs	r2, #64	; 0x40
 8003abe:	4013      	ands	r3, r2
 8003ac0:	d01d      	beq.n	8003afe <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	685b      	ldr	r3, [r3, #4]
 8003ac8:	4a1d      	ldr	r2, [pc, #116]	; (8003b40 <UART_AdvFeatureConfig+0x15c>)
 8003aca:	4013      	ands	r3, r2
 8003acc:	0019      	movs	r1, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ade:	2380      	movs	r3, #128	; 0x80
 8003ae0:	035b      	lsls	r3, r3, #13
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d10b      	bne.n	8003afe <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	4a15      	ldr	r2, [pc, #84]	; (8003b44 <UART_AdvFeatureConfig+0x160>)
 8003aee:	4013      	ands	r3, r2
 8003af0:	0019      	movs	r1, r3
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	4013      	ands	r3, r2
 8003b06:	d00b      	beq.n	8003b20 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	685b      	ldr	r3, [r3, #4]
 8003b0e:	4a0e      	ldr	r2, [pc, #56]	; (8003b48 <UART_AdvFeatureConfig+0x164>)
 8003b10:	4013      	ands	r3, r2
 8003b12:	0019      	movs	r1, r3
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	430a      	orrs	r2, r1
 8003b1e:	605a      	str	r2, [r3, #4]
  }
}
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	46bd      	mov	sp, r7
 8003b24:	b002      	add	sp, #8
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	fffdffff 	.word	0xfffdffff
 8003b2c:	fffeffff 	.word	0xfffeffff
 8003b30:	fffbffff 	.word	0xfffbffff
 8003b34:	ffff7fff 	.word	0xffff7fff
 8003b38:	ffffefff 	.word	0xffffefff
 8003b3c:	ffffdfff 	.word	0xffffdfff
 8003b40:	ffefffff 	.word	0xffefffff
 8003b44:	ff9fffff 	.word	0xff9fffff
 8003b48:	fff7ffff 	.word	0xfff7ffff

08003b4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af02      	add	r7, sp, #8
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	2100      	movs	r1, #0
 8003b5a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b5c:	f7fd ff26 	bl	80019ac <HAL_GetTick>
 8003b60:	0003      	movs	r3, r0
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2208      	movs	r2, #8
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d10c      	bne.n	8003b8c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	2280      	movs	r2, #128	; 0x80
 8003b76:	0391      	lsls	r1, r2, #14
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <UART_CheckIdleState+0x8c>)
 8003b7c:	9200      	str	r2, [sp, #0]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f000 f82c 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003b84:	1e03      	subs	r3, r0, #0
 8003b86:	d001      	beq.n	8003b8c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e021      	b.n	8003bd0 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2204      	movs	r2, #4
 8003b94:	4013      	ands	r3, r2
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d10c      	bne.n	8003bb4 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2280      	movs	r2, #128	; 0x80
 8003b9e:	03d1      	lsls	r1, r2, #15
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	4a0d      	ldr	r2, [pc, #52]	; (8003bd8 <UART_CheckIdleState+0x8c>)
 8003ba4:	9200      	str	r2, [sp, #0]
 8003ba6:	2200      	movs	r2, #0
 8003ba8:	f000 f818 	bl	8003bdc <UART_WaitOnFlagUntilTimeout>
 8003bac:	1e03      	subs	r3, r0, #0
 8003bae:	d001      	beq.n	8003bb4 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003bb0:	2303      	movs	r3, #3
 8003bb2:	e00d      	b.n	8003bd0 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2220      	movs	r2, #32
 8003bb8:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2220      	movs	r2, #32
 8003bbe:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2274      	movs	r2, #116	; 0x74
 8003bca:	2100      	movs	r1, #0
 8003bcc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bce:	2300      	movs	r3, #0
}
 8003bd0:	0018      	movs	r0, r3
 8003bd2:	46bd      	mov	sp, r7
 8003bd4:	b004      	add	sp, #16
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	01ffffff 	.word	0x01ffffff

08003bdc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b094      	sub	sp, #80	; 0x50
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	60f8      	str	r0, [r7, #12]
 8003be4:	60b9      	str	r1, [r7, #8]
 8003be6:	603b      	str	r3, [r7, #0]
 8003be8:	1dfb      	adds	r3, r7, #7
 8003bea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bec:	e0a3      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bf0:	3301      	adds	r3, #1
 8003bf2:	d100      	bne.n	8003bf6 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003bf4:	e09f      	b.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bf6:	f7fd fed9 	bl	80019ac <HAL_GetTick>
 8003bfa:	0002      	movs	r2, r0
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d302      	bcc.n	8003c0c <UART_WaitOnFlagUntilTimeout+0x30>
 8003c06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d13d      	bne.n	8003c88 <UART_WaitOnFlagUntilTimeout+0xac>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8003c10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c14:	647b      	str	r3, [r7, #68]	; 0x44
 8003c16:	2301      	movs	r3, #1
 8003c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1c:	f383 8810 	msr	PRIMASK, r3
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	494c      	ldr	r1, [pc, #304]	; (8003d60 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c2e:	400a      	ands	r2, r1
 8003c30:	601a      	str	r2, [r3, #0]
 8003c32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003c34:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c38:	f383 8810 	msr	PRIMASK, r3
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003c42:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c46:	643b      	str	r3, [r7, #64]	; 0x40
 8003c48:	2301      	movs	r3, #1
 8003c4a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4e:	f383 8810 	msr	PRIMASK, r3
}
 8003c52:	46c0      	nop			; (mov r8, r8)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	689a      	ldr	r2, [r3, #8]
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	2101      	movs	r1, #1
 8003c60:	438a      	bics	r2, r1
 8003c62:	609a      	str	r2, [r3, #8]
 8003c64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c66:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c6a:	f383 8810 	msr	PRIMASK, r3
}
 8003c6e:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2220      	movs	r2, #32
 8003c74:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2220      	movs	r2, #32
 8003c7a:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	2274      	movs	r2, #116	; 0x74
 8003c80:	2100      	movs	r1, #0
 8003c82:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e067      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	2204      	movs	r2, #4
 8003c90:	4013      	ands	r3, r2
 8003c92:	d050      	beq.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	69da      	ldr	r2, [r3, #28]
 8003c9a:	2380      	movs	r3, #128	; 0x80
 8003c9c:	011b      	lsls	r3, r3, #4
 8003c9e:	401a      	ands	r2, r3
 8003ca0:	2380      	movs	r3, #128	; 0x80
 8003ca2:	011b      	lsls	r3, r3, #4
 8003ca4:	429a      	cmp	r2, r3
 8003ca6:	d146      	bne.n	8003d36 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2280      	movs	r2, #128	; 0x80
 8003cae:	0112      	lsls	r2, r2, #4
 8003cb0:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cb2:	f3ef 8310 	mrs	r3, PRIMASK
 8003cb6:	613b      	str	r3, [r7, #16]
  return(result);
 8003cb8:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003cba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f383 8810 	msr	PRIMASK, r3
}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	4923      	ldr	r1, [pc, #140]	; (8003d60 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003cd4:	400a      	ands	r2, r1
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003cda:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cdc:	69bb      	ldr	r3, [r7, #24]
 8003cde:	f383 8810 	msr	PRIMASK, r3
}
 8003ce2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ce4:	f3ef 8310 	mrs	r3, PRIMASK
 8003ce8:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cea:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cec:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cee:	2301      	movs	r3, #1
 8003cf0:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cf2:	6a3b      	ldr	r3, [r7, #32]
 8003cf4:	f383 8810 	msr	PRIMASK, r3
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	689a      	ldr	r2, [r3, #8]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2101      	movs	r1, #1
 8003d06:	438a      	bics	r2, r1
 8003d08:	609a      	str	r2, [r3, #8]
 8003d0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d0c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d10:	f383 8810 	msr	PRIMASK, r3
}
 8003d14:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2220      	movs	r2, #32
 8003d1a:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2280      	movs	r2, #128	; 0x80
 8003d26:	2120      	movs	r1, #32
 8003d28:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2274      	movs	r2, #116	; 0x74
 8003d2e:	2100      	movs	r1, #0
 8003d30:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e010      	b.n	8003d58 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	69db      	ldr	r3, [r3, #28]
 8003d3c:	68ba      	ldr	r2, [r7, #8]
 8003d3e:	4013      	ands	r3, r2
 8003d40:	68ba      	ldr	r2, [r7, #8]
 8003d42:	1ad3      	subs	r3, r2, r3
 8003d44:	425a      	negs	r2, r3
 8003d46:	4153      	adcs	r3, r2
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	001a      	movs	r2, r3
 8003d4c:	1dfb      	adds	r3, r7, #7
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d100      	bne.n	8003d56 <UART_WaitOnFlagUntilTimeout+0x17a>
 8003d54:	e74b      	b.n	8003bee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d56:	2300      	movs	r3, #0
}
 8003d58:	0018      	movs	r0, r3
 8003d5a:	46bd      	mov	sp, r7
 8003d5c:	b014      	add	sp, #80	; 0x50
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	fffffe5f 	.word	0xfffffe5f

08003d64 <__errno>:
 8003d64:	4b01      	ldr	r3, [pc, #4]	; (8003d6c <__errno+0x8>)
 8003d66:	6818      	ldr	r0, [r3, #0]
 8003d68:	4770      	bx	lr
 8003d6a:	46c0      	nop			; (mov r8, r8)
 8003d6c:	2000000c 	.word	0x2000000c

08003d70 <__libc_init_array>:
 8003d70:	b570      	push	{r4, r5, r6, lr}
 8003d72:	2600      	movs	r6, #0
 8003d74:	4d0c      	ldr	r5, [pc, #48]	; (8003da8 <__libc_init_array+0x38>)
 8003d76:	4c0d      	ldr	r4, [pc, #52]	; (8003dac <__libc_init_array+0x3c>)
 8003d78:	1b64      	subs	r4, r4, r5
 8003d7a:	10a4      	asrs	r4, r4, #2
 8003d7c:	42a6      	cmp	r6, r4
 8003d7e:	d109      	bne.n	8003d94 <__libc_init_array+0x24>
 8003d80:	2600      	movs	r6, #0
 8003d82:	f000 fc8b 	bl	800469c <_init>
 8003d86:	4d0a      	ldr	r5, [pc, #40]	; (8003db0 <__libc_init_array+0x40>)
 8003d88:	4c0a      	ldr	r4, [pc, #40]	; (8003db4 <__libc_init_array+0x44>)
 8003d8a:	1b64      	subs	r4, r4, r5
 8003d8c:	10a4      	asrs	r4, r4, #2
 8003d8e:	42a6      	cmp	r6, r4
 8003d90:	d105      	bne.n	8003d9e <__libc_init_array+0x2e>
 8003d92:	bd70      	pop	{r4, r5, r6, pc}
 8003d94:	00b3      	lsls	r3, r6, #2
 8003d96:	58eb      	ldr	r3, [r5, r3]
 8003d98:	4798      	blx	r3
 8003d9a:	3601      	adds	r6, #1
 8003d9c:	e7ee      	b.n	8003d7c <__libc_init_array+0xc>
 8003d9e:	00b3      	lsls	r3, r6, #2
 8003da0:	58eb      	ldr	r3, [r5, r3]
 8003da2:	4798      	blx	r3
 8003da4:	3601      	adds	r6, #1
 8003da6:	e7f2      	b.n	8003d8e <__libc_init_array+0x1e>
 8003da8:	08004728 	.word	0x08004728
 8003dac:	08004728 	.word	0x08004728
 8003db0:	08004728 	.word	0x08004728
 8003db4:	0800472c 	.word	0x0800472c

08003db8 <memset>:
 8003db8:	0003      	movs	r3, r0
 8003dba:	1882      	adds	r2, r0, r2
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d100      	bne.n	8003dc2 <memset+0xa>
 8003dc0:	4770      	bx	lr
 8003dc2:	7019      	strb	r1, [r3, #0]
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	e7f9      	b.n	8003dbc <memset+0x4>

08003dc8 <siprintf>:
 8003dc8:	b40e      	push	{r1, r2, r3}
 8003dca:	b500      	push	{lr}
 8003dcc:	490b      	ldr	r1, [pc, #44]	; (8003dfc <siprintf+0x34>)
 8003dce:	b09c      	sub	sp, #112	; 0x70
 8003dd0:	ab1d      	add	r3, sp, #116	; 0x74
 8003dd2:	9002      	str	r0, [sp, #8]
 8003dd4:	9006      	str	r0, [sp, #24]
 8003dd6:	9107      	str	r1, [sp, #28]
 8003dd8:	9104      	str	r1, [sp, #16]
 8003dda:	4809      	ldr	r0, [pc, #36]	; (8003e00 <siprintf+0x38>)
 8003ddc:	4909      	ldr	r1, [pc, #36]	; (8003e04 <siprintf+0x3c>)
 8003dde:	cb04      	ldmia	r3!, {r2}
 8003de0:	9105      	str	r1, [sp, #20]
 8003de2:	6800      	ldr	r0, [r0, #0]
 8003de4:	a902      	add	r1, sp, #8
 8003de6:	9301      	str	r3, [sp, #4]
 8003de8:	f000 f870 	bl	8003ecc <_svfiprintf_r>
 8003dec:	2300      	movs	r3, #0
 8003dee:	9a02      	ldr	r2, [sp, #8]
 8003df0:	7013      	strb	r3, [r2, #0]
 8003df2:	b01c      	add	sp, #112	; 0x70
 8003df4:	bc08      	pop	{r3}
 8003df6:	b003      	add	sp, #12
 8003df8:	4718      	bx	r3
 8003dfa:	46c0      	nop			; (mov r8, r8)
 8003dfc:	7fffffff 	.word	0x7fffffff
 8003e00:	2000000c 	.word	0x2000000c
 8003e04:	ffff0208 	.word	0xffff0208

08003e08 <__ssputs_r>:
 8003e08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e0a:	688e      	ldr	r6, [r1, #8]
 8003e0c:	b085      	sub	sp, #20
 8003e0e:	0007      	movs	r7, r0
 8003e10:	000c      	movs	r4, r1
 8003e12:	9203      	str	r2, [sp, #12]
 8003e14:	9301      	str	r3, [sp, #4]
 8003e16:	429e      	cmp	r6, r3
 8003e18:	d83c      	bhi.n	8003e94 <__ssputs_r+0x8c>
 8003e1a:	2390      	movs	r3, #144	; 0x90
 8003e1c:	898a      	ldrh	r2, [r1, #12]
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	421a      	tst	r2, r3
 8003e22:	d034      	beq.n	8003e8e <__ssputs_r+0x86>
 8003e24:	6909      	ldr	r1, [r1, #16]
 8003e26:	6823      	ldr	r3, [r4, #0]
 8003e28:	6960      	ldr	r0, [r4, #20]
 8003e2a:	1a5b      	subs	r3, r3, r1
 8003e2c:	9302      	str	r3, [sp, #8]
 8003e2e:	2303      	movs	r3, #3
 8003e30:	4343      	muls	r3, r0
 8003e32:	0fdd      	lsrs	r5, r3, #31
 8003e34:	18ed      	adds	r5, r5, r3
 8003e36:	9b01      	ldr	r3, [sp, #4]
 8003e38:	9802      	ldr	r0, [sp, #8]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	181b      	adds	r3, r3, r0
 8003e3e:	106d      	asrs	r5, r5, #1
 8003e40:	42ab      	cmp	r3, r5
 8003e42:	d900      	bls.n	8003e46 <__ssputs_r+0x3e>
 8003e44:	001d      	movs	r5, r3
 8003e46:	0553      	lsls	r3, r2, #21
 8003e48:	d532      	bpl.n	8003eb0 <__ssputs_r+0xa8>
 8003e4a:	0029      	movs	r1, r5
 8003e4c:	0038      	movs	r0, r7
 8003e4e:	f000 fb53 	bl	80044f8 <_malloc_r>
 8003e52:	1e06      	subs	r6, r0, #0
 8003e54:	d109      	bne.n	8003e6a <__ssputs_r+0x62>
 8003e56:	230c      	movs	r3, #12
 8003e58:	603b      	str	r3, [r7, #0]
 8003e5a:	2340      	movs	r3, #64	; 0x40
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	89a2      	ldrh	r2, [r4, #12]
 8003e60:	4240      	negs	r0, r0
 8003e62:	4313      	orrs	r3, r2
 8003e64:	81a3      	strh	r3, [r4, #12]
 8003e66:	b005      	add	sp, #20
 8003e68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003e6a:	9a02      	ldr	r2, [sp, #8]
 8003e6c:	6921      	ldr	r1, [r4, #16]
 8003e6e:	f000 faba 	bl	80043e6 <memcpy>
 8003e72:	89a3      	ldrh	r3, [r4, #12]
 8003e74:	4a14      	ldr	r2, [pc, #80]	; (8003ec8 <__ssputs_r+0xc0>)
 8003e76:	401a      	ands	r2, r3
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	81a3      	strh	r3, [r4, #12]
 8003e7e:	9b02      	ldr	r3, [sp, #8]
 8003e80:	6126      	str	r6, [r4, #16]
 8003e82:	18f6      	adds	r6, r6, r3
 8003e84:	6026      	str	r6, [r4, #0]
 8003e86:	6165      	str	r5, [r4, #20]
 8003e88:	9e01      	ldr	r6, [sp, #4]
 8003e8a:	1aed      	subs	r5, r5, r3
 8003e8c:	60a5      	str	r5, [r4, #8]
 8003e8e:	9b01      	ldr	r3, [sp, #4]
 8003e90:	429e      	cmp	r6, r3
 8003e92:	d900      	bls.n	8003e96 <__ssputs_r+0x8e>
 8003e94:	9e01      	ldr	r6, [sp, #4]
 8003e96:	0032      	movs	r2, r6
 8003e98:	9903      	ldr	r1, [sp, #12]
 8003e9a:	6820      	ldr	r0, [r4, #0]
 8003e9c:	f000 faac 	bl	80043f8 <memmove>
 8003ea0:	68a3      	ldr	r3, [r4, #8]
 8003ea2:	2000      	movs	r0, #0
 8003ea4:	1b9b      	subs	r3, r3, r6
 8003ea6:	60a3      	str	r3, [r4, #8]
 8003ea8:	6823      	ldr	r3, [r4, #0]
 8003eaa:	199e      	adds	r6, r3, r6
 8003eac:	6026      	str	r6, [r4, #0]
 8003eae:	e7da      	b.n	8003e66 <__ssputs_r+0x5e>
 8003eb0:	002a      	movs	r2, r5
 8003eb2:	0038      	movs	r0, r7
 8003eb4:	f000 fb96 	bl	80045e4 <_realloc_r>
 8003eb8:	1e06      	subs	r6, r0, #0
 8003eba:	d1e0      	bne.n	8003e7e <__ssputs_r+0x76>
 8003ebc:	0038      	movs	r0, r7
 8003ebe:	6921      	ldr	r1, [r4, #16]
 8003ec0:	f000 faae 	bl	8004420 <_free_r>
 8003ec4:	e7c7      	b.n	8003e56 <__ssputs_r+0x4e>
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	fffffb7f 	.word	0xfffffb7f

08003ecc <_svfiprintf_r>:
 8003ecc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ece:	b0a1      	sub	sp, #132	; 0x84
 8003ed0:	9003      	str	r0, [sp, #12]
 8003ed2:	001d      	movs	r5, r3
 8003ed4:	898b      	ldrh	r3, [r1, #12]
 8003ed6:	000f      	movs	r7, r1
 8003ed8:	0016      	movs	r6, r2
 8003eda:	061b      	lsls	r3, r3, #24
 8003edc:	d511      	bpl.n	8003f02 <_svfiprintf_r+0x36>
 8003ede:	690b      	ldr	r3, [r1, #16]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d10e      	bne.n	8003f02 <_svfiprintf_r+0x36>
 8003ee4:	2140      	movs	r1, #64	; 0x40
 8003ee6:	f000 fb07 	bl	80044f8 <_malloc_r>
 8003eea:	6038      	str	r0, [r7, #0]
 8003eec:	6138      	str	r0, [r7, #16]
 8003eee:	2800      	cmp	r0, #0
 8003ef0:	d105      	bne.n	8003efe <_svfiprintf_r+0x32>
 8003ef2:	230c      	movs	r3, #12
 8003ef4:	9a03      	ldr	r2, [sp, #12]
 8003ef6:	3801      	subs	r0, #1
 8003ef8:	6013      	str	r3, [r2, #0]
 8003efa:	b021      	add	sp, #132	; 0x84
 8003efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003efe:	2340      	movs	r3, #64	; 0x40
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	2300      	movs	r3, #0
 8003f04:	ac08      	add	r4, sp, #32
 8003f06:	6163      	str	r3, [r4, #20]
 8003f08:	3320      	adds	r3, #32
 8003f0a:	7663      	strb	r3, [r4, #25]
 8003f0c:	3310      	adds	r3, #16
 8003f0e:	76a3      	strb	r3, [r4, #26]
 8003f10:	9507      	str	r5, [sp, #28]
 8003f12:	0035      	movs	r5, r6
 8003f14:	782b      	ldrb	r3, [r5, #0]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d001      	beq.n	8003f1e <_svfiprintf_r+0x52>
 8003f1a:	2b25      	cmp	r3, #37	; 0x25
 8003f1c:	d147      	bne.n	8003fae <_svfiprintf_r+0xe2>
 8003f1e:	1bab      	subs	r3, r5, r6
 8003f20:	9305      	str	r3, [sp, #20]
 8003f22:	42b5      	cmp	r5, r6
 8003f24:	d00c      	beq.n	8003f40 <_svfiprintf_r+0x74>
 8003f26:	0032      	movs	r2, r6
 8003f28:	0039      	movs	r1, r7
 8003f2a:	9803      	ldr	r0, [sp, #12]
 8003f2c:	f7ff ff6c 	bl	8003e08 <__ssputs_r>
 8003f30:	1c43      	adds	r3, r0, #1
 8003f32:	d100      	bne.n	8003f36 <_svfiprintf_r+0x6a>
 8003f34:	e0ae      	b.n	8004094 <_svfiprintf_r+0x1c8>
 8003f36:	6962      	ldr	r2, [r4, #20]
 8003f38:	9b05      	ldr	r3, [sp, #20]
 8003f3a:	4694      	mov	ip, r2
 8003f3c:	4463      	add	r3, ip
 8003f3e:	6163      	str	r3, [r4, #20]
 8003f40:	782b      	ldrb	r3, [r5, #0]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d100      	bne.n	8003f48 <_svfiprintf_r+0x7c>
 8003f46:	e0a5      	b.n	8004094 <_svfiprintf_r+0x1c8>
 8003f48:	2201      	movs	r2, #1
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	4252      	negs	r2, r2
 8003f4e:	6062      	str	r2, [r4, #4]
 8003f50:	a904      	add	r1, sp, #16
 8003f52:	3254      	adds	r2, #84	; 0x54
 8003f54:	1852      	adds	r2, r2, r1
 8003f56:	1c6e      	adds	r6, r5, #1
 8003f58:	6023      	str	r3, [r4, #0]
 8003f5a:	60e3      	str	r3, [r4, #12]
 8003f5c:	60a3      	str	r3, [r4, #8]
 8003f5e:	7013      	strb	r3, [r2, #0]
 8003f60:	65a3      	str	r3, [r4, #88]	; 0x58
 8003f62:	2205      	movs	r2, #5
 8003f64:	7831      	ldrb	r1, [r6, #0]
 8003f66:	4854      	ldr	r0, [pc, #336]	; (80040b8 <_svfiprintf_r+0x1ec>)
 8003f68:	f000 fa32 	bl	80043d0 <memchr>
 8003f6c:	1c75      	adds	r5, r6, #1
 8003f6e:	2800      	cmp	r0, #0
 8003f70:	d11f      	bne.n	8003fb2 <_svfiprintf_r+0xe6>
 8003f72:	6822      	ldr	r2, [r4, #0]
 8003f74:	06d3      	lsls	r3, r2, #27
 8003f76:	d504      	bpl.n	8003f82 <_svfiprintf_r+0xb6>
 8003f78:	2353      	movs	r3, #83	; 0x53
 8003f7a:	a904      	add	r1, sp, #16
 8003f7c:	185b      	adds	r3, r3, r1
 8003f7e:	2120      	movs	r1, #32
 8003f80:	7019      	strb	r1, [r3, #0]
 8003f82:	0713      	lsls	r3, r2, #28
 8003f84:	d504      	bpl.n	8003f90 <_svfiprintf_r+0xc4>
 8003f86:	2353      	movs	r3, #83	; 0x53
 8003f88:	a904      	add	r1, sp, #16
 8003f8a:	185b      	adds	r3, r3, r1
 8003f8c:	212b      	movs	r1, #43	; 0x2b
 8003f8e:	7019      	strb	r1, [r3, #0]
 8003f90:	7833      	ldrb	r3, [r6, #0]
 8003f92:	2b2a      	cmp	r3, #42	; 0x2a
 8003f94:	d016      	beq.n	8003fc4 <_svfiprintf_r+0xf8>
 8003f96:	0035      	movs	r5, r6
 8003f98:	2100      	movs	r1, #0
 8003f9a:	200a      	movs	r0, #10
 8003f9c:	68e3      	ldr	r3, [r4, #12]
 8003f9e:	782a      	ldrb	r2, [r5, #0]
 8003fa0:	1c6e      	adds	r6, r5, #1
 8003fa2:	3a30      	subs	r2, #48	; 0x30
 8003fa4:	2a09      	cmp	r2, #9
 8003fa6:	d94e      	bls.n	8004046 <_svfiprintf_r+0x17a>
 8003fa8:	2900      	cmp	r1, #0
 8003faa:	d111      	bne.n	8003fd0 <_svfiprintf_r+0x104>
 8003fac:	e017      	b.n	8003fde <_svfiprintf_r+0x112>
 8003fae:	3501      	adds	r5, #1
 8003fb0:	e7b0      	b.n	8003f14 <_svfiprintf_r+0x48>
 8003fb2:	4b41      	ldr	r3, [pc, #260]	; (80040b8 <_svfiprintf_r+0x1ec>)
 8003fb4:	6822      	ldr	r2, [r4, #0]
 8003fb6:	1ac0      	subs	r0, r0, r3
 8003fb8:	2301      	movs	r3, #1
 8003fba:	4083      	lsls	r3, r0
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	002e      	movs	r6, r5
 8003fc0:	6023      	str	r3, [r4, #0]
 8003fc2:	e7ce      	b.n	8003f62 <_svfiprintf_r+0x96>
 8003fc4:	9b07      	ldr	r3, [sp, #28]
 8003fc6:	1d19      	adds	r1, r3, #4
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	9107      	str	r1, [sp, #28]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	db01      	blt.n	8003fd4 <_svfiprintf_r+0x108>
 8003fd0:	930b      	str	r3, [sp, #44]	; 0x2c
 8003fd2:	e004      	b.n	8003fde <_svfiprintf_r+0x112>
 8003fd4:	425b      	negs	r3, r3
 8003fd6:	60e3      	str	r3, [r4, #12]
 8003fd8:	2302      	movs	r3, #2
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	6023      	str	r3, [r4, #0]
 8003fde:	782b      	ldrb	r3, [r5, #0]
 8003fe0:	2b2e      	cmp	r3, #46	; 0x2e
 8003fe2:	d10a      	bne.n	8003ffa <_svfiprintf_r+0x12e>
 8003fe4:	786b      	ldrb	r3, [r5, #1]
 8003fe6:	2b2a      	cmp	r3, #42	; 0x2a
 8003fe8:	d135      	bne.n	8004056 <_svfiprintf_r+0x18a>
 8003fea:	9b07      	ldr	r3, [sp, #28]
 8003fec:	3502      	adds	r5, #2
 8003fee:	1d1a      	adds	r2, r3, #4
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	9207      	str	r2, [sp, #28]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	db2b      	blt.n	8004050 <_svfiprintf_r+0x184>
 8003ff8:	9309      	str	r3, [sp, #36]	; 0x24
 8003ffa:	4e30      	ldr	r6, [pc, #192]	; (80040bc <_svfiprintf_r+0x1f0>)
 8003ffc:	2203      	movs	r2, #3
 8003ffe:	0030      	movs	r0, r6
 8004000:	7829      	ldrb	r1, [r5, #0]
 8004002:	f000 f9e5 	bl	80043d0 <memchr>
 8004006:	2800      	cmp	r0, #0
 8004008:	d006      	beq.n	8004018 <_svfiprintf_r+0x14c>
 800400a:	2340      	movs	r3, #64	; 0x40
 800400c:	1b80      	subs	r0, r0, r6
 800400e:	4083      	lsls	r3, r0
 8004010:	6822      	ldr	r2, [r4, #0]
 8004012:	3501      	adds	r5, #1
 8004014:	4313      	orrs	r3, r2
 8004016:	6023      	str	r3, [r4, #0]
 8004018:	7829      	ldrb	r1, [r5, #0]
 800401a:	2206      	movs	r2, #6
 800401c:	4828      	ldr	r0, [pc, #160]	; (80040c0 <_svfiprintf_r+0x1f4>)
 800401e:	1c6e      	adds	r6, r5, #1
 8004020:	7621      	strb	r1, [r4, #24]
 8004022:	f000 f9d5 	bl	80043d0 <memchr>
 8004026:	2800      	cmp	r0, #0
 8004028:	d03c      	beq.n	80040a4 <_svfiprintf_r+0x1d8>
 800402a:	4b26      	ldr	r3, [pc, #152]	; (80040c4 <_svfiprintf_r+0x1f8>)
 800402c:	2b00      	cmp	r3, #0
 800402e:	d125      	bne.n	800407c <_svfiprintf_r+0x1b0>
 8004030:	2207      	movs	r2, #7
 8004032:	9b07      	ldr	r3, [sp, #28]
 8004034:	3307      	adds	r3, #7
 8004036:	4393      	bics	r3, r2
 8004038:	3308      	adds	r3, #8
 800403a:	9307      	str	r3, [sp, #28]
 800403c:	6963      	ldr	r3, [r4, #20]
 800403e:	9a04      	ldr	r2, [sp, #16]
 8004040:	189b      	adds	r3, r3, r2
 8004042:	6163      	str	r3, [r4, #20]
 8004044:	e765      	b.n	8003f12 <_svfiprintf_r+0x46>
 8004046:	4343      	muls	r3, r0
 8004048:	0035      	movs	r5, r6
 800404a:	2101      	movs	r1, #1
 800404c:	189b      	adds	r3, r3, r2
 800404e:	e7a6      	b.n	8003f9e <_svfiprintf_r+0xd2>
 8004050:	2301      	movs	r3, #1
 8004052:	425b      	negs	r3, r3
 8004054:	e7d0      	b.n	8003ff8 <_svfiprintf_r+0x12c>
 8004056:	2300      	movs	r3, #0
 8004058:	200a      	movs	r0, #10
 800405a:	001a      	movs	r2, r3
 800405c:	3501      	adds	r5, #1
 800405e:	6063      	str	r3, [r4, #4]
 8004060:	7829      	ldrb	r1, [r5, #0]
 8004062:	1c6e      	adds	r6, r5, #1
 8004064:	3930      	subs	r1, #48	; 0x30
 8004066:	2909      	cmp	r1, #9
 8004068:	d903      	bls.n	8004072 <_svfiprintf_r+0x1a6>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d0c5      	beq.n	8003ffa <_svfiprintf_r+0x12e>
 800406e:	9209      	str	r2, [sp, #36]	; 0x24
 8004070:	e7c3      	b.n	8003ffa <_svfiprintf_r+0x12e>
 8004072:	4342      	muls	r2, r0
 8004074:	0035      	movs	r5, r6
 8004076:	2301      	movs	r3, #1
 8004078:	1852      	adds	r2, r2, r1
 800407a:	e7f1      	b.n	8004060 <_svfiprintf_r+0x194>
 800407c:	ab07      	add	r3, sp, #28
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	003a      	movs	r2, r7
 8004082:	0021      	movs	r1, r4
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <_svfiprintf_r+0x1fc>)
 8004086:	9803      	ldr	r0, [sp, #12]
 8004088:	e000      	b.n	800408c <_svfiprintf_r+0x1c0>
 800408a:	bf00      	nop
 800408c:	9004      	str	r0, [sp, #16]
 800408e:	9b04      	ldr	r3, [sp, #16]
 8004090:	3301      	adds	r3, #1
 8004092:	d1d3      	bne.n	800403c <_svfiprintf_r+0x170>
 8004094:	89bb      	ldrh	r3, [r7, #12]
 8004096:	980d      	ldr	r0, [sp, #52]	; 0x34
 8004098:	065b      	lsls	r3, r3, #25
 800409a:	d400      	bmi.n	800409e <_svfiprintf_r+0x1d2>
 800409c:	e72d      	b.n	8003efa <_svfiprintf_r+0x2e>
 800409e:	2001      	movs	r0, #1
 80040a0:	4240      	negs	r0, r0
 80040a2:	e72a      	b.n	8003efa <_svfiprintf_r+0x2e>
 80040a4:	ab07      	add	r3, sp, #28
 80040a6:	9300      	str	r3, [sp, #0]
 80040a8:	003a      	movs	r2, r7
 80040aa:	0021      	movs	r1, r4
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <_svfiprintf_r+0x1fc>)
 80040ae:	9803      	ldr	r0, [sp, #12]
 80040b0:	f000 f87c 	bl	80041ac <_printf_i>
 80040b4:	e7ea      	b.n	800408c <_svfiprintf_r+0x1c0>
 80040b6:	46c0      	nop			; (mov r8, r8)
 80040b8:	080046f4 	.word	0x080046f4
 80040bc:	080046fa 	.word	0x080046fa
 80040c0:	080046fe 	.word	0x080046fe
 80040c4:	00000000 	.word	0x00000000
 80040c8:	08003e09 	.word	0x08003e09

080040cc <_printf_common>:
 80040cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80040ce:	0015      	movs	r5, r2
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	688a      	ldr	r2, [r1, #8]
 80040d4:	690b      	ldr	r3, [r1, #16]
 80040d6:	000c      	movs	r4, r1
 80040d8:	9000      	str	r0, [sp, #0]
 80040da:	4293      	cmp	r3, r2
 80040dc:	da00      	bge.n	80040e0 <_printf_common+0x14>
 80040de:	0013      	movs	r3, r2
 80040e0:	0022      	movs	r2, r4
 80040e2:	602b      	str	r3, [r5, #0]
 80040e4:	3243      	adds	r2, #67	; 0x43
 80040e6:	7812      	ldrb	r2, [r2, #0]
 80040e8:	2a00      	cmp	r2, #0
 80040ea:	d001      	beq.n	80040f0 <_printf_common+0x24>
 80040ec:	3301      	adds	r3, #1
 80040ee:	602b      	str	r3, [r5, #0]
 80040f0:	6823      	ldr	r3, [r4, #0]
 80040f2:	069b      	lsls	r3, r3, #26
 80040f4:	d502      	bpl.n	80040fc <_printf_common+0x30>
 80040f6:	682b      	ldr	r3, [r5, #0]
 80040f8:	3302      	adds	r3, #2
 80040fa:	602b      	str	r3, [r5, #0]
 80040fc:	6822      	ldr	r2, [r4, #0]
 80040fe:	2306      	movs	r3, #6
 8004100:	0017      	movs	r7, r2
 8004102:	401f      	ands	r7, r3
 8004104:	421a      	tst	r2, r3
 8004106:	d027      	beq.n	8004158 <_printf_common+0x8c>
 8004108:	0023      	movs	r3, r4
 800410a:	3343      	adds	r3, #67	; 0x43
 800410c:	781b      	ldrb	r3, [r3, #0]
 800410e:	1e5a      	subs	r2, r3, #1
 8004110:	4193      	sbcs	r3, r2
 8004112:	6822      	ldr	r2, [r4, #0]
 8004114:	0692      	lsls	r2, r2, #26
 8004116:	d430      	bmi.n	800417a <_printf_common+0xae>
 8004118:	0022      	movs	r2, r4
 800411a:	9901      	ldr	r1, [sp, #4]
 800411c:	9800      	ldr	r0, [sp, #0]
 800411e:	9e08      	ldr	r6, [sp, #32]
 8004120:	3243      	adds	r2, #67	; 0x43
 8004122:	47b0      	blx	r6
 8004124:	1c43      	adds	r3, r0, #1
 8004126:	d025      	beq.n	8004174 <_printf_common+0xa8>
 8004128:	2306      	movs	r3, #6
 800412a:	6820      	ldr	r0, [r4, #0]
 800412c:	682a      	ldr	r2, [r5, #0]
 800412e:	68e1      	ldr	r1, [r4, #12]
 8004130:	2500      	movs	r5, #0
 8004132:	4003      	ands	r3, r0
 8004134:	2b04      	cmp	r3, #4
 8004136:	d103      	bne.n	8004140 <_printf_common+0x74>
 8004138:	1a8d      	subs	r5, r1, r2
 800413a:	43eb      	mvns	r3, r5
 800413c:	17db      	asrs	r3, r3, #31
 800413e:	401d      	ands	r5, r3
 8004140:	68a3      	ldr	r3, [r4, #8]
 8004142:	6922      	ldr	r2, [r4, #16]
 8004144:	4293      	cmp	r3, r2
 8004146:	dd01      	ble.n	800414c <_printf_common+0x80>
 8004148:	1a9b      	subs	r3, r3, r2
 800414a:	18ed      	adds	r5, r5, r3
 800414c:	2700      	movs	r7, #0
 800414e:	42bd      	cmp	r5, r7
 8004150:	d120      	bne.n	8004194 <_printf_common+0xc8>
 8004152:	2000      	movs	r0, #0
 8004154:	e010      	b.n	8004178 <_printf_common+0xac>
 8004156:	3701      	adds	r7, #1
 8004158:	68e3      	ldr	r3, [r4, #12]
 800415a:	682a      	ldr	r2, [r5, #0]
 800415c:	1a9b      	subs	r3, r3, r2
 800415e:	42bb      	cmp	r3, r7
 8004160:	ddd2      	ble.n	8004108 <_printf_common+0x3c>
 8004162:	0022      	movs	r2, r4
 8004164:	2301      	movs	r3, #1
 8004166:	9901      	ldr	r1, [sp, #4]
 8004168:	9800      	ldr	r0, [sp, #0]
 800416a:	9e08      	ldr	r6, [sp, #32]
 800416c:	3219      	adds	r2, #25
 800416e:	47b0      	blx	r6
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d1f0      	bne.n	8004156 <_printf_common+0x8a>
 8004174:	2001      	movs	r0, #1
 8004176:	4240      	negs	r0, r0
 8004178:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800417a:	2030      	movs	r0, #48	; 0x30
 800417c:	18e1      	adds	r1, r4, r3
 800417e:	3143      	adds	r1, #67	; 0x43
 8004180:	7008      	strb	r0, [r1, #0]
 8004182:	0021      	movs	r1, r4
 8004184:	1c5a      	adds	r2, r3, #1
 8004186:	3145      	adds	r1, #69	; 0x45
 8004188:	7809      	ldrb	r1, [r1, #0]
 800418a:	18a2      	adds	r2, r4, r2
 800418c:	3243      	adds	r2, #67	; 0x43
 800418e:	3302      	adds	r3, #2
 8004190:	7011      	strb	r1, [r2, #0]
 8004192:	e7c1      	b.n	8004118 <_printf_common+0x4c>
 8004194:	0022      	movs	r2, r4
 8004196:	2301      	movs	r3, #1
 8004198:	9901      	ldr	r1, [sp, #4]
 800419a:	9800      	ldr	r0, [sp, #0]
 800419c:	9e08      	ldr	r6, [sp, #32]
 800419e:	321a      	adds	r2, #26
 80041a0:	47b0      	blx	r6
 80041a2:	1c43      	adds	r3, r0, #1
 80041a4:	d0e6      	beq.n	8004174 <_printf_common+0xa8>
 80041a6:	3701      	adds	r7, #1
 80041a8:	e7d1      	b.n	800414e <_printf_common+0x82>
	...

080041ac <_printf_i>:
 80041ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041ae:	b08b      	sub	sp, #44	; 0x2c
 80041b0:	9206      	str	r2, [sp, #24]
 80041b2:	000a      	movs	r2, r1
 80041b4:	3243      	adds	r2, #67	; 0x43
 80041b6:	9307      	str	r3, [sp, #28]
 80041b8:	9005      	str	r0, [sp, #20]
 80041ba:	9204      	str	r2, [sp, #16]
 80041bc:	7e0a      	ldrb	r2, [r1, #24]
 80041be:	000c      	movs	r4, r1
 80041c0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80041c2:	2a78      	cmp	r2, #120	; 0x78
 80041c4:	d807      	bhi.n	80041d6 <_printf_i+0x2a>
 80041c6:	2a62      	cmp	r2, #98	; 0x62
 80041c8:	d809      	bhi.n	80041de <_printf_i+0x32>
 80041ca:	2a00      	cmp	r2, #0
 80041cc:	d100      	bne.n	80041d0 <_printf_i+0x24>
 80041ce:	e0c1      	b.n	8004354 <_printf_i+0x1a8>
 80041d0:	2a58      	cmp	r2, #88	; 0x58
 80041d2:	d100      	bne.n	80041d6 <_printf_i+0x2a>
 80041d4:	e08c      	b.n	80042f0 <_printf_i+0x144>
 80041d6:	0026      	movs	r6, r4
 80041d8:	3642      	adds	r6, #66	; 0x42
 80041da:	7032      	strb	r2, [r6, #0]
 80041dc:	e022      	b.n	8004224 <_printf_i+0x78>
 80041de:	0010      	movs	r0, r2
 80041e0:	3863      	subs	r0, #99	; 0x63
 80041e2:	2815      	cmp	r0, #21
 80041e4:	d8f7      	bhi.n	80041d6 <_printf_i+0x2a>
 80041e6:	f7fb ff8f 	bl	8000108 <__gnu_thumb1_case_shi>
 80041ea:	0016      	.short	0x0016
 80041ec:	fff6001f 	.word	0xfff6001f
 80041f0:	fff6fff6 	.word	0xfff6fff6
 80041f4:	001ffff6 	.word	0x001ffff6
 80041f8:	fff6fff6 	.word	0xfff6fff6
 80041fc:	fff6fff6 	.word	0xfff6fff6
 8004200:	003600a8 	.word	0x003600a8
 8004204:	fff6009a 	.word	0xfff6009a
 8004208:	00b9fff6 	.word	0x00b9fff6
 800420c:	0036fff6 	.word	0x0036fff6
 8004210:	fff6fff6 	.word	0xfff6fff6
 8004214:	009e      	.short	0x009e
 8004216:	0026      	movs	r6, r4
 8004218:	681a      	ldr	r2, [r3, #0]
 800421a:	3642      	adds	r6, #66	; 0x42
 800421c:	1d11      	adds	r1, r2, #4
 800421e:	6019      	str	r1, [r3, #0]
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	7033      	strb	r3, [r6, #0]
 8004224:	2301      	movs	r3, #1
 8004226:	e0a7      	b.n	8004378 <_printf_i+0x1cc>
 8004228:	6808      	ldr	r0, [r1, #0]
 800422a:	6819      	ldr	r1, [r3, #0]
 800422c:	1d0a      	adds	r2, r1, #4
 800422e:	0605      	lsls	r5, r0, #24
 8004230:	d50b      	bpl.n	800424a <_printf_i+0x9e>
 8004232:	680d      	ldr	r5, [r1, #0]
 8004234:	601a      	str	r2, [r3, #0]
 8004236:	2d00      	cmp	r5, #0
 8004238:	da03      	bge.n	8004242 <_printf_i+0x96>
 800423a:	232d      	movs	r3, #45	; 0x2d
 800423c:	9a04      	ldr	r2, [sp, #16]
 800423e:	426d      	negs	r5, r5
 8004240:	7013      	strb	r3, [r2, #0]
 8004242:	4b61      	ldr	r3, [pc, #388]	; (80043c8 <_printf_i+0x21c>)
 8004244:	270a      	movs	r7, #10
 8004246:	9303      	str	r3, [sp, #12]
 8004248:	e01b      	b.n	8004282 <_printf_i+0xd6>
 800424a:	680d      	ldr	r5, [r1, #0]
 800424c:	601a      	str	r2, [r3, #0]
 800424e:	0641      	lsls	r1, r0, #25
 8004250:	d5f1      	bpl.n	8004236 <_printf_i+0x8a>
 8004252:	b22d      	sxth	r5, r5
 8004254:	e7ef      	b.n	8004236 <_printf_i+0x8a>
 8004256:	680d      	ldr	r5, [r1, #0]
 8004258:	6819      	ldr	r1, [r3, #0]
 800425a:	1d08      	adds	r0, r1, #4
 800425c:	6018      	str	r0, [r3, #0]
 800425e:	062e      	lsls	r6, r5, #24
 8004260:	d501      	bpl.n	8004266 <_printf_i+0xba>
 8004262:	680d      	ldr	r5, [r1, #0]
 8004264:	e003      	b.n	800426e <_printf_i+0xc2>
 8004266:	066d      	lsls	r5, r5, #25
 8004268:	d5fb      	bpl.n	8004262 <_printf_i+0xb6>
 800426a:	680d      	ldr	r5, [r1, #0]
 800426c:	b2ad      	uxth	r5, r5
 800426e:	4b56      	ldr	r3, [pc, #344]	; (80043c8 <_printf_i+0x21c>)
 8004270:	2708      	movs	r7, #8
 8004272:	9303      	str	r3, [sp, #12]
 8004274:	2a6f      	cmp	r2, #111	; 0x6f
 8004276:	d000      	beq.n	800427a <_printf_i+0xce>
 8004278:	3702      	adds	r7, #2
 800427a:	0023      	movs	r3, r4
 800427c:	2200      	movs	r2, #0
 800427e:	3343      	adds	r3, #67	; 0x43
 8004280:	701a      	strb	r2, [r3, #0]
 8004282:	6863      	ldr	r3, [r4, #4]
 8004284:	60a3      	str	r3, [r4, #8]
 8004286:	2b00      	cmp	r3, #0
 8004288:	db03      	blt.n	8004292 <_printf_i+0xe6>
 800428a:	2204      	movs	r2, #4
 800428c:	6821      	ldr	r1, [r4, #0]
 800428e:	4391      	bics	r1, r2
 8004290:	6021      	str	r1, [r4, #0]
 8004292:	2d00      	cmp	r5, #0
 8004294:	d102      	bne.n	800429c <_printf_i+0xf0>
 8004296:	9e04      	ldr	r6, [sp, #16]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d00c      	beq.n	80042b6 <_printf_i+0x10a>
 800429c:	9e04      	ldr	r6, [sp, #16]
 800429e:	0028      	movs	r0, r5
 80042a0:	0039      	movs	r1, r7
 80042a2:	f7fb ffc1 	bl	8000228 <__aeabi_uidivmod>
 80042a6:	9b03      	ldr	r3, [sp, #12]
 80042a8:	3e01      	subs	r6, #1
 80042aa:	5c5b      	ldrb	r3, [r3, r1]
 80042ac:	7033      	strb	r3, [r6, #0]
 80042ae:	002b      	movs	r3, r5
 80042b0:	0005      	movs	r5, r0
 80042b2:	429f      	cmp	r7, r3
 80042b4:	d9f3      	bls.n	800429e <_printf_i+0xf2>
 80042b6:	2f08      	cmp	r7, #8
 80042b8:	d109      	bne.n	80042ce <_printf_i+0x122>
 80042ba:	6823      	ldr	r3, [r4, #0]
 80042bc:	07db      	lsls	r3, r3, #31
 80042be:	d506      	bpl.n	80042ce <_printf_i+0x122>
 80042c0:	6863      	ldr	r3, [r4, #4]
 80042c2:	6922      	ldr	r2, [r4, #16]
 80042c4:	4293      	cmp	r3, r2
 80042c6:	dc02      	bgt.n	80042ce <_printf_i+0x122>
 80042c8:	2330      	movs	r3, #48	; 0x30
 80042ca:	3e01      	subs	r6, #1
 80042cc:	7033      	strb	r3, [r6, #0]
 80042ce:	9b04      	ldr	r3, [sp, #16]
 80042d0:	1b9b      	subs	r3, r3, r6
 80042d2:	6123      	str	r3, [r4, #16]
 80042d4:	9b07      	ldr	r3, [sp, #28]
 80042d6:	0021      	movs	r1, r4
 80042d8:	9300      	str	r3, [sp, #0]
 80042da:	9805      	ldr	r0, [sp, #20]
 80042dc:	9b06      	ldr	r3, [sp, #24]
 80042de:	aa09      	add	r2, sp, #36	; 0x24
 80042e0:	f7ff fef4 	bl	80040cc <_printf_common>
 80042e4:	1c43      	adds	r3, r0, #1
 80042e6:	d14c      	bne.n	8004382 <_printf_i+0x1d6>
 80042e8:	2001      	movs	r0, #1
 80042ea:	4240      	negs	r0, r0
 80042ec:	b00b      	add	sp, #44	; 0x2c
 80042ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80042f0:	3145      	adds	r1, #69	; 0x45
 80042f2:	700a      	strb	r2, [r1, #0]
 80042f4:	4a34      	ldr	r2, [pc, #208]	; (80043c8 <_printf_i+0x21c>)
 80042f6:	9203      	str	r2, [sp, #12]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	6821      	ldr	r1, [r4, #0]
 80042fc:	ca20      	ldmia	r2!, {r5}
 80042fe:	601a      	str	r2, [r3, #0]
 8004300:	0608      	lsls	r0, r1, #24
 8004302:	d516      	bpl.n	8004332 <_printf_i+0x186>
 8004304:	07cb      	lsls	r3, r1, #31
 8004306:	d502      	bpl.n	800430e <_printf_i+0x162>
 8004308:	2320      	movs	r3, #32
 800430a:	4319      	orrs	r1, r3
 800430c:	6021      	str	r1, [r4, #0]
 800430e:	2710      	movs	r7, #16
 8004310:	2d00      	cmp	r5, #0
 8004312:	d1b2      	bne.n	800427a <_printf_i+0xce>
 8004314:	2320      	movs	r3, #32
 8004316:	6822      	ldr	r2, [r4, #0]
 8004318:	439a      	bics	r2, r3
 800431a:	6022      	str	r2, [r4, #0]
 800431c:	e7ad      	b.n	800427a <_printf_i+0xce>
 800431e:	2220      	movs	r2, #32
 8004320:	6809      	ldr	r1, [r1, #0]
 8004322:	430a      	orrs	r2, r1
 8004324:	6022      	str	r2, [r4, #0]
 8004326:	0022      	movs	r2, r4
 8004328:	2178      	movs	r1, #120	; 0x78
 800432a:	3245      	adds	r2, #69	; 0x45
 800432c:	7011      	strb	r1, [r2, #0]
 800432e:	4a27      	ldr	r2, [pc, #156]	; (80043cc <_printf_i+0x220>)
 8004330:	e7e1      	b.n	80042f6 <_printf_i+0x14a>
 8004332:	0648      	lsls	r0, r1, #25
 8004334:	d5e6      	bpl.n	8004304 <_printf_i+0x158>
 8004336:	b2ad      	uxth	r5, r5
 8004338:	e7e4      	b.n	8004304 <_printf_i+0x158>
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	680d      	ldr	r5, [r1, #0]
 800433e:	1d10      	adds	r0, r2, #4
 8004340:	6949      	ldr	r1, [r1, #20]
 8004342:	6018      	str	r0, [r3, #0]
 8004344:	6813      	ldr	r3, [r2, #0]
 8004346:	062e      	lsls	r6, r5, #24
 8004348:	d501      	bpl.n	800434e <_printf_i+0x1a2>
 800434a:	6019      	str	r1, [r3, #0]
 800434c:	e002      	b.n	8004354 <_printf_i+0x1a8>
 800434e:	066d      	lsls	r5, r5, #25
 8004350:	d5fb      	bpl.n	800434a <_printf_i+0x19e>
 8004352:	8019      	strh	r1, [r3, #0]
 8004354:	2300      	movs	r3, #0
 8004356:	9e04      	ldr	r6, [sp, #16]
 8004358:	6123      	str	r3, [r4, #16]
 800435a:	e7bb      	b.n	80042d4 <_printf_i+0x128>
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	1d11      	adds	r1, r2, #4
 8004360:	6019      	str	r1, [r3, #0]
 8004362:	6816      	ldr	r6, [r2, #0]
 8004364:	2100      	movs	r1, #0
 8004366:	0030      	movs	r0, r6
 8004368:	6862      	ldr	r2, [r4, #4]
 800436a:	f000 f831 	bl	80043d0 <memchr>
 800436e:	2800      	cmp	r0, #0
 8004370:	d001      	beq.n	8004376 <_printf_i+0x1ca>
 8004372:	1b80      	subs	r0, r0, r6
 8004374:	6060      	str	r0, [r4, #4]
 8004376:	6863      	ldr	r3, [r4, #4]
 8004378:	6123      	str	r3, [r4, #16]
 800437a:	2300      	movs	r3, #0
 800437c:	9a04      	ldr	r2, [sp, #16]
 800437e:	7013      	strb	r3, [r2, #0]
 8004380:	e7a8      	b.n	80042d4 <_printf_i+0x128>
 8004382:	6923      	ldr	r3, [r4, #16]
 8004384:	0032      	movs	r2, r6
 8004386:	9906      	ldr	r1, [sp, #24]
 8004388:	9805      	ldr	r0, [sp, #20]
 800438a:	9d07      	ldr	r5, [sp, #28]
 800438c:	47a8      	blx	r5
 800438e:	1c43      	adds	r3, r0, #1
 8004390:	d0aa      	beq.n	80042e8 <_printf_i+0x13c>
 8004392:	6823      	ldr	r3, [r4, #0]
 8004394:	079b      	lsls	r3, r3, #30
 8004396:	d415      	bmi.n	80043c4 <_printf_i+0x218>
 8004398:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800439a:	68e0      	ldr	r0, [r4, #12]
 800439c:	4298      	cmp	r0, r3
 800439e:	daa5      	bge.n	80042ec <_printf_i+0x140>
 80043a0:	0018      	movs	r0, r3
 80043a2:	e7a3      	b.n	80042ec <_printf_i+0x140>
 80043a4:	0022      	movs	r2, r4
 80043a6:	2301      	movs	r3, #1
 80043a8:	9906      	ldr	r1, [sp, #24]
 80043aa:	9805      	ldr	r0, [sp, #20]
 80043ac:	9e07      	ldr	r6, [sp, #28]
 80043ae:	3219      	adds	r2, #25
 80043b0:	47b0      	blx	r6
 80043b2:	1c43      	adds	r3, r0, #1
 80043b4:	d098      	beq.n	80042e8 <_printf_i+0x13c>
 80043b6:	3501      	adds	r5, #1
 80043b8:	68e3      	ldr	r3, [r4, #12]
 80043ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80043bc:	1a9b      	subs	r3, r3, r2
 80043be:	42ab      	cmp	r3, r5
 80043c0:	dcf0      	bgt.n	80043a4 <_printf_i+0x1f8>
 80043c2:	e7e9      	b.n	8004398 <_printf_i+0x1ec>
 80043c4:	2500      	movs	r5, #0
 80043c6:	e7f7      	b.n	80043b8 <_printf_i+0x20c>
 80043c8:	08004705 	.word	0x08004705
 80043cc:	08004716 	.word	0x08004716

080043d0 <memchr>:
 80043d0:	b2c9      	uxtb	r1, r1
 80043d2:	1882      	adds	r2, r0, r2
 80043d4:	4290      	cmp	r0, r2
 80043d6:	d101      	bne.n	80043dc <memchr+0xc>
 80043d8:	2000      	movs	r0, #0
 80043da:	4770      	bx	lr
 80043dc:	7803      	ldrb	r3, [r0, #0]
 80043de:	428b      	cmp	r3, r1
 80043e0:	d0fb      	beq.n	80043da <memchr+0xa>
 80043e2:	3001      	adds	r0, #1
 80043e4:	e7f6      	b.n	80043d4 <memchr+0x4>

080043e6 <memcpy>:
 80043e6:	2300      	movs	r3, #0
 80043e8:	b510      	push	{r4, lr}
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d100      	bne.n	80043f0 <memcpy+0xa>
 80043ee:	bd10      	pop	{r4, pc}
 80043f0:	5ccc      	ldrb	r4, [r1, r3]
 80043f2:	54c4      	strb	r4, [r0, r3]
 80043f4:	3301      	adds	r3, #1
 80043f6:	e7f8      	b.n	80043ea <memcpy+0x4>

080043f8 <memmove>:
 80043f8:	b510      	push	{r4, lr}
 80043fa:	4288      	cmp	r0, r1
 80043fc:	d902      	bls.n	8004404 <memmove+0xc>
 80043fe:	188b      	adds	r3, r1, r2
 8004400:	4298      	cmp	r0, r3
 8004402:	d303      	bcc.n	800440c <memmove+0x14>
 8004404:	2300      	movs	r3, #0
 8004406:	e007      	b.n	8004418 <memmove+0x20>
 8004408:	5c8b      	ldrb	r3, [r1, r2]
 800440a:	5483      	strb	r3, [r0, r2]
 800440c:	3a01      	subs	r2, #1
 800440e:	d2fb      	bcs.n	8004408 <memmove+0x10>
 8004410:	bd10      	pop	{r4, pc}
 8004412:	5ccc      	ldrb	r4, [r1, r3]
 8004414:	54c4      	strb	r4, [r0, r3]
 8004416:	3301      	adds	r3, #1
 8004418:	429a      	cmp	r2, r3
 800441a:	d1fa      	bne.n	8004412 <memmove+0x1a>
 800441c:	e7f8      	b.n	8004410 <memmove+0x18>
	...

08004420 <_free_r>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	0005      	movs	r5, r0
 8004424:	2900      	cmp	r1, #0
 8004426:	d010      	beq.n	800444a <_free_r+0x2a>
 8004428:	1f0c      	subs	r4, r1, #4
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	2b00      	cmp	r3, #0
 800442e:	da00      	bge.n	8004432 <_free_r+0x12>
 8004430:	18e4      	adds	r4, r4, r3
 8004432:	0028      	movs	r0, r5
 8004434:	f000 f918 	bl	8004668 <__malloc_lock>
 8004438:	4a1d      	ldr	r2, [pc, #116]	; (80044b0 <_free_r+0x90>)
 800443a:	6813      	ldr	r3, [r2, #0]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d105      	bne.n	800444c <_free_r+0x2c>
 8004440:	6063      	str	r3, [r4, #4]
 8004442:	6014      	str	r4, [r2, #0]
 8004444:	0028      	movs	r0, r5
 8004446:	f000 f917 	bl	8004678 <__malloc_unlock>
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	42a3      	cmp	r3, r4
 800444e:	d908      	bls.n	8004462 <_free_r+0x42>
 8004450:	6821      	ldr	r1, [r4, #0]
 8004452:	1860      	adds	r0, r4, r1
 8004454:	4283      	cmp	r3, r0
 8004456:	d1f3      	bne.n	8004440 <_free_r+0x20>
 8004458:	6818      	ldr	r0, [r3, #0]
 800445a:	685b      	ldr	r3, [r3, #4]
 800445c:	1841      	adds	r1, r0, r1
 800445e:	6021      	str	r1, [r4, #0]
 8004460:	e7ee      	b.n	8004440 <_free_r+0x20>
 8004462:	001a      	movs	r2, r3
 8004464:	685b      	ldr	r3, [r3, #4]
 8004466:	2b00      	cmp	r3, #0
 8004468:	d001      	beq.n	800446e <_free_r+0x4e>
 800446a:	42a3      	cmp	r3, r4
 800446c:	d9f9      	bls.n	8004462 <_free_r+0x42>
 800446e:	6811      	ldr	r1, [r2, #0]
 8004470:	1850      	adds	r0, r2, r1
 8004472:	42a0      	cmp	r0, r4
 8004474:	d10b      	bne.n	800448e <_free_r+0x6e>
 8004476:	6820      	ldr	r0, [r4, #0]
 8004478:	1809      	adds	r1, r1, r0
 800447a:	1850      	adds	r0, r2, r1
 800447c:	6011      	str	r1, [r2, #0]
 800447e:	4283      	cmp	r3, r0
 8004480:	d1e0      	bne.n	8004444 <_free_r+0x24>
 8004482:	6818      	ldr	r0, [r3, #0]
 8004484:	685b      	ldr	r3, [r3, #4]
 8004486:	1841      	adds	r1, r0, r1
 8004488:	6011      	str	r1, [r2, #0]
 800448a:	6053      	str	r3, [r2, #4]
 800448c:	e7da      	b.n	8004444 <_free_r+0x24>
 800448e:	42a0      	cmp	r0, r4
 8004490:	d902      	bls.n	8004498 <_free_r+0x78>
 8004492:	230c      	movs	r3, #12
 8004494:	602b      	str	r3, [r5, #0]
 8004496:	e7d5      	b.n	8004444 <_free_r+0x24>
 8004498:	6821      	ldr	r1, [r4, #0]
 800449a:	1860      	adds	r0, r4, r1
 800449c:	4283      	cmp	r3, r0
 800449e:	d103      	bne.n	80044a8 <_free_r+0x88>
 80044a0:	6818      	ldr	r0, [r3, #0]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	1841      	adds	r1, r0, r1
 80044a6:	6021      	str	r1, [r4, #0]
 80044a8:	6063      	str	r3, [r4, #4]
 80044aa:	6054      	str	r4, [r2, #4]
 80044ac:	e7ca      	b.n	8004444 <_free_r+0x24>
 80044ae:	46c0      	nop			; (mov r8, r8)
 80044b0:	200001a4 	.word	0x200001a4

080044b4 <sbrk_aligned>:
 80044b4:	b570      	push	{r4, r5, r6, lr}
 80044b6:	4e0f      	ldr	r6, [pc, #60]	; (80044f4 <sbrk_aligned+0x40>)
 80044b8:	000d      	movs	r5, r1
 80044ba:	6831      	ldr	r1, [r6, #0]
 80044bc:	0004      	movs	r4, r0
 80044be:	2900      	cmp	r1, #0
 80044c0:	d102      	bne.n	80044c8 <sbrk_aligned+0x14>
 80044c2:	f000 f8bf 	bl	8004644 <_sbrk_r>
 80044c6:	6030      	str	r0, [r6, #0]
 80044c8:	0029      	movs	r1, r5
 80044ca:	0020      	movs	r0, r4
 80044cc:	f000 f8ba 	bl	8004644 <_sbrk_r>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	d00a      	beq.n	80044ea <sbrk_aligned+0x36>
 80044d4:	2303      	movs	r3, #3
 80044d6:	1cc5      	adds	r5, r0, #3
 80044d8:	439d      	bics	r5, r3
 80044da:	42a8      	cmp	r0, r5
 80044dc:	d007      	beq.n	80044ee <sbrk_aligned+0x3a>
 80044de:	1a29      	subs	r1, r5, r0
 80044e0:	0020      	movs	r0, r4
 80044e2:	f000 f8af 	bl	8004644 <_sbrk_r>
 80044e6:	1c43      	adds	r3, r0, #1
 80044e8:	d101      	bne.n	80044ee <sbrk_aligned+0x3a>
 80044ea:	2501      	movs	r5, #1
 80044ec:	426d      	negs	r5, r5
 80044ee:	0028      	movs	r0, r5
 80044f0:	bd70      	pop	{r4, r5, r6, pc}
 80044f2:	46c0      	nop			; (mov r8, r8)
 80044f4:	200001a8 	.word	0x200001a8

080044f8 <_malloc_r>:
 80044f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80044fa:	2203      	movs	r2, #3
 80044fc:	1ccb      	adds	r3, r1, #3
 80044fe:	4393      	bics	r3, r2
 8004500:	3308      	adds	r3, #8
 8004502:	0006      	movs	r6, r0
 8004504:	001f      	movs	r7, r3
 8004506:	2b0c      	cmp	r3, #12
 8004508:	d232      	bcs.n	8004570 <_malloc_r+0x78>
 800450a:	270c      	movs	r7, #12
 800450c:	42b9      	cmp	r1, r7
 800450e:	d831      	bhi.n	8004574 <_malloc_r+0x7c>
 8004510:	0030      	movs	r0, r6
 8004512:	f000 f8a9 	bl	8004668 <__malloc_lock>
 8004516:	4d32      	ldr	r5, [pc, #200]	; (80045e0 <_malloc_r+0xe8>)
 8004518:	682b      	ldr	r3, [r5, #0]
 800451a:	001c      	movs	r4, r3
 800451c:	2c00      	cmp	r4, #0
 800451e:	d12e      	bne.n	800457e <_malloc_r+0x86>
 8004520:	0039      	movs	r1, r7
 8004522:	0030      	movs	r0, r6
 8004524:	f7ff ffc6 	bl	80044b4 <sbrk_aligned>
 8004528:	0004      	movs	r4, r0
 800452a:	1c43      	adds	r3, r0, #1
 800452c:	d11e      	bne.n	800456c <_malloc_r+0x74>
 800452e:	682c      	ldr	r4, [r5, #0]
 8004530:	0025      	movs	r5, r4
 8004532:	2d00      	cmp	r5, #0
 8004534:	d14a      	bne.n	80045cc <_malloc_r+0xd4>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	0029      	movs	r1, r5
 800453a:	18e3      	adds	r3, r4, r3
 800453c:	0030      	movs	r0, r6
 800453e:	9301      	str	r3, [sp, #4]
 8004540:	f000 f880 	bl	8004644 <_sbrk_r>
 8004544:	9b01      	ldr	r3, [sp, #4]
 8004546:	4283      	cmp	r3, r0
 8004548:	d143      	bne.n	80045d2 <_malloc_r+0xda>
 800454a:	6823      	ldr	r3, [r4, #0]
 800454c:	3703      	adds	r7, #3
 800454e:	1aff      	subs	r7, r7, r3
 8004550:	2303      	movs	r3, #3
 8004552:	439f      	bics	r7, r3
 8004554:	3708      	adds	r7, #8
 8004556:	2f0c      	cmp	r7, #12
 8004558:	d200      	bcs.n	800455c <_malloc_r+0x64>
 800455a:	270c      	movs	r7, #12
 800455c:	0039      	movs	r1, r7
 800455e:	0030      	movs	r0, r6
 8004560:	f7ff ffa8 	bl	80044b4 <sbrk_aligned>
 8004564:	1c43      	adds	r3, r0, #1
 8004566:	d034      	beq.n	80045d2 <_malloc_r+0xda>
 8004568:	6823      	ldr	r3, [r4, #0]
 800456a:	19df      	adds	r7, r3, r7
 800456c:	6027      	str	r7, [r4, #0]
 800456e:	e013      	b.n	8004598 <_malloc_r+0xa0>
 8004570:	2b00      	cmp	r3, #0
 8004572:	dacb      	bge.n	800450c <_malloc_r+0x14>
 8004574:	230c      	movs	r3, #12
 8004576:	2500      	movs	r5, #0
 8004578:	6033      	str	r3, [r6, #0]
 800457a:	0028      	movs	r0, r5
 800457c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800457e:	6822      	ldr	r2, [r4, #0]
 8004580:	1bd1      	subs	r1, r2, r7
 8004582:	d420      	bmi.n	80045c6 <_malloc_r+0xce>
 8004584:	290b      	cmp	r1, #11
 8004586:	d917      	bls.n	80045b8 <_malloc_r+0xc0>
 8004588:	19e2      	adds	r2, r4, r7
 800458a:	6027      	str	r7, [r4, #0]
 800458c:	42a3      	cmp	r3, r4
 800458e:	d111      	bne.n	80045b4 <_malloc_r+0xbc>
 8004590:	602a      	str	r2, [r5, #0]
 8004592:	6863      	ldr	r3, [r4, #4]
 8004594:	6011      	str	r1, [r2, #0]
 8004596:	6053      	str	r3, [r2, #4]
 8004598:	0030      	movs	r0, r6
 800459a:	0025      	movs	r5, r4
 800459c:	f000 f86c 	bl	8004678 <__malloc_unlock>
 80045a0:	2207      	movs	r2, #7
 80045a2:	350b      	adds	r5, #11
 80045a4:	1d23      	adds	r3, r4, #4
 80045a6:	4395      	bics	r5, r2
 80045a8:	1aea      	subs	r2, r5, r3
 80045aa:	429d      	cmp	r5, r3
 80045ac:	d0e5      	beq.n	800457a <_malloc_r+0x82>
 80045ae:	1b5b      	subs	r3, r3, r5
 80045b0:	50a3      	str	r3, [r4, r2]
 80045b2:	e7e2      	b.n	800457a <_malloc_r+0x82>
 80045b4:	605a      	str	r2, [r3, #4]
 80045b6:	e7ec      	b.n	8004592 <_malloc_r+0x9a>
 80045b8:	6862      	ldr	r2, [r4, #4]
 80045ba:	42a3      	cmp	r3, r4
 80045bc:	d101      	bne.n	80045c2 <_malloc_r+0xca>
 80045be:	602a      	str	r2, [r5, #0]
 80045c0:	e7ea      	b.n	8004598 <_malloc_r+0xa0>
 80045c2:	605a      	str	r2, [r3, #4]
 80045c4:	e7e8      	b.n	8004598 <_malloc_r+0xa0>
 80045c6:	0023      	movs	r3, r4
 80045c8:	6864      	ldr	r4, [r4, #4]
 80045ca:	e7a7      	b.n	800451c <_malloc_r+0x24>
 80045cc:	002c      	movs	r4, r5
 80045ce:	686d      	ldr	r5, [r5, #4]
 80045d0:	e7af      	b.n	8004532 <_malloc_r+0x3a>
 80045d2:	230c      	movs	r3, #12
 80045d4:	0030      	movs	r0, r6
 80045d6:	6033      	str	r3, [r6, #0]
 80045d8:	f000 f84e 	bl	8004678 <__malloc_unlock>
 80045dc:	e7cd      	b.n	800457a <_malloc_r+0x82>
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	200001a4 	.word	0x200001a4

080045e4 <_realloc_r>:
 80045e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045e6:	0007      	movs	r7, r0
 80045e8:	000e      	movs	r6, r1
 80045ea:	0014      	movs	r4, r2
 80045ec:	2900      	cmp	r1, #0
 80045ee:	d105      	bne.n	80045fc <_realloc_r+0x18>
 80045f0:	0011      	movs	r1, r2
 80045f2:	f7ff ff81 	bl	80044f8 <_malloc_r>
 80045f6:	0005      	movs	r5, r0
 80045f8:	0028      	movs	r0, r5
 80045fa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80045fc:	2a00      	cmp	r2, #0
 80045fe:	d103      	bne.n	8004608 <_realloc_r+0x24>
 8004600:	f7ff ff0e 	bl	8004420 <_free_r>
 8004604:	0025      	movs	r5, r4
 8004606:	e7f7      	b.n	80045f8 <_realloc_r+0x14>
 8004608:	f000 f83e 	bl	8004688 <_malloc_usable_size_r>
 800460c:	9001      	str	r0, [sp, #4]
 800460e:	4284      	cmp	r4, r0
 8004610:	d803      	bhi.n	800461a <_realloc_r+0x36>
 8004612:	0035      	movs	r5, r6
 8004614:	0843      	lsrs	r3, r0, #1
 8004616:	42a3      	cmp	r3, r4
 8004618:	d3ee      	bcc.n	80045f8 <_realloc_r+0x14>
 800461a:	0021      	movs	r1, r4
 800461c:	0038      	movs	r0, r7
 800461e:	f7ff ff6b 	bl	80044f8 <_malloc_r>
 8004622:	1e05      	subs	r5, r0, #0
 8004624:	d0e8      	beq.n	80045f8 <_realloc_r+0x14>
 8004626:	9b01      	ldr	r3, [sp, #4]
 8004628:	0022      	movs	r2, r4
 800462a:	429c      	cmp	r4, r3
 800462c:	d900      	bls.n	8004630 <_realloc_r+0x4c>
 800462e:	001a      	movs	r2, r3
 8004630:	0031      	movs	r1, r6
 8004632:	0028      	movs	r0, r5
 8004634:	f7ff fed7 	bl	80043e6 <memcpy>
 8004638:	0031      	movs	r1, r6
 800463a:	0038      	movs	r0, r7
 800463c:	f7ff fef0 	bl	8004420 <_free_r>
 8004640:	e7da      	b.n	80045f8 <_realloc_r+0x14>
	...

08004644 <_sbrk_r>:
 8004644:	2300      	movs	r3, #0
 8004646:	b570      	push	{r4, r5, r6, lr}
 8004648:	4d06      	ldr	r5, [pc, #24]	; (8004664 <_sbrk_r+0x20>)
 800464a:	0004      	movs	r4, r0
 800464c:	0008      	movs	r0, r1
 800464e:	602b      	str	r3, [r5, #0]
 8004650:	f7fd f8ec 	bl	800182c <_sbrk>
 8004654:	1c43      	adds	r3, r0, #1
 8004656:	d103      	bne.n	8004660 <_sbrk_r+0x1c>
 8004658:	682b      	ldr	r3, [r5, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d000      	beq.n	8004660 <_sbrk_r+0x1c>
 800465e:	6023      	str	r3, [r4, #0]
 8004660:	bd70      	pop	{r4, r5, r6, pc}
 8004662:	46c0      	nop			; (mov r8, r8)
 8004664:	200001ac 	.word	0x200001ac

08004668 <__malloc_lock>:
 8004668:	b510      	push	{r4, lr}
 800466a:	4802      	ldr	r0, [pc, #8]	; (8004674 <__malloc_lock+0xc>)
 800466c:	f000 f814 	bl	8004698 <__retarget_lock_acquire_recursive>
 8004670:	bd10      	pop	{r4, pc}
 8004672:	46c0      	nop			; (mov r8, r8)
 8004674:	200001b0 	.word	0x200001b0

08004678 <__malloc_unlock>:
 8004678:	b510      	push	{r4, lr}
 800467a:	4802      	ldr	r0, [pc, #8]	; (8004684 <__malloc_unlock+0xc>)
 800467c:	f000 f80d 	bl	800469a <__retarget_lock_release_recursive>
 8004680:	bd10      	pop	{r4, pc}
 8004682:	46c0      	nop			; (mov r8, r8)
 8004684:	200001b0 	.word	0x200001b0

08004688 <_malloc_usable_size_r>:
 8004688:	1f0b      	subs	r3, r1, #4
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	1f18      	subs	r0, r3, #4
 800468e:	2b00      	cmp	r3, #0
 8004690:	da01      	bge.n	8004696 <_malloc_usable_size_r+0xe>
 8004692:	580b      	ldr	r3, [r1, r0]
 8004694:	18c0      	adds	r0, r0, r3
 8004696:	4770      	bx	lr

08004698 <__retarget_lock_acquire_recursive>:
 8004698:	4770      	bx	lr

0800469a <__retarget_lock_release_recursive>:
 800469a:	4770      	bx	lr

0800469c <_init>:
 800469c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800469e:	46c0      	nop			; (mov r8, r8)
 80046a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046a2:	bc08      	pop	{r3}
 80046a4:	469e      	mov	lr, r3
 80046a6:	4770      	bx	lr

080046a8 <_fini>:
 80046a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80046aa:	46c0      	nop			; (mov r8, r8)
 80046ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80046ae:	bc08      	pop	{r3}
 80046b0:	469e      	mov	lr, r3
 80046b2:	4770      	bx	lr
