
EEE3096S_2022_Prac_2_Delays_and_I2C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004710  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000284  080047d0  080047d0  000147d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a54  08004a54  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004a54  08004a54  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004a54  08004a54  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a58  08004a58  00014a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004a5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000170  20000070  08004acc  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001e0  08004acc  000201e0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c915  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e7b  00000000  00000000  0002c9ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a10  00000000  00000000  0002e828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000948  00000000  00000000  0002f238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001216d  00000000  00000000  0002fb80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d9a7  00000000  00000000  00041ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0006a306  00000000  00000000  0004f694  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b999a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000027c0  00000000  00000000  000b99ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080047b8 	.word	0x080047b8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	080047b8 	.word	0x080047b8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_cfrcmple>:
 8000234:	4684      	mov	ip, r0
 8000236:	0008      	movs	r0, r1
 8000238:	4661      	mov	r1, ip
 800023a:	e7ff      	b.n	800023c <__aeabi_cfcmpeq>

0800023c <__aeabi_cfcmpeq>:
 800023c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800023e:	f000 f89f 	bl	8000380 <__lesf2>
 8000242:	2800      	cmp	r0, #0
 8000244:	d401      	bmi.n	800024a <__aeabi_cfcmpeq+0xe>
 8000246:	2100      	movs	r1, #0
 8000248:	42c8      	cmn	r0, r1
 800024a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800024c <__aeabi_fcmpeq>:
 800024c:	b510      	push	{r4, lr}
 800024e:	f000 f82b 	bl	80002a8 <__eqsf2>
 8000252:	4240      	negs	r0, r0
 8000254:	3001      	adds	r0, #1
 8000256:	bd10      	pop	{r4, pc}

08000258 <__aeabi_fcmplt>:
 8000258:	b510      	push	{r4, lr}
 800025a:	f000 f891 	bl	8000380 <__lesf2>
 800025e:	2800      	cmp	r0, #0
 8000260:	db01      	blt.n	8000266 <__aeabi_fcmplt+0xe>
 8000262:	2000      	movs	r0, #0
 8000264:	bd10      	pop	{r4, pc}
 8000266:	2001      	movs	r0, #1
 8000268:	bd10      	pop	{r4, pc}
 800026a:	46c0      	nop			; (mov r8, r8)

0800026c <__aeabi_fcmple>:
 800026c:	b510      	push	{r4, lr}
 800026e:	f000 f887 	bl	8000380 <__lesf2>
 8000272:	2800      	cmp	r0, #0
 8000274:	dd01      	ble.n	800027a <__aeabi_fcmple+0xe>
 8000276:	2000      	movs	r0, #0
 8000278:	bd10      	pop	{r4, pc}
 800027a:	2001      	movs	r0, #1
 800027c:	bd10      	pop	{r4, pc}
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_fcmpgt>:
 8000280:	b510      	push	{r4, lr}
 8000282:	f000 f837 	bl	80002f4 <__gesf2>
 8000286:	2800      	cmp	r0, #0
 8000288:	dc01      	bgt.n	800028e <__aeabi_fcmpgt+0xe>
 800028a:	2000      	movs	r0, #0
 800028c:	bd10      	pop	{r4, pc}
 800028e:	2001      	movs	r0, #1
 8000290:	bd10      	pop	{r4, pc}
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_fcmpge>:
 8000294:	b510      	push	{r4, lr}
 8000296:	f000 f82d 	bl	80002f4 <__gesf2>
 800029a:	2800      	cmp	r0, #0
 800029c:	da01      	bge.n	80002a2 <__aeabi_fcmpge+0xe>
 800029e:	2000      	movs	r0, #0
 80002a0:	bd10      	pop	{r4, pc}
 80002a2:	2001      	movs	r0, #1
 80002a4:	bd10      	pop	{r4, pc}
 80002a6:	46c0      	nop			; (mov r8, r8)

080002a8 <__eqsf2>:
 80002a8:	b570      	push	{r4, r5, r6, lr}
 80002aa:	0042      	lsls	r2, r0, #1
 80002ac:	0245      	lsls	r5, r0, #9
 80002ae:	024e      	lsls	r6, r1, #9
 80002b0:	004c      	lsls	r4, r1, #1
 80002b2:	0fc3      	lsrs	r3, r0, #31
 80002b4:	0a6d      	lsrs	r5, r5, #9
 80002b6:	2001      	movs	r0, #1
 80002b8:	0e12      	lsrs	r2, r2, #24
 80002ba:	0a76      	lsrs	r6, r6, #9
 80002bc:	0e24      	lsrs	r4, r4, #24
 80002be:	0fc9      	lsrs	r1, r1, #31
 80002c0:	2aff      	cmp	r2, #255	; 0xff
 80002c2:	d006      	beq.n	80002d2 <__eqsf2+0x2a>
 80002c4:	2cff      	cmp	r4, #255	; 0xff
 80002c6:	d003      	beq.n	80002d0 <__eqsf2+0x28>
 80002c8:	42a2      	cmp	r2, r4
 80002ca:	d101      	bne.n	80002d0 <__eqsf2+0x28>
 80002cc:	42b5      	cmp	r5, r6
 80002ce:	d006      	beq.n	80002de <__eqsf2+0x36>
 80002d0:	bd70      	pop	{r4, r5, r6, pc}
 80002d2:	2d00      	cmp	r5, #0
 80002d4:	d1fc      	bne.n	80002d0 <__eqsf2+0x28>
 80002d6:	2cff      	cmp	r4, #255	; 0xff
 80002d8:	d1fa      	bne.n	80002d0 <__eqsf2+0x28>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d1f8      	bne.n	80002d0 <__eqsf2+0x28>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d006      	beq.n	80002f0 <__eqsf2+0x48>
 80002e2:	2001      	movs	r0, #1
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	d1f3      	bne.n	80002d0 <__eqsf2+0x28>
 80002e8:	0028      	movs	r0, r5
 80002ea:	1e43      	subs	r3, r0, #1
 80002ec:	4198      	sbcs	r0, r3
 80002ee:	e7ef      	b.n	80002d0 <__eqsf2+0x28>
 80002f0:	2000      	movs	r0, #0
 80002f2:	e7ed      	b.n	80002d0 <__eqsf2+0x28>

080002f4 <__gesf2>:
 80002f4:	b570      	push	{r4, r5, r6, lr}
 80002f6:	0042      	lsls	r2, r0, #1
 80002f8:	0245      	lsls	r5, r0, #9
 80002fa:	024e      	lsls	r6, r1, #9
 80002fc:	004c      	lsls	r4, r1, #1
 80002fe:	0fc3      	lsrs	r3, r0, #31
 8000300:	0a6d      	lsrs	r5, r5, #9
 8000302:	0e12      	lsrs	r2, r2, #24
 8000304:	0a76      	lsrs	r6, r6, #9
 8000306:	0e24      	lsrs	r4, r4, #24
 8000308:	0fc8      	lsrs	r0, r1, #31
 800030a:	2aff      	cmp	r2, #255	; 0xff
 800030c:	d01b      	beq.n	8000346 <__gesf2+0x52>
 800030e:	2cff      	cmp	r4, #255	; 0xff
 8000310:	d00e      	beq.n	8000330 <__gesf2+0x3c>
 8000312:	2a00      	cmp	r2, #0
 8000314:	d11b      	bne.n	800034e <__gesf2+0x5a>
 8000316:	2c00      	cmp	r4, #0
 8000318:	d101      	bne.n	800031e <__gesf2+0x2a>
 800031a:	2e00      	cmp	r6, #0
 800031c:	d01c      	beq.n	8000358 <__gesf2+0x64>
 800031e:	2d00      	cmp	r5, #0
 8000320:	d00c      	beq.n	800033c <__gesf2+0x48>
 8000322:	4283      	cmp	r3, r0
 8000324:	d01c      	beq.n	8000360 <__gesf2+0x6c>
 8000326:	2102      	movs	r1, #2
 8000328:	1e58      	subs	r0, r3, #1
 800032a:	4008      	ands	r0, r1
 800032c:	3801      	subs	r0, #1
 800032e:	bd70      	pop	{r4, r5, r6, pc}
 8000330:	2e00      	cmp	r6, #0
 8000332:	d122      	bne.n	800037a <__gesf2+0x86>
 8000334:	2a00      	cmp	r2, #0
 8000336:	d1f4      	bne.n	8000322 <__gesf2+0x2e>
 8000338:	2d00      	cmp	r5, #0
 800033a:	d1f2      	bne.n	8000322 <__gesf2+0x2e>
 800033c:	2800      	cmp	r0, #0
 800033e:	d1f6      	bne.n	800032e <__gesf2+0x3a>
 8000340:	2001      	movs	r0, #1
 8000342:	4240      	negs	r0, r0
 8000344:	e7f3      	b.n	800032e <__gesf2+0x3a>
 8000346:	2d00      	cmp	r5, #0
 8000348:	d117      	bne.n	800037a <__gesf2+0x86>
 800034a:	2cff      	cmp	r4, #255	; 0xff
 800034c:	d0f0      	beq.n	8000330 <__gesf2+0x3c>
 800034e:	2c00      	cmp	r4, #0
 8000350:	d1e7      	bne.n	8000322 <__gesf2+0x2e>
 8000352:	2e00      	cmp	r6, #0
 8000354:	d1e5      	bne.n	8000322 <__gesf2+0x2e>
 8000356:	e7e6      	b.n	8000326 <__gesf2+0x32>
 8000358:	2000      	movs	r0, #0
 800035a:	2d00      	cmp	r5, #0
 800035c:	d0e7      	beq.n	800032e <__gesf2+0x3a>
 800035e:	e7e2      	b.n	8000326 <__gesf2+0x32>
 8000360:	42a2      	cmp	r2, r4
 8000362:	dc05      	bgt.n	8000370 <__gesf2+0x7c>
 8000364:	dbea      	blt.n	800033c <__gesf2+0x48>
 8000366:	42b5      	cmp	r5, r6
 8000368:	d802      	bhi.n	8000370 <__gesf2+0x7c>
 800036a:	d3e7      	bcc.n	800033c <__gesf2+0x48>
 800036c:	2000      	movs	r0, #0
 800036e:	e7de      	b.n	800032e <__gesf2+0x3a>
 8000370:	4243      	negs	r3, r0
 8000372:	4158      	adcs	r0, r3
 8000374:	0040      	lsls	r0, r0, #1
 8000376:	3801      	subs	r0, #1
 8000378:	e7d9      	b.n	800032e <__gesf2+0x3a>
 800037a:	2002      	movs	r0, #2
 800037c:	4240      	negs	r0, r0
 800037e:	e7d6      	b.n	800032e <__gesf2+0x3a>

08000380 <__lesf2>:
 8000380:	b570      	push	{r4, r5, r6, lr}
 8000382:	0042      	lsls	r2, r0, #1
 8000384:	0245      	lsls	r5, r0, #9
 8000386:	024e      	lsls	r6, r1, #9
 8000388:	004c      	lsls	r4, r1, #1
 800038a:	0fc3      	lsrs	r3, r0, #31
 800038c:	0a6d      	lsrs	r5, r5, #9
 800038e:	0e12      	lsrs	r2, r2, #24
 8000390:	0a76      	lsrs	r6, r6, #9
 8000392:	0e24      	lsrs	r4, r4, #24
 8000394:	0fc8      	lsrs	r0, r1, #31
 8000396:	2aff      	cmp	r2, #255	; 0xff
 8000398:	d00b      	beq.n	80003b2 <__lesf2+0x32>
 800039a:	2cff      	cmp	r4, #255	; 0xff
 800039c:	d00d      	beq.n	80003ba <__lesf2+0x3a>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d11f      	bne.n	80003e2 <__lesf2+0x62>
 80003a2:	2c00      	cmp	r4, #0
 80003a4:	d116      	bne.n	80003d4 <__lesf2+0x54>
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d114      	bne.n	80003d4 <__lesf2+0x54>
 80003aa:	2000      	movs	r0, #0
 80003ac:	2d00      	cmp	r5, #0
 80003ae:	d010      	beq.n	80003d2 <__lesf2+0x52>
 80003b0:	e009      	b.n	80003c6 <__lesf2+0x46>
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d10c      	bne.n	80003d0 <__lesf2+0x50>
 80003b6:	2cff      	cmp	r4, #255	; 0xff
 80003b8:	d113      	bne.n	80003e2 <__lesf2+0x62>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d108      	bne.n	80003d0 <__lesf2+0x50>
 80003be:	2a00      	cmp	r2, #0
 80003c0:	d008      	beq.n	80003d4 <__lesf2+0x54>
 80003c2:	4283      	cmp	r3, r0
 80003c4:	d012      	beq.n	80003ec <__lesf2+0x6c>
 80003c6:	2102      	movs	r1, #2
 80003c8:	1e58      	subs	r0, r3, #1
 80003ca:	4008      	ands	r0, r1
 80003cc:	3801      	subs	r0, #1
 80003ce:	e000      	b.n	80003d2 <__lesf2+0x52>
 80003d0:	2002      	movs	r0, #2
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	2d00      	cmp	r5, #0
 80003d6:	d1f4      	bne.n	80003c2 <__lesf2+0x42>
 80003d8:	2800      	cmp	r0, #0
 80003da:	d1fa      	bne.n	80003d2 <__lesf2+0x52>
 80003dc:	2001      	movs	r0, #1
 80003de:	4240      	negs	r0, r0
 80003e0:	e7f7      	b.n	80003d2 <__lesf2+0x52>
 80003e2:	2c00      	cmp	r4, #0
 80003e4:	d1ed      	bne.n	80003c2 <__lesf2+0x42>
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d1eb      	bne.n	80003c2 <__lesf2+0x42>
 80003ea:	e7ec      	b.n	80003c6 <__lesf2+0x46>
 80003ec:	42a2      	cmp	r2, r4
 80003ee:	dc05      	bgt.n	80003fc <__lesf2+0x7c>
 80003f0:	dbf2      	blt.n	80003d8 <__lesf2+0x58>
 80003f2:	42b5      	cmp	r5, r6
 80003f4:	d802      	bhi.n	80003fc <__lesf2+0x7c>
 80003f6:	d3ef      	bcc.n	80003d8 <__lesf2+0x58>
 80003f8:	2000      	movs	r0, #0
 80003fa:	e7ea      	b.n	80003d2 <__lesf2+0x52>
 80003fc:	4243      	negs	r3, r0
 80003fe:	4158      	adcs	r0, r3
 8000400:	0040      	lsls	r0, r0, #1
 8000402:	3801      	subs	r0, #1
 8000404:	e7e5      	b.n	80003d2 <__lesf2+0x52>
 8000406:	46c0      	nop			; (mov r8, r8)

08000408 <__aeabi_fmul>:
 8000408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800040a:	464f      	mov	r7, r9
 800040c:	4646      	mov	r6, r8
 800040e:	46d6      	mov	lr, sl
 8000410:	0244      	lsls	r4, r0, #9
 8000412:	0045      	lsls	r5, r0, #1
 8000414:	b5c0      	push	{r6, r7, lr}
 8000416:	0a64      	lsrs	r4, r4, #9
 8000418:	1c0f      	adds	r7, r1, #0
 800041a:	0e2d      	lsrs	r5, r5, #24
 800041c:	0fc6      	lsrs	r6, r0, #31
 800041e:	2d00      	cmp	r5, #0
 8000420:	d100      	bne.n	8000424 <__aeabi_fmul+0x1c>
 8000422:	e08d      	b.n	8000540 <__aeabi_fmul+0x138>
 8000424:	2dff      	cmp	r5, #255	; 0xff
 8000426:	d100      	bne.n	800042a <__aeabi_fmul+0x22>
 8000428:	e092      	b.n	8000550 <__aeabi_fmul+0x148>
 800042a:	2300      	movs	r3, #0
 800042c:	2080      	movs	r0, #128	; 0x80
 800042e:	4699      	mov	r9, r3
 8000430:	469a      	mov	sl, r3
 8000432:	00e4      	lsls	r4, r4, #3
 8000434:	04c0      	lsls	r0, r0, #19
 8000436:	4304      	orrs	r4, r0
 8000438:	3d7f      	subs	r5, #127	; 0x7f
 800043a:	0278      	lsls	r0, r7, #9
 800043c:	0a43      	lsrs	r3, r0, #9
 800043e:	4698      	mov	r8, r3
 8000440:	007b      	lsls	r3, r7, #1
 8000442:	0e1b      	lsrs	r3, r3, #24
 8000444:	0fff      	lsrs	r7, r7, #31
 8000446:	2b00      	cmp	r3, #0
 8000448:	d100      	bne.n	800044c <__aeabi_fmul+0x44>
 800044a:	e070      	b.n	800052e <__aeabi_fmul+0x126>
 800044c:	2bff      	cmp	r3, #255	; 0xff
 800044e:	d100      	bne.n	8000452 <__aeabi_fmul+0x4a>
 8000450:	e086      	b.n	8000560 <__aeabi_fmul+0x158>
 8000452:	4642      	mov	r2, r8
 8000454:	00d0      	lsls	r0, r2, #3
 8000456:	2280      	movs	r2, #128	; 0x80
 8000458:	3b7f      	subs	r3, #127	; 0x7f
 800045a:	18ed      	adds	r5, r5, r3
 800045c:	2300      	movs	r3, #0
 800045e:	04d2      	lsls	r2, r2, #19
 8000460:	4302      	orrs	r2, r0
 8000462:	4690      	mov	r8, r2
 8000464:	469c      	mov	ip, r3
 8000466:	0031      	movs	r1, r6
 8000468:	464b      	mov	r3, r9
 800046a:	4079      	eors	r1, r7
 800046c:	1c68      	adds	r0, r5, #1
 800046e:	2b0f      	cmp	r3, #15
 8000470:	d81c      	bhi.n	80004ac <__aeabi_fmul+0xa4>
 8000472:	4a76      	ldr	r2, [pc, #472]	; (800064c <__aeabi_fmul+0x244>)
 8000474:	009b      	lsls	r3, r3, #2
 8000476:	58d3      	ldr	r3, [r2, r3]
 8000478:	469f      	mov	pc, r3
 800047a:	0039      	movs	r1, r7
 800047c:	4644      	mov	r4, r8
 800047e:	46e2      	mov	sl, ip
 8000480:	4653      	mov	r3, sl
 8000482:	2b02      	cmp	r3, #2
 8000484:	d00f      	beq.n	80004a6 <__aeabi_fmul+0x9e>
 8000486:	2b03      	cmp	r3, #3
 8000488:	d100      	bne.n	800048c <__aeabi_fmul+0x84>
 800048a:	e0d7      	b.n	800063c <__aeabi_fmul+0x234>
 800048c:	2b01      	cmp	r3, #1
 800048e:	d137      	bne.n	8000500 <__aeabi_fmul+0xf8>
 8000490:	2000      	movs	r0, #0
 8000492:	2400      	movs	r4, #0
 8000494:	05c0      	lsls	r0, r0, #23
 8000496:	4320      	orrs	r0, r4
 8000498:	07c9      	lsls	r1, r1, #31
 800049a:	4308      	orrs	r0, r1
 800049c:	bce0      	pop	{r5, r6, r7}
 800049e:	46ba      	mov	sl, r7
 80004a0:	46b1      	mov	r9, r6
 80004a2:	46a8      	mov	r8, r5
 80004a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004a6:	20ff      	movs	r0, #255	; 0xff
 80004a8:	2400      	movs	r4, #0
 80004aa:	e7f3      	b.n	8000494 <__aeabi_fmul+0x8c>
 80004ac:	0c26      	lsrs	r6, r4, #16
 80004ae:	0424      	lsls	r4, r4, #16
 80004b0:	0c22      	lsrs	r2, r4, #16
 80004b2:	4644      	mov	r4, r8
 80004b4:	0424      	lsls	r4, r4, #16
 80004b6:	0c24      	lsrs	r4, r4, #16
 80004b8:	4643      	mov	r3, r8
 80004ba:	0027      	movs	r7, r4
 80004bc:	0c1b      	lsrs	r3, r3, #16
 80004be:	4357      	muls	r7, r2
 80004c0:	4374      	muls	r4, r6
 80004c2:	435a      	muls	r2, r3
 80004c4:	435e      	muls	r6, r3
 80004c6:	1912      	adds	r2, r2, r4
 80004c8:	0c3b      	lsrs	r3, r7, #16
 80004ca:	189b      	adds	r3, r3, r2
 80004cc:	429c      	cmp	r4, r3
 80004ce:	d903      	bls.n	80004d8 <__aeabi_fmul+0xd0>
 80004d0:	2280      	movs	r2, #128	; 0x80
 80004d2:	0252      	lsls	r2, r2, #9
 80004d4:	4694      	mov	ip, r2
 80004d6:	4466      	add	r6, ip
 80004d8:	043f      	lsls	r7, r7, #16
 80004da:	041a      	lsls	r2, r3, #16
 80004dc:	0c3f      	lsrs	r7, r7, #16
 80004de:	19d2      	adds	r2, r2, r7
 80004e0:	0194      	lsls	r4, r2, #6
 80004e2:	1e67      	subs	r7, r4, #1
 80004e4:	41bc      	sbcs	r4, r7
 80004e6:	0c1b      	lsrs	r3, r3, #16
 80004e8:	0e92      	lsrs	r2, r2, #26
 80004ea:	199b      	adds	r3, r3, r6
 80004ec:	4314      	orrs	r4, r2
 80004ee:	019b      	lsls	r3, r3, #6
 80004f0:	431c      	orrs	r4, r3
 80004f2:	011b      	lsls	r3, r3, #4
 80004f4:	d400      	bmi.n	80004f8 <__aeabi_fmul+0xf0>
 80004f6:	e09b      	b.n	8000630 <__aeabi_fmul+0x228>
 80004f8:	2301      	movs	r3, #1
 80004fa:	0862      	lsrs	r2, r4, #1
 80004fc:	401c      	ands	r4, r3
 80004fe:	4314      	orrs	r4, r2
 8000500:	0002      	movs	r2, r0
 8000502:	327f      	adds	r2, #127	; 0x7f
 8000504:	2a00      	cmp	r2, #0
 8000506:	dd64      	ble.n	80005d2 <__aeabi_fmul+0x1ca>
 8000508:	0763      	lsls	r3, r4, #29
 800050a:	d004      	beq.n	8000516 <__aeabi_fmul+0x10e>
 800050c:	230f      	movs	r3, #15
 800050e:	4023      	ands	r3, r4
 8000510:	2b04      	cmp	r3, #4
 8000512:	d000      	beq.n	8000516 <__aeabi_fmul+0x10e>
 8000514:	3404      	adds	r4, #4
 8000516:	0123      	lsls	r3, r4, #4
 8000518:	d503      	bpl.n	8000522 <__aeabi_fmul+0x11a>
 800051a:	0002      	movs	r2, r0
 800051c:	4b4c      	ldr	r3, [pc, #304]	; (8000650 <__aeabi_fmul+0x248>)
 800051e:	3280      	adds	r2, #128	; 0x80
 8000520:	401c      	ands	r4, r3
 8000522:	2afe      	cmp	r2, #254	; 0xfe
 8000524:	dcbf      	bgt.n	80004a6 <__aeabi_fmul+0x9e>
 8000526:	01a4      	lsls	r4, r4, #6
 8000528:	0a64      	lsrs	r4, r4, #9
 800052a:	b2d0      	uxtb	r0, r2
 800052c:	e7b2      	b.n	8000494 <__aeabi_fmul+0x8c>
 800052e:	4643      	mov	r3, r8
 8000530:	2b00      	cmp	r3, #0
 8000532:	d13d      	bne.n	80005b0 <__aeabi_fmul+0x1a8>
 8000534:	464a      	mov	r2, r9
 8000536:	3301      	adds	r3, #1
 8000538:	431a      	orrs	r2, r3
 800053a:	4691      	mov	r9, r2
 800053c:	469c      	mov	ip, r3
 800053e:	e792      	b.n	8000466 <__aeabi_fmul+0x5e>
 8000540:	2c00      	cmp	r4, #0
 8000542:	d129      	bne.n	8000598 <__aeabi_fmul+0x190>
 8000544:	2304      	movs	r3, #4
 8000546:	4699      	mov	r9, r3
 8000548:	3b03      	subs	r3, #3
 800054a:	2500      	movs	r5, #0
 800054c:	469a      	mov	sl, r3
 800054e:	e774      	b.n	800043a <__aeabi_fmul+0x32>
 8000550:	2c00      	cmp	r4, #0
 8000552:	d11b      	bne.n	800058c <__aeabi_fmul+0x184>
 8000554:	2308      	movs	r3, #8
 8000556:	4699      	mov	r9, r3
 8000558:	3b06      	subs	r3, #6
 800055a:	25ff      	movs	r5, #255	; 0xff
 800055c:	469a      	mov	sl, r3
 800055e:	e76c      	b.n	800043a <__aeabi_fmul+0x32>
 8000560:	4643      	mov	r3, r8
 8000562:	35ff      	adds	r5, #255	; 0xff
 8000564:	2b00      	cmp	r3, #0
 8000566:	d10b      	bne.n	8000580 <__aeabi_fmul+0x178>
 8000568:	2302      	movs	r3, #2
 800056a:	464a      	mov	r2, r9
 800056c:	431a      	orrs	r2, r3
 800056e:	4691      	mov	r9, r2
 8000570:	469c      	mov	ip, r3
 8000572:	e778      	b.n	8000466 <__aeabi_fmul+0x5e>
 8000574:	4653      	mov	r3, sl
 8000576:	0031      	movs	r1, r6
 8000578:	2b02      	cmp	r3, #2
 800057a:	d000      	beq.n	800057e <__aeabi_fmul+0x176>
 800057c:	e783      	b.n	8000486 <__aeabi_fmul+0x7e>
 800057e:	e792      	b.n	80004a6 <__aeabi_fmul+0x9e>
 8000580:	2303      	movs	r3, #3
 8000582:	464a      	mov	r2, r9
 8000584:	431a      	orrs	r2, r3
 8000586:	4691      	mov	r9, r2
 8000588:	469c      	mov	ip, r3
 800058a:	e76c      	b.n	8000466 <__aeabi_fmul+0x5e>
 800058c:	230c      	movs	r3, #12
 800058e:	4699      	mov	r9, r3
 8000590:	3b09      	subs	r3, #9
 8000592:	25ff      	movs	r5, #255	; 0xff
 8000594:	469a      	mov	sl, r3
 8000596:	e750      	b.n	800043a <__aeabi_fmul+0x32>
 8000598:	0020      	movs	r0, r4
 800059a:	f000 f8a9 	bl	80006f0 <__clzsi2>
 800059e:	2576      	movs	r5, #118	; 0x76
 80005a0:	1f43      	subs	r3, r0, #5
 80005a2:	409c      	lsls	r4, r3
 80005a4:	2300      	movs	r3, #0
 80005a6:	426d      	negs	r5, r5
 80005a8:	4699      	mov	r9, r3
 80005aa:	469a      	mov	sl, r3
 80005ac:	1a2d      	subs	r5, r5, r0
 80005ae:	e744      	b.n	800043a <__aeabi_fmul+0x32>
 80005b0:	4640      	mov	r0, r8
 80005b2:	f000 f89d 	bl	80006f0 <__clzsi2>
 80005b6:	4642      	mov	r2, r8
 80005b8:	1f43      	subs	r3, r0, #5
 80005ba:	409a      	lsls	r2, r3
 80005bc:	2300      	movs	r3, #0
 80005be:	1a2d      	subs	r5, r5, r0
 80005c0:	4690      	mov	r8, r2
 80005c2:	469c      	mov	ip, r3
 80005c4:	3d76      	subs	r5, #118	; 0x76
 80005c6:	e74e      	b.n	8000466 <__aeabi_fmul+0x5e>
 80005c8:	2480      	movs	r4, #128	; 0x80
 80005ca:	2100      	movs	r1, #0
 80005cc:	20ff      	movs	r0, #255	; 0xff
 80005ce:	03e4      	lsls	r4, r4, #15
 80005d0:	e760      	b.n	8000494 <__aeabi_fmul+0x8c>
 80005d2:	2301      	movs	r3, #1
 80005d4:	1a9b      	subs	r3, r3, r2
 80005d6:	2b1b      	cmp	r3, #27
 80005d8:	dd00      	ble.n	80005dc <__aeabi_fmul+0x1d4>
 80005da:	e759      	b.n	8000490 <__aeabi_fmul+0x88>
 80005dc:	0022      	movs	r2, r4
 80005de:	309e      	adds	r0, #158	; 0x9e
 80005e0:	40da      	lsrs	r2, r3
 80005e2:	4084      	lsls	r4, r0
 80005e4:	0013      	movs	r3, r2
 80005e6:	1e62      	subs	r2, r4, #1
 80005e8:	4194      	sbcs	r4, r2
 80005ea:	431c      	orrs	r4, r3
 80005ec:	0763      	lsls	r3, r4, #29
 80005ee:	d004      	beq.n	80005fa <__aeabi_fmul+0x1f2>
 80005f0:	230f      	movs	r3, #15
 80005f2:	4023      	ands	r3, r4
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	d000      	beq.n	80005fa <__aeabi_fmul+0x1f2>
 80005f8:	3404      	adds	r4, #4
 80005fa:	0163      	lsls	r3, r4, #5
 80005fc:	d51a      	bpl.n	8000634 <__aeabi_fmul+0x22c>
 80005fe:	2001      	movs	r0, #1
 8000600:	2400      	movs	r4, #0
 8000602:	e747      	b.n	8000494 <__aeabi_fmul+0x8c>
 8000604:	2080      	movs	r0, #128	; 0x80
 8000606:	03c0      	lsls	r0, r0, #15
 8000608:	4204      	tst	r4, r0
 800060a:	d009      	beq.n	8000620 <__aeabi_fmul+0x218>
 800060c:	4643      	mov	r3, r8
 800060e:	4203      	tst	r3, r0
 8000610:	d106      	bne.n	8000620 <__aeabi_fmul+0x218>
 8000612:	4644      	mov	r4, r8
 8000614:	4304      	orrs	r4, r0
 8000616:	0264      	lsls	r4, r4, #9
 8000618:	0039      	movs	r1, r7
 800061a:	20ff      	movs	r0, #255	; 0xff
 800061c:	0a64      	lsrs	r4, r4, #9
 800061e:	e739      	b.n	8000494 <__aeabi_fmul+0x8c>
 8000620:	2080      	movs	r0, #128	; 0x80
 8000622:	03c0      	lsls	r0, r0, #15
 8000624:	4304      	orrs	r4, r0
 8000626:	0264      	lsls	r4, r4, #9
 8000628:	0031      	movs	r1, r6
 800062a:	20ff      	movs	r0, #255	; 0xff
 800062c:	0a64      	lsrs	r4, r4, #9
 800062e:	e731      	b.n	8000494 <__aeabi_fmul+0x8c>
 8000630:	0028      	movs	r0, r5
 8000632:	e765      	b.n	8000500 <__aeabi_fmul+0xf8>
 8000634:	01a4      	lsls	r4, r4, #6
 8000636:	2000      	movs	r0, #0
 8000638:	0a64      	lsrs	r4, r4, #9
 800063a:	e72b      	b.n	8000494 <__aeabi_fmul+0x8c>
 800063c:	2080      	movs	r0, #128	; 0x80
 800063e:	03c0      	lsls	r0, r0, #15
 8000640:	4304      	orrs	r4, r0
 8000642:	0264      	lsls	r4, r4, #9
 8000644:	20ff      	movs	r0, #255	; 0xff
 8000646:	0a64      	lsrs	r4, r4, #9
 8000648:	e724      	b.n	8000494 <__aeabi_fmul+0x8c>
 800064a:	46c0      	nop			; (mov r8, r8)
 800064c:	08004974 	.word	0x08004974
 8000650:	f7ffffff 	.word	0xf7ffffff

08000654 <__aeabi_i2f>:
 8000654:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000656:	2800      	cmp	r0, #0
 8000658:	d013      	beq.n	8000682 <__aeabi_i2f+0x2e>
 800065a:	17c3      	asrs	r3, r0, #31
 800065c:	18c6      	adds	r6, r0, r3
 800065e:	405e      	eors	r6, r3
 8000660:	0fc4      	lsrs	r4, r0, #31
 8000662:	0030      	movs	r0, r6
 8000664:	f000 f844 	bl	80006f0 <__clzsi2>
 8000668:	239e      	movs	r3, #158	; 0x9e
 800066a:	0005      	movs	r5, r0
 800066c:	1a1b      	subs	r3, r3, r0
 800066e:	2b96      	cmp	r3, #150	; 0x96
 8000670:	dc0f      	bgt.n	8000692 <__aeabi_i2f+0x3e>
 8000672:	2808      	cmp	r0, #8
 8000674:	dd01      	ble.n	800067a <__aeabi_i2f+0x26>
 8000676:	3d08      	subs	r5, #8
 8000678:	40ae      	lsls	r6, r5
 800067a:	0276      	lsls	r6, r6, #9
 800067c:	0a76      	lsrs	r6, r6, #9
 800067e:	b2d8      	uxtb	r0, r3
 8000680:	e002      	b.n	8000688 <__aeabi_i2f+0x34>
 8000682:	2400      	movs	r4, #0
 8000684:	2000      	movs	r0, #0
 8000686:	2600      	movs	r6, #0
 8000688:	05c0      	lsls	r0, r0, #23
 800068a:	4330      	orrs	r0, r6
 800068c:	07e4      	lsls	r4, r4, #31
 800068e:	4320      	orrs	r0, r4
 8000690:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000692:	2b99      	cmp	r3, #153	; 0x99
 8000694:	dd0c      	ble.n	80006b0 <__aeabi_i2f+0x5c>
 8000696:	2205      	movs	r2, #5
 8000698:	0031      	movs	r1, r6
 800069a:	1a12      	subs	r2, r2, r0
 800069c:	40d1      	lsrs	r1, r2
 800069e:	000a      	movs	r2, r1
 80006a0:	0001      	movs	r1, r0
 80006a2:	0030      	movs	r0, r6
 80006a4:	311b      	adds	r1, #27
 80006a6:	4088      	lsls	r0, r1
 80006a8:	1e41      	subs	r1, r0, #1
 80006aa:	4188      	sbcs	r0, r1
 80006ac:	4302      	orrs	r2, r0
 80006ae:	0016      	movs	r6, r2
 80006b0:	2d05      	cmp	r5, #5
 80006b2:	dc12      	bgt.n	80006da <__aeabi_i2f+0x86>
 80006b4:	0031      	movs	r1, r6
 80006b6:	4f0d      	ldr	r7, [pc, #52]	; (80006ec <__aeabi_i2f+0x98>)
 80006b8:	4039      	ands	r1, r7
 80006ba:	0772      	lsls	r2, r6, #29
 80006bc:	d009      	beq.n	80006d2 <__aeabi_i2f+0x7e>
 80006be:	200f      	movs	r0, #15
 80006c0:	4030      	ands	r0, r6
 80006c2:	2804      	cmp	r0, #4
 80006c4:	d005      	beq.n	80006d2 <__aeabi_i2f+0x7e>
 80006c6:	3104      	adds	r1, #4
 80006c8:	014a      	lsls	r2, r1, #5
 80006ca:	d502      	bpl.n	80006d2 <__aeabi_i2f+0x7e>
 80006cc:	239f      	movs	r3, #159	; 0x9f
 80006ce:	4039      	ands	r1, r7
 80006d0:	1b5b      	subs	r3, r3, r5
 80006d2:	0189      	lsls	r1, r1, #6
 80006d4:	0a4e      	lsrs	r6, r1, #9
 80006d6:	b2d8      	uxtb	r0, r3
 80006d8:	e7d6      	b.n	8000688 <__aeabi_i2f+0x34>
 80006da:	1f6a      	subs	r2, r5, #5
 80006dc:	4096      	lsls	r6, r2
 80006de:	0031      	movs	r1, r6
 80006e0:	4f02      	ldr	r7, [pc, #8]	; (80006ec <__aeabi_i2f+0x98>)
 80006e2:	4039      	ands	r1, r7
 80006e4:	0772      	lsls	r2, r6, #29
 80006e6:	d0f4      	beq.n	80006d2 <__aeabi_i2f+0x7e>
 80006e8:	e7e9      	b.n	80006be <__aeabi_i2f+0x6a>
 80006ea:	46c0      	nop			; (mov r8, r8)
 80006ec:	fbffffff 	.word	0xfbffffff

080006f0 <__clzsi2>:
 80006f0:	211c      	movs	r1, #28
 80006f2:	2301      	movs	r3, #1
 80006f4:	041b      	lsls	r3, r3, #16
 80006f6:	4298      	cmp	r0, r3
 80006f8:	d301      	bcc.n	80006fe <__clzsi2+0xe>
 80006fa:	0c00      	lsrs	r0, r0, #16
 80006fc:	3910      	subs	r1, #16
 80006fe:	0a1b      	lsrs	r3, r3, #8
 8000700:	4298      	cmp	r0, r3
 8000702:	d301      	bcc.n	8000708 <__clzsi2+0x18>
 8000704:	0a00      	lsrs	r0, r0, #8
 8000706:	3908      	subs	r1, #8
 8000708:	091b      	lsrs	r3, r3, #4
 800070a:	4298      	cmp	r0, r3
 800070c:	d301      	bcc.n	8000712 <__clzsi2+0x22>
 800070e:	0900      	lsrs	r0, r0, #4
 8000710:	3904      	subs	r1, #4
 8000712:	a202      	add	r2, pc, #8	; (adr r2, 800071c <__clzsi2+0x2c>)
 8000714:	5c10      	ldrb	r0, [r2, r0]
 8000716:	1840      	adds	r0, r0, r1
 8000718:	4770      	bx	lr
 800071a:	46c0      	nop			; (mov r8, r8)
 800071c:	02020304 	.word	0x02020304
 8000720:	01010101 	.word	0x01010101
	...

0800072c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void){
 800072c:	b590      	push	{r4, r7, lr}
 800072e:	b091      	sub	sp, #68	; 0x44
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fdff 	bl	8001334 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f849 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f937 	bl	80009ac <MX_GPIO_Init>
  MX_I2C1_Init();
 800073e:	f000 f8a7 	bl	8000890 <MX_I2C1_Init>
  MX_DMA_Init();
 8000742:	f000 f915 	bl	8000970 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000746:	f000 f8e3 	bl	8000910 <MX_USART2_UART_Init>
  {
    /* USER CODE END WHILE */
	//TASK 1
	//First run this with nothing else in the loop and scope pin PC8 on an oscilloscope
	//This toggles the pin on and off after the delay specified in pause
    HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_8);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	4a19      	ldr	r2, [pc, #100]	; (80007b4 <main+0x88>)
 8000750:	0019      	movs	r1, r3
 8000752:	0010      	movs	r0, r2
 8000754:	f001 fa41 	bl	8001bda <HAL_GPIO_TogglePin>
	pause_sec(2);
 8000758:	2380      	movs	r3, #128	; 0x80
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	1c18      	adds	r0, r3, #0
 800075e:	f000 f99d 	bl	8000a9c <pause_sec>
	// adding a 1 second delay


	//TASK 6
	//get the current time
	getTime();
 8000762:	f000 f9eb 	bl	8000b3c <getTime>

	uint8_t epoch[25]; //initialize array to store epoch time
	uint8_t rtc[36]; //write the epoch time (formatted) to the array

	//get epoch time using epochFromTime function defined in this file
	rtcPrint(time);
 8000766:	4b14      	ldr	r3, [pc, #80]	; (80007b8 <main+0x8c>)
 8000768:	6818      	ldr	r0, [r3, #0]
 800076a:	6859      	ldr	r1, [r3, #4]
 800076c:	f000 fb0c 	bl	8000d88 <rtcPrint>
	sprintf(rtc, "\r\n RTC: %s\r\n", tmpRtc);
 8000770:	4a12      	ldr	r2, [pc, #72]	; (80007bc <main+0x90>)
 8000772:	4913      	ldr	r1, [pc, #76]	; (80007c0 <main+0x94>)
 8000774:	003b      	movs	r3, r7
 8000776:	0018      	movs	r0, r3
 8000778:	f003 fbb4 	bl	8003ee4 <siprintf>
	sprintf(epoch, "\r\n Epoch: %d\r\n\r\n", epochFromTime(time));
 800077c:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <main+0x8c>)
 800077e:	6818      	ldr	r0, [r3, #0]
 8000780:	6859      	ldr	r1, [r3, #4]
 8000782:	f000 fa33 	bl	8000bec <epochFromTime>
 8000786:	0002      	movs	r2, r0
 8000788:	490e      	ldr	r1, [pc, #56]	; (80007c4 <main+0x98>)
 800078a:	2424      	movs	r4, #36	; 0x24
 800078c:	193b      	adds	r3, r7, r4
 800078e:	0018      	movs	r0, r3
 8000790:	f003 fba8 	bl	8003ee4 <siprintf>

	//transmit the array containing the epoch time over UART

	HAL_UART_Transmit(&huart2, rtc, sizeof(rtc), 1000);
 8000794:	23fa      	movs	r3, #250	; 0xfa
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	0039      	movs	r1, r7
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <main+0x9c>)
 800079c:	2224      	movs	r2, #36	; 0x24
 800079e:	f002 fc25 	bl	8002fec <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, epoch, sizeof(epoch), 1000);
 80007a2:	23fa      	movs	r3, #250	; 0xfa
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	1939      	adds	r1, r7, r4
 80007a8:	4807      	ldr	r0, [pc, #28]	; (80007c8 <main+0x9c>)
 80007aa:	2219      	movs	r2, #25
 80007ac:	f002 fc1e 	bl	8002fec <HAL_UART_Transmit>
  {
 80007b0:	e7cb      	b.n	800074a <main+0x1e>
 80007b2:	46c0      	nop			; (mov r8, r8)
 80007b4:	48000800 	.word	0x48000800
 80007b8:	200001a0 	.word	0x200001a0
 80007bc:	200001a8 	.word	0x200001a8
 80007c0:	080047d0 	.word	0x080047d0
 80007c4:	080047e0 	.word	0x080047e0
 80007c8:	200000d8 	.word	0x200000d8

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b097      	sub	sp, #92	; 0x5c
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	2428      	movs	r4, #40	; 0x28
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	2330      	movs	r3, #48	; 0x30
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f003 fb79 	bl	8003ed4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e2:	2318      	movs	r3, #24
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f003 fb71 	bl	8003ed4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	0018      	movs	r0, r3
 80007f6:	2314      	movs	r3, #20
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f003 fb6a 	bl	8003ed4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2201      	movs	r2, #1
 800080c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2210      	movs	r2, #16
 8000812:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2202      	movs	r2, #2
 8000818:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2200      	movs	r2, #0
 800081e:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	22a0      	movs	r2, #160	; 0xa0
 8000824:	0392      	lsls	r2, r2, #14
 8000826:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000828:	187b      	adds	r3, r7, r1
 800082a:	2200      	movs	r2, #0
 800082c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082e:	187b      	adds	r3, r7, r1
 8000830:	0018      	movs	r0, r3
 8000832:	f001 fe3d 	bl	80024b0 <HAL_RCC_OscConfig>
 8000836:	1e03      	subs	r3, r0, #0
 8000838:	d001      	beq.n	800083e <SystemClock_Config+0x72>
  {
    Error_Handler();
 800083a:	f000 fbef 	bl	800101c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083e:	2118      	movs	r1, #24
 8000840:	187b      	adds	r3, r7, r1
 8000842:	2207      	movs	r2, #7
 8000844:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2202      	movs	r2, #2
 800084a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084c:	187b      	adds	r3, r7, r1
 800084e:	2200      	movs	r2, #0
 8000850:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000852:	187b      	adds	r3, r7, r1
 8000854:	2200      	movs	r2, #0
 8000856:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000858:	187b      	adds	r3, r7, r1
 800085a:	2101      	movs	r1, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f002 f941 	bl	8002ae4 <HAL_RCC_ClockConfig>
 8000862:	1e03      	subs	r3, r0, #0
 8000864:	d001      	beq.n	800086a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000866:	f000 fbd9 	bl	800101c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2220      	movs	r2, #32
 800086e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fa85 	bl	8002d88 <HAL_RCCEx_PeriphCLKConfig>
 800087e:	1e03      	subs	r3, r0, #0
 8000880:	d001      	beq.n	8000886 <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000882:	f000 fbcb 	bl	800101c <Error_Handler>
  }
}
 8000886:	46c0      	nop			; (mov r8, r8)
 8000888:	46bd      	mov	sp, r7
 800088a:	b017      	add	sp, #92	; 0x5c
 800088c:	bd90      	pop	{r4, r7, pc}
	...

08000890 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000894:	4b1b      	ldr	r3, [pc, #108]	; (8000904 <MX_I2C1_Init+0x74>)
 8000896:	4a1c      	ldr	r2, [pc, #112]	; (8000908 <MX_I2C1_Init+0x78>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800089a:	4b1a      	ldr	r3, [pc, #104]	; (8000904 <MX_I2C1_Init+0x74>)
 800089c:	4a1b      	ldr	r2, [pc, #108]	; (800090c <MX_I2C1_Init+0x7c>)
 800089e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80008a0:	4b18      	ldr	r3, [pc, #96]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80008a6:	4b17      	ldr	r3, [pc, #92]	; (8000904 <MX_I2C1_Init+0x74>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80008ac:	4b15      	ldr	r3, [pc, #84]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80008b2:	4b14      	ldr	r3, [pc, #80]	; (8000904 <MX_I2C1_Init+0x74>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80008b8:	4b12      	ldr	r3, [pc, #72]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80008be:	4b11      	ldr	r3, [pc, #68]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80008c4:	4b0f      	ldr	r3, [pc, #60]	; (8000904 <MX_I2C1_Init+0x74>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80008ca:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <MX_I2C1_Init+0x74>)
 80008cc:	0018      	movs	r0, r3
 80008ce:	f001 f99f 	bl	8001c10 <HAL_I2C_Init>
 80008d2:	1e03      	subs	r3, r0, #0
 80008d4:	d001      	beq.n	80008da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80008d6:	f000 fba1 	bl	800101c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80008da:	4b0a      	ldr	r3, [pc, #40]	; (8000904 <MX_I2C1_Init+0x74>)
 80008dc:	2100      	movs	r1, #0
 80008de:	0018      	movs	r0, r3
 80008e0:	f001 fd4e 	bl	8002380 <HAL_I2CEx_ConfigAnalogFilter>
 80008e4:	1e03      	subs	r3, r0, #0
 80008e6:	d001      	beq.n	80008ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80008e8:	f000 fb98 	bl	800101c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <MX_I2C1_Init+0x74>)
 80008ee:	2100      	movs	r1, #0
 80008f0:	0018      	movs	r0, r3
 80008f2:	f001 fd91 	bl	8002418 <HAL_I2CEx_ConfigDigitalFilter>
 80008f6:	1e03      	subs	r3, r0, #0
 80008f8:	d001      	beq.n	80008fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80008fa:	f000 fb8f 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80008fe:	46c0      	nop			; (mov r8, r8)
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	2000008c 	.word	0x2000008c
 8000908:	40005400 	.word	0x40005400
 800090c:	2000090e 	.word	0x2000090e

08000910 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000914:	4b14      	ldr	r3, [pc, #80]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000916:	4a15      	ldr	r2, [pc, #84]	; (800096c <MX_USART2_UART_Init+0x5c>)
 8000918:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800091a:	4b13      	ldr	r3, [pc, #76]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800091c:	2296      	movs	r2, #150	; 0x96
 800091e:	0192      	lsls	r2, r2, #6
 8000920:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000924:	2200      	movs	r2, #0
 8000926:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000928:	4b0f      	ldr	r3, [pc, #60]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800092e:	4b0e      	ldr	r3, [pc, #56]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000934:	4b0c      	ldr	r3, [pc, #48]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000936:	220c      	movs	r2, #12
 8000938:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800093a:	4b0b      	ldr	r3, [pc, #44]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800093c:	2200      	movs	r2, #0
 800093e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000940:	4b09      	ldr	r3, [pc, #36]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000946:	4b08      	ldr	r3, [pc, #32]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000948:	2200      	movs	r2, #0
 800094a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800094c:	4b06      	ldr	r3, [pc, #24]	; (8000968 <MX_USART2_UART_Init+0x58>)
 800094e:	2200      	movs	r2, #0
 8000950:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000952:	4b05      	ldr	r3, [pc, #20]	; (8000968 <MX_USART2_UART_Init+0x58>)
 8000954:	0018      	movs	r0, r3
 8000956:	f002 faf5 	bl	8002f44 <HAL_UART_Init>
 800095a:	1e03      	subs	r3, r0, #0
 800095c:	d001      	beq.n	8000962 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800095e:	f000 fb5d 	bl	800101c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000962:	46c0      	nop			; (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	200000d8 	.word	0x200000d8
 800096c:	40004400 	.word	0x40004400

08000970 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000976:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <MX_DMA_Init+0x38>)
 8000978:	695a      	ldr	r2, [r3, #20]
 800097a:	4b0b      	ldr	r3, [pc, #44]	; (80009a8 <MX_DMA_Init+0x38>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	615a      	str	r2, [r3, #20]
 8000982:	4b09      	ldr	r3, [pc, #36]	; (80009a8 <MX_DMA_Init+0x38>)
 8000984:	695b      	ldr	r3, [r3, #20]
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_IRQn, 0, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	2100      	movs	r1, #0
 8000992:	200b      	movs	r0, #11
 8000994:	f000 fdde 	bl	8001554 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_IRQn);
 8000998:	200b      	movs	r0, #11
 800099a:	f000 fdf0 	bl	800157e <HAL_NVIC_EnableIRQ>

}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	b002      	add	sp, #8
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	46c0      	nop			; (mov r8, r8)
 80009a8:	40021000 	.word	0x40021000

080009ac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b08b      	sub	sp, #44	; 0x2c
 80009b0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b2:	2414      	movs	r4, #20
 80009b4:	193b      	adds	r3, r7, r4
 80009b6:	0018      	movs	r0, r3
 80009b8:	2314      	movs	r3, #20
 80009ba:	001a      	movs	r2, r3
 80009bc:	2100      	movs	r1, #0
 80009be:	f003 fa89 	bl	8003ed4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009c2:	4b34      	ldr	r3, [pc, #208]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009c4:	695a      	ldr	r2, [r3, #20]
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009c8:	2180      	movs	r1, #128	; 0x80
 80009ca:	03c9      	lsls	r1, r1, #15
 80009cc:	430a      	orrs	r2, r1
 80009ce:	615a      	str	r2, [r3, #20]
 80009d0:	4b30      	ldr	r3, [pc, #192]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009d2:	695a      	ldr	r2, [r3, #20]
 80009d4:	2380      	movs	r3, #128	; 0x80
 80009d6:	03db      	lsls	r3, r3, #15
 80009d8:	4013      	ands	r3, r2
 80009da:	613b      	str	r3, [r7, #16]
 80009dc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009de:	4b2d      	ldr	r3, [pc, #180]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009e0:	695a      	ldr	r2, [r3, #20]
 80009e2:	4b2c      	ldr	r3, [pc, #176]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	0289      	lsls	r1, r1, #10
 80009e8:	430a      	orrs	r2, r1
 80009ea:	615a      	str	r2, [r3, #20]
 80009ec:	4b29      	ldr	r3, [pc, #164]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009ee:	695a      	ldr	r2, [r3, #20]
 80009f0:	2380      	movs	r3, #128	; 0x80
 80009f2:	029b      	lsls	r3, r3, #10
 80009f4:	4013      	ands	r3, r2
 80009f6:	60fb      	str	r3, [r7, #12]
 80009f8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009fa:	4b26      	ldr	r3, [pc, #152]	; (8000a94 <MX_GPIO_Init+0xe8>)
 80009fc:	695a      	ldr	r2, [r3, #20]
 80009fe:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0309      	lsls	r1, r1, #12
 8000a04:	430a      	orrs	r2, r1
 8000a06:	615a      	str	r2, [r3, #20]
 8000a08:	4b22      	ldr	r3, [pc, #136]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a0a:	695a      	ldr	r2, [r3, #20]
 8000a0c:	2380      	movs	r3, #128	; 0x80
 8000a0e:	031b      	lsls	r3, r3, #12
 8000a10:	4013      	ands	r3, r2
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a16:	4b1f      	ldr	r3, [pc, #124]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a18:	695a      	ldr	r2, [r3, #20]
 8000a1a:	4b1e      	ldr	r3, [pc, #120]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a1c:	2180      	movs	r1, #128	; 0x80
 8000a1e:	02c9      	lsls	r1, r1, #11
 8000a20:	430a      	orrs	r2, r1
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	4b1b      	ldr	r3, [pc, #108]	; (8000a94 <MX_GPIO_Init+0xe8>)
 8000a26:	695a      	ldr	r2, [r3, #20]
 8000a28:	2380      	movs	r3, #128	; 0x80
 8000a2a:	02db      	lsls	r3, r3, #11
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	607b      	str	r3, [r7, #4]
 8000a30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LD4_Pin|LD3_Pin, GPIO_PIN_RESET);
 8000a32:	23c0      	movs	r3, #192	; 0xc0
 8000a34:	009b      	lsls	r3, r3, #2
 8000a36:	4818      	ldr	r0, [pc, #96]	; (8000a98 <MX_GPIO_Init+0xec>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	0019      	movs	r1, r3
 8000a3c:	f001 f8b0 	bl	8001ba0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2201      	movs	r2, #1
 8000a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2290      	movs	r2, #144	; 0x90
 8000a4a:	0352      	lsls	r2, r2, #13
 8000a4c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4e:	193b      	adds	r3, r7, r4
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a54:	193a      	adds	r2, r7, r4
 8000a56:	2390      	movs	r3, #144	; 0x90
 8000a58:	05db      	lsls	r3, r3, #23
 8000a5a:	0011      	movs	r1, r2
 8000a5c:	0018      	movs	r0, r3
 8000a5e:	f000 ff2f 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin;
 8000a62:	0021      	movs	r1, r4
 8000a64:	187b      	adds	r3, r7, r1
 8000a66:	22c0      	movs	r2, #192	; 0xc0
 8000a68:	0092      	lsls	r2, r2, #2
 8000a6a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a6c:	187b      	adds	r3, r7, r1
 8000a6e:	2201      	movs	r2, #1
 8000a70:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	187b      	adds	r3, r7, r1
 8000a74:	2200      	movs	r2, #0
 8000a76:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a78:	187b      	adds	r3, r7, r1
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a7e:	187b      	adds	r3, r7, r1
 8000a80:	4a05      	ldr	r2, [pc, #20]	; (8000a98 <MX_GPIO_Init+0xec>)
 8000a82:	0019      	movs	r1, r3
 8000a84:	0010      	movs	r0, r2
 8000a86:	f000 ff1b 	bl	80018c0 <HAL_GPIO_Init>

}
 8000a8a:	46c0      	nop			; (mov r8, r8)
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	b00b      	add	sp, #44	; 0x2c
 8000a90:	bd90      	pop	{r4, r7, pc}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	40021000 	.word	0x40021000
 8000a98:	48000800 	.word	0x48000800

08000a9c <pause_sec>:

/* USER CODE BEGIN 4 */
void pause_sec(float x)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b087      	sub	sp, #28
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
	/* Delay program execution for x seconds */
	//TASK 2

	//declare loop variables
	int i, j, k= 0;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	60fb      	str	r3, [r7, #12]
	/*
	 * run through 2 for loops incrementing counter to ensure loop runs (no actual impact on code)
	 * Delay 1 * Delay 2 delays for 1 second.
	 * Multiplying by x gives the delay for x seconds
	 */
	for (i = 0; i < DELAY1; i++) {
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
 8000aac:	e01a      	b.n	8000ae4 <pause_sec+0x48>
		for(j = 0; j < DELAY2*x; j++) { //
 8000aae:	2300      	movs	r3, #0
 8000ab0:	613b      	str	r3, [r7, #16]
 8000ab2:	e005      	b.n	8000ac0 <pause_sec+0x24>
			k++; // this is added to ensure that the loop does run
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	3301      	adds	r3, #1
 8000ab8:	60fb      	str	r3, [r7, #12]
		for(j = 0; j < DELAY2*x; j++) { //
 8000aba:	693b      	ldr	r3, [r7, #16]
 8000abc:	3301      	adds	r3, #1
 8000abe:	613b      	str	r3, [r7, #16]
 8000ac0:	6938      	ldr	r0, [r7, #16]
 8000ac2:	f7ff fdc7 	bl	8000654 <__aeabi_i2f>
 8000ac6:	1c04      	adds	r4, r0, #0
 8000ac8:	490b      	ldr	r1, [pc, #44]	; (8000af8 <pause_sec+0x5c>)
 8000aca:	6878      	ldr	r0, [r7, #4]
 8000acc:	f7ff fc9c 	bl	8000408 <__aeabi_fmul>
 8000ad0:	1c03      	adds	r3, r0, #0
 8000ad2:	1c19      	adds	r1, r3, #0
 8000ad4:	1c20      	adds	r0, r4, #0
 8000ad6:	f7ff fbbf 	bl	8000258 <__aeabi_fcmplt>
 8000ada:	1e03      	subs	r3, r0, #0
 8000adc:	d1ea      	bne.n	8000ab4 <pause_sec+0x18>
	for (i = 0; i < DELAY1; i++) {
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	3301      	adds	r3, #1
 8000ae2:	617b      	str	r3, [r7, #20]
 8000ae4:	697b      	ldr	r3, [r7, #20]
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <pause_sec+0x60>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	dde0      	ble.n	8000aae <pause_sec+0x12>
		}
	}
}
 8000aec:	46c0      	nop			; (mov r8, r8)
 8000aee:	46c0      	nop			; (mov r8, r8)
 8000af0:	46bd      	mov	sp, r7
 8000af2:	b007      	add	sp, #28
 8000af4:	bd90      	pop	{r4, r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	42dc0000 	.word	0x42dc0000
 8000afc:	00000275 	.word	0x00000275

08000b00 <bcdToDec>:
	return bcd;

}

int bcdToDec(uint8_t val)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b084      	sub	sp, #16
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	0002      	movs	r2, r0
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
	/* BCD to DEC calculation explained:
	 * calculate the decimal value from the BCD value by dividing the dec value by 10 and
	 * shifting the result 4 bits left. The result of this is added to the value of the BCD
	 * value mod 10 (remainder when dividing by 10)
	 */
	uint8_t dec = (val>>4) * 10 + (val & 0x0F);
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	091b      	lsrs	r3, r3, #4
 8000b12:	b2db      	uxtb	r3, r3
 8000b14:	1c1a      	adds	r2, r3, #0
 8000b16:	0092      	lsls	r2, r2, #2
 8000b18:	18d3      	adds	r3, r2, r3
 8000b1a:	18db      	adds	r3, r3, r3
 8000b1c:	b2d9      	uxtb	r1, r3
 8000b1e:	1dfb      	adds	r3, r7, #7
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	220f      	movs	r2, #15
 8000b24:	4013      	ands	r3, r2
 8000b26:	b2da      	uxtb	r2, r3
 8000b28:	200f      	movs	r0, #15
 8000b2a:	183b      	adds	r3, r7, r0
 8000b2c:	188a      	adds	r2, r1, r2
 8000b2e:	701a      	strb	r2, [r3, #0]
    return dec;
 8000b30:	183b      	adds	r3, r7, r0
 8000b32:	781b      	ldrb	r3, [r3, #0]

}
 8000b34:	0018      	movs	r0, r3
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b004      	add	sp, #16
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <getTime>:
    HAL_I2C_Mem_Write(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, set_time, 7, 1000);

}

void getTime (void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b086      	sub	sp, #24
 8000b40:	af04      	add	r7, sp, #16
	//TASK 4
	uint8_t get_time[7]; // array to store RTC time in

	//Read the time from memory
	//DS3231_ADDRES is defined in constants as 0xD0, REG_SIZE is defined as 1,  FIRST_REG is defined as 0
	HAL_I2C_Mem_Read(&hi2c1, DS3231_ADDRESS, FIRST_REG, REG_SIZE, get_time, 7, 1000);
 8000b42:	4828      	ldr	r0, [pc, #160]	; (8000be4 <getTime+0xa8>)
 8000b44:	23fa      	movs	r3, #250	; 0xfa
 8000b46:	009b      	lsls	r3, r3, #2
 8000b48:	9302      	str	r3, [sp, #8]
 8000b4a:	2307      	movs	r3, #7
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	003b      	movs	r3, r7
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	2301      	movs	r3, #1
 8000b54:	2200      	movs	r2, #0
 8000b56:	21d0      	movs	r1, #208	; 0xd0
 8000b58:	f001 f8f0 	bl	8001d3c <HAL_I2C_Mem_Read>

	//Update the TIME structure using the values from the array above
	//values must be converted from BCD to decimal
	time.seconds=bcdToDec(get_time[0]);
 8000b5c:	003b      	movs	r3, r7
 8000b5e:	781b      	ldrb	r3, [r3, #0]
 8000b60:	0018      	movs	r0, r3
 8000b62:	f7ff ffcd 	bl	8000b00 <bcdToDec>
 8000b66:	0003      	movs	r3, r0
 8000b68:	b2da      	uxtb	r2, r3
 8000b6a:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <getTime+0xac>)
 8000b6c:	701a      	strb	r2, [r3, #0]
	time.minutes=bcdToDec(get_time[1]);
 8000b6e:	003b      	movs	r3, r7
 8000b70:	785b      	ldrb	r3, [r3, #1]
 8000b72:	0018      	movs	r0, r3
 8000b74:	f7ff ffc4 	bl	8000b00 <bcdToDec>
 8000b78:	0003      	movs	r3, r0
 8000b7a:	b2da      	uxtb	r2, r3
 8000b7c:	4b1a      	ldr	r3, [pc, #104]	; (8000be8 <getTime+0xac>)
 8000b7e:	705a      	strb	r2, [r3, #1]
	time.hour=bcdToDec(get_time[2]);
 8000b80:	003b      	movs	r3, r7
 8000b82:	789b      	ldrb	r3, [r3, #2]
 8000b84:	0018      	movs	r0, r3
 8000b86:	f7ff ffbb 	bl	8000b00 <bcdToDec>
 8000b8a:	0003      	movs	r3, r0
 8000b8c:	b2da      	uxtb	r2, r3
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <getTime+0xac>)
 8000b90:	709a      	strb	r2, [r3, #2]
	time.dayofweek=bcdToDec(get_time[3]);
 8000b92:	003b      	movs	r3, r7
 8000b94:	78db      	ldrb	r3, [r3, #3]
 8000b96:	0018      	movs	r0, r3
 8000b98:	f7ff ffb2 	bl	8000b00 <bcdToDec>
 8000b9c:	0003      	movs	r3, r0
 8000b9e:	b2da      	uxtb	r2, r3
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <getTime+0xac>)
 8000ba2:	70da      	strb	r2, [r3, #3]
	time.dayofmonth=bcdToDec(get_time[4]);
 8000ba4:	003b      	movs	r3, r7
 8000ba6:	791b      	ldrb	r3, [r3, #4]
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f7ff ffa9 	bl	8000b00 <bcdToDec>
 8000bae:	0003      	movs	r3, r0
 8000bb0:	b2da      	uxtb	r2, r3
 8000bb2:	4b0d      	ldr	r3, [pc, #52]	; (8000be8 <getTime+0xac>)
 8000bb4:	711a      	strb	r2, [r3, #4]
	time.month=bcdToDec(get_time[5]);
 8000bb6:	003b      	movs	r3, r7
 8000bb8:	795b      	ldrb	r3, [r3, #5]
 8000bba:	0018      	movs	r0, r3
 8000bbc:	f7ff ffa0 	bl	8000b00 <bcdToDec>
 8000bc0:	0003      	movs	r3, r0
 8000bc2:	b2da      	uxtb	r2, r3
 8000bc4:	4b08      	ldr	r3, [pc, #32]	; (8000be8 <getTime+0xac>)
 8000bc6:	715a      	strb	r2, [r3, #5]
	time.year=bcdToDec(get_time[6]);
 8000bc8:	003b      	movs	r3, r7
 8000bca:	799b      	ldrb	r3, [r3, #6]
 8000bcc:	0018      	movs	r0, r3
 8000bce:	f7ff ff97 	bl	8000b00 <bcdToDec>
 8000bd2:	0003      	movs	r3, r0
 8000bd4:	b2da      	uxtb	r2, r3
 8000bd6:	4b04      	ldr	r3, [pc, #16]	; (8000be8 <getTime+0xac>)
 8000bd8:	719a      	strb	r2, [r3, #6]

}
 8000bda:	46c0      	nop			; (mov r8, r8)
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	b002      	add	sp, #8
 8000be0:	bd80      	pop	{r7, pc}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	2000008c 	.word	0x2000008c
 8000be8:	200001a0 	.word	0x200001a0

08000bec <epochFromTime>:

int epochFromTime(TIME time){
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	003b      	movs	r3, r7
 8000bf4:	6018      	str	r0, [r3, #0]
 8000bf6:	6059      	str	r1, [r3, #4]
    /* Convert time to UNIX epoch time (leap years are ignored and 2022 is used as reference)*/
	//TASK 5

	//extract the individual parts of the time structure
	uint8_t s = time.seconds;
 8000bf8:	2316      	movs	r3, #22
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	003a      	movs	r2, r7
 8000bfe:	7812      	ldrb	r2, [r2, #0]
 8000c00:	701a      	strb	r2, [r3, #0]
	uint8_t min = time.minutes;
 8000c02:	2315      	movs	r3, #21
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	003a      	movs	r2, r7
 8000c08:	7852      	ldrb	r2, [r2, #1]
 8000c0a:	701a      	strb	r2, [r3, #0]
	uint8_t h = time.hour;
 8000c0c:	2314      	movs	r3, #20
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	003a      	movs	r2, r7
 8000c12:	7892      	ldrb	r2, [r2, #2]
 8000c14:	701a      	strb	r2, [r3, #0]
	uint8_t dow = time.dayofweek;
 8000c16:	2313      	movs	r3, #19
 8000c18:	18fb      	adds	r3, r7, r3
 8000c1a:	003a      	movs	r2, r7
 8000c1c:	78d2      	ldrb	r2, [r2, #3]
 8000c1e:	701a      	strb	r2, [r3, #0]
	uint8_t dom = time.dayofmonth;
 8000c20:	2112      	movs	r1, #18
 8000c22:	187b      	adds	r3, r7, r1
 8000c24:	003a      	movs	r2, r7
 8000c26:	7912      	ldrb	r2, [r2, #4]
 8000c28:	701a      	strb	r2, [r3, #0]
	uint8_t month = time.month;
 8000c2a:	2011      	movs	r0, #17
 8000c2c:	183b      	adds	r3, r7, r0
 8000c2e:	003a      	movs	r2, r7
 8000c30:	7952      	ldrb	r2, [r2, #5]
 8000c32:	701a      	strb	r2, [r3, #0]
	uint8_t year = time.year;
 8000c34:	2310      	movs	r3, #16
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	003a      	movs	r2, r7
 8000c3a:	7992      	ldrb	r2, [r2, #6]
 8000c3c:	701a      	strb	r2, [r3, #0]

	//add the day of the month to total days
	uint8_t totDays = dom;
 8000c3e:	2317      	movs	r3, #23
 8000c40:	18fb      	adds	r3, r7, r3
 8000c42:	187a      	adds	r2, r7, r1
 8000c44:	7812      	ldrb	r2, [r2, #0]
 8000c46:	701a      	strb	r2, [r3, #0]

	/*
	 * Switch statement to add the number of days in between a day
	 */
	//add number of days for all the months before that month
	switch(month){
 8000c48:	183b      	adds	r3, r7, r0
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	2b0c      	cmp	r3, #12
 8000c4e:	d851      	bhi.n	8000cf4 <epochFromTime+0x108>
 8000c50:	009a      	lsls	r2, r3, #2
 8000c52:	4b4b      	ldr	r3, [pc, #300]	; (8000d80 <epochFromTime+0x194>)
 8000c54:	18d3      	adds	r3, r2, r3
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	469f      	mov	pc, r3
		case 1:
			break;
		case 2:
			totDays += 31;
 8000c5a:	2217      	movs	r2, #23
 8000c5c:	18bb      	adds	r3, r7, r2
 8000c5e:	18ba      	adds	r2, r7, r2
 8000c60:	7812      	ldrb	r2, [r2, #0]
 8000c62:	321f      	adds	r2, #31
 8000c64:	701a      	strb	r2, [r3, #0]
			break;
 8000c66:	e04c      	b.n	8000d02 <epochFromTime+0x116>
		case 3:
			totDays += (31+28);
 8000c68:	2217      	movs	r2, #23
 8000c6a:	18bb      	adds	r3, r7, r2
 8000c6c:	18ba      	adds	r2, r7, r2
 8000c6e:	7812      	ldrb	r2, [r2, #0]
 8000c70:	323b      	adds	r2, #59	; 0x3b
 8000c72:	701a      	strb	r2, [r3, #0]
			break;
 8000c74:	e045      	b.n	8000d02 <epochFromTime+0x116>
		case 4:
			totDays += (31*2+28);
 8000c76:	2217      	movs	r2, #23
 8000c78:	18bb      	adds	r3, r7, r2
 8000c7a:	18ba      	adds	r2, r7, r2
 8000c7c:	7812      	ldrb	r2, [r2, #0]
 8000c7e:	325a      	adds	r2, #90	; 0x5a
 8000c80:	701a      	strb	r2, [r3, #0]
			break;
 8000c82:	e03e      	b.n	8000d02 <epochFromTime+0x116>
		case 5:
			totDays += (31*2+28+30);
 8000c84:	2217      	movs	r2, #23
 8000c86:	18bb      	adds	r3, r7, r2
 8000c88:	18ba      	adds	r2, r7, r2
 8000c8a:	7812      	ldrb	r2, [r2, #0]
 8000c8c:	3278      	adds	r2, #120	; 0x78
 8000c8e:	701a      	strb	r2, [r3, #0]
			break;
 8000c90:	e037      	b.n	8000d02 <epochFromTime+0x116>
		case 6:
			totDays += (31*3+28+30);
 8000c92:	2217      	movs	r2, #23
 8000c94:	18bb      	adds	r3, r7, r2
 8000c96:	18ba      	adds	r2, r7, r2
 8000c98:	7812      	ldrb	r2, [r2, #0]
 8000c9a:	3a69      	subs	r2, #105	; 0x69
 8000c9c:	701a      	strb	r2, [r3, #0]
			break;
 8000c9e:	e030      	b.n	8000d02 <epochFromTime+0x116>
		case 7:
			totDays += (31*3+28+30*2);
 8000ca0:	2217      	movs	r2, #23
 8000ca2:	18bb      	adds	r3, r7, r2
 8000ca4:	18ba      	adds	r2, r7, r2
 8000ca6:	7812      	ldrb	r2, [r2, #0]
 8000ca8:	3a4b      	subs	r2, #75	; 0x4b
 8000caa:	701a      	strb	r2, [r3, #0]
			break;
 8000cac:	e029      	b.n	8000d02 <epochFromTime+0x116>
		case 8:
			totDays += (31*4+28+30*2);
 8000cae:	2217      	movs	r2, #23
 8000cb0:	18bb      	adds	r3, r7, r2
 8000cb2:	18ba      	adds	r2, r7, r2
 8000cb4:	7812      	ldrb	r2, [r2, #0]
 8000cb6:	3a2c      	subs	r2, #44	; 0x2c
 8000cb8:	701a      	strb	r2, [r3, #0]
			break;
 8000cba:	e022      	b.n	8000d02 <epochFromTime+0x116>
		case 9:
			totDays += (31*5+28+30*2);
 8000cbc:	2217      	movs	r2, #23
 8000cbe:	18bb      	adds	r3, r7, r2
 8000cc0:	18ba      	adds	r2, r7, r2
 8000cc2:	7812      	ldrb	r2, [r2, #0]
 8000cc4:	3a0d      	subs	r2, #13
 8000cc6:	701a      	strb	r2, [r3, #0]
			break;
 8000cc8:	e01b      	b.n	8000d02 <epochFromTime+0x116>
		case 10:
			totDays += (31*5+28+30*3);
 8000cca:	2217      	movs	r2, #23
 8000ccc:	18bb      	adds	r3, r7, r2
 8000cce:	18ba      	adds	r2, r7, r2
 8000cd0:	7812      	ldrb	r2, [r2, #0]
 8000cd2:	3211      	adds	r2, #17
 8000cd4:	701a      	strb	r2, [r3, #0]
			break;
 8000cd6:	e014      	b.n	8000d02 <epochFromTime+0x116>
		case 11:
			totDays += (31*6+28+30*3);
 8000cd8:	2217      	movs	r2, #23
 8000cda:	18bb      	adds	r3, r7, r2
 8000cdc:	18ba      	adds	r2, r7, r2
 8000cde:	7812      	ldrb	r2, [r2, #0]
 8000ce0:	3230      	adds	r2, #48	; 0x30
 8000ce2:	701a      	strb	r2, [r3, #0]
			break;
 8000ce4:	e00d      	b.n	8000d02 <epochFromTime+0x116>
	    case 12:
	    	totDays += (31*6+28+30*4);
 8000ce6:	2217      	movs	r2, #23
 8000ce8:	18bb      	adds	r3, r7, r2
 8000cea:	18ba      	adds	r2, r7, r2
 8000cec:	7812      	ldrb	r2, [r2, #0]
 8000cee:	324e      	adds	r2, #78	; 0x4e
 8000cf0:	701a      	strb	r2, [r3, #0]
	    	break;
 8000cf2:	e006      	b.n	8000d02 <epochFromTime+0x116>
		default:
			totDays = totDays;
 8000cf4:	2217      	movs	r2, #23
 8000cf6:	18bb      	adds	r3, r7, r2
 8000cf8:	18ba      	adds	r2, r7, r2
 8000cfa:	7812      	ldrb	r2, [r2, #0]
 8000cfc:	701a      	strb	r2, [r3, #0]
 8000cfe:	e000      	b.n	8000d02 <epochFromTime+0x116>
			break;
 8000d00:	46c0      	nop			; (mov r8, r8)
	}

	//add up the total seconds from Saturday, January 1, 2022 12:00:00 AM GMT+02:00 until given time
	//there are 31536000 seconds in a year, 86400 seconds in a day, 3600 seconds in an hour and 60
	//seconds in a minute
	int totSec = (year-22)*31536000 + (totDays*86400) + (h*3600) + (min*60) + s;
 8000d02:	2310      	movs	r3, #16
 8000d04:	18fb      	adds	r3, r7, r3
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	3b16      	subs	r3, #22
 8000d0a:	001a      	movs	r2, r3
 8000d0c:	0013      	movs	r3, r2
 8000d0e:	025b      	lsls	r3, r3, #9
 8000d10:	189b      	adds	r3, r3, r2
 8000d12:	009b      	lsls	r3, r3, #2
 8000d14:	189b      	adds	r3, r3, r2
 8000d16:	00db      	lsls	r3, r3, #3
 8000d18:	189b      	adds	r3, r3, r2
 8000d1a:	011a      	lsls	r2, r3, #4
 8000d1c:	1ad2      	subs	r2, r2, r3
 8000d1e:	01d3      	lsls	r3, r2, #7
 8000d20:	001a      	movs	r2, r3
 8000d22:	0011      	movs	r1, r2
 8000d24:	2317      	movs	r3, #23
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	781a      	ldrb	r2, [r3, #0]
 8000d2a:	0013      	movs	r3, r2
 8000d2c:	005b      	lsls	r3, r3, #1
 8000d2e:	189b      	adds	r3, r3, r2
 8000d30:	011a      	lsls	r2, r3, #4
 8000d32:	1ad2      	subs	r2, r2, r3
 8000d34:	0113      	lsls	r3, r2, #4
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	01db      	lsls	r3, r3, #7
 8000d3a:	18c9      	adds	r1, r1, r3
 8000d3c:	2314      	movs	r3, #20
 8000d3e:	18fb      	adds	r3, r7, r3
 8000d40:	781a      	ldrb	r2, [r3, #0]
 8000d42:	0013      	movs	r3, r2
 8000d44:	011b      	lsls	r3, r3, #4
 8000d46:	1a9b      	subs	r3, r3, r2
 8000d48:	011a      	lsls	r2, r3, #4
 8000d4a:	1ad2      	subs	r2, r2, r3
 8000d4c:	0113      	lsls	r3, r2, #4
 8000d4e:	001a      	movs	r2, r3
 8000d50:	0013      	movs	r3, r2
 8000d52:	18c9      	adds	r1, r1, r3
 8000d54:	2315      	movs	r3, #21
 8000d56:	18fb      	adds	r3, r7, r3
 8000d58:	781a      	ldrb	r2, [r3, #0]
 8000d5a:	0013      	movs	r3, r2
 8000d5c:	011b      	lsls	r3, r3, #4
 8000d5e:	1a9b      	subs	r3, r3, r2
 8000d60:	009b      	lsls	r3, r3, #2
 8000d62:	18ca      	adds	r2, r1, r3
 8000d64:	2316      	movs	r3, #22
 8000d66:	18fb      	adds	r3, r7, r3
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	18d3      	adds	r3, r2, r3
 8000d6c:	60fb      	str	r3, [r7, #12]

	/* return the sum of the epoch time on Saturday, January 1, 2022 12:00:00 AM GMT+02:00 and the total
	 * seconds after that */

	return (EPOCH_2022 + totSec) ;
 8000d6e:	68fb      	ldr	r3, [r7, #12]
 8000d70:	4a04      	ldr	r2, [pc, #16]	; (8000d84 <epochFromTime+0x198>)
 8000d72:	4694      	mov	ip, r2
 8000d74:	4463      	add	r3, ip
}
 8000d76:	0018      	movs	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b006      	add	sp, #24
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	46c0      	nop			; (mov r8, r8)
 8000d80:	080049b4 	.word	0x080049b4
 8000d84:	61cf7d60 	.word	0x61cf7d60

08000d88 <rtcPrint>:

void rtcPrint(TIME time) {
 8000d88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d8a:	b089      	sub	sp, #36	; 0x24
 8000d8c:	af04      	add	r7, sp, #16
 8000d8e:	003b      	movs	r3, r7
 8000d90:	6018      	str	r0, [r3, #0]
 8000d92:	6059      	str	r1, [r3, #4]
	/* Format RTC time to nice string representation for UART transmission*/
	// Task 6

	//extract the individual parts of the time structure
	uint8_t s = time.seconds;
 8000d94:	230f      	movs	r3, #15
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	003a      	movs	r2, r7
 8000d9a:	7812      	ldrb	r2, [r2, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
	uint8_t min = time.minutes;
 8000d9e:	230e      	movs	r3, #14
 8000da0:	18fb      	adds	r3, r7, r3
 8000da2:	003a      	movs	r2, r7
 8000da4:	7852      	ldrb	r2, [r2, #1]
 8000da6:	701a      	strb	r2, [r3, #0]
	uint8_t h = time.hour;
 8000da8:	230d      	movs	r3, #13
 8000daa:	18fb      	adds	r3, r7, r3
 8000dac:	003a      	movs	r2, r7
 8000dae:	7892      	ldrb	r2, [r2, #2]
 8000db0:	701a      	strb	r2, [r3, #0]
	uint8_t dow = time.dayofweek;
 8000db2:	210c      	movs	r1, #12
 8000db4:	187b      	adds	r3, r7, r1
 8000db6:	003a      	movs	r2, r7
 8000db8:	78d2      	ldrb	r2, [r2, #3]
 8000dba:	701a      	strb	r2, [r3, #0]
	uint8_t dom = time.dayofmonth;
 8000dbc:	230b      	movs	r3, #11
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	003a      	movs	r2, r7
 8000dc2:	7912      	ldrb	r2, [r2, #4]
 8000dc4:	701a      	strb	r2, [r3, #0]
	uint8_t month = time.month;
 8000dc6:	230a      	movs	r3, #10
 8000dc8:	18fb      	adds	r3, r7, r3
 8000dca:	003a      	movs	r2, r7
 8000dcc:	7952      	ldrb	r2, [r2, #5]
 8000dce:	701a      	strb	r2, [r3, #0]
	uint8_t year = time.year;
 8000dd0:	2309      	movs	r3, #9
 8000dd2:	18fb      	adds	r3, r7, r3
 8000dd4:	003a      	movs	r2, r7
 8000dd6:	7992      	ldrb	r2, [r2, #6]
 8000dd8:	701a      	strb	r2, [r3, #0]
	/*
	 * tmpRtc holds the formatted RTC time to be transmitted over UART and printed to screen.
	 *
	 * Switch statement formats the RTC time with correct day of week.
	 */
	switch(dow){
 8000dda:	187b      	adds	r3, r7, r1
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b07      	cmp	r3, #7
 8000de0:	d900      	bls.n	8000de4 <rtcPrint+0x5c>
 8000de2:	e0e4      	b.n	8000fae <rtcPrint+0x226>
 8000de4:	009a      	lsls	r2, r3, #2
 8000de6:	4b83      	ldr	r3, [pc, #524]	; (8000ff4 <rtcPrint+0x26c>)
 8000de8:	18d3      	adds	r3, r2, r3
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	469f      	mov	pc, r3
		case 1: {
			sprintf(tmpRtc, "Monday, %02d/%02d/%02d, %02d:%02d:%02d    \n", dom, month, year, h, min, s);
 8000dee:	230b      	movs	r3, #11
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	781e      	ldrb	r6, [r3, #0]
 8000df4:	230a      	movs	r3, #10
 8000df6:	18fb      	adds	r3, r7, r3
 8000df8:	781b      	ldrb	r3, [r3, #0]
 8000dfa:	469c      	mov	ip, r3
 8000dfc:	2309      	movs	r3, #9
 8000dfe:	18fb      	adds	r3, r7, r3
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	220d      	movs	r2, #13
 8000e04:	18ba      	adds	r2, r7, r2
 8000e06:	7812      	ldrb	r2, [r2, #0]
 8000e08:	210e      	movs	r1, #14
 8000e0a:	1879      	adds	r1, r7, r1
 8000e0c:	7809      	ldrb	r1, [r1, #0]
 8000e0e:	200f      	movs	r0, #15
 8000e10:	1838      	adds	r0, r7, r0
 8000e12:	7800      	ldrb	r0, [r0, #0]
 8000e14:	4d78      	ldr	r5, [pc, #480]	; (8000ff8 <rtcPrint+0x270>)
 8000e16:	4c79      	ldr	r4, [pc, #484]	; (8000ffc <rtcPrint+0x274>)
 8000e18:	9003      	str	r0, [sp, #12]
 8000e1a:	9102      	str	r1, [sp, #8]
 8000e1c:	9201      	str	r2, [sp, #4]
 8000e1e:	9300      	str	r3, [sp, #0]
 8000e20:	4663      	mov	r3, ip
 8000e22:	0032      	movs	r2, r6
 8000e24:	0029      	movs	r1, r5
 8000e26:	0020      	movs	r0, r4
 8000e28:	f003 f85c 	bl	8003ee4 <siprintf>
			break;
 8000e2c:	e0de      	b.n	8000fec <rtcPrint+0x264>
		}
		case 2: {
			sprintf(tmpRtc, "Tuesday, %02d/%02d/%02d, %02d:%02d:%02d   \n", dom, month, year, h, min, s);
 8000e2e:	230b      	movs	r3, #11
 8000e30:	18fb      	adds	r3, r7, r3
 8000e32:	781e      	ldrb	r6, [r3, #0]
 8000e34:	230a      	movs	r3, #10
 8000e36:	18fb      	adds	r3, r7, r3
 8000e38:	781b      	ldrb	r3, [r3, #0]
 8000e3a:	469c      	mov	ip, r3
 8000e3c:	2309      	movs	r3, #9
 8000e3e:	18fb      	adds	r3, r7, r3
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	220d      	movs	r2, #13
 8000e44:	18ba      	adds	r2, r7, r2
 8000e46:	7812      	ldrb	r2, [r2, #0]
 8000e48:	210e      	movs	r1, #14
 8000e4a:	1879      	adds	r1, r7, r1
 8000e4c:	7809      	ldrb	r1, [r1, #0]
 8000e4e:	200f      	movs	r0, #15
 8000e50:	1838      	adds	r0, r7, r0
 8000e52:	7800      	ldrb	r0, [r0, #0]
 8000e54:	4d6a      	ldr	r5, [pc, #424]	; (8001000 <rtcPrint+0x278>)
 8000e56:	4c69      	ldr	r4, [pc, #420]	; (8000ffc <rtcPrint+0x274>)
 8000e58:	9003      	str	r0, [sp, #12]
 8000e5a:	9102      	str	r1, [sp, #8]
 8000e5c:	9201      	str	r2, [sp, #4]
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	4663      	mov	r3, ip
 8000e62:	0032      	movs	r2, r6
 8000e64:	0029      	movs	r1, r5
 8000e66:	0020      	movs	r0, r4
 8000e68:	f003 f83c 	bl	8003ee4 <siprintf>
			break;
 8000e6c:	e0be      	b.n	8000fec <rtcPrint+0x264>
		}
		case 3: {
			sprintf(tmpRtc, "Wednesday, %02d/%02d/%02d, %02d:%02d:%02d \n", dom, month, year, h, min, s);
 8000e6e:	230b      	movs	r3, #11
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	781e      	ldrb	r6, [r3, #0]
 8000e74:	230a      	movs	r3, #10
 8000e76:	18fb      	adds	r3, r7, r3
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	469c      	mov	ip, r3
 8000e7c:	2309      	movs	r3, #9
 8000e7e:	18fb      	adds	r3, r7, r3
 8000e80:	781b      	ldrb	r3, [r3, #0]
 8000e82:	220d      	movs	r2, #13
 8000e84:	18ba      	adds	r2, r7, r2
 8000e86:	7812      	ldrb	r2, [r2, #0]
 8000e88:	210e      	movs	r1, #14
 8000e8a:	1879      	adds	r1, r7, r1
 8000e8c:	7809      	ldrb	r1, [r1, #0]
 8000e8e:	200f      	movs	r0, #15
 8000e90:	1838      	adds	r0, r7, r0
 8000e92:	7800      	ldrb	r0, [r0, #0]
 8000e94:	4d5b      	ldr	r5, [pc, #364]	; (8001004 <rtcPrint+0x27c>)
 8000e96:	4c59      	ldr	r4, [pc, #356]	; (8000ffc <rtcPrint+0x274>)
 8000e98:	9003      	str	r0, [sp, #12]
 8000e9a:	9102      	str	r1, [sp, #8]
 8000e9c:	9201      	str	r2, [sp, #4]
 8000e9e:	9300      	str	r3, [sp, #0]
 8000ea0:	4663      	mov	r3, ip
 8000ea2:	0032      	movs	r2, r6
 8000ea4:	0029      	movs	r1, r5
 8000ea6:	0020      	movs	r0, r4
 8000ea8:	f003 f81c 	bl	8003ee4 <siprintf>
			break;
 8000eac:	e09e      	b.n	8000fec <rtcPrint+0x264>
		}
		case 4: {
			sprintf(tmpRtc, "Thursday, %02d/%02d/%02d, %02d:%02d:%02d  \n", dom, month, year, h, min, s);
 8000eae:	230b      	movs	r3, #11
 8000eb0:	18fb      	adds	r3, r7, r3
 8000eb2:	781e      	ldrb	r6, [r3, #0]
 8000eb4:	230a      	movs	r3, #10
 8000eb6:	18fb      	adds	r3, r7, r3
 8000eb8:	781b      	ldrb	r3, [r3, #0]
 8000eba:	469c      	mov	ip, r3
 8000ebc:	2309      	movs	r3, #9
 8000ebe:	18fb      	adds	r3, r7, r3
 8000ec0:	781b      	ldrb	r3, [r3, #0]
 8000ec2:	220d      	movs	r2, #13
 8000ec4:	18ba      	adds	r2, r7, r2
 8000ec6:	7812      	ldrb	r2, [r2, #0]
 8000ec8:	210e      	movs	r1, #14
 8000eca:	1879      	adds	r1, r7, r1
 8000ecc:	7809      	ldrb	r1, [r1, #0]
 8000ece:	200f      	movs	r0, #15
 8000ed0:	1838      	adds	r0, r7, r0
 8000ed2:	7800      	ldrb	r0, [r0, #0]
 8000ed4:	4d4c      	ldr	r5, [pc, #304]	; (8001008 <rtcPrint+0x280>)
 8000ed6:	4c49      	ldr	r4, [pc, #292]	; (8000ffc <rtcPrint+0x274>)
 8000ed8:	9003      	str	r0, [sp, #12]
 8000eda:	9102      	str	r1, [sp, #8]
 8000edc:	9201      	str	r2, [sp, #4]
 8000ede:	9300      	str	r3, [sp, #0]
 8000ee0:	4663      	mov	r3, ip
 8000ee2:	0032      	movs	r2, r6
 8000ee4:	0029      	movs	r1, r5
 8000ee6:	0020      	movs	r0, r4
 8000ee8:	f002 fffc 	bl	8003ee4 <siprintf>
			break;
 8000eec:	e07e      	b.n	8000fec <rtcPrint+0x264>
		}
		case 5: {
			sprintf(tmpRtc, "Friday, %02d/%02d/%02d, %02d:%02d:%02d    \n", dom, month, year, h, min, s);
 8000eee:	230b      	movs	r3, #11
 8000ef0:	18fb      	adds	r3, r7, r3
 8000ef2:	781e      	ldrb	r6, [r3, #0]
 8000ef4:	230a      	movs	r3, #10
 8000ef6:	18fb      	adds	r3, r7, r3
 8000ef8:	781b      	ldrb	r3, [r3, #0]
 8000efa:	469c      	mov	ip, r3
 8000efc:	2309      	movs	r3, #9
 8000efe:	18fb      	adds	r3, r7, r3
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	220d      	movs	r2, #13
 8000f04:	18ba      	adds	r2, r7, r2
 8000f06:	7812      	ldrb	r2, [r2, #0]
 8000f08:	210e      	movs	r1, #14
 8000f0a:	1879      	adds	r1, r7, r1
 8000f0c:	7809      	ldrb	r1, [r1, #0]
 8000f0e:	200f      	movs	r0, #15
 8000f10:	1838      	adds	r0, r7, r0
 8000f12:	7800      	ldrb	r0, [r0, #0]
 8000f14:	4d3d      	ldr	r5, [pc, #244]	; (800100c <rtcPrint+0x284>)
 8000f16:	4c39      	ldr	r4, [pc, #228]	; (8000ffc <rtcPrint+0x274>)
 8000f18:	9003      	str	r0, [sp, #12]
 8000f1a:	9102      	str	r1, [sp, #8]
 8000f1c:	9201      	str	r2, [sp, #4]
 8000f1e:	9300      	str	r3, [sp, #0]
 8000f20:	4663      	mov	r3, ip
 8000f22:	0032      	movs	r2, r6
 8000f24:	0029      	movs	r1, r5
 8000f26:	0020      	movs	r0, r4
 8000f28:	f002 ffdc 	bl	8003ee4 <siprintf>
			break;
 8000f2c:	e05e      	b.n	8000fec <rtcPrint+0x264>
		}
		case 6: {
			sprintf(tmpRtc, "Saturday, %02d/%02d/%02d, %02d:%02d:%02d  \n", dom, month, year, h, min, s);
 8000f2e:	230b      	movs	r3, #11
 8000f30:	18fb      	adds	r3, r7, r3
 8000f32:	781e      	ldrb	r6, [r3, #0]
 8000f34:	230a      	movs	r3, #10
 8000f36:	18fb      	adds	r3, r7, r3
 8000f38:	781b      	ldrb	r3, [r3, #0]
 8000f3a:	469c      	mov	ip, r3
 8000f3c:	2309      	movs	r3, #9
 8000f3e:	18fb      	adds	r3, r7, r3
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	220d      	movs	r2, #13
 8000f44:	18ba      	adds	r2, r7, r2
 8000f46:	7812      	ldrb	r2, [r2, #0]
 8000f48:	210e      	movs	r1, #14
 8000f4a:	1879      	adds	r1, r7, r1
 8000f4c:	7809      	ldrb	r1, [r1, #0]
 8000f4e:	200f      	movs	r0, #15
 8000f50:	1838      	adds	r0, r7, r0
 8000f52:	7800      	ldrb	r0, [r0, #0]
 8000f54:	4d2e      	ldr	r5, [pc, #184]	; (8001010 <rtcPrint+0x288>)
 8000f56:	4c29      	ldr	r4, [pc, #164]	; (8000ffc <rtcPrint+0x274>)
 8000f58:	9003      	str	r0, [sp, #12]
 8000f5a:	9102      	str	r1, [sp, #8]
 8000f5c:	9201      	str	r2, [sp, #4]
 8000f5e:	9300      	str	r3, [sp, #0]
 8000f60:	4663      	mov	r3, ip
 8000f62:	0032      	movs	r2, r6
 8000f64:	0029      	movs	r1, r5
 8000f66:	0020      	movs	r0, r4
 8000f68:	f002 ffbc 	bl	8003ee4 <siprintf>
			break;
 8000f6c:	e03e      	b.n	8000fec <rtcPrint+0x264>
		}
		case 7: {
			sprintf(tmpRtc, "Sunday, %02d/%02d/%02d, %02d:%02d:%02d    \n", dom, month, year, h, min, s);
 8000f6e:	230b      	movs	r3, #11
 8000f70:	18fb      	adds	r3, r7, r3
 8000f72:	781e      	ldrb	r6, [r3, #0]
 8000f74:	230a      	movs	r3, #10
 8000f76:	18fb      	adds	r3, r7, r3
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	469c      	mov	ip, r3
 8000f7c:	2309      	movs	r3, #9
 8000f7e:	18fb      	adds	r3, r7, r3
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	220d      	movs	r2, #13
 8000f84:	18ba      	adds	r2, r7, r2
 8000f86:	7812      	ldrb	r2, [r2, #0]
 8000f88:	210e      	movs	r1, #14
 8000f8a:	1879      	adds	r1, r7, r1
 8000f8c:	7809      	ldrb	r1, [r1, #0]
 8000f8e:	200f      	movs	r0, #15
 8000f90:	1838      	adds	r0, r7, r0
 8000f92:	7800      	ldrb	r0, [r0, #0]
 8000f94:	4d1f      	ldr	r5, [pc, #124]	; (8001014 <rtcPrint+0x28c>)
 8000f96:	4c19      	ldr	r4, [pc, #100]	; (8000ffc <rtcPrint+0x274>)
 8000f98:	9003      	str	r0, [sp, #12]
 8000f9a:	9102      	str	r1, [sp, #8]
 8000f9c:	9201      	str	r2, [sp, #4]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4663      	mov	r3, ip
 8000fa2:	0032      	movs	r2, r6
 8000fa4:	0029      	movs	r1, r5
 8000fa6:	0020      	movs	r0, r4
 8000fa8:	f002 ff9c 	bl	8003ee4 <siprintf>
			break;
 8000fac:	e01e      	b.n	8000fec <rtcPrint+0x264>
		}
		default: {
			sprintf(tmpRtc, "%02d/%02d/%02d, %02d:%02d:%02d            \n", dom, month, year, h, min, s);
 8000fae:	230b      	movs	r3, #11
 8000fb0:	18fb      	adds	r3, r7, r3
 8000fb2:	781e      	ldrb	r6, [r3, #0]
 8000fb4:	230a      	movs	r3, #10
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	469c      	mov	ip, r3
 8000fbc:	2309      	movs	r3, #9
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	220d      	movs	r2, #13
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	7812      	ldrb	r2, [r2, #0]
 8000fc8:	210e      	movs	r1, #14
 8000fca:	1879      	adds	r1, r7, r1
 8000fcc:	7809      	ldrb	r1, [r1, #0]
 8000fce:	200f      	movs	r0, #15
 8000fd0:	1838      	adds	r0, r7, r0
 8000fd2:	7800      	ldrb	r0, [r0, #0]
 8000fd4:	4d10      	ldr	r5, [pc, #64]	; (8001018 <rtcPrint+0x290>)
 8000fd6:	4c09      	ldr	r4, [pc, #36]	; (8000ffc <rtcPrint+0x274>)
 8000fd8:	9003      	str	r0, [sp, #12]
 8000fda:	9102      	str	r1, [sp, #8]
 8000fdc:	9201      	str	r2, [sp, #4]
 8000fde:	9300      	str	r3, [sp, #0]
 8000fe0:	4663      	mov	r3, ip
 8000fe2:	0032      	movs	r2, r6
 8000fe4:	0029      	movs	r1, r5
 8000fe6:	0020      	movs	r0, r4
 8000fe8:	f002 ff7c 	bl	8003ee4 <siprintf>
		}
	}
	return;
 8000fec:	46c0      	nop			; (mov r8, r8)
}
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	b005      	add	sp, #20
 8000ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ff4:	080049e8 	.word	0x080049e8
 8000ff8:	080047f4 	.word	0x080047f4
 8000ffc:	200001a8 	.word	0x200001a8
 8001000:	08004820 	.word	0x08004820
 8001004:	0800484c 	.word	0x0800484c
 8001008:	08004878 	.word	0x08004878
 800100c:	080048a4 	.word	0x080048a4
 8001010:	080048d0 	.word	0x080048d0
 8001014:	080048fc 	.word	0x080048fc
 8001018:	08004928 	.word	0x08004928

0800101c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001020:	b672      	cpsid	i
}
 8001022:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001024:	e7fe      	b.n	8001024 <Error_Handler+0x8>
	...

08001028 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800102e:	4b0f      	ldr	r3, [pc, #60]	; (800106c <HAL_MspInit+0x44>)
 8001030:	699a      	ldr	r2, [r3, #24]
 8001032:	4b0e      	ldr	r3, [pc, #56]	; (800106c <HAL_MspInit+0x44>)
 8001034:	2101      	movs	r1, #1
 8001036:	430a      	orrs	r2, r1
 8001038:	619a      	str	r2, [r3, #24]
 800103a:	4b0c      	ldr	r3, [pc, #48]	; (800106c <HAL_MspInit+0x44>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	2201      	movs	r2, #1
 8001040:	4013      	ands	r3, r2
 8001042:	607b      	str	r3, [r7, #4]
 8001044:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x44>)
 8001048:	69da      	ldr	r2, [r3, #28]
 800104a:	4b08      	ldr	r3, [pc, #32]	; (800106c <HAL_MspInit+0x44>)
 800104c:	2180      	movs	r1, #128	; 0x80
 800104e:	0549      	lsls	r1, r1, #21
 8001050:	430a      	orrs	r2, r1
 8001052:	61da      	str	r2, [r3, #28]
 8001054:	4b05      	ldr	r3, [pc, #20]	; (800106c <HAL_MspInit+0x44>)
 8001056:	69da      	ldr	r2, [r3, #28]
 8001058:	2380      	movs	r3, #128	; 0x80
 800105a:	055b      	lsls	r3, r3, #21
 800105c:	4013      	ands	r3, r2
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	40021000 	.word	0x40021000

08001070 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001070:	b590      	push	{r4, r7, lr}
 8001072:	b08b      	sub	sp, #44	; 0x2c
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	2414      	movs	r4, #20
 800107a:	193b      	adds	r3, r7, r4
 800107c:	0018      	movs	r0, r3
 800107e:	2314      	movs	r3, #20
 8001080:	001a      	movs	r2, r3
 8001082:	2100      	movs	r1, #0
 8001084:	f002 ff26 	bl	8003ed4 <memset>
  if(hi2c->Instance==I2C1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a1c      	ldr	r2, [pc, #112]	; (8001100 <HAL_I2C_MspInit+0x90>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d131      	bne.n	80010f6 <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001092:	4b1c      	ldr	r3, [pc, #112]	; (8001104 <HAL_I2C_MspInit+0x94>)
 8001094:	695a      	ldr	r2, [r3, #20]
 8001096:	4b1b      	ldr	r3, [pc, #108]	; (8001104 <HAL_I2C_MspInit+0x94>)
 8001098:	2180      	movs	r1, #128	; 0x80
 800109a:	02c9      	lsls	r1, r1, #11
 800109c:	430a      	orrs	r2, r1
 800109e:	615a      	str	r2, [r3, #20]
 80010a0:	4b18      	ldr	r3, [pc, #96]	; (8001104 <HAL_I2C_MspInit+0x94>)
 80010a2:	695a      	ldr	r2, [r3, #20]
 80010a4:	2380      	movs	r3, #128	; 0x80
 80010a6:	02db      	lsls	r3, r3, #11
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80010ae:	0021      	movs	r1, r4
 80010b0:	187b      	adds	r3, r7, r1
 80010b2:	22c0      	movs	r2, #192	; 0xc0
 80010b4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010b6:	187b      	adds	r3, r7, r1
 80010b8:	2212      	movs	r2, #18
 80010ba:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010bc:	187b      	adds	r3, r7, r1
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c2:	187b      	adds	r3, r7, r1
 80010c4:	2203      	movs	r2, #3
 80010c6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80010c8:	187b      	adds	r3, r7, r1
 80010ca:	2201      	movs	r2, #1
 80010cc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010ce:	187b      	adds	r3, r7, r1
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <HAL_I2C_MspInit+0x98>)
 80010d2:	0019      	movs	r1, r3
 80010d4:	0010      	movs	r0, r2
 80010d6:	f000 fbf3 	bl	80018c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010da:	4b0a      	ldr	r3, [pc, #40]	; (8001104 <HAL_I2C_MspInit+0x94>)
 80010dc:	69da      	ldr	r2, [r3, #28]
 80010de:	4b09      	ldr	r3, [pc, #36]	; (8001104 <HAL_I2C_MspInit+0x94>)
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	0389      	lsls	r1, r1, #14
 80010e4:	430a      	orrs	r2, r1
 80010e6:	61da      	str	r2, [r3, #28]
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <HAL_I2C_MspInit+0x94>)
 80010ea:	69da      	ldr	r2, [r3, #28]
 80010ec:	2380      	movs	r3, #128	; 0x80
 80010ee:	039b      	lsls	r3, r3, #14
 80010f0:	4013      	ands	r3, r2
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	46bd      	mov	sp, r7
 80010fa:	b00b      	add	sp, #44	; 0x2c
 80010fc:	bd90      	pop	{r4, r7, pc}
 80010fe:	46c0      	nop			; (mov r8, r8)
 8001100:	40005400 	.word	0x40005400
 8001104:	40021000 	.word	0x40021000
 8001108:	48000400 	.word	0x48000400

0800110c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800110c:	b590      	push	{r4, r7, lr}
 800110e:	b08b      	sub	sp, #44	; 0x2c
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001114:	2414      	movs	r4, #20
 8001116:	193b      	adds	r3, r7, r4
 8001118:	0018      	movs	r0, r3
 800111a:	2314      	movs	r3, #20
 800111c:	001a      	movs	r2, r3
 800111e:	2100      	movs	r1, #0
 8001120:	f002 fed8 	bl	8003ed4 <memset>
  if(huart->Instance==USART2)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4a33      	ldr	r2, [pc, #204]	; (80011f8 <HAL_UART_MspInit+0xec>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d160      	bne.n	80011f0 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800112e:	4b33      	ldr	r3, [pc, #204]	; (80011fc <HAL_UART_MspInit+0xf0>)
 8001130:	69da      	ldr	r2, [r3, #28]
 8001132:	4b32      	ldr	r3, [pc, #200]	; (80011fc <HAL_UART_MspInit+0xf0>)
 8001134:	2180      	movs	r1, #128	; 0x80
 8001136:	0289      	lsls	r1, r1, #10
 8001138:	430a      	orrs	r2, r1
 800113a:	61da      	str	r2, [r3, #28]
 800113c:	4b2f      	ldr	r3, [pc, #188]	; (80011fc <HAL_UART_MspInit+0xf0>)
 800113e:	69da      	ldr	r2, [r3, #28]
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	029b      	lsls	r3, r3, #10
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
 8001148:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800114a:	4b2c      	ldr	r3, [pc, #176]	; (80011fc <HAL_UART_MspInit+0xf0>)
 800114c:	695a      	ldr	r2, [r3, #20]
 800114e:	4b2b      	ldr	r3, [pc, #172]	; (80011fc <HAL_UART_MspInit+0xf0>)
 8001150:	2180      	movs	r1, #128	; 0x80
 8001152:	0289      	lsls	r1, r1, #10
 8001154:	430a      	orrs	r2, r1
 8001156:	615a      	str	r2, [r3, #20]
 8001158:	4b28      	ldr	r3, [pc, #160]	; (80011fc <HAL_UART_MspInit+0xf0>)
 800115a:	695a      	ldr	r2, [r3, #20]
 800115c:	2380      	movs	r3, #128	; 0x80
 800115e:	029b      	lsls	r3, r3, #10
 8001160:	4013      	ands	r3, r2
 8001162:	60fb      	str	r3, [r7, #12]
 8001164:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001166:	0021      	movs	r1, r4
 8001168:	187b      	adds	r3, r7, r1
 800116a:	220c      	movs	r2, #12
 800116c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800116e:	187b      	adds	r3, r7, r1
 8001170:	2202      	movs	r2, #2
 8001172:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001174:	187b      	adds	r3, r7, r1
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800117a:	187b      	adds	r3, r7, r1
 800117c:	2203      	movs	r2, #3
 800117e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2201      	movs	r2, #1
 8001184:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	187a      	adds	r2, r7, r1
 8001188:	2390      	movs	r3, #144	; 0x90
 800118a:	05db      	lsls	r3, r3, #23
 800118c:	0011      	movs	r1, r2
 800118e:	0018      	movs	r0, r3
 8001190:	f000 fb96 	bl	80018c0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel4;
 8001194:	4b1a      	ldr	r3, [pc, #104]	; (8001200 <HAL_UART_MspInit+0xf4>)
 8001196:	4a1b      	ldr	r2, [pc, #108]	; (8001204 <HAL_UART_MspInit+0xf8>)
 8001198:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800119a:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_UART_MspInit+0xf4>)
 800119c:	2210      	movs	r2, #16
 800119e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a0:	4b17      	ldr	r3, [pc, #92]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011a2:	2200      	movs	r2, #0
 80011a4:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011a6:	4b16      	ldr	r3, [pc, #88]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011a8:	2280      	movs	r2, #128	; 0x80
 80011aa:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ac:	4b14      	ldr	r3, [pc, #80]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011b2:	4b13      	ldr	r3, [pc, #76]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011b8:	4b11      	ldr	r3, [pc, #68]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011be:	4b10      	ldr	r3, [pc, #64]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011c4:	4b0e      	ldr	r3, [pc, #56]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011c6:	0018      	movs	r0, r3
 80011c8:	f000 f9f6 	bl	80015b8 <HAL_DMA_Init>
 80011cc:	1e03      	subs	r3, r0, #0
 80011ce:	d001      	beq.n	80011d4 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 80011d0:	f7ff ff24 	bl	800101c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	4a0a      	ldr	r2, [pc, #40]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011d8:	66da      	str	r2, [r3, #108]	; 0x6c
 80011da:	4b09      	ldr	r3, [pc, #36]	; (8001200 <HAL_UART_MspInit+0xf4>)
 80011dc:	687a      	ldr	r2, [r7, #4]
 80011de:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011e0:	2200      	movs	r2, #0
 80011e2:	2100      	movs	r1, #0
 80011e4:	201c      	movs	r0, #28
 80011e6:	f000 f9b5 	bl	8001554 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011ea:	201c      	movs	r0, #28
 80011ec:	f000 f9c7 	bl	800157e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b00b      	add	sp, #44	; 0x2c
 80011f6:	bd90      	pop	{r4, r7, pc}
 80011f8:	40004400 	.word	0x40004400
 80011fc:	40021000 	.word	0x40021000
 8001200:	2000015c 	.word	0x2000015c
 8001204:	40020044 	.word	0x40020044

08001208 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800120c:	e7fe      	b.n	800120c <NMI_Handler+0x4>

0800120e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800120e:	b580      	push	{r7, lr}
 8001210:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001212:	e7fe      	b.n	8001212 <HardFault_Handler+0x4>

08001214 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001218:	46c0      	nop			; (mov r8, r8)
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}

0800121e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800121e:	b580      	push	{r7, lr}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001222:	46c0      	nop			; (mov r8, r8)
 8001224:	46bd      	mov	sp, r7
 8001226:	bd80      	pop	{r7, pc}

08001228 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800122c:	f000 f8ca 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001230:	46c0      	nop			; (mov r8, r8)
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
	...

08001238 <DMA1_Channel4_5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4 and 5 interrupts.
  */
void DMA1_Channel4_5_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800123c:	4b03      	ldr	r3, [pc, #12]	; (800124c <DMA1_Channel4_5_IRQHandler+0x14>)
 800123e:	0018      	movs	r0, r3
 8001240:	f000 fa7f 	bl	8001742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_IRQn 1 */
}
 8001244:	46c0      	nop			; (mov r8, r8)
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	46c0      	nop			; (mov r8, r8)
 800124c:	2000015c 	.word	0x2000015c

08001250 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <USART2_IRQHandler+0x14>)
 8001256:	0018      	movs	r0, r3
 8001258:	f001 ff72 	bl	8003140 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800125c:	46c0      	nop			; (mov r8, r8)
 800125e:	46bd      	mov	sp, r7
 8001260:	bd80      	pop	{r7, pc}
 8001262:	46c0      	nop			; (mov r8, r8)
 8001264:	200000d8 	.word	0x200000d8

08001268 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b086      	sub	sp, #24
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001270:	4a14      	ldr	r2, [pc, #80]	; (80012c4 <_sbrk+0x5c>)
 8001272:	4b15      	ldr	r3, [pc, #84]	; (80012c8 <_sbrk+0x60>)
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800127c:	4b13      	ldr	r3, [pc, #76]	; (80012cc <_sbrk+0x64>)
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d102      	bne.n	800128a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001284:	4b11      	ldr	r3, [pc, #68]	; (80012cc <_sbrk+0x64>)
 8001286:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <_sbrk+0x68>)
 8001288:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128a:	4b10      	ldr	r3, [pc, #64]	; (80012cc <_sbrk+0x64>)
 800128c:	681a      	ldr	r2, [r3, #0]
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	18d3      	adds	r3, r2, r3
 8001292:	693a      	ldr	r2, [r7, #16]
 8001294:	429a      	cmp	r2, r3
 8001296:	d207      	bcs.n	80012a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001298:	f002 fdf2 	bl	8003e80 <__errno>
 800129c:	0003      	movs	r3, r0
 800129e:	220c      	movs	r2, #12
 80012a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a2:	2301      	movs	r3, #1
 80012a4:	425b      	negs	r3, r3
 80012a6:	e009      	b.n	80012bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a8:	4b08      	ldr	r3, [pc, #32]	; (80012cc <_sbrk+0x64>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012ae:	4b07      	ldr	r3, [pc, #28]	; (80012cc <_sbrk+0x64>)
 80012b0:	681a      	ldr	r2, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	18d2      	adds	r2, r2, r3
 80012b6:	4b05      	ldr	r3, [pc, #20]	; (80012cc <_sbrk+0x64>)
 80012b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80012ba:	68fb      	ldr	r3, [r7, #12]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b006      	add	sp, #24
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20002000 	.word	0x20002000
 80012c8:	00000400 	.word	0x00000400
 80012cc:	200001c8 	.word	0x200001c8
 80012d0:	200001e0 	.word	0x200001e0

080012d4 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 80012d8:	46c0      	nop			; (mov r8, r8)
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80012e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012e4:	480d      	ldr	r0, [pc, #52]	; (800131c <LoopForever+0x6>)
  ldr r1, =_edata
 80012e6:	490e      	ldr	r1, [pc, #56]	; (8001320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012e8:	4a0e      	ldr	r2, [pc, #56]	; (8001324 <LoopForever+0xe>)
  movs r3, #0
 80012ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012ec:	e002      	b.n	80012f4 <LoopCopyDataInit>

080012ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012f2:	3304      	adds	r3, #4

080012f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012f8:	d3f9      	bcc.n	80012ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012fa:	4a0b      	ldr	r2, [pc, #44]	; (8001328 <LoopForever+0x12>)
  ldr r4, =_ebss
 80012fc:	4c0b      	ldr	r4, [pc, #44]	; (800132c <LoopForever+0x16>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001300:	e001      	b.n	8001306 <LoopFillZerobss>

08001302 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001302:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001304:	3204      	adds	r2, #4

08001306 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001306:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001308:	d3fb      	bcc.n	8001302 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800130a:	f7ff ffe3 	bl	80012d4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800130e:	f002 fdbd 	bl	8003e8c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001312:	f7ff fa0b 	bl	800072c <main>

08001316 <LoopForever>:

LoopForever:
    b LoopForever
 8001316:	e7fe      	b.n	8001316 <LoopForever>
  ldr   r0, =_estack
 8001318:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 800131c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001320:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8001324:	08004a5c 	.word	0x08004a5c
  ldr r2, =_sbss
 8001328:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 800132c:	200001e0 	.word	0x200001e0

08001330 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001330:	e7fe      	b.n	8001330 <ADC1_COMP_IRQHandler>
	...

08001334 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001338:	4b07      	ldr	r3, [pc, #28]	; (8001358 <HAL_Init+0x24>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_Init+0x24>)
 800133e:	2110      	movs	r1, #16
 8001340:	430a      	orrs	r2, r1
 8001342:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001344:	2000      	movs	r0, #0
 8001346:	f000 f809 	bl	800135c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800134a:	f7ff fe6d 	bl	8001028 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	40022000 	.word	0x40022000

0800135c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800135c:	b590      	push	{r4, r7, lr}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001364:	4b14      	ldr	r3, [pc, #80]	; (80013b8 <HAL_InitTick+0x5c>)
 8001366:	681c      	ldr	r4, [r3, #0]
 8001368:	4b14      	ldr	r3, [pc, #80]	; (80013bc <HAL_InitTick+0x60>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	0019      	movs	r1, r3
 800136e:	23fa      	movs	r3, #250	; 0xfa
 8001370:	0098      	lsls	r0, r3, #2
 8001372:	f7fe fed3 	bl	800011c <__udivsi3>
 8001376:	0003      	movs	r3, r0
 8001378:	0019      	movs	r1, r3
 800137a:	0020      	movs	r0, r4
 800137c:	f7fe fece 	bl	800011c <__udivsi3>
 8001380:	0003      	movs	r3, r0
 8001382:	0018      	movs	r0, r3
 8001384:	f000 f90b 	bl	800159e <HAL_SYSTICK_Config>
 8001388:	1e03      	subs	r3, r0, #0
 800138a:	d001      	beq.n	8001390 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800138c:	2301      	movs	r3, #1
 800138e:	e00f      	b.n	80013b0 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	2b03      	cmp	r3, #3
 8001394:	d80b      	bhi.n	80013ae <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001396:	6879      	ldr	r1, [r7, #4]
 8001398:	2301      	movs	r3, #1
 800139a:	425b      	negs	r3, r3
 800139c:	2200      	movs	r2, #0
 800139e:	0018      	movs	r0, r3
 80013a0:	f000 f8d8 	bl	8001554 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_InitTick+0x64>)
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	0018      	movs	r0, r3
 80013b2:	46bd      	mov	sp, r7
 80013b4:	b003      	add	sp, #12
 80013b6:	bd90      	pop	{r4, r7, pc}
 80013b8:	20000000 	.word	0x20000000
 80013bc:	20000008 	.word	0x20000008
 80013c0:	20000004 	.word	0x20000004

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_IncTick+0x1c>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	001a      	movs	r2, r3
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <HAL_IncTick+0x20>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	18d2      	adds	r2, r2, r3
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_IncTick+0x20>)
 80013d6:	601a      	str	r2, [r3, #0]
}
 80013d8:	46c0      	nop			; (mov r8, r8)
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	46c0      	nop			; (mov r8, r8)
 80013e0:	20000008 	.word	0x20000008
 80013e4:	200001cc 	.word	0x200001cc

080013e8 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  return uwTick;
 80013ec:	4b02      	ldr	r3, [pc, #8]	; (80013f8 <HAL_GetTick+0x10>)
 80013ee:	681b      	ldr	r3, [r3, #0]
}
 80013f0:	0018      	movs	r0, r3
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	46c0      	nop			; (mov r8, r8)
 80013f8:	200001cc 	.word	0x200001cc

080013fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	0002      	movs	r2, r0
 8001404:	1dfb      	adds	r3, r7, #7
 8001406:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001408:	1dfb      	adds	r3, r7, #7
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b7f      	cmp	r3, #127	; 0x7f
 800140e:	d809      	bhi.n	8001424 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001410:	1dfb      	adds	r3, r7, #7
 8001412:	781b      	ldrb	r3, [r3, #0]
 8001414:	001a      	movs	r2, r3
 8001416:	231f      	movs	r3, #31
 8001418:	401a      	ands	r2, r3
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <__NVIC_EnableIRQ+0x30>)
 800141c:	2101      	movs	r1, #1
 800141e:	4091      	lsls	r1, r2
 8001420:	000a      	movs	r2, r1
 8001422:	601a      	str	r2, [r3, #0]
  }
}
 8001424:	46c0      	nop			; (mov r8, r8)
 8001426:	46bd      	mov	sp, r7
 8001428:	b002      	add	sp, #8
 800142a:	bd80      	pop	{r7, pc}
 800142c:	e000e100 	.word	0xe000e100

08001430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b083      	sub	sp, #12
 8001434:	af00      	add	r7, sp, #0
 8001436:	0002      	movs	r2, r0
 8001438:	6039      	str	r1, [r7, #0]
 800143a:	1dfb      	adds	r3, r7, #7
 800143c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800143e:	1dfb      	adds	r3, r7, #7
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	2b7f      	cmp	r3, #127	; 0x7f
 8001444:	d828      	bhi.n	8001498 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001446:	4a2f      	ldr	r2, [pc, #188]	; (8001504 <__NVIC_SetPriority+0xd4>)
 8001448:	1dfb      	adds	r3, r7, #7
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	b25b      	sxtb	r3, r3
 800144e:	089b      	lsrs	r3, r3, #2
 8001450:	33c0      	adds	r3, #192	; 0xc0
 8001452:	009b      	lsls	r3, r3, #2
 8001454:	589b      	ldr	r3, [r3, r2]
 8001456:	1dfa      	adds	r2, r7, #7
 8001458:	7812      	ldrb	r2, [r2, #0]
 800145a:	0011      	movs	r1, r2
 800145c:	2203      	movs	r2, #3
 800145e:	400a      	ands	r2, r1
 8001460:	00d2      	lsls	r2, r2, #3
 8001462:	21ff      	movs	r1, #255	; 0xff
 8001464:	4091      	lsls	r1, r2
 8001466:	000a      	movs	r2, r1
 8001468:	43d2      	mvns	r2, r2
 800146a:	401a      	ands	r2, r3
 800146c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	019b      	lsls	r3, r3, #6
 8001472:	22ff      	movs	r2, #255	; 0xff
 8001474:	401a      	ands	r2, r3
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	0018      	movs	r0, r3
 800147c:	2303      	movs	r3, #3
 800147e:	4003      	ands	r3, r0
 8001480:	00db      	lsls	r3, r3, #3
 8001482:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	481f      	ldr	r0, [pc, #124]	; (8001504 <__NVIC_SetPriority+0xd4>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	b25b      	sxtb	r3, r3
 800148c:	089b      	lsrs	r3, r3, #2
 800148e:	430a      	orrs	r2, r1
 8001490:	33c0      	adds	r3, #192	; 0xc0
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001496:	e031      	b.n	80014fc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001498:	4a1b      	ldr	r2, [pc, #108]	; (8001508 <__NVIC_SetPriority+0xd8>)
 800149a:	1dfb      	adds	r3, r7, #7
 800149c:	781b      	ldrb	r3, [r3, #0]
 800149e:	0019      	movs	r1, r3
 80014a0:	230f      	movs	r3, #15
 80014a2:	400b      	ands	r3, r1
 80014a4:	3b08      	subs	r3, #8
 80014a6:	089b      	lsrs	r3, r3, #2
 80014a8:	3306      	adds	r3, #6
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	18d3      	adds	r3, r2, r3
 80014ae:	3304      	adds	r3, #4
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	1dfa      	adds	r2, r7, #7
 80014b4:	7812      	ldrb	r2, [r2, #0]
 80014b6:	0011      	movs	r1, r2
 80014b8:	2203      	movs	r2, #3
 80014ba:	400a      	ands	r2, r1
 80014bc:	00d2      	lsls	r2, r2, #3
 80014be:	21ff      	movs	r1, #255	; 0xff
 80014c0:	4091      	lsls	r1, r2
 80014c2:	000a      	movs	r2, r1
 80014c4:	43d2      	mvns	r2, r2
 80014c6:	401a      	ands	r2, r3
 80014c8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	019b      	lsls	r3, r3, #6
 80014ce:	22ff      	movs	r2, #255	; 0xff
 80014d0:	401a      	ands	r2, r3
 80014d2:	1dfb      	adds	r3, r7, #7
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	0018      	movs	r0, r3
 80014d8:	2303      	movs	r3, #3
 80014da:	4003      	ands	r3, r0
 80014dc:	00db      	lsls	r3, r3, #3
 80014de:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014e0:	4809      	ldr	r0, [pc, #36]	; (8001508 <__NVIC_SetPriority+0xd8>)
 80014e2:	1dfb      	adds	r3, r7, #7
 80014e4:	781b      	ldrb	r3, [r3, #0]
 80014e6:	001c      	movs	r4, r3
 80014e8:	230f      	movs	r3, #15
 80014ea:	4023      	ands	r3, r4
 80014ec:	3b08      	subs	r3, #8
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	430a      	orrs	r2, r1
 80014f2:	3306      	adds	r3, #6
 80014f4:	009b      	lsls	r3, r3, #2
 80014f6:	18c3      	adds	r3, r0, r3
 80014f8:	3304      	adds	r3, #4
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	46c0      	nop			; (mov r8, r8)
 80014fe:	46bd      	mov	sp, r7
 8001500:	b003      	add	sp, #12
 8001502:	bd90      	pop	{r4, r7, pc}
 8001504:	e000e100 	.word	0xe000e100
 8001508:	e000ed00 	.word	0xe000ed00

0800150c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	1e5a      	subs	r2, r3, #1
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	045b      	lsls	r3, r3, #17
 800151c:	429a      	cmp	r2, r3
 800151e:	d301      	bcc.n	8001524 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001520:	2301      	movs	r3, #1
 8001522:	e010      	b.n	8001546 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001524:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <SysTick_Config+0x44>)
 8001526:	687a      	ldr	r2, [r7, #4]
 8001528:	3a01      	subs	r2, #1
 800152a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800152c:	2301      	movs	r3, #1
 800152e:	425b      	negs	r3, r3
 8001530:	2103      	movs	r1, #3
 8001532:	0018      	movs	r0, r3
 8001534:	f7ff ff7c 	bl	8001430 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001538:	4b05      	ldr	r3, [pc, #20]	; (8001550 <SysTick_Config+0x44>)
 800153a:	2200      	movs	r2, #0
 800153c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800153e:	4b04      	ldr	r3, [pc, #16]	; (8001550 <SysTick_Config+0x44>)
 8001540:	2207      	movs	r2, #7
 8001542:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001544:	2300      	movs	r3, #0
}
 8001546:	0018      	movs	r0, r3
 8001548:	46bd      	mov	sp, r7
 800154a:	b002      	add	sp, #8
 800154c:	bd80      	pop	{r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	e000e010 	.word	0xe000e010

08001554 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	60b9      	str	r1, [r7, #8]
 800155c:	607a      	str	r2, [r7, #4]
 800155e:	210f      	movs	r1, #15
 8001560:	187b      	adds	r3, r7, r1
 8001562:	1c02      	adds	r2, r0, #0
 8001564:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001566:	68ba      	ldr	r2, [r7, #8]
 8001568:	187b      	adds	r3, r7, r1
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	b25b      	sxtb	r3, r3
 800156e:	0011      	movs	r1, r2
 8001570:	0018      	movs	r0, r3
 8001572:	f7ff ff5d 	bl	8001430 <__NVIC_SetPriority>
}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	46bd      	mov	sp, r7
 800157a:	b004      	add	sp, #16
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157e:	b580      	push	{r7, lr}
 8001580:	b082      	sub	sp, #8
 8001582:	af00      	add	r7, sp, #0
 8001584:	0002      	movs	r2, r0
 8001586:	1dfb      	adds	r3, r7, #7
 8001588:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800158a:	1dfb      	adds	r3, r7, #7
 800158c:	781b      	ldrb	r3, [r3, #0]
 800158e:	b25b      	sxtb	r3, r3
 8001590:	0018      	movs	r0, r3
 8001592:	f7ff ff33 	bl	80013fc <__NVIC_EnableIRQ>
}
 8001596:	46c0      	nop			; (mov r8, r8)
 8001598:	46bd      	mov	sp, r7
 800159a:	b002      	add	sp, #8
 800159c:	bd80      	pop	{r7, pc}

0800159e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800159e:	b580      	push	{r7, lr}
 80015a0:	b082      	sub	sp, #8
 80015a2:	af00      	add	r7, sp, #0
 80015a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	0018      	movs	r0, r3
 80015aa:	f7ff ffaf 	bl	800150c <SysTick_Config>
 80015ae:	0003      	movs	r3, r0
}
 80015b0:	0018      	movs	r0, r3
 80015b2:	46bd      	mov	sp, r7
 80015b4:	b002      	add	sp, #8
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d101      	bne.n	80015ce <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80015ca:	2301      	movs	r3, #1
 80015cc:	e036      	b.n	800163c <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2221      	movs	r2, #33	; 0x21
 80015d2:	2102      	movs	r1, #2
 80015d4:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_DMA_Init+0x8c>)
 80015e2:	4013      	ands	r3, r2
 80015e4:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015ee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015fa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	695b      	ldr	r3, [r3, #20]
 8001600:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001606:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	69db      	ldr	r3, [r3, #28]
 800160c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	4313      	orrs	r3, r2
 8001612:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	68fa      	ldr	r2, [r7, #12]
 800161a:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	0018      	movs	r0, r3
 8001620:	f000 f932 	bl	8001888 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	2200      	movs	r2, #0
 8001628:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	2221      	movs	r2, #33	; 0x21
 800162e:	2101      	movs	r1, #1
 8001630:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2220      	movs	r2, #32
 8001636:	2100      	movs	r1, #0
 8001638:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}  
 800163c:	0018      	movs	r0, r3
 800163e:	46bd      	mov	sp, r7
 8001640:	b004      	add	sp, #16
 8001642:	bd80      	pop	{r7, pc}
 8001644:	ffffc00f 	.word	0xffffc00f

08001648 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b082      	sub	sp, #8
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2221      	movs	r2, #33	; 0x21
 8001654:	5c9b      	ldrb	r3, [r3, r2]
 8001656:	b2db      	uxtb	r3, r3
 8001658:	2b02      	cmp	r3, #2
 800165a:	d008      	beq.n	800166e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2204      	movs	r2, #4
 8001660:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2220      	movs	r2, #32
 8001666:	2100      	movs	r1, #0
 8001668:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e020      	b.n	80016b0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	210e      	movs	r1, #14
 800167a:	438a      	bics	r2, r1
 800167c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	681a      	ldr	r2, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	2101      	movs	r1, #1
 800168a:	438a      	bics	r2, r1
 800168c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001696:	2101      	movs	r1, #1
 8001698:	4091      	lsls	r1, r2
 800169a:	000a      	movs	r2, r1
 800169c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2221      	movs	r2, #33	; 0x21
 80016a2:	2101      	movs	r1, #1
 80016a4:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	2220      	movs	r2, #32
 80016aa:	2100      	movs	r1, #0
 80016ac:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80016ae:	2300      	movs	r3, #0
}
 80016b0:	0018      	movs	r0, r3
 80016b2:	46bd      	mov	sp, r7
 80016b4:	b002      	add	sp, #8
 80016b6:	bd80      	pop	{r7, pc}

080016b8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
 80016be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016c0:	210f      	movs	r1, #15
 80016c2:	187b      	adds	r3, r7, r1
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	2221      	movs	r2, #33	; 0x21
 80016cc:	5c9b      	ldrb	r3, [r3, r2]
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	2b02      	cmp	r3, #2
 80016d2:	d006      	beq.n	80016e2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2204      	movs	r2, #4
 80016d8:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80016da:	187b      	adds	r3, r7, r1
 80016dc:	2201      	movs	r2, #1
 80016de:	701a      	strb	r2, [r3, #0]
 80016e0:	e028      	b.n	8001734 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	681a      	ldr	r2, [r3, #0]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	210e      	movs	r1, #14
 80016ee:	438a      	bics	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2101      	movs	r1, #1
 80016fe:	438a      	bics	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800170a:	2101      	movs	r1, #1
 800170c:	4091      	lsls	r1, r2
 800170e:	000a      	movs	r2, r1
 8001710:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2221      	movs	r2, #33	; 0x21
 8001716:	2101      	movs	r1, #1
 8001718:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2220      	movs	r2, #32
 800171e:	2100      	movs	r1, #0
 8001720:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001726:	2b00      	cmp	r3, #0
 8001728:	d004      	beq.n	8001734 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800172e:	687a      	ldr	r2, [r7, #4]
 8001730:	0010      	movs	r0, r2
 8001732:	4798      	blx	r3
    } 
  }
  return status;
 8001734:	230f      	movs	r3, #15
 8001736:	18fb      	adds	r3, r7, r3
 8001738:	781b      	ldrb	r3, [r3, #0]
}
 800173a:	0018      	movs	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	b004      	add	sp, #16
 8001740:	bd80      	pop	{r7, pc}

08001742 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001742:	b580      	push	{r7, lr}
 8001744:	b084      	sub	sp, #16
 8001746:	af00      	add	r7, sp, #0
 8001748:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175e:	2204      	movs	r2, #4
 8001760:	409a      	lsls	r2, r3
 8001762:	0013      	movs	r3, r2
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4013      	ands	r3, r2
 8001768:	d024      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x72>
 800176a:	68bb      	ldr	r3, [r7, #8]
 800176c:	2204      	movs	r2, #4
 800176e:	4013      	ands	r3, r2
 8001770:	d020      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2220      	movs	r2, #32
 800177a:	4013      	ands	r3, r2
 800177c:	d107      	bne.n	800178e <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2104      	movs	r1, #4
 800178a:	438a      	bics	r2, r1
 800178c:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001796:	2104      	movs	r1, #4
 8001798:	4091      	lsls	r1, r2
 800179a:	000a      	movs	r2, r1
 800179c:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	d100      	bne.n	80017a8 <HAL_DMA_IRQHandler+0x66>
 80017a6:	e06a      	b.n	800187e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	0010      	movs	r0, r2
 80017b0:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80017b2:	e064      	b.n	800187e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b8:	2202      	movs	r2, #2
 80017ba:	409a      	lsls	r2, r3
 80017bc:	0013      	movs	r3, r2
 80017be:	68fa      	ldr	r2, [r7, #12]
 80017c0:	4013      	ands	r3, r2
 80017c2:	d02b      	beq.n	800181c <HAL_DMA_IRQHandler+0xda>
 80017c4:	68bb      	ldr	r3, [r7, #8]
 80017c6:	2202      	movs	r2, #2
 80017c8:	4013      	ands	r3, r2
 80017ca:	d027      	beq.n	800181c <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2220      	movs	r2, #32
 80017d4:	4013      	ands	r3, r2
 80017d6:	d10b      	bne.n	80017f0 <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	210a      	movs	r1, #10
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2221      	movs	r2, #33	; 0x21
 80017ec:	2101      	movs	r1, #1
 80017ee:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017f8:	2102      	movs	r1, #2
 80017fa:	4091      	lsls	r1, r2
 80017fc:	000a      	movs	r2, r1
 80017fe:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	2220      	movs	r2, #32
 8001804:	2100      	movs	r1, #0
 8001806:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800180c:	2b00      	cmp	r3, #0
 800180e:	d036      	beq.n	800187e <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001814:	687a      	ldr	r2, [r7, #4]
 8001816:	0010      	movs	r0, r2
 8001818:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 800181a:	e030      	b.n	800187e <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001820:	2208      	movs	r2, #8
 8001822:	409a      	lsls	r2, r3
 8001824:	0013      	movs	r3, r2
 8001826:	68fa      	ldr	r2, [r7, #12]
 8001828:	4013      	ands	r3, r2
 800182a:	d028      	beq.n	800187e <HAL_DMA_IRQHandler+0x13c>
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	2208      	movs	r2, #8
 8001830:	4013      	ands	r3, r2
 8001832:	d024      	beq.n	800187e <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681a      	ldr	r2, [r3, #0]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	210e      	movs	r1, #14
 8001840:	438a      	bics	r2, r1
 8001842:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800184c:	2101      	movs	r1, #1
 800184e:	4091      	lsls	r1, r2
 8001850:	000a      	movs	r2, r1
 8001852:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	2201      	movs	r2, #1
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	2221      	movs	r2, #33	; 0x21
 800185e:	2101      	movs	r1, #1
 8001860:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	2220      	movs	r2, #32
 8001866:	2100      	movs	r1, #0
 8001868:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	2b00      	cmp	r3, #0
 8001870:	d005      	beq.n	800187e <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	0010      	movs	r0, r2
 800187a:	4798      	blx	r3
    }
   }
}  
 800187c:	e7ff      	b.n	800187e <HAL_DMA_IRQHandler+0x13c>
 800187e:	46c0      	nop			; (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b004      	add	sp, #16
 8001884:	bd80      	pop	{r7, pc}
	...

08001888 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a08      	ldr	r2, [pc, #32]	; (80018b8 <DMA_CalcBaseAndBitshift+0x30>)
 8001896:	4694      	mov	ip, r2
 8001898:	4463      	add	r3, ip
 800189a:	2114      	movs	r1, #20
 800189c:	0018      	movs	r0, r3
 800189e:	f7fe fc3d 	bl	800011c <__udivsi3>
 80018a2:	0003      	movs	r3, r0
 80018a4:	009a      	lsls	r2, r3, #2
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	4a03      	ldr	r2, [pc, #12]	; (80018bc <DMA_CalcBaseAndBitshift+0x34>)
 80018ae:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80018b0:	46c0      	nop			; (mov r8, r8)
 80018b2:	46bd      	mov	sp, r7
 80018b4:	b002      	add	sp, #8
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	bffdfff8 	.word	0xbffdfff8
 80018bc:	40020000 	.word	0x40020000

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b086      	sub	sp, #24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018ce:	e14f      	b.n	8001b70 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	2101      	movs	r1, #1
 80018d6:	697a      	ldr	r2, [r7, #20]
 80018d8:	4091      	lsls	r1, r2
 80018da:	000a      	movs	r2, r1
 80018dc:	4013      	ands	r3, r2
 80018de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d100      	bne.n	80018e8 <HAL_GPIO_Init+0x28>
 80018e6:	e140      	b.n	8001b6a <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	2203      	movs	r2, #3
 80018ee:	4013      	ands	r3, r2
 80018f0:	2b01      	cmp	r3, #1
 80018f2:	d005      	beq.n	8001900 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	2203      	movs	r2, #3
 80018fa:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d130      	bne.n	8001962 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	2203      	movs	r2, #3
 800190c:	409a      	lsls	r2, r3
 800190e:	0013      	movs	r3, r2
 8001910:	43da      	mvns	r2, r3
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	4013      	ands	r3, r2
 8001916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001918:	683b      	ldr	r3, [r7, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	005b      	lsls	r3, r3, #1
 8001920:	409a      	lsls	r2, r3
 8001922:	0013      	movs	r3, r2
 8001924:	693a      	ldr	r2, [r7, #16]
 8001926:	4313      	orrs	r3, r2
 8001928:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	693a      	ldr	r2, [r7, #16]
 800192e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001936:	2201      	movs	r2, #1
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	409a      	lsls	r2, r3
 800193c:	0013      	movs	r3, r2
 800193e:	43da      	mvns	r2, r3
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	4013      	ands	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	091b      	lsrs	r3, r3, #4
 800194c:	2201      	movs	r2, #1
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
 8001954:	0013      	movs	r3, r2
 8001956:	693a      	ldr	r2, [r7, #16]
 8001958:	4313      	orrs	r3, r2
 800195a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001962:	683b      	ldr	r3, [r7, #0]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2203      	movs	r2, #3
 8001968:	4013      	ands	r3, r2
 800196a:	2b03      	cmp	r3, #3
 800196c:	d017      	beq.n	800199e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	2203      	movs	r2, #3
 800197a:	409a      	lsls	r2, r3
 800197c:	0013      	movs	r3, r2
 800197e:	43da      	mvns	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	4013      	ands	r3, r2
 8001984:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	005b      	lsls	r3, r3, #1
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d123      	bne.n	80019f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	08da      	lsrs	r2, r3, #3
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	3208      	adds	r2, #8
 80019b2:	0092      	lsls	r2, r2, #2
 80019b4:	58d3      	ldr	r3, [r2, r3]
 80019b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	2207      	movs	r2, #7
 80019bc:	4013      	ands	r3, r2
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	220f      	movs	r2, #15
 80019c2:	409a      	lsls	r2, r3
 80019c4:	0013      	movs	r3, r2
 80019c6:	43da      	mvns	r2, r3
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4013      	ands	r3, r2
 80019cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	2107      	movs	r1, #7
 80019d6:	400b      	ands	r3, r1
 80019d8:	009b      	lsls	r3, r3, #2
 80019da:	409a      	lsls	r2, r3
 80019dc:	0013      	movs	r3, r2
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	4313      	orrs	r3, r2
 80019e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	08da      	lsrs	r2, r3, #3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	3208      	adds	r2, #8
 80019ec:	0092      	lsls	r2, r2, #2
 80019ee:	6939      	ldr	r1, [r7, #16]
 80019f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	2203      	movs	r2, #3
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	43da      	mvns	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	685b      	ldr	r3, [r3, #4]
 8001a0e:	2203      	movs	r2, #3
 8001a10:	401a      	ands	r2, r3
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	693a      	ldr	r2, [r7, #16]
 8001a24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a26:	683b      	ldr	r3, [r7, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	23c0      	movs	r3, #192	; 0xc0
 8001a2c:	029b      	lsls	r3, r3, #10
 8001a2e:	4013      	ands	r3, r2
 8001a30:	d100      	bne.n	8001a34 <HAL_GPIO_Init+0x174>
 8001a32:	e09a      	b.n	8001b6a <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a34:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001a36:	699a      	ldr	r2, [r3, #24]
 8001a38:	4b53      	ldr	r3, [pc, #332]	; (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001a3a:	2101      	movs	r1, #1
 8001a3c:	430a      	orrs	r2, r1
 8001a3e:	619a      	str	r2, [r3, #24]
 8001a40:	4b51      	ldr	r3, [pc, #324]	; (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	2201      	movs	r2, #1
 8001a46:	4013      	ands	r3, r2
 8001a48:	60bb      	str	r3, [r7, #8]
 8001a4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a4c:	4a4f      	ldr	r2, [pc, #316]	; (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	089b      	lsrs	r3, r3, #2
 8001a52:	3302      	adds	r3, #2
 8001a54:	009b      	lsls	r3, r3, #2
 8001a56:	589b      	ldr	r3, [r3, r2]
 8001a58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2203      	movs	r2, #3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	009b      	lsls	r3, r3, #2
 8001a62:	220f      	movs	r2, #15
 8001a64:	409a      	lsls	r2, r3
 8001a66:	0013      	movs	r3, r2
 8001a68:	43da      	mvns	r2, r3
 8001a6a:	693b      	ldr	r3, [r7, #16]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	2390      	movs	r3, #144	; 0x90
 8001a74:	05db      	lsls	r3, r3, #23
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d013      	beq.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a44      	ldr	r2, [pc, #272]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d00d      	beq.n	8001a9e <HAL_GPIO_Init+0x1de>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a43      	ldr	r2, [pc, #268]	; (8001b94 <HAL_GPIO_Init+0x2d4>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d007      	beq.n	8001a9a <HAL_GPIO_Init+0x1da>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_GPIO_Init+0x2d8>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d101      	bne.n	8001a96 <HAL_GPIO_Init+0x1d6>
 8001a92:	2303      	movs	r3, #3
 8001a94:	e006      	b.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e004      	b.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	e002      	b.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e000      	b.n	8001aa4 <HAL_GPIO_Init+0x1e4>
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	697a      	ldr	r2, [r7, #20]
 8001aa6:	2103      	movs	r1, #3
 8001aa8:	400a      	ands	r2, r1
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	4093      	lsls	r3, r2
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ab4:	4935      	ldr	r1, [pc, #212]	; (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3302      	adds	r3, #2
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	693a      	ldr	r2, [r7, #16]
 8001ac0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ac2:	4b36      	ldr	r3, [pc, #216]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ac8:	68fb      	ldr	r3, [r7, #12]
 8001aca:	43da      	mvns	r2, r3
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	4013      	ands	r3, r2
 8001ad0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	685a      	ldr	r2, [r3, #4]
 8001ad6:	2380      	movs	r3, #128	; 0x80
 8001ad8:	025b      	lsls	r3, r3, #9
 8001ada:	4013      	ands	r3, r2
 8001adc:	d003      	beq.n	8001ae6 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001ade:	693a      	ldr	r2, [r7, #16]
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	4313      	orrs	r3, r2
 8001ae4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001ae6:	4b2d      	ldr	r3, [pc, #180]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001aee:	685b      	ldr	r3, [r3, #4]
 8001af0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	43da      	mvns	r2, r3
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	4013      	ands	r3, r2
 8001afa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	685a      	ldr	r2, [r3, #4]
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	029b      	lsls	r3, r3, #10
 8001b04:	4013      	ands	r3, r2
 8001b06:	d003      	beq.n	8001b10 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b08:	693a      	ldr	r2, [r7, #16]
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b10:	4b22      	ldr	r3, [pc, #136]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001b12:	693a      	ldr	r2, [r7, #16]
 8001b14:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b16:	4b21      	ldr	r3, [pc, #132]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001b18:	689b      	ldr	r3, [r3, #8]
 8001b1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	43da      	mvns	r2, r3
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	4013      	ands	r3, r2
 8001b24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685a      	ldr	r2, [r3, #4]
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	035b      	lsls	r3, r3, #13
 8001b2e:	4013      	ands	r3, r2
 8001b30:	d003      	beq.n	8001b3a <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b3a:	4b18      	ldr	r3, [pc, #96]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001b3c:	693a      	ldr	r2, [r7, #16]
 8001b3e:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b40:	4b16      	ldr	r3, [pc, #88]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	43da      	mvns	r2, r3
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	685a      	ldr	r2, [r3, #4]
 8001b54:	2380      	movs	r3, #128	; 0x80
 8001b56:	039b      	lsls	r3, r3, #14
 8001b58:	4013      	ands	r3, r2
 8001b5a:	d003      	beq.n	8001b64 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001b64:	4b0d      	ldr	r3, [pc, #52]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001b66:	693a      	ldr	r2, [r7, #16]
 8001b68:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	681a      	ldr	r2, [r3, #0]
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	40da      	lsrs	r2, r3
 8001b78:	1e13      	subs	r3, r2, #0
 8001b7a:	d000      	beq.n	8001b7e <HAL_GPIO_Init+0x2be>
 8001b7c:	e6a8      	b.n	80018d0 <HAL_GPIO_Init+0x10>
  } 
}
 8001b7e:	46c0      	nop			; (mov r8, r8)
 8001b80:	46c0      	nop			; (mov r8, r8)
 8001b82:	46bd      	mov	sp, r7
 8001b84:	b006      	add	sp, #24
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	40010000 	.word	0x40010000
 8001b90:	48000400 	.word	0x48000400
 8001b94:	48000800 	.word	0x48000800
 8001b98:	48000c00 	.word	0x48000c00
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b082      	sub	sp, #8
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	0008      	movs	r0, r1
 8001baa:	0011      	movs	r1, r2
 8001bac:	1cbb      	adds	r3, r7, #2
 8001bae:	1c02      	adds	r2, r0, #0
 8001bb0:	801a      	strh	r2, [r3, #0]
 8001bb2:	1c7b      	adds	r3, r7, #1
 8001bb4:	1c0a      	adds	r2, r1, #0
 8001bb6:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bb8:	1c7b      	adds	r3, r7, #1
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d004      	beq.n	8001bca <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bc0:	1cbb      	adds	r3, r7, #2
 8001bc2:	881a      	ldrh	r2, [r3, #0]
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bc8:	e003      	b.n	8001bd2 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bca:	1cbb      	adds	r3, r7, #2
 8001bcc:	881a      	ldrh	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001bd2:	46c0      	nop			; (mov r8, r8)
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	b002      	add	sp, #8
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F0 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001bda:	b580      	push	{r7, lr}
 8001bdc:	b084      	sub	sp, #16
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
 8001be2:	000a      	movs	r2, r1
 8001be4:	1cbb      	adds	r3, r7, #2
 8001be6:	801a      	strh	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	695b      	ldr	r3, [r3, #20]
 8001bec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bee:	1cbb      	adds	r3, r7, #2
 8001bf0:	881b      	ldrh	r3, [r3, #0]
 8001bf2:	68fa      	ldr	r2, [r7, #12]
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	041a      	lsls	r2, r3, #16
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	1cb9      	adds	r1, r7, #2
 8001bfe:	8809      	ldrh	r1, [r1, #0]
 8001c00:	400b      	ands	r3, r1
 8001c02:	431a      	orrs	r2, r3
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	619a      	str	r2, [r3, #24]
}
 8001c08:	46c0      	nop			; (mov r8, r8)
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	b004      	add	sp, #16
 8001c0e:	bd80      	pop	{r7, pc}

08001c10 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b082      	sub	sp, #8
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e082      	b.n	8001d28 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2241      	movs	r2, #65	; 0x41
 8001c26:	5c9b      	ldrb	r3, [r3, r2]
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d107      	bne.n	8001c3e <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2240      	movs	r2, #64	; 0x40
 8001c32:	2100      	movs	r1, #0
 8001c34:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	0018      	movs	r0, r3
 8001c3a:	f7ff fa19 	bl	8001070 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2241      	movs	r2, #65	; 0x41
 8001c42:	2124      	movs	r1, #36	; 0x24
 8001c44:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	2101      	movs	r1, #1
 8001c52:	438a      	bics	r2, r1
 8001c54:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685a      	ldr	r2, [r3, #4]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	4934      	ldr	r1, [pc, #208]	; (8001d30 <HAL_I2C_Init+0x120>)
 8001c60:	400a      	ands	r2, r1
 8001c62:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	689a      	ldr	r2, [r3, #8]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4931      	ldr	r1, [pc, #196]	; (8001d34 <HAL_I2C_Init+0x124>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	2b01      	cmp	r3, #1
 8001c7a:	d108      	bne.n	8001c8e <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689a      	ldr	r2, [r3, #8]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2180      	movs	r1, #128	; 0x80
 8001c86:	0209      	lsls	r1, r1, #8
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	e007      	b.n	8001c9e <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	689a      	ldr	r2, [r3, #8]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2184      	movs	r1, #132	; 0x84
 8001c98:	0209      	lsls	r1, r1, #8
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	68db      	ldr	r3, [r3, #12]
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d104      	bne.n	8001cb0 <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	2280      	movs	r2, #128	; 0x80
 8001cac:	0112      	lsls	r2, r2, #4
 8001cae:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	685a      	ldr	r2, [r3, #4]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	491f      	ldr	r1, [pc, #124]	; (8001d38 <HAL_I2C_Init+0x128>)
 8001cbc:	430a      	orrs	r2, r1
 8001cbe:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	68da      	ldr	r2, [r3, #12]
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	491a      	ldr	r1, [pc, #104]	; (8001d34 <HAL_I2C_Init+0x124>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	691a      	ldr	r2, [r3, #16]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	695b      	ldr	r3, [r3, #20]
 8001cd8:	431a      	orrs	r2, r3
 8001cda:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	699b      	ldr	r3, [r3, #24]
 8001ce0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	430a      	orrs	r2, r1
 8001ce8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	69d9      	ldr	r1, [r3, #28]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6a1a      	ldr	r2, [r3, #32]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	430a      	orrs	r2, r1
 8001cf8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	681a      	ldr	r2, [r3, #0]
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	2101      	movs	r1, #1
 8001d06:	430a      	orrs	r2, r1
 8001d08:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2241      	movs	r2, #65	; 0x41
 8001d14:	2120      	movs	r1, #32
 8001d16:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	2242      	movs	r2, #66	; 0x42
 8001d22:	2100      	movs	r1, #0
 8001d24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	0018      	movs	r0, r3
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	b002      	add	sp, #8
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	f0ffffff 	.word	0xf0ffffff
 8001d34:	ffff7fff 	.word	0xffff7fff
 8001d38:	02008000 	.word	0x02008000

08001d3c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b089      	sub	sp, #36	; 0x24
 8001d40:	af02      	add	r7, sp, #8
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	000c      	movs	r4, r1
 8001d46:	0010      	movs	r0, r2
 8001d48:	0019      	movs	r1, r3
 8001d4a:	230a      	movs	r3, #10
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	1c22      	adds	r2, r4, #0
 8001d50:	801a      	strh	r2, [r3, #0]
 8001d52:	2308      	movs	r3, #8
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	1c02      	adds	r2, r0, #0
 8001d58:	801a      	strh	r2, [r3, #0]
 8001d5a:	1dbb      	adds	r3, r7, #6
 8001d5c:	1c0a      	adds	r2, r1, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2241      	movs	r2, #65	; 0x41
 8001d64:	5c9b      	ldrb	r3, [r3, r2]
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	2b20      	cmp	r3, #32
 8001d6a:	d000      	beq.n	8001d6e <HAL_I2C_Mem_Read+0x32>
 8001d6c:	e110      	b.n	8001f90 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d004      	beq.n	8001d7e <HAL_I2C_Mem_Read+0x42>
 8001d74:	232c      	movs	r3, #44	; 0x2c
 8001d76:	18fb      	adds	r3, r7, r3
 8001d78:	881b      	ldrh	r3, [r3, #0]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d105      	bne.n	8001d8a <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	2280      	movs	r2, #128	; 0x80
 8001d82:	0092      	lsls	r2, r2, #2
 8001d84:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8001d86:	2301      	movs	r3, #1
 8001d88:	e103      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	2240      	movs	r2, #64	; 0x40
 8001d8e:	5c9b      	ldrb	r3, [r3, r2]
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d101      	bne.n	8001d98 <HAL_I2C_Mem_Read+0x5c>
 8001d94:	2302      	movs	r3, #2
 8001d96:	e0fc      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	2240      	movs	r2, #64	; 0x40
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001da0:	f7ff fb22 	bl	80013e8 <HAL_GetTick>
 8001da4:	0003      	movs	r3, r0
 8001da6:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001da8:	2380      	movs	r3, #128	; 0x80
 8001daa:	0219      	lsls	r1, r3, #8
 8001dac:	68f8      	ldr	r0, [r7, #12]
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	9300      	str	r3, [sp, #0]
 8001db2:	2319      	movs	r3, #25
 8001db4:	2201      	movs	r2, #1
 8001db6:	f000 f979 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001dba:	1e03      	subs	r3, r0, #0
 8001dbc:	d001      	beq.n	8001dc2 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e0e7      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2241      	movs	r2, #65	; 0x41
 8001dc6:	2122      	movs	r1, #34	; 0x22
 8001dc8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	2242      	movs	r2, #66	; 0x42
 8001dce:	2140      	movs	r1, #64	; 0x40
 8001dd0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ddc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	222c      	movs	r2, #44	; 0x2c
 8001de2:	18ba      	adds	r2, r7, r2
 8001de4:	8812      	ldrh	r2, [r2, #0]
 8001de6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001dee:	1dbb      	adds	r3, r7, #6
 8001df0:	881c      	ldrh	r4, [r3, #0]
 8001df2:	2308      	movs	r3, #8
 8001df4:	18fb      	adds	r3, r7, r3
 8001df6:	881a      	ldrh	r2, [r3, #0]
 8001df8:	230a      	movs	r3, #10
 8001dfa:	18fb      	adds	r3, r7, r3
 8001dfc:	8819      	ldrh	r1, [r3, #0]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	9301      	str	r3, [sp, #4]
 8001e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e06:	9300      	str	r3, [sp, #0]
 8001e08:	0023      	movs	r3, r4
 8001e0a:	f000 f8cb 	bl	8001fa4 <I2C_RequestMemoryRead>
 8001e0e:	1e03      	subs	r3, r0, #0
 8001e10:	d005      	beq.n	8001e1e <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	2240      	movs	r2, #64	; 0x40
 8001e16:	2100      	movs	r1, #0
 8001e18:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	e0b9      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2bff      	cmp	r3, #255	; 0xff
 8001e26:	d911      	bls.n	8001e4c <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	22ff      	movs	r2, #255	; 0xff
 8001e2c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e32:	b2da      	uxtb	r2, r3
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	045c      	lsls	r4, r3, #17
 8001e38:	230a      	movs	r3, #10
 8001e3a:	18fb      	adds	r3, r7, r3
 8001e3c:	8819      	ldrh	r1, [r3, #0]
 8001e3e:	68f8      	ldr	r0, [r7, #12]
 8001e40:	4b56      	ldr	r3, [pc, #344]	; (8001f9c <HAL_I2C_Mem_Read+0x260>)
 8001e42:	9300      	str	r3, [sp, #0]
 8001e44:	0023      	movs	r3, r4
 8001e46:	f000 fa65 	bl	8002314 <I2C_TransferConfig>
 8001e4a:	e012      	b.n	8001e72 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	2380      	movs	r3, #128	; 0x80
 8001e5e:	049c      	lsls	r4, r3, #18
 8001e60:	230a      	movs	r3, #10
 8001e62:	18fb      	adds	r3, r7, r3
 8001e64:	8819      	ldrh	r1, [r3, #0]
 8001e66:	68f8      	ldr	r0, [r7, #12]
 8001e68:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_I2C_Mem_Read+0x260>)
 8001e6a:	9300      	str	r3, [sp, #0]
 8001e6c:	0023      	movs	r3, r4
 8001e6e:	f000 fa51 	bl	8002314 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8001e72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	0013      	movs	r3, r2
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	2104      	movs	r1, #4
 8001e80:	f000 f914 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e082      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	1c5a      	adds	r2, r3, #1
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ea8:	3b01      	subs	r3, #1
 8001eaa:	b29a      	uxth	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eb4:	b29b      	uxth	r3, r3
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29a      	uxth	r2, r3
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ec2:	b29b      	uxth	r3, r3
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d03a      	beq.n	8001f3e <HAL_I2C_Mem_Read+0x202>
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d136      	bne.n	8001f3e <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ed2:	68f8      	ldr	r0, [r7, #12]
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	9300      	str	r3, [sp, #0]
 8001ed8:	0013      	movs	r3, r2
 8001eda:	2200      	movs	r2, #0
 8001edc:	2180      	movs	r1, #128	; 0x80
 8001ede:	f000 f8e5 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8001ee2:	1e03      	subs	r3, r0, #0
 8001ee4:	d001      	beq.n	8001eea <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	e053      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001eee:	b29b      	uxth	r3, r3
 8001ef0:	2bff      	cmp	r3, #255	; 0xff
 8001ef2:	d911      	bls.n	8001f18 <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	22ff      	movs	r2, #255	; 0xff
 8001ef8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001efe:	b2da      	uxtb	r2, r3
 8001f00:	2380      	movs	r3, #128	; 0x80
 8001f02:	045c      	lsls	r4, r3, #17
 8001f04:	230a      	movs	r3, #10
 8001f06:	18fb      	adds	r3, r7, r3
 8001f08:	8819      	ldrh	r1, [r3, #0]
 8001f0a:	68f8      	ldr	r0, [r7, #12]
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	0023      	movs	r3, r4
 8001f12:	f000 f9ff 	bl	8002314 <I2C_TransferConfig>
 8001f16:	e012      	b.n	8001f3e <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f1c:	b29a      	uxth	r2, r3
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001f26:	b2da      	uxtb	r2, r3
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	049c      	lsls	r4, r3, #18
 8001f2c:	230a      	movs	r3, #10
 8001f2e:	18fb      	adds	r3, r7, r3
 8001f30:	8819      	ldrh	r1, [r3, #0]
 8001f32:	68f8      	ldr	r0, [r7, #12]
 8001f34:	2300      	movs	r3, #0
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	0023      	movs	r3, r4
 8001f3a:	f000 f9eb 	bl	8002314 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f42:	b29b      	uxth	r3, r3
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d194      	bne.n	8001e72 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001f48:	697a      	ldr	r2, [r7, #20]
 8001f4a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	0018      	movs	r0, r3
 8001f50:	f000 f92a 	bl	80021a8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001f54:	1e03      	subs	r3, r0, #0
 8001f56:	d001      	beq.n	8001f5c <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e01a      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2220      	movs	r2, #32
 8001f62:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	490c      	ldr	r1, [pc, #48]	; (8001fa0 <HAL_I2C_Mem_Read+0x264>)
 8001f70:	400a      	ands	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2241      	movs	r2, #65	; 0x41
 8001f78:	2120      	movs	r1, #32
 8001f7a:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2242      	movs	r2, #66	; 0x42
 8001f80:	2100      	movs	r1, #0
 8001f82:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2240      	movs	r2, #64	; 0x40
 8001f88:	2100      	movs	r1, #0
 8001f8a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	e000      	b.n	8001f92 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8001f90:	2302      	movs	r3, #2
  }
}
 8001f92:	0018      	movs	r0, r3
 8001f94:	46bd      	mov	sp, r7
 8001f96:	b007      	add	sp, #28
 8001f98:	bd90      	pop	{r4, r7, pc}
 8001f9a:	46c0      	nop			; (mov r8, r8)
 8001f9c:	80002400 	.word	0x80002400
 8001fa0:	fe00e800 	.word	0xfe00e800

08001fa4 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8001fa4:	b5b0      	push	{r4, r5, r7, lr}
 8001fa6:	b086      	sub	sp, #24
 8001fa8:	af02      	add	r7, sp, #8
 8001faa:	60f8      	str	r0, [r7, #12]
 8001fac:	000c      	movs	r4, r1
 8001fae:	0010      	movs	r0, r2
 8001fb0:	0019      	movs	r1, r3
 8001fb2:	250a      	movs	r5, #10
 8001fb4:	197b      	adds	r3, r7, r5
 8001fb6:	1c22      	adds	r2, r4, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
 8001fba:	2308      	movs	r3, #8
 8001fbc:	18fb      	adds	r3, r7, r3
 8001fbe:	1c02      	adds	r2, r0, #0
 8001fc0:	801a      	strh	r2, [r3, #0]
 8001fc2:	1dbb      	adds	r3, r7, #6
 8001fc4:	1c0a      	adds	r2, r1, #0
 8001fc6:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8001fc8:	1dbb      	adds	r3, r7, #6
 8001fca:	881b      	ldrh	r3, [r3, #0]
 8001fcc:	b2da      	uxtb	r2, r3
 8001fce:	197b      	adds	r3, r7, r5
 8001fd0:	8819      	ldrh	r1, [r3, #0]
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	4b23      	ldr	r3, [pc, #140]	; (8002064 <I2C_RequestMemoryRead+0xc0>)
 8001fd6:	9300      	str	r3, [sp, #0]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f000 f99b 	bl	8002314 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe0:	6a39      	ldr	r1, [r7, #32]
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	0018      	movs	r0, r3
 8001fe6:	f000 f8a0 	bl	800212a <I2C_WaitOnTXISFlagUntilTimeout>
 8001fea:	1e03      	subs	r3, r0, #0
 8001fec:	d001      	beq.n	8001ff2 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e033      	b.n	800205a <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001ff2:	1dbb      	adds	r3, r7, #6
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	2b01      	cmp	r3, #1
 8001ff8:	d107      	bne.n	800200a <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001ffa:	2308      	movs	r3, #8
 8001ffc:	18fb      	adds	r3, r7, r3
 8001ffe:	881b      	ldrh	r3, [r3, #0]
 8002000:	b2da      	uxtb	r2, r3
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	629a      	str	r2, [r3, #40]	; 0x28
 8002008:	e019      	b.n	800203e <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800200a:	2308      	movs	r3, #8
 800200c:	18fb      	adds	r3, r7, r3
 800200e:	881b      	ldrh	r3, [r3, #0]
 8002010:	0a1b      	lsrs	r3, r3, #8
 8002012:	b29b      	uxth	r3, r3
 8002014:	b2da      	uxtb	r2, r3
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800201c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800201e:	6a39      	ldr	r1, [r7, #32]
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	0018      	movs	r0, r3
 8002024:	f000 f881 	bl	800212a <I2C_WaitOnTXISFlagUntilTimeout>
 8002028:	1e03      	subs	r3, r0, #0
 800202a:	d001      	beq.n	8002030 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e014      	b.n	800205a <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002030:	2308      	movs	r3, #8
 8002032:	18fb      	adds	r3, r7, r3
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b2da      	uxtb	r2, r3
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800203e:	6a3a      	ldr	r2, [r7, #32]
 8002040:	68f8      	ldr	r0, [r7, #12]
 8002042:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002044:	9300      	str	r3, [sp, #0]
 8002046:	0013      	movs	r3, r2
 8002048:	2200      	movs	r2, #0
 800204a:	2140      	movs	r1, #64	; 0x40
 800204c:	f000 f82e 	bl	80020ac <I2C_WaitOnFlagUntilTimeout>
 8002050:	1e03      	subs	r3, r0, #0
 8002052:	d001      	beq.n	8002058 <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	e000      	b.n	800205a <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	0018      	movs	r0, r3
 800205c:	46bd      	mov	sp, r7
 800205e:	b004      	add	sp, #16
 8002060:	bdb0      	pop	{r4, r5, r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	80002000 	.word	0x80002000

08002068 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	699b      	ldr	r3, [r3, #24]
 8002076:	2202      	movs	r2, #2
 8002078:	4013      	ands	r3, r2
 800207a:	2b02      	cmp	r3, #2
 800207c:	d103      	bne.n	8002086 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	2200      	movs	r2, #0
 8002084:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	699b      	ldr	r3, [r3, #24]
 800208c:	2201      	movs	r2, #1
 800208e:	4013      	ands	r3, r2
 8002090:	2b01      	cmp	r3, #1
 8002092:	d007      	beq.n	80020a4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699a      	ldr	r2, [r3, #24]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2101      	movs	r1, #1
 80020a0:	430a      	orrs	r2, r1
 80020a2:	619a      	str	r2, [r3, #24]
  }
}
 80020a4:	46c0      	nop			; (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b084      	sub	sp, #16
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	1dfb      	adds	r3, r7, #7
 80020ba:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80020bc:	e021      	b.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	3301      	adds	r3, #1
 80020c2:	d01e      	beq.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c4:	f7ff f990 	bl	80013e8 <HAL_GetTick>
 80020c8:	0002      	movs	r2, r0
 80020ca:	69bb      	ldr	r3, [r7, #24]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	683a      	ldr	r2, [r7, #0]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	d302      	bcc.n	80020da <I2C_WaitOnFlagUntilTimeout+0x2e>
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d113      	bne.n	8002102 <I2C_WaitOnFlagUntilTimeout+0x56>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020de:	2220      	movs	r2, #32
 80020e0:	431a      	orrs	r2, r3
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2241      	movs	r2, #65	; 0x41
 80020ea:	2120      	movs	r1, #32
 80020ec:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2242      	movs	r2, #66	; 0x42
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2240      	movs	r2, #64	; 0x40
 80020fa:	2100      	movs	r1, #0
 80020fc:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e00f      	b.n	8002122 <I2C_WaitOnFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	68ba      	ldr	r2, [r7, #8]
 800210a:	4013      	ands	r3, r2
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	425a      	negs	r2, r3
 8002112:	4153      	adcs	r3, r2
 8002114:	b2db      	uxtb	r3, r3
 8002116:	001a      	movs	r2, r3
 8002118:	1dfb      	adds	r3, r7, #7
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	429a      	cmp	r2, r3
 800211e:	d0ce      	beq.n	80020be <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002120:	2300      	movs	r3, #0
}
 8002122:	0018      	movs	r0, r3
 8002124:	46bd      	mov	sp, r7
 8002126:	b004      	add	sp, #16
 8002128:	bd80      	pop	{r7, pc}

0800212a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800212a:	b580      	push	{r7, lr}
 800212c:	b084      	sub	sp, #16
 800212e:	af00      	add	r7, sp, #0
 8002130:	60f8      	str	r0, [r7, #12]
 8002132:	60b9      	str	r1, [r7, #8]
 8002134:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002136:	e02b      	b.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	68b9      	ldr	r1, [r7, #8]
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	0018      	movs	r0, r3
 8002140:	f000 f86e 	bl	8002220 <I2C_IsAcknowledgeFailed>
 8002144:	1e03      	subs	r3, r0, #0
 8002146:	d001      	beq.n	800214c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002148:	2301      	movs	r3, #1
 800214a:	e029      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800214c:	68bb      	ldr	r3, [r7, #8]
 800214e:	3301      	adds	r3, #1
 8002150:	d01e      	beq.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff f949 	bl	80013e8 <HAL_GetTick>
 8002156:	0002      	movs	r2, r0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	68ba      	ldr	r2, [r7, #8]
 800215e:	429a      	cmp	r2, r3
 8002160:	d302      	bcc.n	8002168 <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d113      	bne.n	8002190 <I2C_WaitOnTXISFlagUntilTimeout+0x66>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216c:	2220      	movs	r2, #32
 800216e:	431a      	orrs	r2, r3
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	2241      	movs	r2, #65	; 0x41
 8002178:	2120      	movs	r1, #32
 800217a:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	2242      	movs	r2, #66	; 0x42
 8002180:	2100      	movs	r1, #0
 8002182:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2240      	movs	r2, #64	; 0x40
 8002188:	2100      	movs	r1, #0
 800218a:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e007      	b.n	80021a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2202      	movs	r2, #2
 8002198:	4013      	ands	r3, r2
 800219a:	2b02      	cmp	r3, #2
 800219c:	d1cc      	bne.n	8002138 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800219e:	2300      	movs	r3, #0
}
 80021a0:	0018      	movs	r0, r3
 80021a2:	46bd      	mov	sp, r7
 80021a4:	b004      	add	sp, #16
 80021a6:	bd80      	pop	{r7, pc}

080021a8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b084      	sub	sp, #16
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80021b4:	e028      	b.n	8002208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	68b9      	ldr	r1, [r7, #8]
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	0018      	movs	r0, r3
 80021be:	f000 f82f 	bl	8002220 <I2C_IsAcknowledgeFailed>
 80021c2:	1e03      	subs	r3, r0, #0
 80021c4:	d001      	beq.n	80021ca <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e026      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ca:	f7ff f90d 	bl	80013e8 <HAL_GetTick>
 80021ce:	0002      	movs	r2, r0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	1ad3      	subs	r3, r2, r3
 80021d4:	68ba      	ldr	r2, [r7, #8]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d302      	bcc.n	80021e0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d113      	bne.n	8002208 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e4:	2220      	movs	r2, #32
 80021e6:	431a      	orrs	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	2241      	movs	r2, #65	; 0x41
 80021f0:	2120      	movs	r1, #32
 80021f2:	5499      	strb	r1, [r3, r2]
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2242      	movs	r2, #66	; 0x42
 80021f8:	2100      	movs	r1, #0
 80021fa:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	2240      	movs	r2, #64	; 0x40
 8002200:	2100      	movs	r1, #0
 8002202:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 8002204:	2301      	movs	r3, #1
 8002206:	e007      	b.n	8002218 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2220      	movs	r2, #32
 8002210:	4013      	ands	r3, r2
 8002212:	2b20      	cmp	r3, #32
 8002214:	d1cf      	bne.n	80021b6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002216:	2300      	movs	r3, #0
}
 8002218:	0018      	movs	r0, r3
 800221a:	46bd      	mov	sp, r7
 800221c:	b004      	add	sp, #16
 800221e:	bd80      	pop	{r7, pc}

08002220 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	60f8      	str	r0, [r7, #12]
 8002228:	60b9      	str	r1, [r7, #8]
 800222a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	2210      	movs	r2, #16
 8002234:	4013      	ands	r3, r2
 8002236:	2b10      	cmp	r3, #16
 8002238:	d164      	bne.n	8002304 <I2C_IsAcknowledgeFailed+0xe4>
  {
    /* In case of Soft End condition, generate the STOP condition */
    if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	2380      	movs	r3, #128	; 0x80
 8002242:	049b      	lsls	r3, r3, #18
 8002244:	401a      	ands	r2, r3
 8002246:	2380      	movs	r3, #128	; 0x80
 8002248:	049b      	lsls	r3, r3, #18
 800224a:	429a      	cmp	r2, r3
 800224c:	d02b      	beq.n	80022a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Generate Stop */
      hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	685a      	ldr	r2, [r3, #4]
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2180      	movs	r1, #128	; 0x80
 800225a:	01c9      	lsls	r1, r1, #7
 800225c:	430a      	orrs	r2, r1
 800225e:	605a      	str	r2, [r3, #4]
    }
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002260:	e021      	b.n	80022a6 <I2C_IsAcknowledgeFailed+0x86>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	3301      	adds	r3, #1
 8002266:	d01e      	beq.n	80022a6 <I2C_IsAcknowledgeFailed+0x86>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002268:	f7ff f8be 	bl	80013e8 <HAL_GetTick>
 800226c:	0002      	movs	r2, r0
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	68ba      	ldr	r2, [r7, #8]
 8002274:	429a      	cmp	r2, r3
 8002276:	d302      	bcc.n	800227e <I2C_IsAcknowledgeFailed+0x5e>
 8002278:	68bb      	ldr	r3, [r7, #8]
 800227a:	2b00      	cmp	r3, #0
 800227c:	d113      	bne.n	80022a6 <I2C_IsAcknowledgeFailed+0x86>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	2220      	movs	r2, #32
 8002284:	431a      	orrs	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	2241      	movs	r2, #65	; 0x41
 800228e:	2120      	movs	r1, #32
 8002290:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	2242      	movs	r2, #66	; 0x42
 8002296:	2100      	movs	r1, #0
 8002298:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	2240      	movs	r2, #64	; 0x40
 800229e:	2100      	movs	r1, #0
 80022a0:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e02f      	b.n	8002306 <I2C_IsAcknowledgeFailed+0xe6>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	699b      	ldr	r3, [r3, #24]
 80022ac:	2220      	movs	r2, #32
 80022ae:	4013      	ands	r3, r2
 80022b0:	2b20      	cmp	r3, #32
 80022b2:	d1d6      	bne.n	8002262 <I2C_IsAcknowledgeFailed+0x42>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	2210      	movs	r2, #16
 80022ba:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	2220      	movs	r2, #32
 80022c2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	0018      	movs	r0, r3
 80022c8:	f7ff fece 	bl	8002068 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	490e      	ldr	r1, [pc, #56]	; (8002310 <I2C_IsAcknowledgeFailed+0xf0>)
 80022d8:	400a      	ands	r2, r1
 80022da:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022e0:	2204      	movs	r2, #4
 80022e2:	431a      	orrs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2241      	movs	r2, #65	; 0x41
 80022ec:	2120      	movs	r1, #32
 80022ee:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2242      	movs	r2, #66	; 0x42
 80022f4:	2100      	movs	r1, #0
 80022f6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	2240      	movs	r2, #64	; 0x40
 80022fc:	2100      	movs	r1, #0
 80022fe:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e000      	b.n	8002306 <I2C_IsAcknowledgeFailed+0xe6>
  }
  return HAL_OK;
 8002304:	2300      	movs	r3, #0
}
 8002306:	0018      	movs	r0, r3
 8002308:	46bd      	mov	sp, r7
 800230a:	b004      	add	sp, #16
 800230c:	bd80      	pop	{r7, pc}
 800230e:	46c0      	nop			; (mov r8, r8)
 8002310:	fe00e800 	.word	0xfe00e800

08002314 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002314:	b590      	push	{r4, r7, lr}
 8002316:	b085      	sub	sp, #20
 8002318:	af00      	add	r7, sp, #0
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	0008      	movs	r0, r1
 800231e:	0011      	movs	r1, r2
 8002320:	607b      	str	r3, [r7, #4]
 8002322:	240a      	movs	r4, #10
 8002324:	193b      	adds	r3, r7, r4
 8002326:	1c02      	adds	r2, r0, #0
 8002328:	801a      	strh	r2, [r3, #0]
 800232a:	2009      	movs	r0, #9
 800232c:	183b      	adds	r3, r7, r0
 800232e:	1c0a      	adds	r2, r1, #0
 8002330:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	0d51      	lsrs	r1, r2, #21
 800233c:	2280      	movs	r2, #128	; 0x80
 800233e:	00d2      	lsls	r2, r2, #3
 8002340:	400a      	ands	r2, r1
 8002342:	490e      	ldr	r1, [pc, #56]	; (800237c <I2C_TransferConfig+0x68>)
 8002344:	430a      	orrs	r2, r1
 8002346:	43d2      	mvns	r2, r2
 8002348:	401a      	ands	r2, r3
 800234a:	0011      	movs	r1, r2
 800234c:	193b      	adds	r3, r7, r4
 800234e:	881b      	ldrh	r3, [r3, #0]
 8002350:	059b      	lsls	r3, r3, #22
 8002352:	0d9a      	lsrs	r2, r3, #22
 8002354:	183b      	adds	r3, r7, r0
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	0418      	lsls	r0, r3, #16
 800235a:	23ff      	movs	r3, #255	; 0xff
 800235c:	041b      	lsls	r3, r3, #16
 800235e:	4003      	ands	r3, r0
 8002360:	431a      	orrs	r2, r3
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	431a      	orrs	r2, r3
 8002366:	6a3b      	ldr	r3, [r7, #32]
 8002368:	431a      	orrs	r2, r3
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	430a      	orrs	r2, r1
 8002370:	605a      	str	r2, [r3, #4]
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                        (uint32_t)Mode | (uint32_t)Request));
}
 8002372:	46c0      	nop			; (mov r8, r8)
 8002374:	46bd      	mov	sp, r7
 8002376:	b005      	add	sp, #20
 8002378:	bd90      	pop	{r4, r7, pc}
 800237a:	46c0      	nop			; (mov r8, r8)
 800237c:	03ff63ff 	.word	0x03ff63ff

08002380 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b082      	sub	sp, #8
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
 8002388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2241      	movs	r2, #65	; 0x41
 800238e:	5c9b      	ldrb	r3, [r3, r2]
 8002390:	b2db      	uxtb	r3, r3
 8002392:	2b20      	cmp	r3, #32
 8002394:	d138      	bne.n	8002408 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2240      	movs	r2, #64	; 0x40
 800239a:	5c9b      	ldrb	r3, [r3, r2]
 800239c:	2b01      	cmp	r3, #1
 800239e:	d101      	bne.n	80023a4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80023a0:	2302      	movs	r3, #2
 80023a2:	e032      	b.n	800240a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2240      	movs	r2, #64	; 0x40
 80023a8:	2101      	movs	r1, #1
 80023aa:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	2241      	movs	r2, #65	; 0x41
 80023b0:	2124      	movs	r1, #36	; 0x24
 80023b2:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	681a      	ldr	r2, [r3, #0]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	2101      	movs	r1, #1
 80023c0:	438a      	bics	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4911      	ldr	r1, [pc, #68]	; (8002414 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 80023d0:	400a      	ands	r2, r1
 80023d2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	6819      	ldr	r1, [r3, #0]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	430a      	orrs	r2, r1
 80023e2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	681a      	ldr	r2, [r3, #0]
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2101      	movs	r1, #1
 80023f0:	430a      	orrs	r2, r1
 80023f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	2241      	movs	r2, #65	; 0x41
 80023f8:	2120      	movs	r1, #32
 80023fa:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2240      	movs	r2, #64	; 0x40
 8002400:	2100      	movs	r1, #0
 8002402:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002404:	2300      	movs	r3, #0
 8002406:	e000      	b.n	800240a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002408:	2302      	movs	r3, #2
  }
}
 800240a:	0018      	movs	r0, r3
 800240c:	46bd      	mov	sp, r7
 800240e:	b002      	add	sp, #8
 8002410:	bd80      	pop	{r7, pc}
 8002412:	46c0      	nop			; (mov r8, r8)
 8002414:	ffffefff 	.word	0xffffefff

08002418 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2241      	movs	r2, #65	; 0x41
 8002426:	5c9b      	ldrb	r3, [r3, r2]
 8002428:	b2db      	uxtb	r3, r3
 800242a:	2b20      	cmp	r3, #32
 800242c:	d139      	bne.n	80024a2 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	2240      	movs	r2, #64	; 0x40
 8002432:	5c9b      	ldrb	r3, [r3, r2]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d101      	bne.n	800243c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002438:	2302      	movs	r3, #2
 800243a:	e033      	b.n	80024a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2240      	movs	r2, #64	; 0x40
 8002440:	2101      	movs	r1, #1
 8002442:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2241      	movs	r2, #65	; 0x41
 8002448:	2124      	movs	r1, #36	; 0x24
 800244a:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	2101      	movs	r1, #1
 8002458:	438a      	bics	r2, r1
 800245a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	4a11      	ldr	r2, [pc, #68]	; (80024ac <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8002468:	4013      	ands	r3, r2
 800246a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	021b      	lsls	r3, r3, #8
 8002470:	68fa      	ldr	r2, [r7, #12]
 8002472:	4313      	orrs	r3, r2
 8002474:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	681a      	ldr	r2, [r3, #0]
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	2101      	movs	r1, #1
 800248a:	430a      	orrs	r2, r1
 800248c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	2241      	movs	r2, #65	; 0x41
 8002492:	2120      	movs	r1, #32
 8002494:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	2240      	movs	r2, #64	; 0x40
 800249a:	2100      	movs	r1, #0
 800249c:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800249e:	2300      	movs	r3, #0
 80024a0:	e000      	b.n	80024a4 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80024a2:	2302      	movs	r3, #2
  }
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b004      	add	sp, #16
 80024aa:	bd80      	pop	{r7, pc}
 80024ac:	fffff0ff 	.word	0xfffff0ff

080024b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b088      	sub	sp, #32
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d101      	bne.n	80024c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e301      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	2201      	movs	r2, #1
 80024c8:	4013      	ands	r3, r2
 80024ca:	d100      	bne.n	80024ce <HAL_RCC_OscConfig+0x1e>
 80024cc:	e08d      	b.n	80025ea <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80024ce:	4bc3      	ldr	r3, [pc, #780]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	220c      	movs	r2, #12
 80024d4:	4013      	ands	r3, r2
 80024d6:	2b04      	cmp	r3, #4
 80024d8:	d00e      	beq.n	80024f8 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80024da:	4bc0      	ldr	r3, [pc, #768]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	220c      	movs	r2, #12
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d116      	bne.n	8002514 <HAL_RCC_OscConfig+0x64>
 80024e6:	4bbd      	ldr	r3, [pc, #756]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80024e8:	685a      	ldr	r2, [r3, #4]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	025b      	lsls	r3, r3, #9
 80024ee:	401a      	ands	r2, r3
 80024f0:	2380      	movs	r3, #128	; 0x80
 80024f2:	025b      	lsls	r3, r3, #9
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d10d      	bne.n	8002514 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024f8:	4bb8      	ldr	r3, [pc, #736]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	2380      	movs	r3, #128	; 0x80
 80024fe:	029b      	lsls	r3, r3, #10
 8002500:	4013      	ands	r3, r2
 8002502:	d100      	bne.n	8002506 <HAL_RCC_OscConfig+0x56>
 8002504:	e070      	b.n	80025e8 <HAL_RCC_OscConfig+0x138>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d000      	beq.n	8002510 <HAL_RCC_OscConfig+0x60>
 800250e:	e06b      	b.n	80025e8 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e2d8      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b01      	cmp	r3, #1
 800251a:	d107      	bne.n	800252c <HAL_RCC_OscConfig+0x7c>
 800251c:	4baf      	ldr	r3, [pc, #700]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	4bae      	ldr	r3, [pc, #696]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002522:	2180      	movs	r1, #128	; 0x80
 8002524:	0249      	lsls	r1, r1, #9
 8002526:	430a      	orrs	r2, r1
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	e02f      	b.n	800258c <HAL_RCC_OscConfig+0xdc>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d10c      	bne.n	800254e <HAL_RCC_OscConfig+0x9e>
 8002534:	4ba9      	ldr	r3, [pc, #676]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	4ba8      	ldr	r3, [pc, #672]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800253a:	49a9      	ldr	r1, [pc, #676]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800253c:	400a      	ands	r2, r1
 800253e:	601a      	str	r2, [r3, #0]
 8002540:	4ba6      	ldr	r3, [pc, #664]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4ba5      	ldr	r3, [pc, #660]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002546:	49a7      	ldr	r1, [pc, #668]	; (80027e4 <HAL_RCC_OscConfig+0x334>)
 8002548:	400a      	ands	r2, r1
 800254a:	601a      	str	r2, [r3, #0]
 800254c:	e01e      	b.n	800258c <HAL_RCC_OscConfig+0xdc>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b05      	cmp	r3, #5
 8002554:	d10e      	bne.n	8002574 <HAL_RCC_OscConfig+0xc4>
 8002556:	4ba1      	ldr	r3, [pc, #644]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002558:	681a      	ldr	r2, [r3, #0]
 800255a:	4ba0      	ldr	r3, [pc, #640]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800255c:	2180      	movs	r1, #128	; 0x80
 800255e:	02c9      	lsls	r1, r1, #11
 8002560:	430a      	orrs	r2, r1
 8002562:	601a      	str	r2, [r3, #0]
 8002564:	4b9d      	ldr	r3, [pc, #628]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	4b9c      	ldr	r3, [pc, #624]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800256a:	2180      	movs	r1, #128	; 0x80
 800256c:	0249      	lsls	r1, r1, #9
 800256e:	430a      	orrs	r2, r1
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e00b      	b.n	800258c <HAL_RCC_OscConfig+0xdc>
 8002574:	4b99      	ldr	r3, [pc, #612]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	4b98      	ldr	r3, [pc, #608]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800257a:	4999      	ldr	r1, [pc, #612]	; (80027e0 <HAL_RCC_OscConfig+0x330>)
 800257c:	400a      	ands	r2, r1
 800257e:	601a      	str	r2, [r3, #0]
 8002580:	4b96      	ldr	r3, [pc, #600]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	4b95      	ldr	r3, [pc, #596]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002586:	4997      	ldr	r1, [pc, #604]	; (80027e4 <HAL_RCC_OscConfig+0x334>)
 8002588:	400a      	ands	r2, r1
 800258a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d014      	beq.n	80025be <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002594:	f7fe ff28 	bl	80013e8 <HAL_GetTick>
 8002598:	0003      	movs	r3, r0
 800259a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800259c:	e008      	b.n	80025b0 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800259e:	f7fe ff23 	bl	80013e8 <HAL_GetTick>
 80025a2:	0002      	movs	r2, r0
 80025a4:	69bb      	ldr	r3, [r7, #24]
 80025a6:	1ad3      	subs	r3, r2, r3
 80025a8:	2b64      	cmp	r3, #100	; 0x64
 80025aa:	d901      	bls.n	80025b0 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80025ac:	2303      	movs	r3, #3
 80025ae:	e28a      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025b0:	4b8a      	ldr	r3, [pc, #552]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	2380      	movs	r3, #128	; 0x80
 80025b6:	029b      	lsls	r3, r3, #10
 80025b8:	4013      	ands	r3, r2
 80025ba:	d0f0      	beq.n	800259e <HAL_RCC_OscConfig+0xee>
 80025bc:	e015      	b.n	80025ea <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025be:	f7fe ff13 	bl	80013e8 <HAL_GetTick>
 80025c2:	0003      	movs	r3, r0
 80025c4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025c8:	f7fe ff0e 	bl	80013e8 <HAL_GetTick>
 80025cc:	0002      	movs	r2, r0
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e275      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80025da:	4b80      	ldr	r3, [pc, #512]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80025dc:	681a      	ldr	r2, [r3, #0]
 80025de:	2380      	movs	r3, #128	; 0x80
 80025e0:	029b      	lsls	r3, r3, #10
 80025e2:	4013      	ands	r3, r2
 80025e4:	d1f0      	bne.n	80025c8 <HAL_RCC_OscConfig+0x118>
 80025e6:	e000      	b.n	80025ea <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e8:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d100      	bne.n	80025f6 <HAL_RCC_OscConfig+0x146>
 80025f4:	e069      	b.n	80026ca <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025f6:	4b79      	ldr	r3, [pc, #484]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	220c      	movs	r2, #12
 80025fc:	4013      	ands	r3, r2
 80025fe:	d00b      	beq.n	8002618 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002600:	4b76      	ldr	r3, [pc, #472]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	220c      	movs	r2, #12
 8002606:	4013      	ands	r3, r2
 8002608:	2b08      	cmp	r3, #8
 800260a:	d11c      	bne.n	8002646 <HAL_RCC_OscConfig+0x196>
 800260c:	4b73      	ldr	r3, [pc, #460]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800260e:	685a      	ldr	r2, [r3, #4]
 8002610:	2380      	movs	r3, #128	; 0x80
 8002612:	025b      	lsls	r3, r3, #9
 8002614:	4013      	ands	r3, r2
 8002616:	d116      	bne.n	8002646 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002618:	4b70      	ldr	r3, [pc, #448]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	2202      	movs	r2, #2
 800261e:	4013      	ands	r3, r2
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x17e>
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	68db      	ldr	r3, [r3, #12]
 8002626:	2b01      	cmp	r3, #1
 8002628:	d001      	beq.n	800262e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e24b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800262e:	4b6b      	ldr	r3, [pc, #428]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	22f8      	movs	r2, #248	; 0xf8
 8002634:	4393      	bics	r3, r2
 8002636:	0019      	movs	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	00da      	lsls	r2, r3, #3
 800263e:	4b67      	ldr	r3, [pc, #412]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002640:	430a      	orrs	r2, r1
 8002642:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002644:	e041      	b.n	80026ca <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d024      	beq.n	8002698 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800264e:	4b63      	ldr	r3, [pc, #396]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002654:	2101      	movs	r1, #1
 8002656:	430a      	orrs	r2, r1
 8002658:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265a:	f7fe fec5 	bl	80013e8 <HAL_GetTick>
 800265e:	0003      	movs	r3, r0
 8002660:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002664:	f7fe fec0 	bl	80013e8 <HAL_GetTick>
 8002668:	0002      	movs	r2, r0
 800266a:	69bb      	ldr	r3, [r7, #24]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e227      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002676:	4b59      	ldr	r3, [pc, #356]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2202      	movs	r2, #2
 800267c:	4013      	ands	r3, r2
 800267e:	d0f1      	beq.n	8002664 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002680:	4b56      	ldr	r3, [pc, #344]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	22f8      	movs	r2, #248	; 0xf8
 8002686:	4393      	bics	r3, r2
 8002688:	0019      	movs	r1, r3
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	00da      	lsls	r2, r3, #3
 8002690:	4b52      	ldr	r3, [pc, #328]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002692:	430a      	orrs	r2, r1
 8002694:	601a      	str	r2, [r3, #0]
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002698:	4b50      	ldr	r3, [pc, #320]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4b4f      	ldr	r3, [pc, #316]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800269e:	2101      	movs	r1, #1
 80026a0:	438a      	bics	r2, r1
 80026a2:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7fe fea0 	bl	80013e8 <HAL_GetTick>
 80026a8:	0003      	movs	r3, r0
 80026aa:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026ae:	f7fe fe9b 	bl	80013e8 <HAL_GetTick>
 80026b2:	0002      	movs	r2, r0
 80026b4:	69bb      	ldr	r3, [r7, #24]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e202      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80026c0:	4b46      	ldr	r3, [pc, #280]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2202      	movs	r2, #2
 80026c6:	4013      	ands	r3, r2
 80026c8:	d1f1      	bne.n	80026ae <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2208      	movs	r2, #8
 80026d0:	4013      	ands	r3, r2
 80026d2:	d036      	beq.n	8002742 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	69db      	ldr	r3, [r3, #28]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d019      	beq.n	8002710 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80026dc:	4b3f      	ldr	r3, [pc, #252]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80026de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026e0:	4b3e      	ldr	r3, [pc, #248]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80026e2:	2101      	movs	r1, #1
 80026e4:	430a      	orrs	r2, r1
 80026e6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026e8:	f7fe fe7e 	bl	80013e8 <HAL_GetTick>
 80026ec:	0003      	movs	r3, r0
 80026ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026f2:	f7fe fe79 	bl	80013e8 <HAL_GetTick>
 80026f6:	0002      	movs	r2, r0
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1e0      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002708:	2202      	movs	r2, #2
 800270a:	4013      	ands	r3, r2
 800270c:	d0f1      	beq.n	80026f2 <HAL_RCC_OscConfig+0x242>
 800270e:	e018      	b.n	8002742 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002710:	4b32      	ldr	r3, [pc, #200]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002712:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002714:	4b31      	ldr	r3, [pc, #196]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002716:	2101      	movs	r1, #1
 8002718:	438a      	bics	r2, r1
 800271a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800271c:	f7fe fe64 	bl	80013e8 <HAL_GetTick>
 8002720:	0003      	movs	r3, r0
 8002722:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002724:	e008      	b.n	8002738 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002726:	f7fe fe5f 	bl	80013e8 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	69bb      	ldr	r3, [r7, #24]
 800272e:	1ad3      	subs	r3, r2, r3
 8002730:	2b02      	cmp	r3, #2
 8002732:	d901      	bls.n	8002738 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8002734:	2303      	movs	r3, #3
 8002736:	e1c6      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002738:	4b28      	ldr	r3, [pc, #160]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 800273a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273c:	2202      	movs	r2, #2
 800273e:	4013      	ands	r3, r2
 8002740:	d1f1      	bne.n	8002726 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	2204      	movs	r2, #4
 8002748:	4013      	ands	r3, r2
 800274a:	d100      	bne.n	800274e <HAL_RCC_OscConfig+0x29e>
 800274c:	e0b4      	b.n	80028b8 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800274e:	201f      	movs	r0, #31
 8002750:	183b      	adds	r3, r7, r0
 8002752:	2200      	movs	r2, #0
 8002754:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002756:	4b21      	ldr	r3, [pc, #132]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002758:	69da      	ldr	r2, [r3, #28]
 800275a:	2380      	movs	r3, #128	; 0x80
 800275c:	055b      	lsls	r3, r3, #21
 800275e:	4013      	ands	r3, r2
 8002760:	d110      	bne.n	8002784 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002762:	4b1e      	ldr	r3, [pc, #120]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002764:	69da      	ldr	r2, [r3, #28]
 8002766:	4b1d      	ldr	r3, [pc, #116]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002768:	2180      	movs	r1, #128	; 0x80
 800276a:	0549      	lsls	r1, r1, #21
 800276c:	430a      	orrs	r2, r1
 800276e:	61da      	str	r2, [r3, #28]
 8002770:	4b1a      	ldr	r3, [pc, #104]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 8002772:	69da      	ldr	r2, [r3, #28]
 8002774:	2380      	movs	r3, #128	; 0x80
 8002776:	055b      	lsls	r3, r3, #21
 8002778:	4013      	ands	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]
 800277c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800277e:	183b      	adds	r3, r7, r0
 8002780:	2201      	movs	r2, #1
 8002782:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002784:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	005b      	lsls	r3, r3, #1
 800278c:	4013      	ands	r3, r2
 800278e:	d11a      	bne.n	80027c6 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002790:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002792:	681a      	ldr	r2, [r3, #0]
 8002794:	4b14      	ldr	r3, [pc, #80]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 8002796:	2180      	movs	r1, #128	; 0x80
 8002798:	0049      	lsls	r1, r1, #1
 800279a:	430a      	orrs	r2, r1
 800279c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800279e:	f7fe fe23 	bl	80013e8 <HAL_GetTick>
 80027a2:	0003      	movs	r3, r0
 80027a4:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a6:	e008      	b.n	80027ba <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027a8:	f7fe fe1e 	bl	80013e8 <HAL_GetTick>
 80027ac:	0002      	movs	r2, r0
 80027ae:	69bb      	ldr	r3, [r7, #24]
 80027b0:	1ad3      	subs	r3, r2, r3
 80027b2:	2b64      	cmp	r3, #100	; 0x64
 80027b4:	d901      	bls.n	80027ba <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80027b6:	2303      	movs	r3, #3
 80027b8:	e185      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ba:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <HAL_RCC_OscConfig+0x338>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4013      	ands	r3, r2
 80027c4:	d0f0      	beq.n	80027a8 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	689b      	ldr	r3, [r3, #8]
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d10e      	bne.n	80027ec <HAL_RCC_OscConfig+0x33c>
 80027ce:	4b03      	ldr	r3, [pc, #12]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80027d0:	6a1a      	ldr	r2, [r3, #32]
 80027d2:	4b02      	ldr	r3, [pc, #8]	; (80027dc <HAL_RCC_OscConfig+0x32c>)
 80027d4:	2101      	movs	r1, #1
 80027d6:	430a      	orrs	r2, r1
 80027d8:	621a      	str	r2, [r3, #32]
 80027da:	e035      	b.n	8002848 <HAL_RCC_OscConfig+0x398>
 80027dc:	40021000 	.word	0x40021000
 80027e0:	fffeffff 	.word	0xfffeffff
 80027e4:	fffbffff 	.word	0xfffbffff
 80027e8:	40007000 	.word	0x40007000
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10c      	bne.n	800280e <HAL_RCC_OscConfig+0x35e>
 80027f4:	4bb6      	ldr	r3, [pc, #728]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80027f6:	6a1a      	ldr	r2, [r3, #32]
 80027f8:	4bb5      	ldr	r3, [pc, #724]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80027fa:	2101      	movs	r1, #1
 80027fc:	438a      	bics	r2, r1
 80027fe:	621a      	str	r2, [r3, #32]
 8002800:	4bb3      	ldr	r3, [pc, #716]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	4bb2      	ldr	r3, [pc, #712]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002806:	2104      	movs	r1, #4
 8002808:	438a      	bics	r2, r1
 800280a:	621a      	str	r2, [r3, #32]
 800280c:	e01c      	b.n	8002848 <HAL_RCC_OscConfig+0x398>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	689b      	ldr	r3, [r3, #8]
 8002812:	2b05      	cmp	r3, #5
 8002814:	d10c      	bne.n	8002830 <HAL_RCC_OscConfig+0x380>
 8002816:	4bae      	ldr	r3, [pc, #696]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002818:	6a1a      	ldr	r2, [r3, #32]
 800281a:	4bad      	ldr	r3, [pc, #692]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800281c:	2104      	movs	r1, #4
 800281e:	430a      	orrs	r2, r1
 8002820:	621a      	str	r2, [r3, #32]
 8002822:	4bab      	ldr	r3, [pc, #684]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002824:	6a1a      	ldr	r2, [r3, #32]
 8002826:	4baa      	ldr	r3, [pc, #680]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002828:	2101      	movs	r1, #1
 800282a:	430a      	orrs	r2, r1
 800282c:	621a      	str	r2, [r3, #32]
 800282e:	e00b      	b.n	8002848 <HAL_RCC_OscConfig+0x398>
 8002830:	4ba7      	ldr	r3, [pc, #668]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002832:	6a1a      	ldr	r2, [r3, #32]
 8002834:	4ba6      	ldr	r3, [pc, #664]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002836:	2101      	movs	r1, #1
 8002838:	438a      	bics	r2, r1
 800283a:	621a      	str	r2, [r3, #32]
 800283c:	4ba4      	ldr	r3, [pc, #656]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800283e:	6a1a      	ldr	r2, [r3, #32]
 8002840:	4ba3      	ldr	r3, [pc, #652]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002842:	2104      	movs	r1, #4
 8002844:	438a      	bics	r2, r1
 8002846:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d014      	beq.n	800287a <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002850:	f7fe fdca 	bl	80013e8 <HAL_GetTick>
 8002854:	0003      	movs	r3, r0
 8002856:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002858:	e009      	b.n	800286e <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800285a:	f7fe fdc5 	bl	80013e8 <HAL_GetTick>
 800285e:	0002      	movs	r2, r0
 8002860:	69bb      	ldr	r3, [r7, #24]
 8002862:	1ad3      	subs	r3, r2, r3
 8002864:	4a9b      	ldr	r2, [pc, #620]	; (8002ad4 <HAL_RCC_OscConfig+0x624>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d901      	bls.n	800286e <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 800286a:	2303      	movs	r3, #3
 800286c:	e12b      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800286e:	4b98      	ldr	r3, [pc, #608]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002870:	6a1b      	ldr	r3, [r3, #32]
 8002872:	2202      	movs	r2, #2
 8002874:	4013      	ands	r3, r2
 8002876:	d0f0      	beq.n	800285a <HAL_RCC_OscConfig+0x3aa>
 8002878:	e013      	b.n	80028a2 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800287a:	f7fe fdb5 	bl	80013e8 <HAL_GetTick>
 800287e:	0003      	movs	r3, r0
 8002880:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002882:	e009      	b.n	8002898 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002884:	f7fe fdb0 	bl	80013e8 <HAL_GetTick>
 8002888:	0002      	movs	r2, r0
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	1ad3      	subs	r3, r2, r3
 800288e:	4a91      	ldr	r2, [pc, #580]	; (8002ad4 <HAL_RCC_OscConfig+0x624>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e116      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002898:	4b8d      	ldr	r3, [pc, #564]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800289a:	6a1b      	ldr	r3, [r3, #32]
 800289c:	2202      	movs	r2, #2
 800289e:	4013      	ands	r3, r2
 80028a0:	d1f0      	bne.n	8002884 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028a2:	231f      	movs	r3, #31
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d105      	bne.n	80028b8 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028ac:	4b88      	ldr	r3, [pc, #544]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80028ae:	69da      	ldr	r2, [r3, #28]
 80028b0:	4b87      	ldr	r3, [pc, #540]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80028b2:	4989      	ldr	r1, [pc, #548]	; (8002ad8 <HAL_RCC_OscConfig+0x628>)
 80028b4:	400a      	ands	r2, r1
 80028b6:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2210      	movs	r2, #16
 80028be:	4013      	ands	r3, r2
 80028c0:	d063      	beq.n	800298a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	2b01      	cmp	r3, #1
 80028c8:	d12a      	bne.n	8002920 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80028ca:	4b81      	ldr	r3, [pc, #516]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80028cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028ce:	4b80      	ldr	r3, [pc, #512]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80028d0:	2104      	movs	r1, #4
 80028d2:	430a      	orrs	r2, r1
 80028d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80028d6:	4b7e      	ldr	r3, [pc, #504]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80028d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80028da:	4b7d      	ldr	r3, [pc, #500]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80028dc:	2101      	movs	r1, #1
 80028de:	430a      	orrs	r2, r1
 80028e0:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028e2:	f7fe fd81 	bl	80013e8 <HAL_GetTick>
 80028e6:	0003      	movs	r3, r0
 80028e8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80028ec:	f7fe fd7c 	bl	80013e8 <HAL_GetTick>
 80028f0:	0002      	movs	r2, r0
 80028f2:	69bb      	ldr	r3, [r7, #24]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e0e3      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80028fe:	4b74      	ldr	r3, [pc, #464]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002900:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002902:	2202      	movs	r2, #2
 8002904:	4013      	ands	r3, r2
 8002906:	d0f1      	beq.n	80028ec <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002908:	4b71      	ldr	r3, [pc, #452]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800290a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800290c:	22f8      	movs	r2, #248	; 0xf8
 800290e:	4393      	bics	r3, r2
 8002910:	0019      	movs	r1, r3
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	699b      	ldr	r3, [r3, #24]
 8002916:	00da      	lsls	r2, r3, #3
 8002918:	4b6d      	ldr	r3, [pc, #436]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800291a:	430a      	orrs	r2, r1
 800291c:	635a      	str	r2, [r3, #52]	; 0x34
 800291e:	e034      	b.n	800298a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	695b      	ldr	r3, [r3, #20]
 8002924:	3305      	adds	r3, #5
 8002926:	d111      	bne.n	800294c <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002928:	4b69      	ldr	r3, [pc, #420]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800292a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800292c:	4b68      	ldr	r3, [pc, #416]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800292e:	2104      	movs	r1, #4
 8002930:	438a      	bics	r2, r1
 8002932:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002934:	4b66      	ldr	r3, [pc, #408]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002938:	22f8      	movs	r2, #248	; 0xf8
 800293a:	4393      	bics	r3, r2
 800293c:	0019      	movs	r1, r3
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	00da      	lsls	r2, r3, #3
 8002944:	4b62      	ldr	r3, [pc, #392]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002946:	430a      	orrs	r2, r1
 8002948:	635a      	str	r2, [r3, #52]	; 0x34
 800294a:	e01e      	b.n	800298a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800294c:	4b60      	ldr	r3, [pc, #384]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800294e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002950:	4b5f      	ldr	r3, [pc, #380]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002952:	2104      	movs	r1, #4
 8002954:	430a      	orrs	r2, r1
 8002956:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002958:	4b5d      	ldr	r3, [pc, #372]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800295a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800295c:	4b5c      	ldr	r3, [pc, #368]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 800295e:	2101      	movs	r1, #1
 8002960:	438a      	bics	r2, r1
 8002962:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7fe fd40 	bl	80013e8 <HAL_GetTick>
 8002968:	0003      	movs	r3, r0
 800296a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800296c:	e008      	b.n	8002980 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800296e:	f7fe fd3b 	bl	80013e8 <HAL_GetTick>
 8002972:	0002      	movs	r2, r0
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	2b02      	cmp	r3, #2
 800297a:	d901      	bls.n	8002980 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 800297c:	2303      	movs	r3, #3
 800297e:	e0a2      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002980:	4b53      	ldr	r3, [pc, #332]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002984:	2202      	movs	r2, #2
 8002986:	4013      	ands	r3, r2
 8002988:	d1f1      	bne.n	800296e <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6a1b      	ldr	r3, [r3, #32]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d100      	bne.n	8002994 <HAL_RCC_OscConfig+0x4e4>
 8002992:	e097      	b.n	8002ac4 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002994:	4b4e      	ldr	r3, [pc, #312]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	220c      	movs	r2, #12
 800299a:	4013      	ands	r3, r2
 800299c:	2b08      	cmp	r3, #8
 800299e:	d100      	bne.n	80029a2 <HAL_RCC_OscConfig+0x4f2>
 80029a0:	e06b      	b.n	8002a7a <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	6a1b      	ldr	r3, [r3, #32]
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d14c      	bne.n	8002a44 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029aa:	4b49      	ldr	r3, [pc, #292]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80029ac:	681a      	ldr	r2, [r3, #0]
 80029ae:	4b48      	ldr	r3, [pc, #288]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80029b0:	494a      	ldr	r1, [pc, #296]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 80029b2:	400a      	ands	r2, r1
 80029b4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029b6:	f7fe fd17 	bl	80013e8 <HAL_GetTick>
 80029ba:	0003      	movs	r3, r0
 80029bc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029be:	e008      	b.n	80029d2 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029c0:	f7fe fd12 	bl	80013e8 <HAL_GetTick>
 80029c4:	0002      	movs	r2, r0
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	1ad3      	subs	r3, r2, r3
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d901      	bls.n	80029d2 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80029ce:	2303      	movs	r3, #3
 80029d0:	e079      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029d2:	4b3f      	ldr	r3, [pc, #252]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	2380      	movs	r3, #128	; 0x80
 80029d8:	049b      	lsls	r3, r3, #18
 80029da:	4013      	ands	r3, r2
 80029dc:	d1f0      	bne.n	80029c0 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80029de:	4b3c      	ldr	r3, [pc, #240]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80029e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029e2:	220f      	movs	r2, #15
 80029e4:	4393      	bics	r3, r2
 80029e6:	0019      	movs	r1, r3
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80029ec:	4b38      	ldr	r3, [pc, #224]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80029ee:	430a      	orrs	r2, r1
 80029f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80029f2:	4b37      	ldr	r3, [pc, #220]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	4a3a      	ldr	r2, [pc, #232]	; (8002ae0 <HAL_RCC_OscConfig+0x630>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	0019      	movs	r1, r3
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a04:	431a      	orrs	r2, r3
 8002a06:	4b32      	ldr	r3, [pc, #200]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a08:	430a      	orrs	r2, r1
 8002a0a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a0c:	4b30      	ldr	r3, [pc, #192]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a0e:	681a      	ldr	r2, [r3, #0]
 8002a10:	4b2f      	ldr	r3, [pc, #188]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a12:	2180      	movs	r1, #128	; 0x80
 8002a14:	0449      	lsls	r1, r1, #17
 8002a16:	430a      	orrs	r2, r1
 8002a18:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a1a:	f7fe fce5 	bl	80013e8 <HAL_GetTick>
 8002a1e:	0003      	movs	r3, r0
 8002a20:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a22:	e008      	b.n	8002a36 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a24:	f7fe fce0 	bl	80013e8 <HAL_GetTick>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	1ad3      	subs	r3, r2, r3
 8002a2e:	2b02      	cmp	r3, #2
 8002a30:	d901      	bls.n	8002a36 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002a32:	2303      	movs	r3, #3
 8002a34:	e047      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002a36:	4b26      	ldr	r3, [pc, #152]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	2380      	movs	r3, #128	; 0x80
 8002a3c:	049b      	lsls	r3, r3, #18
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d0f0      	beq.n	8002a24 <HAL_RCC_OscConfig+0x574>
 8002a42:	e03f      	b.n	8002ac4 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a44:	4b22      	ldr	r3, [pc, #136]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4b21      	ldr	r3, [pc, #132]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a4a:	4924      	ldr	r1, [pc, #144]	; (8002adc <HAL_RCC_OscConfig+0x62c>)
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a50:	f7fe fcca 	bl	80013e8 <HAL_GetTick>
 8002a54:	0003      	movs	r3, r0
 8002a56:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a58:	e008      	b.n	8002a6c <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a5a:	f7fe fcc5 	bl	80013e8 <HAL_GetTick>
 8002a5e:	0002      	movs	r2, r0
 8002a60:	69bb      	ldr	r3, [r7, #24]
 8002a62:	1ad3      	subs	r3, r2, r3
 8002a64:	2b02      	cmp	r3, #2
 8002a66:	d901      	bls.n	8002a6c <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002a68:	2303      	movs	r3, #3
 8002a6a:	e02c      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6c:	4b18      	ldr	r3, [pc, #96]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	049b      	lsls	r3, r3, #18
 8002a74:	4013      	ands	r3, r2
 8002a76:	d1f0      	bne.n	8002a5a <HAL_RCC_OscConfig+0x5aa>
 8002a78:	e024      	b.n	8002ac4 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d101      	bne.n	8002a86 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e01f      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002a86:	4b12      	ldr	r3, [pc, #72]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a88:	685b      	ldr	r3, [r3, #4]
 8002a8a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002a8c:	4b10      	ldr	r3, [pc, #64]	; (8002ad0 <HAL_RCC_OscConfig+0x620>)
 8002a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a90:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a92:	697a      	ldr	r2, [r7, #20]
 8002a94:	2380      	movs	r3, #128	; 0x80
 8002a96:	025b      	lsls	r3, r3, #9
 8002a98:	401a      	ands	r2, r3
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d10e      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002aa2:	693b      	ldr	r3, [r7, #16]
 8002aa4:	220f      	movs	r2, #15
 8002aa6:	401a      	ands	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d107      	bne.n	8002ac0 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	23f0      	movs	r3, #240	; 0xf0
 8002ab4:	039b      	lsls	r3, r3, #14
 8002ab6:	401a      	ands	r2, r3
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e000      	b.n	8002ac6 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002ac4:	2300      	movs	r3, #0
}
 8002ac6:	0018      	movs	r0, r3
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	b008      	add	sp, #32
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	46c0      	nop			; (mov r8, r8)
 8002ad0:	40021000 	.word	0x40021000
 8002ad4:	00001388 	.word	0x00001388
 8002ad8:	efffffff 	.word	0xefffffff
 8002adc:	feffffff 	.word	0xfeffffff
 8002ae0:	ffc2ffff 	.word	0xffc2ffff

08002ae4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
 8002aec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d101      	bne.n	8002af8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002af4:	2301      	movs	r3, #1
 8002af6:	e0b3      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002af8:	4b5b      	ldr	r3, [pc, #364]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2201      	movs	r2, #1
 8002afe:	4013      	ands	r3, r2
 8002b00:	683a      	ldr	r2, [r7, #0]
 8002b02:	429a      	cmp	r2, r3
 8002b04:	d911      	bls.n	8002b2a <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b06:	4b58      	ldr	r3, [pc, #352]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	4393      	bics	r3, r2
 8002b0e:	0019      	movs	r1, r3
 8002b10:	4b55      	ldr	r3, [pc, #340]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	430a      	orrs	r2, r1
 8002b16:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b18:	4b53      	ldr	r3, [pc, #332]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	4013      	ands	r3, r2
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d001      	beq.n	8002b2a <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e09a      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2202      	movs	r2, #2
 8002b30:	4013      	ands	r3, r2
 8002b32:	d015      	beq.n	8002b60 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2204      	movs	r2, #4
 8002b3a:	4013      	ands	r3, r2
 8002b3c:	d006      	beq.n	8002b4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002b3e:	4b4b      	ldr	r3, [pc, #300]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b40:	685a      	ldr	r2, [r3, #4]
 8002b42:	4b4a      	ldr	r3, [pc, #296]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b44:	21e0      	movs	r1, #224	; 0xe0
 8002b46:	00c9      	lsls	r1, r1, #3
 8002b48:	430a      	orrs	r2, r1
 8002b4a:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b4c:	4b47      	ldr	r3, [pc, #284]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b4e:	685b      	ldr	r3, [r3, #4]
 8002b50:	22f0      	movs	r2, #240	; 0xf0
 8002b52:	4393      	bics	r3, r2
 8002b54:	0019      	movs	r1, r3
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689a      	ldr	r2, [r3, #8]
 8002b5a:	4b44      	ldr	r3, [pc, #272]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b5c:	430a      	orrs	r2, r1
 8002b5e:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	2201      	movs	r2, #1
 8002b66:	4013      	ands	r3, r2
 8002b68:	d040      	beq.n	8002bec <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d107      	bne.n	8002b82 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b74:	681a      	ldr	r2, [r3, #0]
 8002b76:	2380      	movs	r3, #128	; 0x80
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	4013      	ands	r3, r2
 8002b7c:	d114      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b7e:	2301      	movs	r3, #1
 8002b80:	e06e      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	685b      	ldr	r3, [r3, #4]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d107      	bne.n	8002b9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b8a:	4b38      	ldr	r3, [pc, #224]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	2380      	movs	r3, #128	; 0x80
 8002b90:	049b      	lsls	r3, r3, #18
 8002b92:	4013      	ands	r3, r2
 8002b94:	d108      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e062      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9a:	4b34      	ldr	r3, [pc, #208]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2202      	movs	r2, #2
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	d101      	bne.n	8002ba8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002ba4:	2301      	movs	r3, #1
 8002ba6:	e05b      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ba8:	4b30      	ldr	r3, [pc, #192]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	2203      	movs	r2, #3
 8002bae:	4393      	bics	r3, r2
 8002bb0:	0019      	movs	r1, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	685a      	ldr	r2, [r3, #4]
 8002bb6:	4b2d      	ldr	r3, [pc, #180]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002bb8:	430a      	orrs	r2, r1
 8002bba:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002bbc:	f7fe fc14 	bl	80013e8 <HAL_GetTick>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bc4:	e009      	b.n	8002bda <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bc6:	f7fe fc0f 	bl	80013e8 <HAL_GetTick>
 8002bca:	0002      	movs	r2, r0
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	4a27      	ldr	r2, [pc, #156]	; (8002c70 <HAL_RCC_ClockConfig+0x18c>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e042      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	220c      	movs	r2, #12
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ec      	bne.n	8002bc6 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002bec:	4b1e      	ldr	r3, [pc, #120]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d211      	bcs.n	8002c1e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2201      	movs	r2, #1
 8002c00:	4393      	bics	r3, r2
 8002c02:	0019      	movs	r1, r3
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0c:	4b16      	ldr	r3, [pc, #88]	; (8002c68 <HAL_RCC_ClockConfig+0x184>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	2201      	movs	r2, #1
 8002c12:	4013      	ands	r3, r2
 8002c14:	683a      	ldr	r2, [r7, #0]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d001      	beq.n	8002c1e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e020      	b.n	8002c60 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2204      	movs	r2, #4
 8002c24:	4013      	ands	r3, r2
 8002c26:	d009      	beq.n	8002c3c <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002c28:	4b10      	ldr	r3, [pc, #64]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	4a11      	ldr	r2, [pc, #68]	; (8002c74 <HAL_RCC_ClockConfig+0x190>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	0019      	movs	r1, r3
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	68da      	ldr	r2, [r3, #12]
 8002c36:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002c38:	430a      	orrs	r2, r1
 8002c3a:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c3c:	f000 f820 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8002c40:	0001      	movs	r1, r0
 8002c42:	4b0a      	ldr	r3, [pc, #40]	; (8002c6c <HAL_RCC_ClockConfig+0x188>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	091b      	lsrs	r3, r3, #4
 8002c48:	220f      	movs	r2, #15
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	4a0a      	ldr	r2, [pc, #40]	; (8002c78 <HAL_RCC_ClockConfig+0x194>)
 8002c4e:	5cd3      	ldrb	r3, [r2, r3]
 8002c50:	000a      	movs	r2, r1
 8002c52:	40da      	lsrs	r2, r3
 8002c54:	4b09      	ldr	r3, [pc, #36]	; (8002c7c <HAL_RCC_ClockConfig+0x198>)
 8002c56:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c58:	2000      	movs	r0, #0
 8002c5a:	f7fe fb7f 	bl	800135c <HAL_InitTick>
  
  return HAL_OK;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	0018      	movs	r0, r3
 8002c62:	46bd      	mov	sp, r7
 8002c64:	b004      	add	sp, #16
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	40022000 	.word	0x40022000
 8002c6c:	40021000 	.word	0x40021000
 8002c70:	00001388 	.word	0x00001388
 8002c74:	fffff8ff 	.word	0xfffff8ff
 8002c78:	08004a08 	.word	0x08004a08
 8002c7c:	20000000 	.word	0x20000000

08002c80 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c80:	b590      	push	{r4, r7, lr}
 8002c82:	b08f      	sub	sp, #60	; 0x3c
 8002c84:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8002c86:	2314      	movs	r3, #20
 8002c88:	18fb      	adds	r3, r7, r3
 8002c8a:	4a2b      	ldr	r2, [pc, #172]	; (8002d38 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002c8c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c8e:	c313      	stmia	r3!, {r0, r1, r4}
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002c94:	1d3b      	adds	r3, r7, #4
 8002c96:	4a29      	ldr	r2, [pc, #164]	; (8002d3c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002c98:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002c9a:	c313      	stmia	r3!, {r0, r1, r4}
 8002c9c:	6812      	ldr	r2, [r2, #0]
 8002c9e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ca8:	2300      	movs	r3, #0
 8002caa:	637b      	str	r3, [r7, #52]	; 0x34
 8002cac:	2300      	movs	r3, #0
 8002cae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002cb4:	4b22      	ldr	r3, [pc, #136]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cb6:	685b      	ldr	r3, [r3, #4]
 8002cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002cba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cbc:	220c      	movs	r2, #12
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	2b04      	cmp	r3, #4
 8002cc2:	d002      	beq.n	8002cca <HAL_RCC_GetSysClockFreq+0x4a>
 8002cc4:	2b08      	cmp	r3, #8
 8002cc6:	d003      	beq.n	8002cd0 <HAL_RCC_GetSysClockFreq+0x50>
 8002cc8:	e02d      	b.n	8002d26 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002cca:	4b1e      	ldr	r3, [pc, #120]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ccc:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002cce:	e02d      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cd2:	0c9b      	lsrs	r3, r3, #18
 8002cd4:	220f      	movs	r2, #15
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	2214      	movs	r2, #20
 8002cda:	18ba      	adds	r2, r7, r2
 8002cdc:	5cd3      	ldrb	r3, [r2, r3]
 8002cde:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002ce0:	4b17      	ldr	r3, [pc, #92]	; (8002d40 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	220f      	movs	r2, #15
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	1d3a      	adds	r2, r7, #4
 8002cea:	5cd3      	ldrb	r3, [r2, r3]
 8002cec:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002cee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002cf0:	2380      	movs	r3, #128	; 0x80
 8002cf2:	025b      	lsls	r3, r3, #9
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	d009      	beq.n	8002d0c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002cf8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002cfa:	4812      	ldr	r0, [pc, #72]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cfc:	f7fd fa0e 	bl	800011c <__udivsi3>
 8002d00:	0003      	movs	r3, r0
 8002d02:	001a      	movs	r2, r3
 8002d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d06:	4353      	muls	r3, r2
 8002d08:	637b      	str	r3, [r7, #52]	; 0x34
 8002d0a:	e009      	b.n	8002d20 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d0e:	000a      	movs	r2, r1
 8002d10:	0152      	lsls	r2, r2, #5
 8002d12:	1a52      	subs	r2, r2, r1
 8002d14:	0193      	lsls	r3, r2, #6
 8002d16:	1a9b      	subs	r3, r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	185b      	adds	r3, r3, r1
 8002d1c:	021b      	lsls	r3, r3, #8
 8002d1e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8002d20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d22:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d24:	e002      	b.n	8002d2c <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002d28:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002d2a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002d2e:	0018      	movs	r0, r3
 8002d30:	46bd      	mov	sp, r7
 8002d32:	b00f      	add	sp, #60	; 0x3c
 8002d34:	bd90      	pop	{r4, r7, pc}
 8002d36:	46c0      	nop			; (mov r8, r8)
 8002d38:	08004954 	.word	0x08004954
 8002d3c:	08004964 	.word	0x08004964
 8002d40:	40021000 	.word	0x40021000
 8002d44:	007a1200 	.word	0x007a1200

08002d48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d4c:	4b02      	ldr	r3, [pc, #8]	; (8002d58 <HAL_RCC_GetHCLKFreq+0x10>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
}
 8002d50:	0018      	movs	r0, r3
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	46c0      	nop			; (mov r8, r8)
 8002d58:	20000000 	.word	0x20000000

08002d5c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002d60:	f7ff fff2 	bl	8002d48 <HAL_RCC_GetHCLKFreq>
 8002d64:	0001      	movs	r1, r0
 8002d66:	4b06      	ldr	r3, [pc, #24]	; (8002d80 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	0a1b      	lsrs	r3, r3, #8
 8002d6c:	2207      	movs	r2, #7
 8002d6e:	4013      	ands	r3, r2
 8002d70:	4a04      	ldr	r2, [pc, #16]	; (8002d84 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002d72:	5cd3      	ldrb	r3, [r2, r3]
 8002d74:	40d9      	lsrs	r1, r3
 8002d76:	000b      	movs	r3, r1
}    
 8002d78:	0018      	movs	r0, r3
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	46c0      	nop			; (mov r8, r8)
 8002d80:	40021000 	.word	0x40021000
 8002d84:	08004a18 	.word	0x08004a18

08002d88 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002d90:	2300      	movs	r3, #0
 8002d92:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002d94:	2300      	movs	r3, #0
 8002d96:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	2380      	movs	r3, #128	; 0x80
 8002d9e:	025b      	lsls	r3, r3, #9
 8002da0:	4013      	ands	r3, r2
 8002da2:	d100      	bne.n	8002da6 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002da4:	e08e      	b.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8002da6:	2017      	movs	r0, #23
 8002da8:	183b      	adds	r3, r7, r0
 8002daa:	2200      	movs	r2, #0
 8002dac:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b5f      	ldr	r3, [pc, #380]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	2380      	movs	r3, #128	; 0x80
 8002db4:	055b      	lsls	r3, r3, #21
 8002db6:	4013      	ands	r3, r2
 8002db8:	d110      	bne.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	4b5c      	ldr	r3, [pc, #368]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dbc:	69da      	ldr	r2, [r3, #28]
 8002dbe:	4b5b      	ldr	r3, [pc, #364]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dc0:	2180      	movs	r1, #128	; 0x80
 8002dc2:	0549      	lsls	r1, r1, #21
 8002dc4:	430a      	orrs	r2, r1
 8002dc6:	61da      	str	r2, [r3, #28]
 8002dc8:	4b58      	ldr	r3, [pc, #352]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002dca:	69da      	ldr	r2, [r3, #28]
 8002dcc:	2380      	movs	r3, #128	; 0x80
 8002dce:	055b      	lsls	r3, r3, #21
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	183b      	adds	r3, r7, r0
 8002dd8:	2201      	movs	r2, #1
 8002dda:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ddc:	4b54      	ldr	r3, [pc, #336]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	005b      	lsls	r3, r3, #1
 8002de4:	4013      	ands	r3, r2
 8002de6:	d11a      	bne.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de8:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dea:	681a      	ldr	r2, [r3, #0]
 8002dec:	4b50      	ldr	r3, [pc, #320]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002dee:	2180      	movs	r1, #128	; 0x80
 8002df0:	0049      	lsls	r1, r1, #1
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df6:	f7fe faf7 	bl	80013e8 <HAL_GetTick>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dfe:	e008      	b.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e00:	f7fe faf2 	bl	80013e8 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	693b      	ldr	r3, [r7, #16]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b64      	cmp	r3, #100	; 0x64
 8002e0c:	d901      	bls.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002e0e:	2303      	movs	r3, #3
 8002e10:	e087      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x19a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCCEx_PeriphCLKConfig+0x1a8>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	2380      	movs	r3, #128	; 0x80
 8002e18:	005b      	lsls	r3, r3, #1
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d0f0      	beq.n	8002e00 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e1e:	4b43      	ldr	r3, [pc, #268]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e20:	6a1a      	ldr	r2, [r3, #32]
 8002e22:	23c0      	movs	r3, #192	; 0xc0
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	4013      	ands	r3, r2
 8002e28:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d034      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x112>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	685a      	ldr	r2, [r3, #4]
 8002e34:	23c0      	movs	r3, #192	; 0xc0
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	4013      	ands	r3, r2
 8002e3a:	68fa      	ldr	r2, [r7, #12]
 8002e3c:	429a      	cmp	r2, r3
 8002e3e:	d02c      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e40:	4b3a      	ldr	r3, [pc, #232]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e42:	6a1b      	ldr	r3, [r3, #32]
 8002e44:	4a3b      	ldr	r2, [pc, #236]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e46:	4013      	ands	r3, r2
 8002e48:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e4a:	4b38      	ldr	r3, [pc, #224]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e4c:	6a1a      	ldr	r2, [r3, #32]
 8002e4e:	4b37      	ldr	r3, [pc, #220]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e50:	2180      	movs	r1, #128	; 0x80
 8002e52:	0249      	lsls	r1, r1, #9
 8002e54:	430a      	orrs	r2, r1
 8002e56:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002e58:	4b34      	ldr	r3, [pc, #208]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e5a:	6a1a      	ldr	r2, [r3, #32]
 8002e5c:	4b33      	ldr	r3, [pc, #204]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e5e:	4936      	ldr	r1, [pc, #216]	; (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002e60:	400a      	ands	r2, r1
 8002e62:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002e64:	4b31      	ldr	r3, [pc, #196]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	2201      	movs	r2, #1
 8002e6e:	4013      	ands	r3, r2
 8002e70:	d013      	beq.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e72:	f7fe fab9 	bl	80013e8 <HAL_GetTick>
 8002e76:	0003      	movs	r3, r0
 8002e78:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	e009      	b.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e7c:	f7fe fab4 	bl	80013e8 <HAL_GetTick>
 8002e80:	0002      	movs	r2, r0
 8002e82:	693b      	ldr	r3, [r7, #16]
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	4a2d      	ldr	r2, [pc, #180]	; (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e048      	b.n	8002f22 <HAL_RCCEx_PeriphCLKConfig+0x19a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e90:	4b26      	ldr	r3, [pc, #152]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e92:	6a1b      	ldr	r3, [r3, #32]
 8002e94:	2202      	movs	r2, #2
 8002e96:	4013      	ands	r3, r2
 8002e98:	d0f0      	beq.n	8002e7c <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e9a:	4b24      	ldr	r3, [pc, #144]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a25      	ldr	r2, [pc, #148]	; (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	0019      	movs	r1, r3
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	685a      	ldr	r2, [r3, #4]
 8002ea8:	4b20      	ldr	r3, [pc, #128]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002eae:	2317      	movs	r3, #23
 8002eb0:	18fb      	adds	r3, r7, r3
 8002eb2:	781b      	ldrb	r3, [r3, #0]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b1c      	ldr	r3, [pc, #112]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eba:	69da      	ldr	r2, [r3, #28]
 8002ebc:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ebe:	4920      	ldr	r1, [pc, #128]	; (8002f40 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	4013      	ands	r3, r2
 8002ecc:	d009      	beq.n	8002ee2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ece:	4b17      	ldr	r3, [pc, #92]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	2203      	movs	r2, #3
 8002ed4:	4393      	bics	r3, r2
 8002ed6:	0019      	movs	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	689a      	ldr	r2, [r3, #8]
 8002edc:	4b13      	ldr	r3, [pc, #76]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2220      	movs	r2, #32
 8002ee8:	4013      	ands	r3, r2
 8002eea:	d009      	beq.n	8002f00 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002eec:	4b0f      	ldr	r3, [pc, #60]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	2210      	movs	r2, #16
 8002ef2:	4393      	bics	r3, r2
 8002ef4:	0019      	movs	r1, r3
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	68da      	ldr	r2, [r3, #12]
 8002efa:	4b0c      	ldr	r3, [pc, #48]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002efc:	430a      	orrs	r2, r1
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(STM32F042x6) || defined(STM32F048xx)\
 || defined(STM32F051x8) || defined(STM32F058xx)\
 || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx)\
 || defined(STM32F091xC) || defined(STM32F098xx)
  /*------------------------------ CEC clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	2380      	movs	r3, #128	; 0x80
 8002f06:	00db      	lsls	r3, r3, #3
 8002f08:	4013      	ands	r3, r2
 8002f0a:	d009      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f0c:	4b07      	ldr	r3, [pc, #28]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f10:	2240      	movs	r2, #64	; 0x40
 8002f12:	4393      	bics	r3, r2
 8002f14:	0019      	movs	r1, r3
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	691a      	ldr	r2, [r3, #16]
 8002f1a:	4b04      	ldr	r3, [pc, #16]	; (8002f2c <HAL_RCCEx_PeriphCLKConfig+0x1a4>)
 8002f1c:	430a      	orrs	r2, r1
 8002f1e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	0018      	movs	r0, r3
 8002f24:	46bd      	mov	sp, r7
 8002f26:	b006      	add	sp, #24
 8002f28:	bd80      	pop	{r7, pc}
 8002f2a:	46c0      	nop			; (mov r8, r8)
 8002f2c:	40021000 	.word	0x40021000
 8002f30:	40007000 	.word	0x40007000
 8002f34:	fffffcff 	.word	0xfffffcff
 8002f38:	fffeffff 	.word	0xfffeffff
 8002f3c:	00001388 	.word	0x00001388
 8002f40:	efffffff 	.word	0xefffffff

08002f44 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d101      	bne.n	8002f56 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f52:	2301      	movs	r3, #1
 8002f54:	e044      	b.n	8002fe0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2274      	movs	r2, #116	; 0x74
 8002f62:	2100      	movs	r1, #0
 8002f64:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	0018      	movs	r0, r3
 8002f6a:	f7fe f8cf 	bl	800110c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2224      	movs	r2, #36	; 0x24
 8002f72:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	2101      	movs	r1, #1
 8002f80:	438a      	bics	r2, r1
 8002f82:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	0018      	movs	r0, r3
 8002f88:	f000 fbce 	bl	8003728 <UART_SetConfig>
 8002f8c:	0003      	movs	r3, r0
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d101      	bne.n	8002f96 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e024      	b.n	8002fe0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d003      	beq.n	8002fa6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 fd01 	bl	80039a8 <UART_AdvFeatureConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	490d      	ldr	r1, [pc, #52]	; (8002fe8 <HAL_UART_Init+0xa4>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	605a      	str	r2, [r3, #4]
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
#endif /* USART_CR2_LINEN */
#if defined (USART_CR3_SCEN)
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	689a      	ldr	r2, [r3, #8]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	212a      	movs	r1, #42	; 0x2a
 8002fc2:	438a      	bics	r2, r1
 8002fc4:	609a      	str	r2, [r3, #8]
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	681a      	ldr	r2, [r3, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	0018      	movs	r0, r3
 8002fda:	f000 fd99 	bl	8003b10 <UART_CheckIdleState>
 8002fde:	0003      	movs	r3, r0
}
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	b002      	add	sp, #8
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	ffffb7ff 	.word	0xffffb7ff

08002fec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b08a      	sub	sp, #40	; 0x28
 8002ff0:	af02      	add	r7, sp, #8
 8002ff2:	60f8      	str	r0, [r7, #12]
 8002ff4:	60b9      	str	r1, [r7, #8]
 8002ff6:	603b      	str	r3, [r7, #0]
 8002ff8:	1dbb      	adds	r3, r7, #6
 8002ffa:	801a      	strh	r2, [r3, #0]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003000:	2b20      	cmp	r3, #32
 8003002:	d000      	beq.n	8003006 <HAL_UART_Transmit+0x1a>
 8003004:	e096      	b.n	8003134 <HAL_UART_Transmit+0x148>
  {
    if ((pData == NULL) || (Size == 0U))
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d003      	beq.n	8003014 <HAL_UART_Transmit+0x28>
 800300c:	1dbb      	adds	r3, r7, #6
 800300e:	881b      	ldrh	r3, [r3, #0]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e08e      	b.n	8003136 <HAL_UART_Transmit+0x14a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	689a      	ldr	r2, [r3, #8]
 800301c:	2380      	movs	r3, #128	; 0x80
 800301e:	015b      	lsls	r3, r3, #5
 8003020:	429a      	cmp	r2, r3
 8003022:	d109      	bne.n	8003038 <HAL_UART_Transmit+0x4c>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	2201      	movs	r2, #1
 8003030:	4013      	ands	r3, r2
 8003032:	d001      	beq.n	8003038 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e07e      	b.n	8003136 <HAL_UART_Transmit+0x14a>
      }
    }

    __HAL_LOCK(huart);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2274      	movs	r2, #116	; 0x74
 800303c:	5c9b      	ldrb	r3, [r3, r2]
 800303e:	2b01      	cmp	r3, #1
 8003040:	d101      	bne.n	8003046 <HAL_UART_Transmit+0x5a>
 8003042:	2302      	movs	r3, #2
 8003044:	e077      	b.n	8003136 <HAL_UART_Transmit+0x14a>
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2274      	movs	r2, #116	; 0x74
 800304a:	2101      	movs	r1, #1
 800304c:	5499      	strb	r1, [r3, r2]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2280      	movs	r2, #128	; 0x80
 8003052:	2100      	movs	r1, #0
 8003054:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	2221      	movs	r2, #33	; 0x21
 800305a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800305c:	f7fe f9c4 	bl	80013e8 <HAL_GetTick>
 8003060:	0003      	movs	r3, r0
 8003062:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	1dba      	adds	r2, r7, #6
 8003068:	2150      	movs	r1, #80	; 0x50
 800306a:	8812      	ldrh	r2, [r2, #0]
 800306c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	1dba      	adds	r2, r7, #6
 8003072:	2152      	movs	r1, #82	; 0x52
 8003074:	8812      	ldrh	r2, [r2, #0]
 8003076:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	689a      	ldr	r2, [r3, #8]
 800307c:	2380      	movs	r3, #128	; 0x80
 800307e:	015b      	lsls	r3, r3, #5
 8003080:	429a      	cmp	r2, r3
 8003082:	d108      	bne.n	8003096 <HAL_UART_Transmit+0xaa>
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	691b      	ldr	r3, [r3, #16]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d104      	bne.n	8003096 <HAL_UART_Transmit+0xaa>
    {
      pdata8bits  = NULL;
 800308c:	2300      	movs	r3, #0
 800308e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	e003      	b.n	800309e <HAL_UART_Transmit+0xb2>
    }
    else
    {
      pdata8bits  = pData;
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2274      	movs	r2, #116	; 0x74
 80030a2:	2100      	movs	r1, #0
 80030a4:	5499      	strb	r1, [r3, r2]

    while (huart->TxXferCount > 0U)
 80030a6:	e02d      	b.n	8003104 <HAL_UART_Transmit+0x118>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030a8:	697a      	ldr	r2, [r7, #20]
 80030aa:	68f8      	ldr	r0, [r7, #12]
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	9300      	str	r3, [sp, #0]
 80030b0:	0013      	movs	r3, r2
 80030b2:	2200      	movs	r2, #0
 80030b4:	2180      	movs	r1, #128	; 0x80
 80030b6:	f000 fd73 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 80030ba:	1e03      	subs	r3, r0, #0
 80030bc:	d001      	beq.n	80030c2 <HAL_UART_Transmit+0xd6>
      {
        return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e039      	b.n	8003136 <HAL_UART_Transmit+0x14a>
      }
      if (pdata8bits == NULL)
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d10b      	bne.n	80030e0 <HAL_UART_Transmit+0xf4>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	881a      	ldrh	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	05d2      	lsls	r2, r2, #23
 80030d2:	0dd2      	lsrs	r2, r2, #23
 80030d4:	b292      	uxth	r2, r2
 80030d6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80030d8:	69bb      	ldr	r3, [r7, #24]
 80030da:	3302      	adds	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	e008      	b.n	80030f2 <HAL_UART_Transmit+0x106>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80030e0:	69fb      	ldr	r3, [r7, #28]
 80030e2:	781a      	ldrb	r2, [r3, #0]
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	b292      	uxth	r2, r2
 80030ea:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	3301      	adds	r3, #1
 80030f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	2252      	movs	r2, #82	; 0x52
 80030f6:	5a9b      	ldrh	r3, [r3, r2]
 80030f8:	b29b      	uxth	r3, r3
 80030fa:	3b01      	subs	r3, #1
 80030fc:	b299      	uxth	r1, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2252      	movs	r2, #82	; 0x52
 8003102:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	2252      	movs	r2, #82	; 0x52
 8003108:	5a9b      	ldrh	r3, [r3, r2]
 800310a:	b29b      	uxth	r3, r3
 800310c:	2b00      	cmp	r3, #0
 800310e:	d1cb      	bne.n	80030a8 <HAL_UART_Transmit+0xbc>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	683b      	ldr	r3, [r7, #0]
 8003116:	9300      	str	r3, [sp, #0]
 8003118:	0013      	movs	r3, r2
 800311a:	2200      	movs	r2, #0
 800311c:	2140      	movs	r1, #64	; 0x40
 800311e:	f000 fd3f 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003122:	1e03      	subs	r3, r0, #0
 8003124:	d001      	beq.n	800312a <HAL_UART_Transmit+0x13e>
    {
      return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e005      	b.n	8003136 <HAL_UART_Transmit+0x14a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	2220      	movs	r2, #32
 800312e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003130:	2300      	movs	r3, #0
 8003132:	e000      	b.n	8003136 <HAL_UART_Transmit+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8003134:	2302      	movs	r3, #2
  }
}
 8003136:	0018      	movs	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	b008      	add	sp, #32
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003140:	b590      	push	{r4, r7, lr}
 8003142:	b0ab      	sub	sp, #172	; 0xac
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	69db      	ldr	r3, [r3, #28]
 800314e:	22a4      	movs	r2, #164	; 0xa4
 8003150:	18b9      	adds	r1, r7, r2
 8003152:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	20a0      	movs	r0, #160	; 0xa0
 800315c:	1839      	adds	r1, r7, r0
 800315e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	219c      	movs	r1, #156	; 0x9c
 8003168:	1879      	adds	r1, r7, r1
 800316a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800316c:	0011      	movs	r1, r2
 800316e:	18bb      	adds	r3, r7, r2
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a99      	ldr	r2, [pc, #612]	; (80033d8 <HAL_UART_IRQHandler+0x298>)
 8003174:	4013      	ands	r3, r2
 8003176:	2298      	movs	r2, #152	; 0x98
 8003178:	18bc      	adds	r4, r7, r2
 800317a:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 800317c:	18bb      	adds	r3, r7, r2
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d114      	bne.n	80031ae <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003184:	187b      	adds	r3, r7, r1
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d00f      	beq.n	80031ae <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800318e:	183b      	adds	r3, r7, r0
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	2220      	movs	r2, #32
 8003194:	4013      	ands	r3, r2
 8003196:	d00a      	beq.n	80031ae <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800319c:	2b00      	cmp	r3, #0
 800319e:	d100      	bne.n	80031a2 <HAL_UART_IRQHandler+0x62>
 80031a0:	e296      	b.n	80036d0 <HAL_UART_IRQHandler+0x590>
      {
        huart->RxISR(huart);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	0010      	movs	r0, r2
 80031aa:	4798      	blx	r3
      }
      return;
 80031ac:	e290      	b.n	80036d0 <HAL_UART_IRQHandler+0x590>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80031ae:	2398      	movs	r3, #152	; 0x98
 80031b0:	18fb      	adds	r3, r7, r3
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d100      	bne.n	80031ba <HAL_UART_IRQHandler+0x7a>
 80031b8:	e114      	b.n	80033e4 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80031ba:	239c      	movs	r3, #156	; 0x9c
 80031bc:	18fb      	adds	r3, r7, r3
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2201      	movs	r2, #1
 80031c2:	4013      	ands	r3, r2
 80031c4:	d106      	bne.n	80031d4 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80031c6:	23a0      	movs	r3, #160	; 0xa0
 80031c8:	18fb      	adds	r3, r7, r3
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a83      	ldr	r2, [pc, #524]	; (80033dc <HAL_UART_IRQHandler+0x29c>)
 80031ce:	4013      	ands	r3, r2
 80031d0:	d100      	bne.n	80031d4 <HAL_UART_IRQHandler+0x94>
 80031d2:	e107      	b.n	80033e4 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80031d4:	23a4      	movs	r3, #164	; 0xa4
 80031d6:	18fb      	adds	r3, r7, r3
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	2201      	movs	r2, #1
 80031dc:	4013      	ands	r3, r2
 80031de:	d012      	beq.n	8003206 <HAL_UART_IRQHandler+0xc6>
 80031e0:	23a0      	movs	r3, #160	; 0xa0
 80031e2:	18fb      	adds	r3, r7, r3
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d00b      	beq.n	8003206 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	2201      	movs	r2, #1
 80031f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2280      	movs	r2, #128	; 0x80
 80031fa:	589b      	ldr	r3, [r3, r2]
 80031fc:	2201      	movs	r2, #1
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2180      	movs	r1, #128	; 0x80
 8003204:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003206:	23a4      	movs	r3, #164	; 0xa4
 8003208:	18fb      	adds	r3, r7, r3
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	2202      	movs	r2, #2
 800320e:	4013      	ands	r3, r2
 8003210:	d011      	beq.n	8003236 <HAL_UART_IRQHandler+0xf6>
 8003212:	239c      	movs	r3, #156	; 0x9c
 8003214:	18fb      	adds	r3, r7, r3
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	2201      	movs	r2, #1
 800321a:	4013      	ands	r3, r2
 800321c:	d00b      	beq.n	8003236 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2202      	movs	r2, #2
 8003224:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	2280      	movs	r2, #128	; 0x80
 800322a:	589b      	ldr	r3, [r3, r2]
 800322c:	2204      	movs	r2, #4
 800322e:	431a      	orrs	r2, r3
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2180      	movs	r1, #128	; 0x80
 8003234:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003236:	23a4      	movs	r3, #164	; 0xa4
 8003238:	18fb      	adds	r3, r7, r3
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	2204      	movs	r2, #4
 800323e:	4013      	ands	r3, r2
 8003240:	d011      	beq.n	8003266 <HAL_UART_IRQHandler+0x126>
 8003242:	239c      	movs	r3, #156	; 0x9c
 8003244:	18fb      	adds	r3, r7, r3
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	2201      	movs	r2, #1
 800324a:	4013      	ands	r3, r2
 800324c:	d00b      	beq.n	8003266 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2204      	movs	r2, #4
 8003254:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2280      	movs	r2, #128	; 0x80
 800325a:	589b      	ldr	r3, [r3, r2]
 800325c:	2202      	movs	r2, #2
 800325e:	431a      	orrs	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003266:	23a4      	movs	r3, #164	; 0xa4
 8003268:	18fb      	adds	r3, r7, r3
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2208      	movs	r2, #8
 800326e:	4013      	ands	r3, r2
 8003270:	d017      	beq.n	80032a2 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003272:	23a0      	movs	r3, #160	; 0xa0
 8003274:	18fb      	adds	r3, r7, r3
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2220      	movs	r2, #32
 800327a:	4013      	ands	r3, r2
 800327c:	d105      	bne.n	800328a <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800327e:	239c      	movs	r3, #156	; 0x9c
 8003280:	18fb      	adds	r3, r7, r3
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2201      	movs	r2, #1
 8003286:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003288:	d00b      	beq.n	80032a2 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2208      	movs	r2, #8
 8003290:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2280      	movs	r2, #128	; 0x80
 8003296:	589b      	ldr	r3, [r3, r2]
 8003298:	2208      	movs	r2, #8
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2180      	movs	r1, #128	; 0x80
 80032a0:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80032a2:	23a4      	movs	r3, #164	; 0xa4
 80032a4:	18fb      	adds	r3, r7, r3
 80032a6:	681a      	ldr	r2, [r3, #0]
 80032a8:	2380      	movs	r3, #128	; 0x80
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	4013      	ands	r3, r2
 80032ae:	d013      	beq.n	80032d8 <HAL_UART_IRQHandler+0x198>
 80032b0:	23a0      	movs	r3, #160	; 0xa0
 80032b2:	18fb      	adds	r3, r7, r3
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	2380      	movs	r3, #128	; 0x80
 80032b8:	04db      	lsls	r3, r3, #19
 80032ba:	4013      	ands	r3, r2
 80032bc:	d00c      	beq.n	80032d8 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	2280      	movs	r2, #128	; 0x80
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2280      	movs	r2, #128	; 0x80
 80032cc:	589b      	ldr	r3, [r3, r2]
 80032ce:	2220      	movs	r2, #32
 80032d0:	431a      	orrs	r2, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2180      	movs	r1, #128	; 0x80
 80032d6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2280      	movs	r2, #128	; 0x80
 80032dc:	589b      	ldr	r3, [r3, r2]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d100      	bne.n	80032e4 <HAL_UART_IRQHandler+0x1a4>
 80032e2:	e1f7      	b.n	80036d4 <HAL_UART_IRQHandler+0x594>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80032e4:	23a4      	movs	r3, #164	; 0xa4
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	2220      	movs	r2, #32
 80032ec:	4013      	ands	r3, r2
 80032ee:	d00e      	beq.n	800330e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032f0:	23a0      	movs	r3, #160	; 0xa0
 80032f2:	18fb      	adds	r3, r7, r3
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2220      	movs	r2, #32
 80032f8:	4013      	ands	r3, r2
 80032fa:	d008      	beq.n	800330e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003300:	2b00      	cmp	r3, #0
 8003302:	d004      	beq.n	800330e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003308:	687a      	ldr	r2, [r7, #4]
 800330a:	0010      	movs	r0, r2
 800330c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2280      	movs	r2, #128	; 0x80
 8003312:	589b      	ldr	r3, [r3, r2]
 8003314:	2194      	movs	r1, #148	; 0x94
 8003316:	187a      	adds	r2, r7, r1
 8003318:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	2240      	movs	r2, #64	; 0x40
 8003322:	4013      	ands	r3, r2
 8003324:	2b40      	cmp	r3, #64	; 0x40
 8003326:	d004      	beq.n	8003332 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003328:	187b      	adds	r3, r7, r1
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2228      	movs	r2, #40	; 0x28
 800332e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003330:	d047      	beq.n	80033c2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	0018      	movs	r0, r3
 8003336:	f000 fcf7 	bl	8003d28 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	2240      	movs	r2, #64	; 0x40
 8003342:	4013      	ands	r3, r2
 8003344:	2b40      	cmp	r3, #64	; 0x40
 8003346:	d137      	bne.n	80033b8 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003348:	f3ef 8310 	mrs	r3, PRIMASK
 800334c:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800334e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003350:	2090      	movs	r0, #144	; 0x90
 8003352:	183a      	adds	r2, r7, r0
 8003354:	6013      	str	r3, [r2, #0]
 8003356:	2301      	movs	r3, #1
 8003358:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800335a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800335c:	f383 8810 	msr	PRIMASK, r3
}
 8003360:	46c0      	nop			; (mov r8, r8)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689a      	ldr	r2, [r3, #8]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	2140      	movs	r1, #64	; 0x40
 800336e:	438a      	bics	r2, r1
 8003370:	609a      	str	r2, [r3, #8]
 8003372:	183b      	adds	r3, r7, r0
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003378:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800337a:	f383 8810 	msr	PRIMASK, r3
}
 800337e:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003384:	2b00      	cmp	r3, #0
 8003386:	d012      	beq.n	80033ae <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a14      	ldr	r2, [pc, #80]	; (80033e0 <HAL_UART_IRQHandler+0x2a0>)
 800338e:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003394:	0018      	movs	r0, r3
 8003396:	f7fe f98f 	bl	80016b8 <HAL_DMA_Abort_IT>
 800339a:	1e03      	subs	r3, r0, #0
 800339c:	d01a      	beq.n	80033d4 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033a8:	0018      	movs	r0, r3
 80033aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033ac:	e012      	b.n	80033d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	0018      	movs	r0, r3
 80033b2:	f000 f9a5 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033b6:	e00d      	b.n	80033d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	0018      	movs	r0, r3
 80033bc:	f000 f9a0 	bl	8003700 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033c0:	e008      	b.n	80033d4 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	0018      	movs	r0, r3
 80033c6:	f000 f99b 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2280      	movs	r2, #128	; 0x80
 80033ce:	2100      	movs	r1, #0
 80033d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80033d2:	e17f      	b.n	80036d4 <HAL_UART_IRQHandler+0x594>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80033d4:	46c0      	nop			; (mov r8, r8)
    return;
 80033d6:	e17d      	b.n	80036d4 <HAL_UART_IRQHandler+0x594>
 80033d8:	0000080f 	.word	0x0000080f
 80033dc:	04000120 	.word	0x04000120
 80033e0:	08003ded 	.word	0x08003ded

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d000      	beq.n	80033ee <HAL_UART_IRQHandler+0x2ae>
 80033ec:	e131      	b.n	8003652 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80033ee:	23a4      	movs	r3, #164	; 0xa4
 80033f0:	18fb      	adds	r3, r7, r3
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	2210      	movs	r2, #16
 80033f6:	4013      	ands	r3, r2
 80033f8:	d100      	bne.n	80033fc <HAL_UART_IRQHandler+0x2bc>
 80033fa:	e12a      	b.n	8003652 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80033fc:	23a0      	movs	r3, #160	; 0xa0
 80033fe:	18fb      	adds	r3, r7, r3
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2210      	movs	r2, #16
 8003404:	4013      	ands	r3, r2
 8003406:	d100      	bne.n	800340a <HAL_UART_IRQHandler+0x2ca>
 8003408:	e123      	b.n	8003652 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2210      	movs	r2, #16
 8003410:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	2240      	movs	r2, #64	; 0x40
 800341a:	4013      	ands	r3, r2
 800341c:	2b40      	cmp	r3, #64	; 0x40
 800341e:	d000      	beq.n	8003422 <HAL_UART_IRQHandler+0x2e2>
 8003420:	e09b      	b.n	800355a <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	685a      	ldr	r2, [r3, #4]
 800342a:	217e      	movs	r1, #126	; 0x7e
 800342c:	187b      	adds	r3, r7, r1
 800342e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003430:	187b      	adds	r3, r7, r1
 8003432:	881b      	ldrh	r3, [r3, #0]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d100      	bne.n	800343a <HAL_UART_IRQHandler+0x2fa>
 8003438:	e14e      	b.n	80036d8 <HAL_UART_IRQHandler+0x598>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2258      	movs	r2, #88	; 0x58
 800343e:	5a9b      	ldrh	r3, [r3, r2]
 8003440:	187a      	adds	r2, r7, r1
 8003442:	8812      	ldrh	r2, [r2, #0]
 8003444:	429a      	cmp	r2, r3
 8003446:	d300      	bcc.n	800344a <HAL_UART_IRQHandler+0x30a>
 8003448:	e146      	b.n	80036d8 <HAL_UART_IRQHandler+0x598>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	187a      	adds	r2, r7, r1
 800344e:	215a      	movs	r1, #90	; 0x5a
 8003450:	8812      	ldrh	r2, [r2, #0]
 8003452:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	2b20      	cmp	r3, #32
 800345c:	d06e      	beq.n	800353c <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800345e:	f3ef 8310 	mrs	r3, PRIMASK
 8003462:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003466:	67bb      	str	r3, [r7, #120]	; 0x78
 8003468:	2301      	movs	r3, #1
 800346a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800346c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800346e:	f383 8810 	msr	PRIMASK, r3
}
 8003472:	46c0      	nop			; (mov r8, r8)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	499a      	ldr	r1, [pc, #616]	; (80036e8 <HAL_UART_IRQHandler+0x5a8>)
 8003480:	400a      	ands	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
 8003484:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003486:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003488:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800348a:	f383 8810 	msr	PRIMASK, r3
}
 800348e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003490:	f3ef 8310 	mrs	r3, PRIMASK
 8003494:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003496:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003498:	677b      	str	r3, [r7, #116]	; 0x74
 800349a:	2301      	movs	r3, #1
 800349c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800349e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034a0:	f383 8810 	msr	PRIMASK, r3
}
 80034a4:	46c0      	nop			; (mov r8, r8)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	689a      	ldr	r2, [r3, #8]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2101      	movs	r1, #1
 80034b2:	438a      	bics	r2, r1
 80034b4:	609a      	str	r2, [r3, #8]
 80034b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034b8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034bc:	f383 8810 	msr	PRIMASK, r3
}
 80034c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80034c2:	f3ef 8310 	mrs	r3, PRIMASK
 80034c6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80034c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034ca:	673b      	str	r3, [r7, #112]	; 0x70
 80034cc:	2301      	movs	r3, #1
 80034ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			; (mov r8, r8)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	689a      	ldr	r2, [r3, #8]
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	2140      	movs	r1, #64	; 0x40
 80034e4:	438a      	bics	r2, r1
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034ea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034ee:	f383 8810 	msr	PRIMASK, r3
}
 80034f2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2220      	movs	r2, #32
 80034f8:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2200      	movs	r2, #0
 80034fe:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003500:	f3ef 8310 	mrs	r3, PRIMASK
 8003504:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003506:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003508:	66fb      	str	r3, [r7, #108]	; 0x6c
 800350a:	2301      	movs	r3, #1
 800350c:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800350e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003510:	f383 8810 	msr	PRIMASK, r3
}
 8003514:	46c0      	nop			; (mov r8, r8)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	681a      	ldr	r2, [r3, #0]
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2110      	movs	r1, #16
 8003522:	438a      	bics	r2, r1
 8003524:	601a      	str	r2, [r3, #0]
 8003526:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003528:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800352a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800352c:	f383 8810 	msr	PRIMASK, r3
}
 8003530:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	0018      	movs	r0, r3
 8003538:	f7fe f886 	bl	8001648 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2258      	movs	r2, #88	; 0x58
 8003540:	5a9a      	ldrh	r2, [r3, r2]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	215a      	movs	r1, #90	; 0x5a
 8003546:	5a5b      	ldrh	r3, [r3, r1]
 8003548:	b29b      	uxth	r3, r3
 800354a:	1ad3      	subs	r3, r2, r3
 800354c:	b29a      	uxth	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	0011      	movs	r1, r2
 8003552:	0018      	movs	r0, r3
 8003554:	f000 f8dc 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003558:	e0be      	b.n	80036d8 <HAL_UART_IRQHandler+0x598>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2258      	movs	r2, #88	; 0x58
 800355e:	5a99      	ldrh	r1, [r3, r2]
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	225a      	movs	r2, #90	; 0x5a
 8003564:	5a9b      	ldrh	r3, [r3, r2]
 8003566:	b29a      	uxth	r2, r3
 8003568:	208e      	movs	r0, #142	; 0x8e
 800356a:	183b      	adds	r3, r7, r0
 800356c:	1a8a      	subs	r2, r1, r2
 800356e:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	225a      	movs	r2, #90	; 0x5a
 8003574:	5a9b      	ldrh	r3, [r3, r2]
 8003576:	b29b      	uxth	r3, r3
 8003578:	2b00      	cmp	r3, #0
 800357a:	d100      	bne.n	800357e <HAL_UART_IRQHandler+0x43e>
 800357c:	e0ae      	b.n	80036dc <HAL_UART_IRQHandler+0x59c>
          && (nb_rx_data > 0U))
 800357e:	183b      	adds	r3, r7, r0
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d100      	bne.n	8003588 <HAL_UART_IRQHandler+0x448>
 8003586:	e0a9      	b.n	80036dc <HAL_UART_IRQHandler+0x59c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003588:	f3ef 8310 	mrs	r3, PRIMASK
 800358c:	60fb      	str	r3, [r7, #12]
  return(result);
 800358e:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003590:	2488      	movs	r4, #136	; 0x88
 8003592:	193a      	adds	r2, r7, r4
 8003594:	6013      	str	r3, [r2, #0]
 8003596:	2301      	movs	r3, #1
 8003598:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f383 8810 	msr	PRIMASK, r3
}
 80035a0:	46c0      	nop			; (mov r8, r8)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	681a      	ldr	r2, [r3, #0]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	494f      	ldr	r1, [pc, #316]	; (80036ec <HAL_UART_IRQHandler+0x5ac>)
 80035ae:	400a      	ands	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
 80035b2:	193b      	adds	r3, r7, r4
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035b8:	697b      	ldr	r3, [r7, #20]
 80035ba:	f383 8810 	msr	PRIMASK, r3
}
 80035be:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80035c0:	f3ef 8310 	mrs	r3, PRIMASK
 80035c4:	61bb      	str	r3, [r7, #24]
  return(result);
 80035c6:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035c8:	2484      	movs	r4, #132	; 0x84
 80035ca:	193a      	adds	r2, r7, r4
 80035cc:	6013      	str	r3, [r2, #0]
 80035ce:	2301      	movs	r3, #1
 80035d0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035d2:	69fb      	ldr	r3, [r7, #28]
 80035d4:	f383 8810 	msr	PRIMASK, r3
}
 80035d8:	46c0      	nop			; (mov r8, r8)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	689a      	ldr	r2, [r3, #8]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2101      	movs	r1, #1
 80035e6:	438a      	bics	r2, r1
 80035e8:	609a      	str	r2, [r3, #8]
 80035ea:	193b      	adds	r3, r7, r4
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	f383 8810 	msr	PRIMASK, r3
}
 80035f6:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2200      	movs	r2, #0
 8003602:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2200      	movs	r2, #0
 8003608:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800360a:	f3ef 8310 	mrs	r3, PRIMASK
 800360e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003610:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003612:	2480      	movs	r4, #128	; 0x80
 8003614:	193a      	adds	r2, r7, r4
 8003616:	6013      	str	r3, [r2, #0]
 8003618:	2301      	movs	r3, #1
 800361a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800361c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800361e:	f383 8810 	msr	PRIMASK, r3
}
 8003622:	46c0      	nop			; (mov r8, r8)
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681a      	ldr	r2, [r3, #0]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2110      	movs	r1, #16
 8003630:	438a      	bics	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	193b      	adds	r3, r7, r4
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800363a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800363c:	f383 8810 	msr	PRIMASK, r3
}
 8003640:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003642:	183b      	adds	r3, r7, r0
 8003644:	881a      	ldrh	r2, [r3, #0]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0011      	movs	r1, r2
 800364a:	0018      	movs	r0, r3
 800364c:	f000 f860 	bl	8003710 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003650:	e044      	b.n	80036dc <HAL_UART_IRQHandler+0x59c>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003652:	23a4      	movs	r3, #164	; 0xa4
 8003654:	18fb      	adds	r3, r7, r3
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	2380      	movs	r3, #128	; 0x80
 800365a:	035b      	lsls	r3, r3, #13
 800365c:	4013      	ands	r3, r2
 800365e:	d010      	beq.n	8003682 <HAL_UART_IRQHandler+0x542>
 8003660:	239c      	movs	r3, #156	; 0x9c
 8003662:	18fb      	adds	r3, r7, r3
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	2380      	movs	r3, #128	; 0x80
 8003668:	03db      	lsls	r3, r3, #15
 800366a:	4013      	ands	r3, r2
 800366c:	d009      	beq.n	8003682 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	2280      	movs	r2, #128	; 0x80
 8003674:	0352      	lsls	r2, r2, #13
 8003676:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	0018      	movs	r0, r3
 800367c:	f000 fbf8 	bl	8003e70 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003680:	e02f      	b.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003682:	23a4      	movs	r3, #164	; 0xa4
 8003684:	18fb      	adds	r3, r7, r3
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	4013      	ands	r3, r2
 800368c:	d00f      	beq.n	80036ae <HAL_UART_IRQHandler+0x56e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800368e:	23a0      	movs	r3, #160	; 0xa0
 8003690:	18fb      	adds	r3, r7, r3
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2280      	movs	r2, #128	; 0x80
 8003696:	4013      	ands	r3, r2
 8003698:	d009      	beq.n	80036ae <HAL_UART_IRQHandler+0x56e>
  {
    if (huart->TxISR != NULL)
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d01e      	beq.n	80036e0 <HAL_UART_IRQHandler+0x5a0>
    {
      huart->TxISR(huart);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80036a6:	687a      	ldr	r2, [r7, #4]
 80036a8:	0010      	movs	r0, r2
 80036aa:	4798      	blx	r3
    }
    return;
 80036ac:	e018      	b.n	80036e0 <HAL_UART_IRQHandler+0x5a0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80036ae:	23a4      	movs	r3, #164	; 0xa4
 80036b0:	18fb      	adds	r3, r7, r3
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2240      	movs	r2, #64	; 0x40
 80036b6:	4013      	ands	r3, r2
 80036b8:	d013      	beq.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
 80036ba:	23a0      	movs	r3, #160	; 0xa0
 80036bc:	18fb      	adds	r3, r7, r3
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	2240      	movs	r2, #64	; 0x40
 80036c2:	4013      	ands	r3, r2
 80036c4:	d00d      	beq.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
  {
    UART_EndTransmit_IT(huart);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	0018      	movs	r0, r3
 80036ca:	f000 fba6 	bl	8003e1a <UART_EndTransmit_IT>
    return;
 80036ce:	e008      	b.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80036d0:	46c0      	nop			; (mov r8, r8)
 80036d2:	e006      	b.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80036d4:	46c0      	nop			; (mov r8, r8)
 80036d6:	e004      	b.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80036d8:	46c0      	nop			; (mov r8, r8)
 80036da:	e002      	b.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
      return;
 80036dc:	46c0      	nop			; (mov r8, r8)
 80036de:	e000      	b.n	80036e2 <HAL_UART_IRQHandler+0x5a2>
    return;
 80036e0:	46c0      	nop			; (mov r8, r8)
  }

}
 80036e2:	46bd      	mov	sp, r7
 80036e4:	b02b      	add	sp, #172	; 0xac
 80036e6:	bd90      	pop	{r4, r7, pc}
 80036e8:	fffffeff 	.word	0xfffffeff
 80036ec:	fffffedf 	.word	0xfffffedf

080036f0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80036f8:	46c0      	nop			; (mov r8, r8)
 80036fa:	46bd      	mov	sp, r7
 80036fc:	b002      	add	sp, #8
 80036fe:	bd80      	pop	{r7, pc}

08003700 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b082      	sub	sp, #8
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003708:	46c0      	nop			; (mov r8, r8)
 800370a:	46bd      	mov	sp, r7
 800370c:	b002      	add	sp, #8
 800370e:	bd80      	pop	{r7, pc}

08003710 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	000a      	movs	r2, r1
 800371a:	1cbb      	adds	r3, r7, #2
 800371c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800371e:	46c0      	nop			; (mov r8, r8)
 8003720:	46bd      	mov	sp, r7
 8003722:	b002      	add	sp, #8
 8003724:	bd80      	pop	{r7, pc}
	...

08003728 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b088      	sub	sp, #32
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003730:	231e      	movs	r3, #30
 8003732:	18fb      	adds	r3, r7, r3
 8003734:	2200      	movs	r2, #0
 8003736:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689a      	ldr	r2, [r3, #8]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	691b      	ldr	r3, [r3, #16]
 8003740:	431a      	orrs	r2, r3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	431a      	orrs	r2, r3
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	69db      	ldr	r3, [r3, #28]
 800374c:	4313      	orrs	r3, r2
 800374e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	4a8d      	ldr	r2, [pc, #564]	; (800398c <UART_SetConfig+0x264>)
 8003758:	4013      	ands	r3, r2
 800375a:	0019      	movs	r1, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	697a      	ldr	r2, [r7, #20]
 8003762:	430a      	orrs	r2, r1
 8003764:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	4a88      	ldr	r2, [pc, #544]	; (8003990 <UART_SetConfig+0x268>)
 800376e:	4013      	ands	r3, r2
 8003770:	0019      	movs	r1, r3
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	68da      	ldr	r2, [r3, #12]
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	430a      	orrs	r2, r1
 800377c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	699b      	ldr	r3, [r3, #24]
 8003782:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	697a      	ldr	r2, [r7, #20]
 800378a:	4313      	orrs	r3, r2
 800378c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	4a7f      	ldr	r2, [pc, #508]	; (8003994 <UART_SetConfig+0x26c>)
 8003796:	4013      	ands	r3, r2
 8003798:	0019      	movs	r1, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	697a      	ldr	r2, [r7, #20]
 80037a0:	430a      	orrs	r2, r1
 80037a2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a7b      	ldr	r2, [pc, #492]	; (8003998 <UART_SetConfig+0x270>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d127      	bne.n	80037fe <UART_SetConfig+0xd6>
 80037ae:	4b7b      	ldr	r3, [pc, #492]	; (800399c <UART_SetConfig+0x274>)
 80037b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b2:	2203      	movs	r2, #3
 80037b4:	4013      	ands	r3, r2
 80037b6:	2b03      	cmp	r3, #3
 80037b8:	d00d      	beq.n	80037d6 <UART_SetConfig+0xae>
 80037ba:	d81b      	bhi.n	80037f4 <UART_SetConfig+0xcc>
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d014      	beq.n	80037ea <UART_SetConfig+0xc2>
 80037c0:	d818      	bhi.n	80037f4 <UART_SetConfig+0xcc>
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d002      	beq.n	80037cc <UART_SetConfig+0xa4>
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d00a      	beq.n	80037e0 <UART_SetConfig+0xb8>
 80037ca:	e013      	b.n	80037f4 <UART_SetConfig+0xcc>
 80037cc:	231f      	movs	r3, #31
 80037ce:	18fb      	adds	r3, r7, r3
 80037d0:	2200      	movs	r2, #0
 80037d2:	701a      	strb	r2, [r3, #0]
 80037d4:	e021      	b.n	800381a <UART_SetConfig+0xf2>
 80037d6:	231f      	movs	r3, #31
 80037d8:	18fb      	adds	r3, r7, r3
 80037da:	2202      	movs	r2, #2
 80037dc:	701a      	strb	r2, [r3, #0]
 80037de:	e01c      	b.n	800381a <UART_SetConfig+0xf2>
 80037e0:	231f      	movs	r3, #31
 80037e2:	18fb      	adds	r3, r7, r3
 80037e4:	2204      	movs	r2, #4
 80037e6:	701a      	strb	r2, [r3, #0]
 80037e8:	e017      	b.n	800381a <UART_SetConfig+0xf2>
 80037ea:	231f      	movs	r3, #31
 80037ec:	18fb      	adds	r3, r7, r3
 80037ee:	2208      	movs	r2, #8
 80037f0:	701a      	strb	r2, [r3, #0]
 80037f2:	e012      	b.n	800381a <UART_SetConfig+0xf2>
 80037f4:	231f      	movs	r3, #31
 80037f6:	18fb      	adds	r3, r7, r3
 80037f8:	2210      	movs	r2, #16
 80037fa:	701a      	strb	r2, [r3, #0]
 80037fc:	e00d      	b.n	800381a <UART_SetConfig+0xf2>
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	4a67      	ldr	r2, [pc, #412]	; (80039a0 <UART_SetConfig+0x278>)
 8003804:	4293      	cmp	r3, r2
 8003806:	d104      	bne.n	8003812 <UART_SetConfig+0xea>
 8003808:	231f      	movs	r3, #31
 800380a:	18fb      	adds	r3, r7, r3
 800380c:	2200      	movs	r2, #0
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	e003      	b.n	800381a <UART_SetConfig+0xf2>
 8003812:	231f      	movs	r3, #31
 8003814:	18fb      	adds	r3, r7, r3
 8003816:	2210      	movs	r2, #16
 8003818:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	69da      	ldr	r2, [r3, #28]
 800381e:	2380      	movs	r3, #128	; 0x80
 8003820:	021b      	lsls	r3, r3, #8
 8003822:	429a      	cmp	r2, r3
 8003824:	d15d      	bne.n	80038e2 <UART_SetConfig+0x1ba>
  {
    switch (clocksource)
 8003826:	231f      	movs	r3, #31
 8003828:	18fb      	adds	r3, r7, r3
 800382a:	781b      	ldrb	r3, [r3, #0]
 800382c:	2b08      	cmp	r3, #8
 800382e:	d015      	beq.n	800385c <UART_SetConfig+0x134>
 8003830:	dc18      	bgt.n	8003864 <UART_SetConfig+0x13c>
 8003832:	2b04      	cmp	r3, #4
 8003834:	d00d      	beq.n	8003852 <UART_SetConfig+0x12a>
 8003836:	dc15      	bgt.n	8003864 <UART_SetConfig+0x13c>
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <UART_SetConfig+0x11a>
 800383c:	2b02      	cmp	r3, #2
 800383e:	d005      	beq.n	800384c <UART_SetConfig+0x124>
 8003840:	e010      	b.n	8003864 <UART_SetConfig+0x13c>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003842:	f7ff fa8b 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8003846:	0003      	movs	r3, r0
 8003848:	61bb      	str	r3, [r7, #24]
        break;
 800384a:	e012      	b.n	8003872 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800384c:	4b55      	ldr	r3, [pc, #340]	; (80039a4 <UART_SetConfig+0x27c>)
 800384e:	61bb      	str	r3, [r7, #24]
        break;
 8003850:	e00f      	b.n	8003872 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003852:	f7ff fa15 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003856:	0003      	movs	r3, r0
 8003858:	61bb      	str	r3, [r7, #24]
        break;
 800385a:	e00a      	b.n	8003872 <UART_SetConfig+0x14a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800385c:	2380      	movs	r3, #128	; 0x80
 800385e:	021b      	lsls	r3, r3, #8
 8003860:	61bb      	str	r3, [r7, #24]
        break;
 8003862:	e006      	b.n	8003872 <UART_SetConfig+0x14a>
      default:
        pclk = 0U;
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003868:	231e      	movs	r3, #30
 800386a:	18fb      	adds	r3, r7, r3
 800386c:	2201      	movs	r2, #1
 800386e:	701a      	strb	r2, [r3, #0]
        break;
 8003870:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003872:	69bb      	ldr	r3, [r7, #24]
 8003874:	2b00      	cmp	r3, #0
 8003876:	d100      	bne.n	800387a <UART_SetConfig+0x152>
 8003878:	e07b      	b.n	8003972 <UART_SetConfig+0x24a>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800387a:	69bb      	ldr	r3, [r7, #24]
 800387c:	005a      	lsls	r2, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	085b      	lsrs	r3, r3, #1
 8003884:	18d2      	adds	r2, r2, r3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	0019      	movs	r1, r3
 800388c:	0010      	movs	r0, r2
 800388e:	f7fc fc45 	bl	800011c <__udivsi3>
 8003892:	0003      	movs	r3, r0
 8003894:	b29b      	uxth	r3, r3
 8003896:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003898:	693b      	ldr	r3, [r7, #16]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d91c      	bls.n	80038d8 <UART_SetConfig+0x1b0>
 800389e:	693a      	ldr	r2, [r7, #16]
 80038a0:	2380      	movs	r3, #128	; 0x80
 80038a2:	025b      	lsls	r3, r3, #9
 80038a4:	429a      	cmp	r2, r3
 80038a6:	d217      	bcs.n	80038d8 <UART_SetConfig+0x1b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038a8:	693b      	ldr	r3, [r7, #16]
 80038aa:	b29a      	uxth	r2, r3
 80038ac:	200e      	movs	r0, #14
 80038ae:	183b      	adds	r3, r7, r0
 80038b0:	210f      	movs	r1, #15
 80038b2:	438a      	bics	r2, r1
 80038b4:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	085b      	lsrs	r3, r3, #1
 80038ba:	b29b      	uxth	r3, r3
 80038bc:	2207      	movs	r2, #7
 80038be:	4013      	ands	r3, r2
 80038c0:	b299      	uxth	r1, r3
 80038c2:	183b      	adds	r3, r7, r0
 80038c4:	183a      	adds	r2, r7, r0
 80038c6:	8812      	ldrh	r2, [r2, #0]
 80038c8:	430a      	orrs	r2, r1
 80038ca:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	183a      	adds	r2, r7, r0
 80038d2:	8812      	ldrh	r2, [r2, #0]
 80038d4:	60da      	str	r2, [r3, #12]
 80038d6:	e04c      	b.n	8003972 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 80038d8:	231e      	movs	r3, #30
 80038da:	18fb      	adds	r3, r7, r3
 80038dc:	2201      	movs	r2, #1
 80038de:	701a      	strb	r2, [r3, #0]
 80038e0:	e047      	b.n	8003972 <UART_SetConfig+0x24a>
      }
    }
  }
  else
  {
    switch (clocksource)
 80038e2:	231f      	movs	r3, #31
 80038e4:	18fb      	adds	r3, r7, r3
 80038e6:	781b      	ldrb	r3, [r3, #0]
 80038e8:	2b08      	cmp	r3, #8
 80038ea:	d015      	beq.n	8003918 <UART_SetConfig+0x1f0>
 80038ec:	dc18      	bgt.n	8003920 <UART_SetConfig+0x1f8>
 80038ee:	2b04      	cmp	r3, #4
 80038f0:	d00d      	beq.n	800390e <UART_SetConfig+0x1e6>
 80038f2:	dc15      	bgt.n	8003920 <UART_SetConfig+0x1f8>
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d002      	beq.n	80038fe <UART_SetConfig+0x1d6>
 80038f8:	2b02      	cmp	r3, #2
 80038fa:	d005      	beq.n	8003908 <UART_SetConfig+0x1e0>
 80038fc:	e010      	b.n	8003920 <UART_SetConfig+0x1f8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038fe:	f7ff fa2d 	bl	8002d5c <HAL_RCC_GetPCLK1Freq>
 8003902:	0003      	movs	r3, r0
 8003904:	61bb      	str	r3, [r7, #24]
        break;
 8003906:	e012      	b.n	800392e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003908:	4b26      	ldr	r3, [pc, #152]	; (80039a4 <UART_SetConfig+0x27c>)
 800390a:	61bb      	str	r3, [r7, #24]
        break;
 800390c:	e00f      	b.n	800392e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800390e:	f7ff f9b7 	bl	8002c80 <HAL_RCC_GetSysClockFreq>
 8003912:	0003      	movs	r3, r0
 8003914:	61bb      	str	r3, [r7, #24]
        break;
 8003916:	e00a      	b.n	800392e <UART_SetConfig+0x206>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003918:	2380      	movs	r3, #128	; 0x80
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	61bb      	str	r3, [r7, #24]
        break;
 800391e:	e006      	b.n	800392e <UART_SetConfig+0x206>
      default:
        pclk = 0U;
 8003920:	2300      	movs	r3, #0
 8003922:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003924:	231e      	movs	r3, #30
 8003926:	18fb      	adds	r3, r7, r3
 8003928:	2201      	movs	r2, #1
 800392a:	701a      	strb	r2, [r3, #0]
        break;
 800392c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d01e      	beq.n	8003972 <UART_SetConfig+0x24a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	085a      	lsrs	r2, r3, #1
 800393a:	69bb      	ldr	r3, [r7, #24]
 800393c:	18d2      	adds	r2, r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	0019      	movs	r1, r3
 8003944:	0010      	movs	r0, r2
 8003946:	f7fc fbe9 	bl	800011c <__udivsi3>
 800394a:	0003      	movs	r3, r0
 800394c:	b29b      	uxth	r3, r3
 800394e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003950:	693b      	ldr	r3, [r7, #16]
 8003952:	2b0f      	cmp	r3, #15
 8003954:	d909      	bls.n	800396a <UART_SetConfig+0x242>
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	2380      	movs	r3, #128	; 0x80
 800395a:	025b      	lsls	r3, r3, #9
 800395c:	429a      	cmp	r2, r3
 800395e:	d204      	bcs.n	800396a <UART_SetConfig+0x242>
      {
        huart->Instance->BRR = usartdiv;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	60da      	str	r2, [r3, #12]
 8003968:	e003      	b.n	8003972 <UART_SetConfig+0x24a>
      }
      else
      {
        ret = HAL_ERROR;
 800396a:	231e      	movs	r3, #30
 800396c:	18fb      	adds	r3, r7, r3
 800396e:	2201      	movs	r2, #1
 8003970:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2200      	movs	r2, #0
 8003976:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2200      	movs	r2, #0
 800397c:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800397e:	231e      	movs	r3, #30
 8003980:	18fb      	adds	r3, r7, r3
 8003982:	781b      	ldrb	r3, [r3, #0]
}
 8003984:	0018      	movs	r0, r3
 8003986:	46bd      	mov	sp, r7
 8003988:	b008      	add	sp, #32
 800398a:	bd80      	pop	{r7, pc}
 800398c:	ffff69f3 	.word	0xffff69f3
 8003990:	ffffcfff 	.word	0xffffcfff
 8003994:	fffff4ff 	.word	0xfffff4ff
 8003998:	40013800 	.word	0x40013800
 800399c:	40021000 	.word	0x40021000
 80039a0:	40004400 	.word	0x40004400
 80039a4:	007a1200 	.word	0x007a1200

080039a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039a8:	b580      	push	{r7, lr}
 80039aa:	b082      	sub	sp, #8
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b4:	2201      	movs	r2, #1
 80039b6:	4013      	ands	r3, r2
 80039b8:	d00b      	beq.n	80039d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4a4a      	ldr	r2, [pc, #296]	; (8003aec <UART_AdvFeatureConfig+0x144>)
 80039c2:	4013      	ands	r3, r2
 80039c4:	0019      	movs	r1, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	430a      	orrs	r2, r1
 80039d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d6:	2202      	movs	r2, #2
 80039d8:	4013      	ands	r3, r2
 80039da:	d00b      	beq.n	80039f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	4a43      	ldr	r2, [pc, #268]	; (8003af0 <UART_AdvFeatureConfig+0x148>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	430a      	orrs	r2, r1
 80039f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f8:	2204      	movs	r2, #4
 80039fa:	4013      	ands	r3, r2
 80039fc:	d00b      	beq.n	8003a16 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4a3b      	ldr	r2, [pc, #236]	; (8003af4 <UART_AdvFeatureConfig+0x14c>)
 8003a06:	4013      	ands	r3, r2
 8003a08:	0019      	movs	r1, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	430a      	orrs	r2, r1
 8003a14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1a:	2208      	movs	r2, #8
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	d00b      	beq.n	8003a38 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	4a34      	ldr	r2, [pc, #208]	; (8003af8 <UART_AdvFeatureConfig+0x150>)
 8003a28:	4013      	ands	r3, r2
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	430a      	orrs	r2, r1
 8003a36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3c:	2210      	movs	r2, #16
 8003a3e:	4013      	ands	r3, r2
 8003a40:	d00b      	beq.n	8003a5a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	4a2c      	ldr	r2, [pc, #176]	; (8003afc <UART_AdvFeatureConfig+0x154>)
 8003a4a:	4013      	ands	r3, r2
 8003a4c:	0019      	movs	r1, r3
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2220      	movs	r2, #32
 8003a60:	4013      	ands	r3, r2
 8003a62:	d00b      	beq.n	8003a7c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	4a25      	ldr	r2, [pc, #148]	; (8003b00 <UART_AdvFeatureConfig+0x158>)
 8003a6c:	4013      	ands	r3, r2
 8003a6e:	0019      	movs	r1, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	430a      	orrs	r2, r1
 8003a7a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2240      	movs	r2, #64	; 0x40
 8003a82:	4013      	ands	r3, r2
 8003a84:	d01d      	beq.n	8003ac2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	685b      	ldr	r3, [r3, #4]
 8003a8c:	4a1d      	ldr	r2, [pc, #116]	; (8003b04 <UART_AdvFeatureConfig+0x15c>)
 8003a8e:	4013      	ands	r3, r2
 8003a90:	0019      	movs	r1, r3
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	035b      	lsls	r3, r3, #13
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d10b      	bne.n	8003ac2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	4a15      	ldr	r2, [pc, #84]	; (8003b08 <UART_AdvFeatureConfig+0x160>)
 8003ab2:	4013      	ands	r3, r2
 8003ab4:	0019      	movs	r1, r3
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	430a      	orrs	r2, r1
 8003ac0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	2280      	movs	r2, #128	; 0x80
 8003ac8:	4013      	ands	r3, r2
 8003aca:	d00b      	beq.n	8003ae4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	685b      	ldr	r3, [r3, #4]
 8003ad2:	4a0e      	ldr	r2, [pc, #56]	; (8003b0c <UART_AdvFeatureConfig+0x164>)
 8003ad4:	4013      	ands	r3, r2
 8003ad6:	0019      	movs	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	430a      	orrs	r2, r1
 8003ae2:	605a      	str	r2, [r3, #4]
  }
}
 8003ae4:	46c0      	nop			; (mov r8, r8)
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	b002      	add	sp, #8
 8003aea:	bd80      	pop	{r7, pc}
 8003aec:	fffdffff 	.word	0xfffdffff
 8003af0:	fffeffff 	.word	0xfffeffff
 8003af4:	fffbffff 	.word	0xfffbffff
 8003af8:	ffff7fff 	.word	0xffff7fff
 8003afc:	ffffefff 	.word	0xffffefff
 8003b00:	ffffdfff 	.word	0xffffdfff
 8003b04:	ffefffff 	.word	0xffefffff
 8003b08:	ff9fffff 	.word	0xff9fffff
 8003b0c:	fff7ffff 	.word	0xfff7ffff

08003b10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b086      	sub	sp, #24
 8003b14:	af02      	add	r7, sp, #8
 8003b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b20:	f7fd fc62 	bl	80013e8 <HAL_GetTick>
 8003b24:	0003      	movs	r3, r0
 8003b26:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	2208      	movs	r2, #8
 8003b30:	4013      	ands	r3, r2
 8003b32:	2b08      	cmp	r3, #8
 8003b34:	d10c      	bne.n	8003b50 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	0391      	lsls	r1, r2, #14
 8003b3c:	6878      	ldr	r0, [r7, #4]
 8003b3e:	4a17      	ldr	r2, [pc, #92]	; (8003b9c <UART_CheckIdleState+0x8c>)
 8003b40:	9200      	str	r2, [sp, #0]
 8003b42:	2200      	movs	r2, #0
 8003b44:	f000 f82c 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003b48:	1e03      	subs	r3, r0, #0
 8003b4a:	d001      	beq.n	8003b50 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b4c:	2303      	movs	r3, #3
 8003b4e:	e021      	b.n	8003b94 <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	2204      	movs	r2, #4
 8003b58:	4013      	ands	r3, r2
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d10c      	bne.n	8003b78 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2280      	movs	r2, #128	; 0x80
 8003b62:	03d1      	lsls	r1, r2, #15
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	4a0d      	ldr	r2, [pc, #52]	; (8003b9c <UART_CheckIdleState+0x8c>)
 8003b68:	9200      	str	r2, [sp, #0]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	f000 f818 	bl	8003ba0 <UART_WaitOnFlagUntilTimeout>
 8003b70:	1e03      	subs	r3, r0, #0
 8003b72:	d001      	beq.n	8003b78 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b74:	2303      	movs	r3, #3
 8003b76:	e00d      	b.n	8003b94 <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2220      	movs	r2, #32
 8003b7c:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	2220      	movs	r2, #32
 8003b82:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2200      	movs	r2, #0
 8003b88:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2274      	movs	r2, #116	; 0x74
 8003b8e:	2100      	movs	r1, #0
 8003b90:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b92:	2300      	movs	r3, #0
}
 8003b94:	0018      	movs	r0, r3
 8003b96:	46bd      	mov	sp, r7
 8003b98:	b004      	add	sp, #16
 8003b9a:	bd80      	pop	{r7, pc}
 8003b9c:	01ffffff 	.word	0x01ffffff

08003ba0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b094      	sub	sp, #80	; 0x50
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	60f8      	str	r0, [r7, #12]
 8003ba8:	60b9      	str	r1, [r7, #8]
 8003baa:	603b      	str	r3, [r7, #0]
 8003bac:	1dfb      	adds	r3, r7, #7
 8003bae:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003bb0:	e0a3      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bb2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	d100      	bne.n	8003bba <UART_WaitOnFlagUntilTimeout+0x1a>
 8003bb8:	e09f      	b.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bba:	f7fd fc15 	bl	80013e8 <HAL_GetTick>
 8003bbe:	0002      	movs	r2, r0
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	1ad3      	subs	r3, r2, r3
 8003bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	d302      	bcc.n	8003bd0 <UART_WaitOnFlagUntilTimeout+0x30>
 8003bca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d13d      	bne.n	8003c4c <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bd0:	f3ef 8310 	mrs	r3, PRIMASK
 8003bd4:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003bd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8003bda:	2301      	movs	r3, #1
 8003bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003be0:	f383 8810 	msr	PRIMASK, r3
}
 8003be4:	46c0      	nop			; (mov r8, r8)
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	494c      	ldr	r1, [pc, #304]	; (8003d24 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003bf2:	400a      	ands	r2, r1
 8003bf4:	601a      	str	r2, [r3, #0]
 8003bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bf8:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bfc:	f383 8810 	msr	PRIMASK, r3
}
 8003c00:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c02:	f3ef 8310 	mrs	r3, PRIMASK
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c12:	f383 8810 	msr	PRIMASK, r3
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	2101      	movs	r1, #1
 8003c24:	438a      	bics	r2, r1
 8003c26:	609a      	str	r2, [r3, #8]
 8003c28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c2e:	f383 8810 	msr	PRIMASK, r3
}
 8003c32:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2220      	movs	r2, #32
 8003c38:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	2274      	movs	r2, #116	; 0x74
 8003c44:	2100      	movs	r1, #0
 8003c46:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e067      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2204      	movs	r2, #4
 8003c54:	4013      	ands	r3, r2
 8003c56:	d050      	beq.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69da      	ldr	r2, [r3, #28]
 8003c5e:	2380      	movs	r3, #128	; 0x80
 8003c60:	011b      	lsls	r3, r3, #4
 8003c62:	401a      	ands	r2, r3
 8003c64:	2380      	movs	r3, #128	; 0x80
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d146      	bne.n	8003cfa <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2280      	movs	r2, #128	; 0x80
 8003c72:	0112      	lsls	r2, r2, #4
 8003c74:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c76:	f3ef 8310 	mrs	r3, PRIMASK
 8003c7a:	613b      	str	r3, [r7, #16]
  return(result);
 8003c7c:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003c80:	2301      	movs	r3, #1
 8003c82:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c84:	697b      	ldr	r3, [r7, #20]
 8003c86:	f383 8810 	msr	PRIMASK, r3
}
 8003c8a:	46c0      	nop			; (mov r8, r8)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	681a      	ldr	r2, [r3, #0]
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4923      	ldr	r1, [pc, #140]	; (8003d24 <UART_WaitOnFlagUntilTimeout+0x184>)
 8003c98:	400a      	ands	r2, r1
 8003c9a:	601a      	str	r2, [r3, #0]
 8003c9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c9e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca0:	69bb      	ldr	r3, [r7, #24]
 8003ca2:	f383 8810 	msr	PRIMASK, r3
}
 8003ca6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cac:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cae:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cb6:	6a3b      	ldr	r3, [r7, #32]
 8003cb8:	f383 8810 	msr	PRIMASK, r3
}
 8003cbc:	46c0      	nop			; (mov r8, r8)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2101      	movs	r1, #1
 8003cca:	438a      	bics	r2, r1
 8003ccc:	609a      	str	r2, [r3, #8]
 8003cce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003cd0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd4:	f383 8810 	msr	PRIMASK, r3
}
 8003cd8:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	2220      	movs	r2, #32
 8003cde:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2220      	movs	r2, #32
 8003ce4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	2280      	movs	r2, #128	; 0x80
 8003cea:	2120      	movs	r1, #32
 8003cec:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2274      	movs	r2, #116	; 0x74
 8003cf2:	2100      	movs	r1, #0
 8003cf4:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003cf6:	2303      	movs	r3, #3
 8003cf8:	e010      	b.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	68ba      	ldr	r2, [r7, #8]
 8003d02:	4013      	ands	r3, r2
 8003d04:	68ba      	ldr	r2, [r7, #8]
 8003d06:	1ad3      	subs	r3, r2, r3
 8003d08:	425a      	negs	r2, r3
 8003d0a:	4153      	adcs	r3, r2
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	001a      	movs	r2, r3
 8003d10:	1dfb      	adds	r3, r7, #7
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d100      	bne.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x17a>
 8003d18:	e74b      	b.n	8003bb2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d1a:	2300      	movs	r3, #0
}
 8003d1c:	0018      	movs	r0, r3
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	b014      	add	sp, #80	; 0x50
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	fffffe5f 	.word	0xfffffe5f

08003d28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b08e      	sub	sp, #56	; 0x38
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d30:	f3ef 8310 	mrs	r3, PRIMASK
 8003d34:	617b      	str	r3, [r7, #20]
  return(result);
 8003d36:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d38:	637b      	str	r3, [r7, #52]	; 0x34
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	f383 8810 	msr	PRIMASK, r3
}
 8003d44:	46c0      	nop			; (mov r8, r8)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	681a      	ldr	r2, [r3, #0]
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4925      	ldr	r1, [pc, #148]	; (8003de8 <UART_EndRxTransfer+0xc0>)
 8003d52:	400a      	ands	r2, r1
 8003d54:	601a      	str	r2, [r3, #0]
 8003d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d5a:	69fb      	ldr	r3, [r7, #28]
 8003d5c:	f383 8810 	msr	PRIMASK, r3
}
 8003d60:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d62:	f3ef 8310 	mrs	r3, PRIMASK
 8003d66:	623b      	str	r3, [r7, #32]
  return(result);
 8003d68:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d6a:	633b      	str	r3, [r7, #48]	; 0x30
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d72:	f383 8810 	msr	PRIMASK, r3
}
 8003d76:	46c0      	nop			; (mov r8, r8)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2101      	movs	r1, #1
 8003d84:	438a      	bics	r2, r1
 8003d86:	609a      	str	r2, [r3, #8]
 8003d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d8a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d8e:	f383 8810 	msr	PRIMASK, r3
}
 8003d92:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d98:	2b01      	cmp	r3, #1
 8003d9a:	d118      	bne.n	8003dce <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003da0:	60bb      	str	r3, [r7, #8]
  return(result);
 8003da2:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003da6:	2301      	movs	r3, #1
 8003da8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f383 8810 	msr	PRIMASK, r3
}
 8003db0:	46c0      	nop			; (mov r8, r8)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	2110      	movs	r1, #16
 8003dbe:	438a      	bics	r2, r1
 8003dc0:	601a      	str	r2, [r3, #0]
 8003dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003dc4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc6:	693b      	ldr	r3, [r7, #16]
 8003dc8:	f383 8810 	msr	PRIMASK, r3
}
 8003dcc:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2220      	movs	r2, #32
 8003dd2:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003de0:	46c0      	nop			; (mov r8, r8)
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b00e      	add	sp, #56	; 0x38
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	fffffedf 	.word	0xfffffedf

08003dec <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b084      	sub	sp, #16
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	225a      	movs	r2, #90	; 0x5a
 8003dfe:	2100      	movs	r1, #0
 8003e00:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2252      	movs	r2, #82	; 0x52
 8003e06:	2100      	movs	r1, #0
 8003e08:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7ff fc77 	bl	8003700 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e12:	46c0      	nop			; (mov r8, r8)
 8003e14:	46bd      	mov	sp, r7
 8003e16:	b004      	add	sp, #16
 8003e18:	bd80      	pop	{r7, pc}

08003e1a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e1a:	b580      	push	{r7, lr}
 8003e1c:	b086      	sub	sp, #24
 8003e1e:	af00      	add	r7, sp, #0
 8003e20:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e22:	f3ef 8310 	mrs	r3, PRIMASK
 8003e26:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e28:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e2a:	617b      	str	r3, [r7, #20]
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f383 8810 	msr	PRIMASK, r3
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	2140      	movs	r1, #64	; 0x40
 8003e44:	438a      	bics	r2, r1
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	f383 8810 	msr	PRIMASK, r3
}
 8003e52:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	0018      	movs	r0, r3
 8003e64:	f7ff fc44 	bl	80036f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b006      	add	sp, #24
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b082      	sub	sp, #8
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e78:	46c0      	nop			; (mov r8, r8)
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	b002      	add	sp, #8
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <__errno>:
 8003e80:	4b01      	ldr	r3, [pc, #4]	; (8003e88 <__errno+0x8>)
 8003e82:	6818      	ldr	r0, [r3, #0]
 8003e84:	4770      	bx	lr
 8003e86:	46c0      	nop			; (mov r8, r8)
 8003e88:	2000000c 	.word	0x2000000c

08003e8c <__libc_init_array>:
 8003e8c:	b570      	push	{r4, r5, r6, lr}
 8003e8e:	2600      	movs	r6, #0
 8003e90:	4d0c      	ldr	r5, [pc, #48]	; (8003ec4 <__libc_init_array+0x38>)
 8003e92:	4c0d      	ldr	r4, [pc, #52]	; (8003ec8 <__libc_init_array+0x3c>)
 8003e94:	1b64      	subs	r4, r4, r5
 8003e96:	10a4      	asrs	r4, r4, #2
 8003e98:	42a6      	cmp	r6, r4
 8003e9a:	d109      	bne.n	8003eb0 <__libc_init_array+0x24>
 8003e9c:	2600      	movs	r6, #0
 8003e9e:	f000 fc8b 	bl	80047b8 <_init>
 8003ea2:	4d0a      	ldr	r5, [pc, #40]	; (8003ecc <__libc_init_array+0x40>)
 8003ea4:	4c0a      	ldr	r4, [pc, #40]	; (8003ed0 <__libc_init_array+0x44>)
 8003ea6:	1b64      	subs	r4, r4, r5
 8003ea8:	10a4      	asrs	r4, r4, #2
 8003eaa:	42a6      	cmp	r6, r4
 8003eac:	d105      	bne.n	8003eba <__libc_init_array+0x2e>
 8003eae:	bd70      	pop	{r4, r5, r6, pc}
 8003eb0:	00b3      	lsls	r3, r6, #2
 8003eb2:	58eb      	ldr	r3, [r5, r3]
 8003eb4:	4798      	blx	r3
 8003eb6:	3601      	adds	r6, #1
 8003eb8:	e7ee      	b.n	8003e98 <__libc_init_array+0xc>
 8003eba:	00b3      	lsls	r3, r6, #2
 8003ebc:	58eb      	ldr	r3, [r5, r3]
 8003ebe:	4798      	blx	r3
 8003ec0:	3601      	adds	r6, #1
 8003ec2:	e7f2      	b.n	8003eaa <__libc_init_array+0x1e>
 8003ec4:	08004a54 	.word	0x08004a54
 8003ec8:	08004a54 	.word	0x08004a54
 8003ecc:	08004a54 	.word	0x08004a54
 8003ed0:	08004a58 	.word	0x08004a58

08003ed4 <memset>:
 8003ed4:	0003      	movs	r3, r0
 8003ed6:	1882      	adds	r2, r0, r2
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d100      	bne.n	8003ede <memset+0xa>
 8003edc:	4770      	bx	lr
 8003ede:	7019      	strb	r1, [r3, #0]
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	e7f9      	b.n	8003ed8 <memset+0x4>

08003ee4 <siprintf>:
 8003ee4:	b40e      	push	{r1, r2, r3}
 8003ee6:	b500      	push	{lr}
 8003ee8:	490b      	ldr	r1, [pc, #44]	; (8003f18 <siprintf+0x34>)
 8003eea:	b09c      	sub	sp, #112	; 0x70
 8003eec:	ab1d      	add	r3, sp, #116	; 0x74
 8003eee:	9002      	str	r0, [sp, #8]
 8003ef0:	9006      	str	r0, [sp, #24]
 8003ef2:	9107      	str	r1, [sp, #28]
 8003ef4:	9104      	str	r1, [sp, #16]
 8003ef6:	4809      	ldr	r0, [pc, #36]	; (8003f1c <siprintf+0x38>)
 8003ef8:	4909      	ldr	r1, [pc, #36]	; (8003f20 <siprintf+0x3c>)
 8003efa:	cb04      	ldmia	r3!, {r2}
 8003efc:	9105      	str	r1, [sp, #20]
 8003efe:	6800      	ldr	r0, [r0, #0]
 8003f00:	a902      	add	r1, sp, #8
 8003f02:	9301      	str	r3, [sp, #4]
 8003f04:	f000 f870 	bl	8003fe8 <_svfiprintf_r>
 8003f08:	2300      	movs	r3, #0
 8003f0a:	9a02      	ldr	r2, [sp, #8]
 8003f0c:	7013      	strb	r3, [r2, #0]
 8003f0e:	b01c      	add	sp, #112	; 0x70
 8003f10:	bc08      	pop	{r3}
 8003f12:	b003      	add	sp, #12
 8003f14:	4718      	bx	r3
 8003f16:	46c0      	nop			; (mov r8, r8)
 8003f18:	7fffffff 	.word	0x7fffffff
 8003f1c:	2000000c 	.word	0x2000000c
 8003f20:	ffff0208 	.word	0xffff0208

08003f24 <__ssputs_r>:
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	688e      	ldr	r6, [r1, #8]
 8003f28:	b085      	sub	sp, #20
 8003f2a:	0007      	movs	r7, r0
 8003f2c:	000c      	movs	r4, r1
 8003f2e:	9203      	str	r2, [sp, #12]
 8003f30:	9301      	str	r3, [sp, #4]
 8003f32:	429e      	cmp	r6, r3
 8003f34:	d83c      	bhi.n	8003fb0 <__ssputs_r+0x8c>
 8003f36:	2390      	movs	r3, #144	; 0x90
 8003f38:	898a      	ldrh	r2, [r1, #12]
 8003f3a:	00db      	lsls	r3, r3, #3
 8003f3c:	421a      	tst	r2, r3
 8003f3e:	d034      	beq.n	8003faa <__ssputs_r+0x86>
 8003f40:	6909      	ldr	r1, [r1, #16]
 8003f42:	6823      	ldr	r3, [r4, #0]
 8003f44:	6960      	ldr	r0, [r4, #20]
 8003f46:	1a5b      	subs	r3, r3, r1
 8003f48:	9302      	str	r3, [sp, #8]
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	4343      	muls	r3, r0
 8003f4e:	0fdd      	lsrs	r5, r3, #31
 8003f50:	18ed      	adds	r5, r5, r3
 8003f52:	9b01      	ldr	r3, [sp, #4]
 8003f54:	9802      	ldr	r0, [sp, #8]
 8003f56:	3301      	adds	r3, #1
 8003f58:	181b      	adds	r3, r3, r0
 8003f5a:	106d      	asrs	r5, r5, #1
 8003f5c:	42ab      	cmp	r3, r5
 8003f5e:	d900      	bls.n	8003f62 <__ssputs_r+0x3e>
 8003f60:	001d      	movs	r5, r3
 8003f62:	0553      	lsls	r3, r2, #21
 8003f64:	d532      	bpl.n	8003fcc <__ssputs_r+0xa8>
 8003f66:	0029      	movs	r1, r5
 8003f68:	0038      	movs	r0, r7
 8003f6a:	f000 fb53 	bl	8004614 <_malloc_r>
 8003f6e:	1e06      	subs	r6, r0, #0
 8003f70:	d109      	bne.n	8003f86 <__ssputs_r+0x62>
 8003f72:	230c      	movs	r3, #12
 8003f74:	603b      	str	r3, [r7, #0]
 8003f76:	2340      	movs	r3, #64	; 0x40
 8003f78:	2001      	movs	r0, #1
 8003f7a:	89a2      	ldrh	r2, [r4, #12]
 8003f7c:	4240      	negs	r0, r0
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	81a3      	strh	r3, [r4, #12]
 8003f82:	b005      	add	sp, #20
 8003f84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003f86:	9a02      	ldr	r2, [sp, #8]
 8003f88:	6921      	ldr	r1, [r4, #16]
 8003f8a:	f000 faba 	bl	8004502 <memcpy>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	4a14      	ldr	r2, [pc, #80]	; (8003fe4 <__ssputs_r+0xc0>)
 8003f92:	401a      	ands	r2, r3
 8003f94:	2380      	movs	r3, #128	; 0x80
 8003f96:	4313      	orrs	r3, r2
 8003f98:	81a3      	strh	r3, [r4, #12]
 8003f9a:	9b02      	ldr	r3, [sp, #8]
 8003f9c:	6126      	str	r6, [r4, #16]
 8003f9e:	18f6      	adds	r6, r6, r3
 8003fa0:	6026      	str	r6, [r4, #0]
 8003fa2:	6165      	str	r5, [r4, #20]
 8003fa4:	9e01      	ldr	r6, [sp, #4]
 8003fa6:	1aed      	subs	r5, r5, r3
 8003fa8:	60a5      	str	r5, [r4, #8]
 8003faa:	9b01      	ldr	r3, [sp, #4]
 8003fac:	429e      	cmp	r6, r3
 8003fae:	d900      	bls.n	8003fb2 <__ssputs_r+0x8e>
 8003fb0:	9e01      	ldr	r6, [sp, #4]
 8003fb2:	0032      	movs	r2, r6
 8003fb4:	9903      	ldr	r1, [sp, #12]
 8003fb6:	6820      	ldr	r0, [r4, #0]
 8003fb8:	f000 faac 	bl	8004514 <memmove>
 8003fbc:	68a3      	ldr	r3, [r4, #8]
 8003fbe:	2000      	movs	r0, #0
 8003fc0:	1b9b      	subs	r3, r3, r6
 8003fc2:	60a3      	str	r3, [r4, #8]
 8003fc4:	6823      	ldr	r3, [r4, #0]
 8003fc6:	199e      	adds	r6, r3, r6
 8003fc8:	6026      	str	r6, [r4, #0]
 8003fca:	e7da      	b.n	8003f82 <__ssputs_r+0x5e>
 8003fcc:	002a      	movs	r2, r5
 8003fce:	0038      	movs	r0, r7
 8003fd0:	f000 fb96 	bl	8004700 <_realloc_r>
 8003fd4:	1e06      	subs	r6, r0, #0
 8003fd6:	d1e0      	bne.n	8003f9a <__ssputs_r+0x76>
 8003fd8:	0038      	movs	r0, r7
 8003fda:	6921      	ldr	r1, [r4, #16]
 8003fdc:	f000 faae 	bl	800453c <_free_r>
 8003fe0:	e7c7      	b.n	8003f72 <__ssputs_r+0x4e>
 8003fe2:	46c0      	nop			; (mov r8, r8)
 8003fe4:	fffffb7f 	.word	0xfffffb7f

08003fe8 <_svfiprintf_r>:
 8003fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fea:	b0a1      	sub	sp, #132	; 0x84
 8003fec:	9003      	str	r0, [sp, #12]
 8003fee:	001d      	movs	r5, r3
 8003ff0:	898b      	ldrh	r3, [r1, #12]
 8003ff2:	000f      	movs	r7, r1
 8003ff4:	0016      	movs	r6, r2
 8003ff6:	061b      	lsls	r3, r3, #24
 8003ff8:	d511      	bpl.n	800401e <_svfiprintf_r+0x36>
 8003ffa:	690b      	ldr	r3, [r1, #16]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10e      	bne.n	800401e <_svfiprintf_r+0x36>
 8004000:	2140      	movs	r1, #64	; 0x40
 8004002:	f000 fb07 	bl	8004614 <_malloc_r>
 8004006:	6038      	str	r0, [r7, #0]
 8004008:	6138      	str	r0, [r7, #16]
 800400a:	2800      	cmp	r0, #0
 800400c:	d105      	bne.n	800401a <_svfiprintf_r+0x32>
 800400e:	230c      	movs	r3, #12
 8004010:	9a03      	ldr	r2, [sp, #12]
 8004012:	3801      	subs	r0, #1
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	b021      	add	sp, #132	; 0x84
 8004018:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800401a:	2340      	movs	r3, #64	; 0x40
 800401c:	617b      	str	r3, [r7, #20]
 800401e:	2300      	movs	r3, #0
 8004020:	ac08      	add	r4, sp, #32
 8004022:	6163      	str	r3, [r4, #20]
 8004024:	3320      	adds	r3, #32
 8004026:	7663      	strb	r3, [r4, #25]
 8004028:	3310      	adds	r3, #16
 800402a:	76a3      	strb	r3, [r4, #26]
 800402c:	9507      	str	r5, [sp, #28]
 800402e:	0035      	movs	r5, r6
 8004030:	782b      	ldrb	r3, [r5, #0]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d001      	beq.n	800403a <_svfiprintf_r+0x52>
 8004036:	2b25      	cmp	r3, #37	; 0x25
 8004038:	d147      	bne.n	80040ca <_svfiprintf_r+0xe2>
 800403a:	1bab      	subs	r3, r5, r6
 800403c:	9305      	str	r3, [sp, #20]
 800403e:	42b5      	cmp	r5, r6
 8004040:	d00c      	beq.n	800405c <_svfiprintf_r+0x74>
 8004042:	0032      	movs	r2, r6
 8004044:	0039      	movs	r1, r7
 8004046:	9803      	ldr	r0, [sp, #12]
 8004048:	f7ff ff6c 	bl	8003f24 <__ssputs_r>
 800404c:	1c43      	adds	r3, r0, #1
 800404e:	d100      	bne.n	8004052 <_svfiprintf_r+0x6a>
 8004050:	e0ae      	b.n	80041b0 <_svfiprintf_r+0x1c8>
 8004052:	6962      	ldr	r2, [r4, #20]
 8004054:	9b05      	ldr	r3, [sp, #20]
 8004056:	4694      	mov	ip, r2
 8004058:	4463      	add	r3, ip
 800405a:	6163      	str	r3, [r4, #20]
 800405c:	782b      	ldrb	r3, [r5, #0]
 800405e:	2b00      	cmp	r3, #0
 8004060:	d100      	bne.n	8004064 <_svfiprintf_r+0x7c>
 8004062:	e0a5      	b.n	80041b0 <_svfiprintf_r+0x1c8>
 8004064:	2201      	movs	r2, #1
 8004066:	2300      	movs	r3, #0
 8004068:	4252      	negs	r2, r2
 800406a:	6062      	str	r2, [r4, #4]
 800406c:	a904      	add	r1, sp, #16
 800406e:	3254      	adds	r2, #84	; 0x54
 8004070:	1852      	adds	r2, r2, r1
 8004072:	1c6e      	adds	r6, r5, #1
 8004074:	6023      	str	r3, [r4, #0]
 8004076:	60e3      	str	r3, [r4, #12]
 8004078:	60a3      	str	r3, [r4, #8]
 800407a:	7013      	strb	r3, [r2, #0]
 800407c:	65a3      	str	r3, [r4, #88]	; 0x58
 800407e:	2205      	movs	r2, #5
 8004080:	7831      	ldrb	r1, [r6, #0]
 8004082:	4854      	ldr	r0, [pc, #336]	; (80041d4 <_svfiprintf_r+0x1ec>)
 8004084:	f000 fa32 	bl	80044ec <memchr>
 8004088:	1c75      	adds	r5, r6, #1
 800408a:	2800      	cmp	r0, #0
 800408c:	d11f      	bne.n	80040ce <_svfiprintf_r+0xe6>
 800408e:	6822      	ldr	r2, [r4, #0]
 8004090:	06d3      	lsls	r3, r2, #27
 8004092:	d504      	bpl.n	800409e <_svfiprintf_r+0xb6>
 8004094:	2353      	movs	r3, #83	; 0x53
 8004096:	a904      	add	r1, sp, #16
 8004098:	185b      	adds	r3, r3, r1
 800409a:	2120      	movs	r1, #32
 800409c:	7019      	strb	r1, [r3, #0]
 800409e:	0713      	lsls	r3, r2, #28
 80040a0:	d504      	bpl.n	80040ac <_svfiprintf_r+0xc4>
 80040a2:	2353      	movs	r3, #83	; 0x53
 80040a4:	a904      	add	r1, sp, #16
 80040a6:	185b      	adds	r3, r3, r1
 80040a8:	212b      	movs	r1, #43	; 0x2b
 80040aa:	7019      	strb	r1, [r3, #0]
 80040ac:	7833      	ldrb	r3, [r6, #0]
 80040ae:	2b2a      	cmp	r3, #42	; 0x2a
 80040b0:	d016      	beq.n	80040e0 <_svfiprintf_r+0xf8>
 80040b2:	0035      	movs	r5, r6
 80040b4:	2100      	movs	r1, #0
 80040b6:	200a      	movs	r0, #10
 80040b8:	68e3      	ldr	r3, [r4, #12]
 80040ba:	782a      	ldrb	r2, [r5, #0]
 80040bc:	1c6e      	adds	r6, r5, #1
 80040be:	3a30      	subs	r2, #48	; 0x30
 80040c0:	2a09      	cmp	r2, #9
 80040c2:	d94e      	bls.n	8004162 <_svfiprintf_r+0x17a>
 80040c4:	2900      	cmp	r1, #0
 80040c6:	d111      	bne.n	80040ec <_svfiprintf_r+0x104>
 80040c8:	e017      	b.n	80040fa <_svfiprintf_r+0x112>
 80040ca:	3501      	adds	r5, #1
 80040cc:	e7b0      	b.n	8004030 <_svfiprintf_r+0x48>
 80040ce:	4b41      	ldr	r3, [pc, #260]	; (80041d4 <_svfiprintf_r+0x1ec>)
 80040d0:	6822      	ldr	r2, [r4, #0]
 80040d2:	1ac0      	subs	r0, r0, r3
 80040d4:	2301      	movs	r3, #1
 80040d6:	4083      	lsls	r3, r0
 80040d8:	4313      	orrs	r3, r2
 80040da:	002e      	movs	r6, r5
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	e7ce      	b.n	800407e <_svfiprintf_r+0x96>
 80040e0:	9b07      	ldr	r3, [sp, #28]
 80040e2:	1d19      	adds	r1, r3, #4
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	9107      	str	r1, [sp, #28]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	db01      	blt.n	80040f0 <_svfiprintf_r+0x108>
 80040ec:	930b      	str	r3, [sp, #44]	; 0x2c
 80040ee:	e004      	b.n	80040fa <_svfiprintf_r+0x112>
 80040f0:	425b      	negs	r3, r3
 80040f2:	60e3      	str	r3, [r4, #12]
 80040f4:	2302      	movs	r3, #2
 80040f6:	4313      	orrs	r3, r2
 80040f8:	6023      	str	r3, [r4, #0]
 80040fa:	782b      	ldrb	r3, [r5, #0]
 80040fc:	2b2e      	cmp	r3, #46	; 0x2e
 80040fe:	d10a      	bne.n	8004116 <_svfiprintf_r+0x12e>
 8004100:	786b      	ldrb	r3, [r5, #1]
 8004102:	2b2a      	cmp	r3, #42	; 0x2a
 8004104:	d135      	bne.n	8004172 <_svfiprintf_r+0x18a>
 8004106:	9b07      	ldr	r3, [sp, #28]
 8004108:	3502      	adds	r5, #2
 800410a:	1d1a      	adds	r2, r3, #4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	9207      	str	r2, [sp, #28]
 8004110:	2b00      	cmp	r3, #0
 8004112:	db2b      	blt.n	800416c <_svfiprintf_r+0x184>
 8004114:	9309      	str	r3, [sp, #36]	; 0x24
 8004116:	4e30      	ldr	r6, [pc, #192]	; (80041d8 <_svfiprintf_r+0x1f0>)
 8004118:	2203      	movs	r2, #3
 800411a:	0030      	movs	r0, r6
 800411c:	7829      	ldrb	r1, [r5, #0]
 800411e:	f000 f9e5 	bl	80044ec <memchr>
 8004122:	2800      	cmp	r0, #0
 8004124:	d006      	beq.n	8004134 <_svfiprintf_r+0x14c>
 8004126:	2340      	movs	r3, #64	; 0x40
 8004128:	1b80      	subs	r0, r0, r6
 800412a:	4083      	lsls	r3, r0
 800412c:	6822      	ldr	r2, [r4, #0]
 800412e:	3501      	adds	r5, #1
 8004130:	4313      	orrs	r3, r2
 8004132:	6023      	str	r3, [r4, #0]
 8004134:	7829      	ldrb	r1, [r5, #0]
 8004136:	2206      	movs	r2, #6
 8004138:	4828      	ldr	r0, [pc, #160]	; (80041dc <_svfiprintf_r+0x1f4>)
 800413a:	1c6e      	adds	r6, r5, #1
 800413c:	7621      	strb	r1, [r4, #24]
 800413e:	f000 f9d5 	bl	80044ec <memchr>
 8004142:	2800      	cmp	r0, #0
 8004144:	d03c      	beq.n	80041c0 <_svfiprintf_r+0x1d8>
 8004146:	4b26      	ldr	r3, [pc, #152]	; (80041e0 <_svfiprintf_r+0x1f8>)
 8004148:	2b00      	cmp	r3, #0
 800414a:	d125      	bne.n	8004198 <_svfiprintf_r+0x1b0>
 800414c:	2207      	movs	r2, #7
 800414e:	9b07      	ldr	r3, [sp, #28]
 8004150:	3307      	adds	r3, #7
 8004152:	4393      	bics	r3, r2
 8004154:	3308      	adds	r3, #8
 8004156:	9307      	str	r3, [sp, #28]
 8004158:	6963      	ldr	r3, [r4, #20]
 800415a:	9a04      	ldr	r2, [sp, #16]
 800415c:	189b      	adds	r3, r3, r2
 800415e:	6163      	str	r3, [r4, #20]
 8004160:	e765      	b.n	800402e <_svfiprintf_r+0x46>
 8004162:	4343      	muls	r3, r0
 8004164:	0035      	movs	r5, r6
 8004166:	2101      	movs	r1, #1
 8004168:	189b      	adds	r3, r3, r2
 800416a:	e7a6      	b.n	80040ba <_svfiprintf_r+0xd2>
 800416c:	2301      	movs	r3, #1
 800416e:	425b      	negs	r3, r3
 8004170:	e7d0      	b.n	8004114 <_svfiprintf_r+0x12c>
 8004172:	2300      	movs	r3, #0
 8004174:	200a      	movs	r0, #10
 8004176:	001a      	movs	r2, r3
 8004178:	3501      	adds	r5, #1
 800417a:	6063      	str	r3, [r4, #4]
 800417c:	7829      	ldrb	r1, [r5, #0]
 800417e:	1c6e      	adds	r6, r5, #1
 8004180:	3930      	subs	r1, #48	; 0x30
 8004182:	2909      	cmp	r1, #9
 8004184:	d903      	bls.n	800418e <_svfiprintf_r+0x1a6>
 8004186:	2b00      	cmp	r3, #0
 8004188:	d0c5      	beq.n	8004116 <_svfiprintf_r+0x12e>
 800418a:	9209      	str	r2, [sp, #36]	; 0x24
 800418c:	e7c3      	b.n	8004116 <_svfiprintf_r+0x12e>
 800418e:	4342      	muls	r2, r0
 8004190:	0035      	movs	r5, r6
 8004192:	2301      	movs	r3, #1
 8004194:	1852      	adds	r2, r2, r1
 8004196:	e7f1      	b.n	800417c <_svfiprintf_r+0x194>
 8004198:	ab07      	add	r3, sp, #28
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	003a      	movs	r2, r7
 800419e:	0021      	movs	r1, r4
 80041a0:	4b10      	ldr	r3, [pc, #64]	; (80041e4 <_svfiprintf_r+0x1fc>)
 80041a2:	9803      	ldr	r0, [sp, #12]
 80041a4:	e000      	b.n	80041a8 <_svfiprintf_r+0x1c0>
 80041a6:	bf00      	nop
 80041a8:	9004      	str	r0, [sp, #16]
 80041aa:	9b04      	ldr	r3, [sp, #16]
 80041ac:	3301      	adds	r3, #1
 80041ae:	d1d3      	bne.n	8004158 <_svfiprintf_r+0x170>
 80041b0:	89bb      	ldrh	r3, [r7, #12]
 80041b2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80041b4:	065b      	lsls	r3, r3, #25
 80041b6:	d400      	bmi.n	80041ba <_svfiprintf_r+0x1d2>
 80041b8:	e72d      	b.n	8004016 <_svfiprintf_r+0x2e>
 80041ba:	2001      	movs	r0, #1
 80041bc:	4240      	negs	r0, r0
 80041be:	e72a      	b.n	8004016 <_svfiprintf_r+0x2e>
 80041c0:	ab07      	add	r3, sp, #28
 80041c2:	9300      	str	r3, [sp, #0]
 80041c4:	003a      	movs	r2, r7
 80041c6:	0021      	movs	r1, r4
 80041c8:	4b06      	ldr	r3, [pc, #24]	; (80041e4 <_svfiprintf_r+0x1fc>)
 80041ca:	9803      	ldr	r0, [sp, #12]
 80041cc:	f000 f87c 	bl	80042c8 <_printf_i>
 80041d0:	e7ea      	b.n	80041a8 <_svfiprintf_r+0x1c0>
 80041d2:	46c0      	nop			; (mov r8, r8)
 80041d4:	08004a20 	.word	0x08004a20
 80041d8:	08004a26 	.word	0x08004a26
 80041dc:	08004a2a 	.word	0x08004a2a
 80041e0:	00000000 	.word	0x00000000
 80041e4:	08003f25 	.word	0x08003f25

080041e8 <_printf_common>:
 80041e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80041ea:	0015      	movs	r5, r2
 80041ec:	9301      	str	r3, [sp, #4]
 80041ee:	688a      	ldr	r2, [r1, #8]
 80041f0:	690b      	ldr	r3, [r1, #16]
 80041f2:	000c      	movs	r4, r1
 80041f4:	9000      	str	r0, [sp, #0]
 80041f6:	4293      	cmp	r3, r2
 80041f8:	da00      	bge.n	80041fc <_printf_common+0x14>
 80041fa:	0013      	movs	r3, r2
 80041fc:	0022      	movs	r2, r4
 80041fe:	602b      	str	r3, [r5, #0]
 8004200:	3243      	adds	r2, #67	; 0x43
 8004202:	7812      	ldrb	r2, [r2, #0]
 8004204:	2a00      	cmp	r2, #0
 8004206:	d001      	beq.n	800420c <_printf_common+0x24>
 8004208:	3301      	adds	r3, #1
 800420a:	602b      	str	r3, [r5, #0]
 800420c:	6823      	ldr	r3, [r4, #0]
 800420e:	069b      	lsls	r3, r3, #26
 8004210:	d502      	bpl.n	8004218 <_printf_common+0x30>
 8004212:	682b      	ldr	r3, [r5, #0]
 8004214:	3302      	adds	r3, #2
 8004216:	602b      	str	r3, [r5, #0]
 8004218:	6822      	ldr	r2, [r4, #0]
 800421a:	2306      	movs	r3, #6
 800421c:	0017      	movs	r7, r2
 800421e:	401f      	ands	r7, r3
 8004220:	421a      	tst	r2, r3
 8004222:	d027      	beq.n	8004274 <_printf_common+0x8c>
 8004224:	0023      	movs	r3, r4
 8004226:	3343      	adds	r3, #67	; 0x43
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	1e5a      	subs	r2, r3, #1
 800422c:	4193      	sbcs	r3, r2
 800422e:	6822      	ldr	r2, [r4, #0]
 8004230:	0692      	lsls	r2, r2, #26
 8004232:	d430      	bmi.n	8004296 <_printf_common+0xae>
 8004234:	0022      	movs	r2, r4
 8004236:	9901      	ldr	r1, [sp, #4]
 8004238:	9800      	ldr	r0, [sp, #0]
 800423a:	9e08      	ldr	r6, [sp, #32]
 800423c:	3243      	adds	r2, #67	; 0x43
 800423e:	47b0      	blx	r6
 8004240:	1c43      	adds	r3, r0, #1
 8004242:	d025      	beq.n	8004290 <_printf_common+0xa8>
 8004244:	2306      	movs	r3, #6
 8004246:	6820      	ldr	r0, [r4, #0]
 8004248:	682a      	ldr	r2, [r5, #0]
 800424a:	68e1      	ldr	r1, [r4, #12]
 800424c:	2500      	movs	r5, #0
 800424e:	4003      	ands	r3, r0
 8004250:	2b04      	cmp	r3, #4
 8004252:	d103      	bne.n	800425c <_printf_common+0x74>
 8004254:	1a8d      	subs	r5, r1, r2
 8004256:	43eb      	mvns	r3, r5
 8004258:	17db      	asrs	r3, r3, #31
 800425a:	401d      	ands	r5, r3
 800425c:	68a3      	ldr	r3, [r4, #8]
 800425e:	6922      	ldr	r2, [r4, #16]
 8004260:	4293      	cmp	r3, r2
 8004262:	dd01      	ble.n	8004268 <_printf_common+0x80>
 8004264:	1a9b      	subs	r3, r3, r2
 8004266:	18ed      	adds	r5, r5, r3
 8004268:	2700      	movs	r7, #0
 800426a:	42bd      	cmp	r5, r7
 800426c:	d120      	bne.n	80042b0 <_printf_common+0xc8>
 800426e:	2000      	movs	r0, #0
 8004270:	e010      	b.n	8004294 <_printf_common+0xac>
 8004272:	3701      	adds	r7, #1
 8004274:	68e3      	ldr	r3, [r4, #12]
 8004276:	682a      	ldr	r2, [r5, #0]
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	42bb      	cmp	r3, r7
 800427c:	ddd2      	ble.n	8004224 <_printf_common+0x3c>
 800427e:	0022      	movs	r2, r4
 8004280:	2301      	movs	r3, #1
 8004282:	9901      	ldr	r1, [sp, #4]
 8004284:	9800      	ldr	r0, [sp, #0]
 8004286:	9e08      	ldr	r6, [sp, #32]
 8004288:	3219      	adds	r2, #25
 800428a:	47b0      	blx	r6
 800428c:	1c43      	adds	r3, r0, #1
 800428e:	d1f0      	bne.n	8004272 <_printf_common+0x8a>
 8004290:	2001      	movs	r0, #1
 8004292:	4240      	negs	r0, r0
 8004294:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004296:	2030      	movs	r0, #48	; 0x30
 8004298:	18e1      	adds	r1, r4, r3
 800429a:	3143      	adds	r1, #67	; 0x43
 800429c:	7008      	strb	r0, [r1, #0]
 800429e:	0021      	movs	r1, r4
 80042a0:	1c5a      	adds	r2, r3, #1
 80042a2:	3145      	adds	r1, #69	; 0x45
 80042a4:	7809      	ldrb	r1, [r1, #0]
 80042a6:	18a2      	adds	r2, r4, r2
 80042a8:	3243      	adds	r2, #67	; 0x43
 80042aa:	3302      	adds	r3, #2
 80042ac:	7011      	strb	r1, [r2, #0]
 80042ae:	e7c1      	b.n	8004234 <_printf_common+0x4c>
 80042b0:	0022      	movs	r2, r4
 80042b2:	2301      	movs	r3, #1
 80042b4:	9901      	ldr	r1, [sp, #4]
 80042b6:	9800      	ldr	r0, [sp, #0]
 80042b8:	9e08      	ldr	r6, [sp, #32]
 80042ba:	321a      	adds	r2, #26
 80042bc:	47b0      	blx	r6
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d0e6      	beq.n	8004290 <_printf_common+0xa8>
 80042c2:	3701      	adds	r7, #1
 80042c4:	e7d1      	b.n	800426a <_printf_common+0x82>
	...

080042c8 <_printf_i>:
 80042c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ca:	b08b      	sub	sp, #44	; 0x2c
 80042cc:	9206      	str	r2, [sp, #24]
 80042ce:	000a      	movs	r2, r1
 80042d0:	3243      	adds	r2, #67	; 0x43
 80042d2:	9307      	str	r3, [sp, #28]
 80042d4:	9005      	str	r0, [sp, #20]
 80042d6:	9204      	str	r2, [sp, #16]
 80042d8:	7e0a      	ldrb	r2, [r1, #24]
 80042da:	000c      	movs	r4, r1
 80042dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80042de:	2a78      	cmp	r2, #120	; 0x78
 80042e0:	d807      	bhi.n	80042f2 <_printf_i+0x2a>
 80042e2:	2a62      	cmp	r2, #98	; 0x62
 80042e4:	d809      	bhi.n	80042fa <_printf_i+0x32>
 80042e6:	2a00      	cmp	r2, #0
 80042e8:	d100      	bne.n	80042ec <_printf_i+0x24>
 80042ea:	e0c1      	b.n	8004470 <_printf_i+0x1a8>
 80042ec:	2a58      	cmp	r2, #88	; 0x58
 80042ee:	d100      	bne.n	80042f2 <_printf_i+0x2a>
 80042f0:	e08c      	b.n	800440c <_printf_i+0x144>
 80042f2:	0026      	movs	r6, r4
 80042f4:	3642      	adds	r6, #66	; 0x42
 80042f6:	7032      	strb	r2, [r6, #0]
 80042f8:	e022      	b.n	8004340 <_printf_i+0x78>
 80042fa:	0010      	movs	r0, r2
 80042fc:	3863      	subs	r0, #99	; 0x63
 80042fe:	2815      	cmp	r0, #21
 8004300:	d8f7      	bhi.n	80042f2 <_printf_i+0x2a>
 8004302:	f7fb ff01 	bl	8000108 <__gnu_thumb1_case_shi>
 8004306:	0016      	.short	0x0016
 8004308:	fff6001f 	.word	0xfff6001f
 800430c:	fff6fff6 	.word	0xfff6fff6
 8004310:	001ffff6 	.word	0x001ffff6
 8004314:	fff6fff6 	.word	0xfff6fff6
 8004318:	fff6fff6 	.word	0xfff6fff6
 800431c:	003600a8 	.word	0x003600a8
 8004320:	fff6009a 	.word	0xfff6009a
 8004324:	00b9fff6 	.word	0x00b9fff6
 8004328:	0036fff6 	.word	0x0036fff6
 800432c:	fff6fff6 	.word	0xfff6fff6
 8004330:	009e      	.short	0x009e
 8004332:	0026      	movs	r6, r4
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	3642      	adds	r6, #66	; 0x42
 8004338:	1d11      	adds	r1, r2, #4
 800433a:	6019      	str	r1, [r3, #0]
 800433c:	6813      	ldr	r3, [r2, #0]
 800433e:	7033      	strb	r3, [r6, #0]
 8004340:	2301      	movs	r3, #1
 8004342:	e0a7      	b.n	8004494 <_printf_i+0x1cc>
 8004344:	6808      	ldr	r0, [r1, #0]
 8004346:	6819      	ldr	r1, [r3, #0]
 8004348:	1d0a      	adds	r2, r1, #4
 800434a:	0605      	lsls	r5, r0, #24
 800434c:	d50b      	bpl.n	8004366 <_printf_i+0x9e>
 800434e:	680d      	ldr	r5, [r1, #0]
 8004350:	601a      	str	r2, [r3, #0]
 8004352:	2d00      	cmp	r5, #0
 8004354:	da03      	bge.n	800435e <_printf_i+0x96>
 8004356:	232d      	movs	r3, #45	; 0x2d
 8004358:	9a04      	ldr	r2, [sp, #16]
 800435a:	426d      	negs	r5, r5
 800435c:	7013      	strb	r3, [r2, #0]
 800435e:	4b61      	ldr	r3, [pc, #388]	; (80044e4 <_printf_i+0x21c>)
 8004360:	270a      	movs	r7, #10
 8004362:	9303      	str	r3, [sp, #12]
 8004364:	e01b      	b.n	800439e <_printf_i+0xd6>
 8004366:	680d      	ldr	r5, [r1, #0]
 8004368:	601a      	str	r2, [r3, #0]
 800436a:	0641      	lsls	r1, r0, #25
 800436c:	d5f1      	bpl.n	8004352 <_printf_i+0x8a>
 800436e:	b22d      	sxth	r5, r5
 8004370:	e7ef      	b.n	8004352 <_printf_i+0x8a>
 8004372:	680d      	ldr	r5, [r1, #0]
 8004374:	6819      	ldr	r1, [r3, #0]
 8004376:	1d08      	adds	r0, r1, #4
 8004378:	6018      	str	r0, [r3, #0]
 800437a:	062e      	lsls	r6, r5, #24
 800437c:	d501      	bpl.n	8004382 <_printf_i+0xba>
 800437e:	680d      	ldr	r5, [r1, #0]
 8004380:	e003      	b.n	800438a <_printf_i+0xc2>
 8004382:	066d      	lsls	r5, r5, #25
 8004384:	d5fb      	bpl.n	800437e <_printf_i+0xb6>
 8004386:	680d      	ldr	r5, [r1, #0]
 8004388:	b2ad      	uxth	r5, r5
 800438a:	4b56      	ldr	r3, [pc, #344]	; (80044e4 <_printf_i+0x21c>)
 800438c:	2708      	movs	r7, #8
 800438e:	9303      	str	r3, [sp, #12]
 8004390:	2a6f      	cmp	r2, #111	; 0x6f
 8004392:	d000      	beq.n	8004396 <_printf_i+0xce>
 8004394:	3702      	adds	r7, #2
 8004396:	0023      	movs	r3, r4
 8004398:	2200      	movs	r2, #0
 800439a:	3343      	adds	r3, #67	; 0x43
 800439c:	701a      	strb	r2, [r3, #0]
 800439e:	6863      	ldr	r3, [r4, #4]
 80043a0:	60a3      	str	r3, [r4, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	db03      	blt.n	80043ae <_printf_i+0xe6>
 80043a6:	2204      	movs	r2, #4
 80043a8:	6821      	ldr	r1, [r4, #0]
 80043aa:	4391      	bics	r1, r2
 80043ac:	6021      	str	r1, [r4, #0]
 80043ae:	2d00      	cmp	r5, #0
 80043b0:	d102      	bne.n	80043b8 <_printf_i+0xf0>
 80043b2:	9e04      	ldr	r6, [sp, #16]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d00c      	beq.n	80043d2 <_printf_i+0x10a>
 80043b8:	9e04      	ldr	r6, [sp, #16]
 80043ba:	0028      	movs	r0, r5
 80043bc:	0039      	movs	r1, r7
 80043be:	f7fb ff33 	bl	8000228 <__aeabi_uidivmod>
 80043c2:	9b03      	ldr	r3, [sp, #12]
 80043c4:	3e01      	subs	r6, #1
 80043c6:	5c5b      	ldrb	r3, [r3, r1]
 80043c8:	7033      	strb	r3, [r6, #0]
 80043ca:	002b      	movs	r3, r5
 80043cc:	0005      	movs	r5, r0
 80043ce:	429f      	cmp	r7, r3
 80043d0:	d9f3      	bls.n	80043ba <_printf_i+0xf2>
 80043d2:	2f08      	cmp	r7, #8
 80043d4:	d109      	bne.n	80043ea <_printf_i+0x122>
 80043d6:	6823      	ldr	r3, [r4, #0]
 80043d8:	07db      	lsls	r3, r3, #31
 80043da:	d506      	bpl.n	80043ea <_printf_i+0x122>
 80043dc:	6863      	ldr	r3, [r4, #4]
 80043de:	6922      	ldr	r2, [r4, #16]
 80043e0:	4293      	cmp	r3, r2
 80043e2:	dc02      	bgt.n	80043ea <_printf_i+0x122>
 80043e4:	2330      	movs	r3, #48	; 0x30
 80043e6:	3e01      	subs	r6, #1
 80043e8:	7033      	strb	r3, [r6, #0]
 80043ea:	9b04      	ldr	r3, [sp, #16]
 80043ec:	1b9b      	subs	r3, r3, r6
 80043ee:	6123      	str	r3, [r4, #16]
 80043f0:	9b07      	ldr	r3, [sp, #28]
 80043f2:	0021      	movs	r1, r4
 80043f4:	9300      	str	r3, [sp, #0]
 80043f6:	9805      	ldr	r0, [sp, #20]
 80043f8:	9b06      	ldr	r3, [sp, #24]
 80043fa:	aa09      	add	r2, sp, #36	; 0x24
 80043fc:	f7ff fef4 	bl	80041e8 <_printf_common>
 8004400:	1c43      	adds	r3, r0, #1
 8004402:	d14c      	bne.n	800449e <_printf_i+0x1d6>
 8004404:	2001      	movs	r0, #1
 8004406:	4240      	negs	r0, r0
 8004408:	b00b      	add	sp, #44	; 0x2c
 800440a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800440c:	3145      	adds	r1, #69	; 0x45
 800440e:	700a      	strb	r2, [r1, #0]
 8004410:	4a34      	ldr	r2, [pc, #208]	; (80044e4 <_printf_i+0x21c>)
 8004412:	9203      	str	r2, [sp, #12]
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	6821      	ldr	r1, [r4, #0]
 8004418:	ca20      	ldmia	r2!, {r5}
 800441a:	601a      	str	r2, [r3, #0]
 800441c:	0608      	lsls	r0, r1, #24
 800441e:	d516      	bpl.n	800444e <_printf_i+0x186>
 8004420:	07cb      	lsls	r3, r1, #31
 8004422:	d502      	bpl.n	800442a <_printf_i+0x162>
 8004424:	2320      	movs	r3, #32
 8004426:	4319      	orrs	r1, r3
 8004428:	6021      	str	r1, [r4, #0]
 800442a:	2710      	movs	r7, #16
 800442c:	2d00      	cmp	r5, #0
 800442e:	d1b2      	bne.n	8004396 <_printf_i+0xce>
 8004430:	2320      	movs	r3, #32
 8004432:	6822      	ldr	r2, [r4, #0]
 8004434:	439a      	bics	r2, r3
 8004436:	6022      	str	r2, [r4, #0]
 8004438:	e7ad      	b.n	8004396 <_printf_i+0xce>
 800443a:	2220      	movs	r2, #32
 800443c:	6809      	ldr	r1, [r1, #0]
 800443e:	430a      	orrs	r2, r1
 8004440:	6022      	str	r2, [r4, #0]
 8004442:	0022      	movs	r2, r4
 8004444:	2178      	movs	r1, #120	; 0x78
 8004446:	3245      	adds	r2, #69	; 0x45
 8004448:	7011      	strb	r1, [r2, #0]
 800444a:	4a27      	ldr	r2, [pc, #156]	; (80044e8 <_printf_i+0x220>)
 800444c:	e7e1      	b.n	8004412 <_printf_i+0x14a>
 800444e:	0648      	lsls	r0, r1, #25
 8004450:	d5e6      	bpl.n	8004420 <_printf_i+0x158>
 8004452:	b2ad      	uxth	r5, r5
 8004454:	e7e4      	b.n	8004420 <_printf_i+0x158>
 8004456:	681a      	ldr	r2, [r3, #0]
 8004458:	680d      	ldr	r5, [r1, #0]
 800445a:	1d10      	adds	r0, r2, #4
 800445c:	6949      	ldr	r1, [r1, #20]
 800445e:	6018      	str	r0, [r3, #0]
 8004460:	6813      	ldr	r3, [r2, #0]
 8004462:	062e      	lsls	r6, r5, #24
 8004464:	d501      	bpl.n	800446a <_printf_i+0x1a2>
 8004466:	6019      	str	r1, [r3, #0]
 8004468:	e002      	b.n	8004470 <_printf_i+0x1a8>
 800446a:	066d      	lsls	r5, r5, #25
 800446c:	d5fb      	bpl.n	8004466 <_printf_i+0x19e>
 800446e:	8019      	strh	r1, [r3, #0]
 8004470:	2300      	movs	r3, #0
 8004472:	9e04      	ldr	r6, [sp, #16]
 8004474:	6123      	str	r3, [r4, #16]
 8004476:	e7bb      	b.n	80043f0 <_printf_i+0x128>
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	1d11      	adds	r1, r2, #4
 800447c:	6019      	str	r1, [r3, #0]
 800447e:	6816      	ldr	r6, [r2, #0]
 8004480:	2100      	movs	r1, #0
 8004482:	0030      	movs	r0, r6
 8004484:	6862      	ldr	r2, [r4, #4]
 8004486:	f000 f831 	bl	80044ec <memchr>
 800448a:	2800      	cmp	r0, #0
 800448c:	d001      	beq.n	8004492 <_printf_i+0x1ca>
 800448e:	1b80      	subs	r0, r0, r6
 8004490:	6060      	str	r0, [r4, #4]
 8004492:	6863      	ldr	r3, [r4, #4]
 8004494:	6123      	str	r3, [r4, #16]
 8004496:	2300      	movs	r3, #0
 8004498:	9a04      	ldr	r2, [sp, #16]
 800449a:	7013      	strb	r3, [r2, #0]
 800449c:	e7a8      	b.n	80043f0 <_printf_i+0x128>
 800449e:	6923      	ldr	r3, [r4, #16]
 80044a0:	0032      	movs	r2, r6
 80044a2:	9906      	ldr	r1, [sp, #24]
 80044a4:	9805      	ldr	r0, [sp, #20]
 80044a6:	9d07      	ldr	r5, [sp, #28]
 80044a8:	47a8      	blx	r5
 80044aa:	1c43      	adds	r3, r0, #1
 80044ac:	d0aa      	beq.n	8004404 <_printf_i+0x13c>
 80044ae:	6823      	ldr	r3, [r4, #0]
 80044b0:	079b      	lsls	r3, r3, #30
 80044b2:	d415      	bmi.n	80044e0 <_printf_i+0x218>
 80044b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80044b6:	68e0      	ldr	r0, [r4, #12]
 80044b8:	4298      	cmp	r0, r3
 80044ba:	daa5      	bge.n	8004408 <_printf_i+0x140>
 80044bc:	0018      	movs	r0, r3
 80044be:	e7a3      	b.n	8004408 <_printf_i+0x140>
 80044c0:	0022      	movs	r2, r4
 80044c2:	2301      	movs	r3, #1
 80044c4:	9906      	ldr	r1, [sp, #24]
 80044c6:	9805      	ldr	r0, [sp, #20]
 80044c8:	9e07      	ldr	r6, [sp, #28]
 80044ca:	3219      	adds	r2, #25
 80044cc:	47b0      	blx	r6
 80044ce:	1c43      	adds	r3, r0, #1
 80044d0:	d098      	beq.n	8004404 <_printf_i+0x13c>
 80044d2:	3501      	adds	r5, #1
 80044d4:	68e3      	ldr	r3, [r4, #12]
 80044d6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80044d8:	1a9b      	subs	r3, r3, r2
 80044da:	42ab      	cmp	r3, r5
 80044dc:	dcf0      	bgt.n	80044c0 <_printf_i+0x1f8>
 80044de:	e7e9      	b.n	80044b4 <_printf_i+0x1ec>
 80044e0:	2500      	movs	r5, #0
 80044e2:	e7f7      	b.n	80044d4 <_printf_i+0x20c>
 80044e4:	08004a31 	.word	0x08004a31
 80044e8:	08004a42 	.word	0x08004a42

080044ec <memchr>:
 80044ec:	b2c9      	uxtb	r1, r1
 80044ee:	1882      	adds	r2, r0, r2
 80044f0:	4290      	cmp	r0, r2
 80044f2:	d101      	bne.n	80044f8 <memchr+0xc>
 80044f4:	2000      	movs	r0, #0
 80044f6:	4770      	bx	lr
 80044f8:	7803      	ldrb	r3, [r0, #0]
 80044fa:	428b      	cmp	r3, r1
 80044fc:	d0fb      	beq.n	80044f6 <memchr+0xa>
 80044fe:	3001      	adds	r0, #1
 8004500:	e7f6      	b.n	80044f0 <memchr+0x4>

08004502 <memcpy>:
 8004502:	2300      	movs	r3, #0
 8004504:	b510      	push	{r4, lr}
 8004506:	429a      	cmp	r2, r3
 8004508:	d100      	bne.n	800450c <memcpy+0xa>
 800450a:	bd10      	pop	{r4, pc}
 800450c:	5ccc      	ldrb	r4, [r1, r3]
 800450e:	54c4      	strb	r4, [r0, r3]
 8004510:	3301      	adds	r3, #1
 8004512:	e7f8      	b.n	8004506 <memcpy+0x4>

08004514 <memmove>:
 8004514:	b510      	push	{r4, lr}
 8004516:	4288      	cmp	r0, r1
 8004518:	d902      	bls.n	8004520 <memmove+0xc>
 800451a:	188b      	adds	r3, r1, r2
 800451c:	4298      	cmp	r0, r3
 800451e:	d303      	bcc.n	8004528 <memmove+0x14>
 8004520:	2300      	movs	r3, #0
 8004522:	e007      	b.n	8004534 <memmove+0x20>
 8004524:	5c8b      	ldrb	r3, [r1, r2]
 8004526:	5483      	strb	r3, [r0, r2]
 8004528:	3a01      	subs	r2, #1
 800452a:	d2fb      	bcs.n	8004524 <memmove+0x10>
 800452c:	bd10      	pop	{r4, pc}
 800452e:	5ccc      	ldrb	r4, [r1, r3]
 8004530:	54c4      	strb	r4, [r0, r3]
 8004532:	3301      	adds	r3, #1
 8004534:	429a      	cmp	r2, r3
 8004536:	d1fa      	bne.n	800452e <memmove+0x1a>
 8004538:	e7f8      	b.n	800452c <memmove+0x18>
	...

0800453c <_free_r>:
 800453c:	b570      	push	{r4, r5, r6, lr}
 800453e:	0005      	movs	r5, r0
 8004540:	2900      	cmp	r1, #0
 8004542:	d010      	beq.n	8004566 <_free_r+0x2a>
 8004544:	1f0c      	subs	r4, r1, #4
 8004546:	6823      	ldr	r3, [r4, #0]
 8004548:	2b00      	cmp	r3, #0
 800454a:	da00      	bge.n	800454e <_free_r+0x12>
 800454c:	18e4      	adds	r4, r4, r3
 800454e:	0028      	movs	r0, r5
 8004550:	f000 f918 	bl	8004784 <__malloc_lock>
 8004554:	4a1d      	ldr	r2, [pc, #116]	; (80045cc <_free_r+0x90>)
 8004556:	6813      	ldr	r3, [r2, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d105      	bne.n	8004568 <_free_r+0x2c>
 800455c:	6063      	str	r3, [r4, #4]
 800455e:	6014      	str	r4, [r2, #0]
 8004560:	0028      	movs	r0, r5
 8004562:	f000 f917 	bl	8004794 <__malloc_unlock>
 8004566:	bd70      	pop	{r4, r5, r6, pc}
 8004568:	42a3      	cmp	r3, r4
 800456a:	d908      	bls.n	800457e <_free_r+0x42>
 800456c:	6821      	ldr	r1, [r4, #0]
 800456e:	1860      	adds	r0, r4, r1
 8004570:	4283      	cmp	r3, r0
 8004572:	d1f3      	bne.n	800455c <_free_r+0x20>
 8004574:	6818      	ldr	r0, [r3, #0]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	1841      	adds	r1, r0, r1
 800457a:	6021      	str	r1, [r4, #0]
 800457c:	e7ee      	b.n	800455c <_free_r+0x20>
 800457e:	001a      	movs	r2, r3
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <_free_r+0x4e>
 8004586:	42a3      	cmp	r3, r4
 8004588:	d9f9      	bls.n	800457e <_free_r+0x42>
 800458a:	6811      	ldr	r1, [r2, #0]
 800458c:	1850      	adds	r0, r2, r1
 800458e:	42a0      	cmp	r0, r4
 8004590:	d10b      	bne.n	80045aa <_free_r+0x6e>
 8004592:	6820      	ldr	r0, [r4, #0]
 8004594:	1809      	adds	r1, r1, r0
 8004596:	1850      	adds	r0, r2, r1
 8004598:	6011      	str	r1, [r2, #0]
 800459a:	4283      	cmp	r3, r0
 800459c:	d1e0      	bne.n	8004560 <_free_r+0x24>
 800459e:	6818      	ldr	r0, [r3, #0]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	1841      	adds	r1, r0, r1
 80045a4:	6011      	str	r1, [r2, #0]
 80045a6:	6053      	str	r3, [r2, #4]
 80045a8:	e7da      	b.n	8004560 <_free_r+0x24>
 80045aa:	42a0      	cmp	r0, r4
 80045ac:	d902      	bls.n	80045b4 <_free_r+0x78>
 80045ae:	230c      	movs	r3, #12
 80045b0:	602b      	str	r3, [r5, #0]
 80045b2:	e7d5      	b.n	8004560 <_free_r+0x24>
 80045b4:	6821      	ldr	r1, [r4, #0]
 80045b6:	1860      	adds	r0, r4, r1
 80045b8:	4283      	cmp	r3, r0
 80045ba:	d103      	bne.n	80045c4 <_free_r+0x88>
 80045bc:	6818      	ldr	r0, [r3, #0]
 80045be:	685b      	ldr	r3, [r3, #4]
 80045c0:	1841      	adds	r1, r0, r1
 80045c2:	6021      	str	r1, [r4, #0]
 80045c4:	6063      	str	r3, [r4, #4]
 80045c6:	6054      	str	r4, [r2, #4]
 80045c8:	e7ca      	b.n	8004560 <_free_r+0x24>
 80045ca:	46c0      	nop			; (mov r8, r8)
 80045cc:	200001d0 	.word	0x200001d0

080045d0 <sbrk_aligned>:
 80045d0:	b570      	push	{r4, r5, r6, lr}
 80045d2:	4e0f      	ldr	r6, [pc, #60]	; (8004610 <sbrk_aligned+0x40>)
 80045d4:	000d      	movs	r5, r1
 80045d6:	6831      	ldr	r1, [r6, #0]
 80045d8:	0004      	movs	r4, r0
 80045da:	2900      	cmp	r1, #0
 80045dc:	d102      	bne.n	80045e4 <sbrk_aligned+0x14>
 80045de:	f000 f8bf 	bl	8004760 <_sbrk_r>
 80045e2:	6030      	str	r0, [r6, #0]
 80045e4:	0029      	movs	r1, r5
 80045e6:	0020      	movs	r0, r4
 80045e8:	f000 f8ba 	bl	8004760 <_sbrk_r>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d00a      	beq.n	8004606 <sbrk_aligned+0x36>
 80045f0:	2303      	movs	r3, #3
 80045f2:	1cc5      	adds	r5, r0, #3
 80045f4:	439d      	bics	r5, r3
 80045f6:	42a8      	cmp	r0, r5
 80045f8:	d007      	beq.n	800460a <sbrk_aligned+0x3a>
 80045fa:	1a29      	subs	r1, r5, r0
 80045fc:	0020      	movs	r0, r4
 80045fe:	f000 f8af 	bl	8004760 <_sbrk_r>
 8004602:	1c43      	adds	r3, r0, #1
 8004604:	d101      	bne.n	800460a <sbrk_aligned+0x3a>
 8004606:	2501      	movs	r5, #1
 8004608:	426d      	negs	r5, r5
 800460a:	0028      	movs	r0, r5
 800460c:	bd70      	pop	{r4, r5, r6, pc}
 800460e:	46c0      	nop			; (mov r8, r8)
 8004610:	200001d4 	.word	0x200001d4

08004614 <_malloc_r>:
 8004614:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004616:	2203      	movs	r2, #3
 8004618:	1ccb      	adds	r3, r1, #3
 800461a:	4393      	bics	r3, r2
 800461c:	3308      	adds	r3, #8
 800461e:	0006      	movs	r6, r0
 8004620:	001f      	movs	r7, r3
 8004622:	2b0c      	cmp	r3, #12
 8004624:	d232      	bcs.n	800468c <_malloc_r+0x78>
 8004626:	270c      	movs	r7, #12
 8004628:	42b9      	cmp	r1, r7
 800462a:	d831      	bhi.n	8004690 <_malloc_r+0x7c>
 800462c:	0030      	movs	r0, r6
 800462e:	f000 f8a9 	bl	8004784 <__malloc_lock>
 8004632:	4d32      	ldr	r5, [pc, #200]	; (80046fc <_malloc_r+0xe8>)
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	001c      	movs	r4, r3
 8004638:	2c00      	cmp	r4, #0
 800463a:	d12e      	bne.n	800469a <_malloc_r+0x86>
 800463c:	0039      	movs	r1, r7
 800463e:	0030      	movs	r0, r6
 8004640:	f7ff ffc6 	bl	80045d0 <sbrk_aligned>
 8004644:	0004      	movs	r4, r0
 8004646:	1c43      	adds	r3, r0, #1
 8004648:	d11e      	bne.n	8004688 <_malloc_r+0x74>
 800464a:	682c      	ldr	r4, [r5, #0]
 800464c:	0025      	movs	r5, r4
 800464e:	2d00      	cmp	r5, #0
 8004650:	d14a      	bne.n	80046e8 <_malloc_r+0xd4>
 8004652:	6823      	ldr	r3, [r4, #0]
 8004654:	0029      	movs	r1, r5
 8004656:	18e3      	adds	r3, r4, r3
 8004658:	0030      	movs	r0, r6
 800465a:	9301      	str	r3, [sp, #4]
 800465c:	f000 f880 	bl	8004760 <_sbrk_r>
 8004660:	9b01      	ldr	r3, [sp, #4]
 8004662:	4283      	cmp	r3, r0
 8004664:	d143      	bne.n	80046ee <_malloc_r+0xda>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	3703      	adds	r7, #3
 800466a:	1aff      	subs	r7, r7, r3
 800466c:	2303      	movs	r3, #3
 800466e:	439f      	bics	r7, r3
 8004670:	3708      	adds	r7, #8
 8004672:	2f0c      	cmp	r7, #12
 8004674:	d200      	bcs.n	8004678 <_malloc_r+0x64>
 8004676:	270c      	movs	r7, #12
 8004678:	0039      	movs	r1, r7
 800467a:	0030      	movs	r0, r6
 800467c:	f7ff ffa8 	bl	80045d0 <sbrk_aligned>
 8004680:	1c43      	adds	r3, r0, #1
 8004682:	d034      	beq.n	80046ee <_malloc_r+0xda>
 8004684:	6823      	ldr	r3, [r4, #0]
 8004686:	19df      	adds	r7, r3, r7
 8004688:	6027      	str	r7, [r4, #0]
 800468a:	e013      	b.n	80046b4 <_malloc_r+0xa0>
 800468c:	2b00      	cmp	r3, #0
 800468e:	dacb      	bge.n	8004628 <_malloc_r+0x14>
 8004690:	230c      	movs	r3, #12
 8004692:	2500      	movs	r5, #0
 8004694:	6033      	str	r3, [r6, #0]
 8004696:	0028      	movs	r0, r5
 8004698:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800469a:	6822      	ldr	r2, [r4, #0]
 800469c:	1bd1      	subs	r1, r2, r7
 800469e:	d420      	bmi.n	80046e2 <_malloc_r+0xce>
 80046a0:	290b      	cmp	r1, #11
 80046a2:	d917      	bls.n	80046d4 <_malloc_r+0xc0>
 80046a4:	19e2      	adds	r2, r4, r7
 80046a6:	6027      	str	r7, [r4, #0]
 80046a8:	42a3      	cmp	r3, r4
 80046aa:	d111      	bne.n	80046d0 <_malloc_r+0xbc>
 80046ac:	602a      	str	r2, [r5, #0]
 80046ae:	6863      	ldr	r3, [r4, #4]
 80046b0:	6011      	str	r1, [r2, #0]
 80046b2:	6053      	str	r3, [r2, #4]
 80046b4:	0030      	movs	r0, r6
 80046b6:	0025      	movs	r5, r4
 80046b8:	f000 f86c 	bl	8004794 <__malloc_unlock>
 80046bc:	2207      	movs	r2, #7
 80046be:	350b      	adds	r5, #11
 80046c0:	1d23      	adds	r3, r4, #4
 80046c2:	4395      	bics	r5, r2
 80046c4:	1aea      	subs	r2, r5, r3
 80046c6:	429d      	cmp	r5, r3
 80046c8:	d0e5      	beq.n	8004696 <_malloc_r+0x82>
 80046ca:	1b5b      	subs	r3, r3, r5
 80046cc:	50a3      	str	r3, [r4, r2]
 80046ce:	e7e2      	b.n	8004696 <_malloc_r+0x82>
 80046d0:	605a      	str	r2, [r3, #4]
 80046d2:	e7ec      	b.n	80046ae <_malloc_r+0x9a>
 80046d4:	6862      	ldr	r2, [r4, #4]
 80046d6:	42a3      	cmp	r3, r4
 80046d8:	d101      	bne.n	80046de <_malloc_r+0xca>
 80046da:	602a      	str	r2, [r5, #0]
 80046dc:	e7ea      	b.n	80046b4 <_malloc_r+0xa0>
 80046de:	605a      	str	r2, [r3, #4]
 80046e0:	e7e8      	b.n	80046b4 <_malloc_r+0xa0>
 80046e2:	0023      	movs	r3, r4
 80046e4:	6864      	ldr	r4, [r4, #4]
 80046e6:	e7a7      	b.n	8004638 <_malloc_r+0x24>
 80046e8:	002c      	movs	r4, r5
 80046ea:	686d      	ldr	r5, [r5, #4]
 80046ec:	e7af      	b.n	800464e <_malloc_r+0x3a>
 80046ee:	230c      	movs	r3, #12
 80046f0:	0030      	movs	r0, r6
 80046f2:	6033      	str	r3, [r6, #0]
 80046f4:	f000 f84e 	bl	8004794 <__malloc_unlock>
 80046f8:	e7cd      	b.n	8004696 <_malloc_r+0x82>
 80046fa:	46c0      	nop			; (mov r8, r8)
 80046fc:	200001d0 	.word	0x200001d0

08004700 <_realloc_r>:
 8004700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004702:	0007      	movs	r7, r0
 8004704:	000e      	movs	r6, r1
 8004706:	0014      	movs	r4, r2
 8004708:	2900      	cmp	r1, #0
 800470a:	d105      	bne.n	8004718 <_realloc_r+0x18>
 800470c:	0011      	movs	r1, r2
 800470e:	f7ff ff81 	bl	8004614 <_malloc_r>
 8004712:	0005      	movs	r5, r0
 8004714:	0028      	movs	r0, r5
 8004716:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8004718:	2a00      	cmp	r2, #0
 800471a:	d103      	bne.n	8004724 <_realloc_r+0x24>
 800471c:	f7ff ff0e 	bl	800453c <_free_r>
 8004720:	0025      	movs	r5, r4
 8004722:	e7f7      	b.n	8004714 <_realloc_r+0x14>
 8004724:	f000 f83e 	bl	80047a4 <_malloc_usable_size_r>
 8004728:	9001      	str	r0, [sp, #4]
 800472a:	4284      	cmp	r4, r0
 800472c:	d803      	bhi.n	8004736 <_realloc_r+0x36>
 800472e:	0035      	movs	r5, r6
 8004730:	0843      	lsrs	r3, r0, #1
 8004732:	42a3      	cmp	r3, r4
 8004734:	d3ee      	bcc.n	8004714 <_realloc_r+0x14>
 8004736:	0021      	movs	r1, r4
 8004738:	0038      	movs	r0, r7
 800473a:	f7ff ff6b 	bl	8004614 <_malloc_r>
 800473e:	1e05      	subs	r5, r0, #0
 8004740:	d0e8      	beq.n	8004714 <_realloc_r+0x14>
 8004742:	9b01      	ldr	r3, [sp, #4]
 8004744:	0022      	movs	r2, r4
 8004746:	429c      	cmp	r4, r3
 8004748:	d900      	bls.n	800474c <_realloc_r+0x4c>
 800474a:	001a      	movs	r2, r3
 800474c:	0031      	movs	r1, r6
 800474e:	0028      	movs	r0, r5
 8004750:	f7ff fed7 	bl	8004502 <memcpy>
 8004754:	0031      	movs	r1, r6
 8004756:	0038      	movs	r0, r7
 8004758:	f7ff fef0 	bl	800453c <_free_r>
 800475c:	e7da      	b.n	8004714 <_realloc_r+0x14>
	...

08004760 <_sbrk_r>:
 8004760:	2300      	movs	r3, #0
 8004762:	b570      	push	{r4, r5, r6, lr}
 8004764:	4d06      	ldr	r5, [pc, #24]	; (8004780 <_sbrk_r+0x20>)
 8004766:	0004      	movs	r4, r0
 8004768:	0008      	movs	r0, r1
 800476a:	602b      	str	r3, [r5, #0]
 800476c:	f7fc fd7c 	bl	8001268 <_sbrk>
 8004770:	1c43      	adds	r3, r0, #1
 8004772:	d103      	bne.n	800477c <_sbrk_r+0x1c>
 8004774:	682b      	ldr	r3, [r5, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d000      	beq.n	800477c <_sbrk_r+0x1c>
 800477a:	6023      	str	r3, [r4, #0]
 800477c:	bd70      	pop	{r4, r5, r6, pc}
 800477e:	46c0      	nop			; (mov r8, r8)
 8004780:	200001d8 	.word	0x200001d8

08004784 <__malloc_lock>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4802      	ldr	r0, [pc, #8]	; (8004790 <__malloc_lock+0xc>)
 8004788:	f000 f814 	bl	80047b4 <__retarget_lock_acquire_recursive>
 800478c:	bd10      	pop	{r4, pc}
 800478e:	46c0      	nop			; (mov r8, r8)
 8004790:	200001dc 	.word	0x200001dc

08004794 <__malloc_unlock>:
 8004794:	b510      	push	{r4, lr}
 8004796:	4802      	ldr	r0, [pc, #8]	; (80047a0 <__malloc_unlock+0xc>)
 8004798:	f000 f80d 	bl	80047b6 <__retarget_lock_release_recursive>
 800479c:	bd10      	pop	{r4, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	200001dc 	.word	0x200001dc

080047a4 <_malloc_usable_size_r>:
 80047a4:	1f0b      	subs	r3, r1, #4
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	1f18      	subs	r0, r3, #4
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	da01      	bge.n	80047b2 <_malloc_usable_size_r+0xe>
 80047ae:	580b      	ldr	r3, [r1, r0]
 80047b0:	18c0      	adds	r0, r0, r3
 80047b2:	4770      	bx	lr

080047b4 <__retarget_lock_acquire_recursive>:
 80047b4:	4770      	bx	lr

080047b6 <__retarget_lock_release_recursive>:
 80047b6:	4770      	bx	lr

080047b8 <_init>:
 80047b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ba:	46c0      	nop			; (mov r8, r8)
 80047bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047be:	bc08      	pop	{r3}
 80047c0:	469e      	mov	lr, r3
 80047c2:	4770      	bx	lr

080047c4 <_fini>:
 80047c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c6:	46c0      	nop			; (mov r8, r8)
 80047c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047ca:	bc08      	pop	{r3}
 80047cc:	469e      	mov	lr, r3
 80047ce:	4770      	bx	lr
